{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\u200b\\-]"},"docs":[{"location":"","text":"\u7b80\u4ecb   \u8be5 \u9759\u6001 \u7f51\u7ad9 \u4e3b\u8981 \u7528\u4e8e \u5b58\u653e \u4e2a\u4eba \u7b14\u8bb0 \uff0c \u4e0e   github   \u7ed3\u5408 \u4f7f\u7528 \uff0c \u4fbf\u4e8e \u67e5\u770b \u7b14\u8bb0 \u5185\u5bb9   \u76ee\u524d \u7684 \u7b14\u8bb0 \u4e3b\u8981 \u4ee5   \u300c \u6570\u636e \u7ed3\u6784 \u6570\u636e\u7ed3\u6784 \u3001 \u7b97\u6cd5 \u8bbe\u8ba1 \u300d   \u4e3a\u4e3b   \u9898\u76ee \u7684 \u4e3b\u8981 \u6765\u6e90 \uff1a   \u6d1b\u8c37   leetcode   codeforces   acwing   oi - wiki   LibreOJ   \u4f5c\u8005 \uff1a \u97f6\u5173 \u5b66\u9662 / \u4fe1\u606f \u5de5\u7a0b \u5b66\u9662 \u5de5\u7a0b\u5b66 \u5de5\u7a0b\u5b66\u9662 / 21   \u7ea7 \u8ba1\u7b97 \u7b97\u673a \u79d1\u5b66 \u8ba1\u7b97\u673a \u8ba1\u7b97\u673a\u79d1\u5b66 \u4e0e \u6280\u672f   2   \u73ed / \u6797\u65e5 \u6e05   \u90ae\u7bb1 \uff1a   1325595056 @ qq . com   my _ sublime   my _ mingw   \u63a8\u8350 \u4f7f\u7528   cp   editor   cp   editor   \u7f16\u8bd1 \u547d\u4ee4 \u914d\u7f6e \uff0c \u4f7f\u7528   c++ 20 \uff1a   c++   \u7f16\u8bd1 \u547d\u4ee4 \uff1a   c++   - Wall   - std = c++ 20   - O2   \u6267\u884c \u884c\u6587 \u6587\u4ef6 \u53ef\u6267\u884c\u6587\u4ef6 \u8def\u5f84 \uff1a   $ { tmpdir } / $ { basename }   cp   editor   \u4ee3\u7801 \u7247\u6bb5 \u914d\u7f6e \uff1a   # include   < iostream >   # include   < iomanip >   # include   < algorithm >   # include   < cstdio >   # include   < cstdlib >   # include   < cstring >   # include   < string >   # include   < vector >   # include   < queue >   # include   < deque >   # include   < stack >   # include   < map >   # include   < set >   # include   < unordered _ map >   # include   < unordered _ set >   using   namespace   std   ;   # define   endl   ' \\ n '   # define   pique   priority _ queue   # define   oier   \\   ios _ base : : sync _ with _ stdio ( false ) ; \\   cin . tie ( nullptr ) ;   cout . tie ( nullptr ) ;   # define   cf   int   t ;   cin   > >   t ;   while   ( t   -- )   # define   upfor ( i ,   l ,   r )   for   ( i   =   ( l ) ;   i   < =   ( r ) ;   i   ++ )   # define   downfor ( i ,   l ,   r )   for   ( i   =   ( r ) ;   i   > =   ( l ) ;   i   -- )   / /   # define   int   long   long   typedef   long   long   LL   ;   typedef   long   double   LD   ;   / / typedef   __ int128 _ t   int128 ;   const   int   inf   =   ~   (   1   < <   31   ) ;   / /   \u6b63 \u65e0\u7a77   const   int   ninf   =   (   1   < <   31   ) ;   / /   \u8d1f \u65e0\u7a77   const   LL   infll   =   ~   (   1l   l   < <   63   ) ;   / /   \u6b63 \u65e0\u7a77   const   LL   ninfll   =   (   1l   l   < <   63   ) ;   / /   \u8d1f \u65e0\u7a77   inline   LL   rll   ( )   {   oier   LL   x   ;   cin   > >   x   ;   return   x   ;   }   inline   int   rint   ( )   {   oier   int   x   ;   cin   > >   x   ;   return   x   ;   }   const   int   N   =   int   (   1e7   +   10   ) ;   / /   \u7531\u4e8e \u60c5\u62a5 \u4e0d\u8db3 \uff0c \u53ea\u80fd \u900f\u8fc7 \u300c \u8bd5\u884c \u9519\u8bef \u300d \u6765 \u83b7\u53d6 \u3002   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   void   solve   ( )   {   oier   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   }   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   / * *   *   _ ooOoo _   *   o8888888o   *   88 \"   .   \" 88   *   ( |   -_-   | )   *   O \\   =   / O   *   ____ / ` --- ' \\ ____   *   . '   \\ \\ |   | / /   ` .   *   /   \\ \\ | | |   :   | | | / /   \\   *   /   _ | | | | |   - : -   | | | | | -   \\   *   |   |   \\ \\ \\   -   / / /   |   |   *   |   \\ _ |   ' ' \\ --- / ' '   |   |   *   \\   .- \\ __   ` - `   ___ / -.   /   *   ___ ` .   . '   / --.-- \\   ` .   .   __   *   . \" \"   ' <   ` .___ \\ _ < | > _ / ___. '   > ' \" \" .   *   |   |   :   ` -   \\ ` . ; ` \\   _   / ` ; . ` /   -   `   :   |   |   *   \\   \\   ` -.   \\ _   __ \\   / __   _ /   .- `   /   /   *   = = = = = = ` -.____ ` -.___ \\ _____ / ___.- ` ____.- ' = = = = = =   *   ` = --- = '   *   ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^   *   \u4f5b\u7956 \u4fdd\u4f51   \u6c38\u65e0 BUG   *   \u4f5b \u66f0 :   *   \u5199\u5b57 \u5199\u5b57\u697c \u91cc \u5199\u5b57 \u5199\u5b57\u95f4 \uff0c \u5199\u5b57 \u5199\u5b57\u95f4 \u91cc \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1b   *   \u7a0b\u5e8f \u4eba\u5458 \u5199 \u7a0b\u5e8f \uff0c \u53c8 \u62ff \u7a0b\u5e8f \u6362 \u9152\u94b1 \u3002   *   \u9152\u9192 \u53ea \u5728 \u7f51\u4e0a \u5750 \uff0c \u9152\u9189 \u8fd8\u6765 \u7f51\u4e0b \u7f51\u4e0b\u7720 \uff1b   *   \u9152\u9189 \u9152\u9192 \u65e5\u590d \u65e5 \uff0c \u7f51\u4e0a \u4e0a\u7f51 \u7f51\u4e0a\u7f51 \u4e0b\u5e74 \u590d\u5e74 \u3002   *   \u4f46\u613f \u8001\u6b7b \u7535\u8111 \u95f4 \uff0c \u4e0d\u613f \u97a0\u8eac \u8001\u677f \u524d \uff1b   *   \u5954\u9a70 \u5b9d\u9a6c \u8d35\u8005\u8da3 \uff0c \u516c\u4ea4 \u81ea\u884c \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \u3002   *   \u522b\u4eba \u7b11 \u6211 \u5fd2 \u75af\u766b \uff0c \u6211 \u7b11 \u81ea\u5df1 \u547d\u592a\u8d31 \uff1b   *   \u4e0d\u89c1 \u6ee1\u8857 \u6f02\u4eae \u59b9 \uff0c \u54ea\u4e2a \u5f52\u5f97 \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1f   * * /   / *   = = = = = = = = = = = = = = = = = = = = = = = = \u4f5b\u7956 \u4fdd\u4f51 ,   \u6c38\u65e0 bug = = = = = = = = = = = = = = = = = = = = = = = =   * /   int   main   ( )   {   / /   oier   cf   solve ( ) ;   return   0 ;   oier   solve   ( ) ;   return   0   ;   }   mingw   \u914d\u7f6e   \u65e7\u7248   mingw   \u914d\u7f6e :   \u5148 \u4e0b\u8f7d   \u300c   my _ mingw   \u300d   \u89e3\u538b \u538b\u7f29 \u89e3\u538b\u7f29 \u540e \u627e\u5230 \u8def\u5f84 \uff1a   my _ mingw / bin   \u5c06   bin   \u76ee\u5f55 \u6dfb\u52a0 \u8fdb \u73af\u5883 \u53d8\u91cf \u73af\u5883\u53d8 \u73af\u5883\u53d8\u91cf \u91cc \uff0c \u8fd9\u6837 \u6211\u4eec \u5c31 \u53ef\u4ee5 \u5728 \u547d\u4ee4 \u884c\u5185 \u76f4\u63a5 \u8c03\u7528   g ++. exe \u3001 gcc . exe \u3001 gdb . exe   \u5de5\u5177 \u7f16\u8bd1 \u6211\u4eec \u7684 \u4ee3\u7801 \u4e86   \u501f\u52a9   msys2   \u5305 \u7ba1\u7406 \u7406\u5de5 \u5de5\u5177 \u7ba1\u7406\u5de5\u5177   \u53bb \u5b98\u7f51 \u4e0b\u8f7d   msys2   \u6216\u8005 \u5728 \u767e\u5ea6 \u767e\u5ea6\u7f51 \u76d8 \u91cc \uff1a \u94fe\u63a5 \uff1a   \u767e\u5ea6 \u767e\u5ea6\u7f51 \u76d8   \u63d0\u53d6 \u7801 \uff1a 1111   \u6253\u5f00   msys2 . exe   \u6267\u884c \u4e0b\u8ff0 \u547d\u4ee4 \uff1a   pacman   -   Syu   --   disable   -   download   -   timeout   pacman   -   Syu   --   disable   -   download   -   timeout   pacman   -   S   mingw   -   w64   -   x86 _ 64   -   gcc   --   disable   -   download   -   timeout   pacman   -   S   mingw   -   w64   -   x86 _ 64   -   make   --   disable   -   download   -   timeout   pacman   -   S   mingw   -   w64   -   x86 _ 64   -   gdb   --   disable   -   download   -   timeout   pacman   -   Syu   --   disable   -   download   -   timeout   \u8bbe\u7f6e \u73af\u5883 \u53d8\u91cf \u73af\u5883\u53d8 \u73af\u5883\u53d8\u91cf \u4e3a   mingw   \u4e0b \u7684   bin   \u76ee\u5f55   sublime   \u914d\u7f6e   \u5148 \u4e0b\u8f7d   \u300c   my _ sublime   \u300d   \u89e3\u538b \u538b\u7f29 \u89e3\u538b\u7f29 \u540e \u53cc\u51fb   sublime _ text . exe   \u8be5 \u7a0b\u5e8f \u5c31\u662f \u6211\u4eec \u8981 \u4f7f\u7528 \u7684 \u7a0b\u5e8f   \u914d\u7f6e   g ++   \u7f16\u8bd1 \u73af\u5883   \u8ddf\u7740 \u8def\u5f84 \u70b9\u51fb   \uff1a   Tools   - >   Build   System   - >   New   Build   System   ...   \u5c06 \u91cc\u9762 \u7684 \u5185\u5bb9 \u5168 \u5220\u6389 \uff0c \u7c98\u8d34 \u4ee3\u7801 \uff1a   g ++. sublime - build   {   \" cmd \"   :   [   \" g ++ \"   ,   \" $ { file } \"   ,   \" - o \"   ,   \" $ { file _ path } / $ { file _ base _ name } \"   ] ,   \" file _ regex \"   :   \" ^ ( .. [ ^ : ] * ) : ( [ 0 - 9 ] + ) : ? ( [ 0 - 9 ] + ) ? : ?   ( . * ) $ \"   ,   \" working _ dir \"   :   \" $ { file _ path } \"   ,   \" selector \"   :   \" source . c ,   source . c++ \"   ,   \" variants \"   :   [   {   \" name \"   :   \" Run \"   ,   \" cmd \"   :   [   \" cmd \"   ,   \" / c \"   ,   \" g ++ \"   ,   \" $ { file } \"   ,   \" - o \"   ,   \" $ { file _ path } / $ { file _ base _ name } \"   ,   \" && \"   ,   \" cmd \"   ,   \" / c \"   ,   \" $ { file _ path } / $ { file _ base _ name } \"   ]   } ,   {   \" name \"   :   \" RunInCommand \"   ,   \" cmd \"   :   [   \" cmd \"   ,   \" / c \"   ,   \" g ++ \"   ,   \" $ { file } \"   ,   \" - o \"   ,   \" $ { file _ path } / $ { file _ base _ name } \"   ,   \" && \"   ,   \" start \"   ,   \" cmd \"   ,   \" / c \"   ,   \" $ { file _ path } / $ { file _ base _ name }   &   pause \"   ]   }   ]   }   \u7136\u540e \u4fdd\u5b58 \u5230 \u8def\u5f84 \uff1a   my _ sublime / Data / Packages / User   \u4e0b \uff0c \u6587\u4ef6 \u6587\u4ef6\u540d \u4e3a \uff1a   g ++. sublime - build   \u914d\u7f6e \u7528\u6237 \u4ee3\u7801 \u7247\u6bb5   \u70b9\u51fb \u8def\u5f84 \uff1a   Tools   - >   Developer   - >   New   snippet   \u5c06 \u6253\u5f00 \u7684 \u6587\u4ef6 \u5185\u5bb9 \u5168\u90fd \u5220\u6389 \uff0c \u7136\u540e \u7c98\u8d34 \uff1a   code . sublime - snippet   <   snippet   >   <   content   > < !   [   CDATA   [   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   $   {   1   }   void   solve   (   void   )   {   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main   (   void   )   {   ifstream   fi   ;   ofstream   fo   ;   fi   .   open   (   \" . / lrq . in \"   ) ;   fo   .   open   (   \" . / lrq . out \"   ) ;   if   (   fi   .   is _ open   ( )   &&   fo   .   is _ open   ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl   ;   fo   .   close   ( ) ;   fi   .   close   ( ) ;   for   (   long   long   i   =   1   ;   i   < =   4e8   +   2e7   ;   i   ++   ) ;   FILE   *   fin   =   freopen   (   \" . / lrq . in \"   ,   \" r \"   ,   stdin   ) ;   FILE   *   fout   =   freopen   (   \" . / lrq . out \"   ,   \" w \"   ,   stdout   ) ;   solve   ( ) ;   fclose   (   fin   ) ;   fclose   (   fout   ) ;   }   else   solve   ( ) ;   return   0   ;   }   ] ]   > < /   content   >   < ! --   Optional   :   Set   a   tabTrigger   to   define   how   to   trigger   the   snippet   -- >   < ! --   <   tabTrigger   >   hello   < /   tabTrigger   >   -- >   < ! --   Optional   :   Set   a   scope   to   limit   where   the   snippet   will   trigger   -- >   < ! --   <   scope   >   source   .   python   < /   scope   >   -- >   <   tabTrigger   >   code   < /   tabTrigger   >   < /   snippet   >   \u4fdd\u5b58 \u5230 \u76ee\u5f55 \uff1a   my _ sublime / Data / Packages / User   \u4e0b \uff0c \u4f60 \u4e5f \u53ef\u4ee5 \u5728 \u8be5 \u76ee\u5f55 \u4e0b \u521b\u5efa \u4e00\u4e2a \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \uff1a   snippet   \uff0c \u7136\u540e \u70b9\u51fb \u4fdd\u5b58 \u5230 \u8be5 \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u5185 \uff0c \u4fdd\u5b58 \u7684 \u6587\u4ef6 \u6587\u4ef6\u540d \u4e3a \uff1a   code . sublime - snippet   \u7a97\u53e3 \u591a\u7a97\u53e3   view   - >   Groups   - >   New   Group   view   - >   word   wrap   / /   \u6362\u884c   view   - >   SideBar   - >   show   SideBar   /   Hide   SideBar   / /   \u6253\u5f00 \u6216 \u5173\u95ed \u8d44\u6e90 \u7a97\u53e3 \u3002   python   \u4e4b\u7985   > > >   import   this   The   Zen   of   Python ,   by   Tim   Peters   Beautiful   is   better   than   ugly .   Explicit   is   better   than   implicit .   Simple   is   better   than   complex .   Complex   is   better   than   complicated .   Flat   is   better   than   nested .   Sparse   is   better   than   dense .   Readability   counts .   Special   cases   aren ' t   special   enough   to   break   the   rules .   Although   practicality   beats   purity .   Errors   should   never   pass   silently .   Unless   explicitly   silenced .   In   the   face   of   ambiguity ,   refuse   the   temptation   to   guess .   There   should   be   one --   and   preferably   only   one   -- obvious   way   to   do   it .   Although   that   way   may   not   be   obvious   at   first   unless   you ' re   Dutch .   Now   is   better   than   never .   Although   never   is   often   better   than   * right *   now .   If   the   implementation   is   hard   to   explain ,   it ' s   a   bad   idea .   If   the   implementation   is   easy   to   explain ,   it   may   be   a   good   idea .   Namespaces   are   one   honking   great   idea   --   let ' s   do   more   of   those !   Python \u4e4b\u7985   by   Tim   Peters   \u4f18\u7f8e \u80dc \u4e8e \u4e11\u964b \uff08 Python   \u4ee5 \u7f16\u5199 \u4f18\u7f8e \u7684 \u4ee3\u7801 \u4e3a \u76ee\u6807 \uff09   \u660e \u4e86 \u80dc\u4e8e \u6666\u6da9 \uff08 \u4f18\u7f8e \u7684 \u4ee3\u7801 \u5e94\u5f53 \u662f \u660e \u4e86 \u7684 \uff0c \u547d\u540d \u89c4\u8303 \uff0c \u98ce\u683c \u76f8\u4f3c \uff09   \u7b80\u6d01 \u80dc \u4e8e \u590d\u6742 \uff08 \u4f18\u7f8e \u7684 \u4ee3\u7801 \u5e94\u5f53 \u662f \u7b80\u6d01 \u7684 \uff0c \u4e0d\u8981 \u6709 \u590d\u6742 \u7684 \u5185\u90e8 \u5b9e\u73b0 \uff09   \u590d\u6742 \u80dc \u4e8e \u51cc\u4e71 \uff08 \u5982\u679c \u590d\u6742 \u4e0d\u53ef \u907f\u514d \u4e0d\u53ef\u907f\u514d \uff0c \u90a3 \u4ee3\u7801 \u95f4 \u4e5f \u4e0d\u80fd \u6709 \u96be\u61c2 \u7684 \u5173\u7cfb \uff0c \u8981 \u4fdd\u6301 \u63a5\u53e3 \u7b80\u6d01 \uff09   \u6241\u5e73 \u80dc \u4e8e \u5d4c\u5957 \uff08 \u4f18\u7f8e \u7684 \u4ee3\u7801 \u5e94\u5f53 \u662f \u6241\u5e73 \u7684 \uff0c \u4e0d\u80fd \u592a\u591a \u6709\u592a\u591a \u7684 \u5d4c\u5957 \uff09   \u95f4\u9694 \u80dc \u4e8e \u7d27\u51d1 \uff08 \u4f18\u7f8e \u7684 \u4ee3\u7801 \u6709 \u9002\u5f53 \u7684 \u95f4\u9694 \uff0c \u4e0d\u8981 \u5962\u671b \u4e00\u884c \u4ee3\u7801 \u89e3\u51b3 \u95ee\u9898 \u89e3\u51b3\u95ee\u9898 \uff09   \u53ef\u8bfb \u53ef\u8bfb\u6027 \u5f88 \u91cd\u8981 \uff08 \u4f18\u7f8e \u7684 \u4ee3\u7801 \u662f \u53ef\u8bfb \u7684 \uff09   \u5373\u4fbf \u5047\u501f \u7279\u4f8b \u7684 \u5b9e\u7528 \u5b9e\u7528\u6027 \u4e4b\u540d \uff0c \u4e5f \u4e0d\u53ef \u8fdd\u80cc \u8fd9\u4e9b \u89c4\u5219 \uff08 \u8fd9\u4e9b \u89c4\u5219 \u65e0\u4e0a \u81f3\u9ad8\u65e0\u4e0a \uff09   \u4e0d\u8981 \u5305\u5bb9 \u6240\u6709 \u9519\u8bef \uff0c \u9664\u975e \u4f60 \u786e\u5b9a \u9700\u8981 \u8fd9\u6837 \u505a \uff08 \u7cbe\u51c6 \u5730 \u6355\u83b7 \u5f02\u5e38 \uff0c \u4e0d\u5199   except : pass   \u98ce\u683c \u7684 \u4ee3\u7801 \uff09   \u5f53 \u5b58\u5728 \u591a\u79cd \u53ef\u80fd \uff0c \u4e0d\u8981 \u5c1d\u8bd5 \u53bb \u731c\u6d4b   \u800c\u662f \u5c3d\u91cf \u627e \u4e00\u79cd \uff0c \u6700\u597d \u662f \u552f\u4e00 \u4e00\u79cd \u660e\u663e \u7684 \u89e3\u51b3 \u65b9\u6848 \u89e3\u51b3\u65b9\u6848 \uff08 \u5982\u679c \u4e0d \u786e\u5b9a \uff0c \u5c31 \u7528 \u7a77\u4e3e \u7a77\u4e3e\u6cd5 \uff09   \u867d\u7136 \u8fd9 \u5e76 \u4e0d \u5bb9\u6613 \uff0c \u56e0\u4e3a \u4f60 \u4e0d\u662f   Python   \u4e4b \u7236 \uff08 \u8fd9\u91cc \u7684   Dutch   \u662f \u6307   Guido   \uff09   \u505a \u4e5f\u8bb8 \u597d\u8fc7 \u4e0d \u505a \uff0c \u4f46 \u601d\u7d22 \u4e0d\u5047\u601d\u7d22 \u5c31 \u52a8\u624b \u8fd8 \u4e0d\u5982 \u4e0d \u505a \uff08 \u52a8\u624b \u4e4b\u524d \u8981\u7ec6 \u601d\u91cf \uff09   \u5982\u679c \u4f60 \u65e0\u6cd5 \u5411 \u4eba \u63cf\u8ff0 \u4f60 \u7684 \u65b9\u6848 \uff0c \u90a3 \u80af\u5b9a \u4e0d\u662f \u4e00\u4e2a \u597d \u65b9\u6848 \uff1b \u53cd\u4e4b \u4ea6\u7136 \u53cd\u4e4b\u4ea6\u7136 \uff08 \u65b9\u6848 \u6d4b\u8bc4 \u6807\u51c6 \uff09   \u547d\u540d \u7a7a\u95f4 \u662f \u4e00\u79cd \u7edd\u5999 \u7684 \u7406\u5ff5 \uff0c \u6211\u4eec \u5e94\u5f53 \u591a\u52a0 \u5229\u7528 \uff08 \u5021\u5bfc \u4e0e \u53f7\u53ec \uff09   \u4e00\u4e9b \u8d44\u6e90 \u7f51\u7ad9   TDM - GCC   cp   editor   Material   for   MkDocs   csacademy   \u753b\u56fe \u8bba","title":"\u7b80\u4ecb"},{"location":"#_1","text":"\u8be5 \u9759\u6001 \u7f51\u7ad9 \u4e3b\u8981 \u7528\u4e8e \u5b58\u653e \u4e2a\u4eba \u7b14\u8bb0 \uff0c \u4e0e   github   \u7ed3\u5408 \u4f7f\u7528 \uff0c \u4fbf\u4e8e \u67e5\u770b \u7b14\u8bb0 \u5185\u5bb9   \u76ee\u524d \u7684 \u7b14\u8bb0 \u4e3b\u8981 \u4ee5   \u300c \u6570\u636e \u7ed3\u6784 \u6570\u636e\u7ed3\u6784 \u3001 \u7b97\u6cd5 \u8bbe\u8ba1 \u300d   \u4e3a\u4e3b   \u9898\u76ee \u7684 \u4e3b\u8981 \u6765\u6e90 \uff1a   \u6d1b\u8c37   leetcode   codeforces   acwing   oi - wiki   LibreOJ   \u4f5c\u8005 \uff1a \u97f6\u5173 \u5b66\u9662 / \u4fe1\u606f \u5de5\u7a0b \u5b66\u9662 \u5de5\u7a0b\u5b66 \u5de5\u7a0b\u5b66\u9662 / 21   \u7ea7 \u8ba1\u7b97 \u7b97\u673a \u79d1\u5b66 \u8ba1\u7b97\u673a \u8ba1\u7b97\u673a\u79d1\u5b66 \u4e0e \u6280\u672f   2   \u73ed / \u6797\u65e5 \u6e05   \u90ae\u7bb1 \uff1a   1325595056 @ qq . com   my _ sublime   my _ mingw","title":"\u7b80\u4ecb"},{"location":"#cp-editor","text":"cp   editor   \u7f16\u8bd1 \u547d\u4ee4 \u914d\u7f6e \uff0c \u4f7f\u7528   c++ 20 \uff1a   c++   \u7f16\u8bd1 \u547d\u4ee4 \uff1a   c++   - Wall   - std = c++ 20   - O2   \u6267\u884c \u884c\u6587 \u6587\u4ef6 \u53ef\u6267\u884c\u6587\u4ef6 \u8def\u5f84 \uff1a   $ { tmpdir } / $ { basename }   cp   editor   \u4ee3\u7801 \u7247\u6bb5 \u914d\u7f6e \uff1a   # include   < iostream >   # include   < iomanip >   # include   < algorithm >   # include   < cstdio >   # include   < cstdlib >   # include   < cstring >   # include   < string >   # include   < vector >   # include   < queue >   # include   < deque >   # include   < stack >   # include   < map >   # include   < set >   # include   < unordered _ map >   # include   < unordered _ set >   using   namespace   std   ;   # define   endl   ' \\ n '   # define   pique   priority _ queue   # define   oier   \\   ios _ base : : sync _ with _ stdio ( false ) ; \\   cin . tie ( nullptr ) ;   cout . tie ( nullptr ) ;   # define   cf   int   t ;   cin   > >   t ;   while   ( t   -- )   # define   upfor ( i ,   l ,   r )   for   ( i   =   ( l ) ;   i   < =   ( r ) ;   i   ++ )   # define   downfor ( i ,   l ,   r )   for   ( i   =   ( r ) ;   i   > =   ( l ) ;   i   -- )   / /   # define   int   long   long   typedef   long   long   LL   ;   typedef   long   double   LD   ;   / / typedef   __ int128 _ t   int128 ;   const   int   inf   =   ~   (   1   < <   31   ) ;   / /   \u6b63 \u65e0\u7a77   const   int   ninf   =   (   1   < <   31   ) ;   / /   \u8d1f \u65e0\u7a77   const   LL   infll   =   ~   (   1l   l   < <   63   ) ;   / /   \u6b63 \u65e0\u7a77   const   LL   ninfll   =   (   1l   l   < <   63   ) ;   / /   \u8d1f \u65e0\u7a77   inline   LL   rll   ( )   {   oier   LL   x   ;   cin   > >   x   ;   return   x   ;   }   inline   int   rint   ( )   {   oier   int   x   ;   cin   > >   x   ;   return   x   ;   }   const   int   N   =   int   (   1e7   +   10   ) ;   / /   \u7531\u4e8e \u60c5\u62a5 \u4e0d\u8db3 \uff0c \u53ea\u80fd \u900f\u8fc7 \u300c \u8bd5\u884c \u9519\u8bef \u300d \u6765 \u83b7\u53d6 \u3002   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   void   solve   ( )   {   oier   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   }   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   / * *   *   _ ooOoo _   *   o8888888o   *   88 \"   .   \" 88   *   ( |   -_-   | )   *   O \\   =   / O   *   ____ / ` --- ' \\ ____   *   . '   \\ \\ |   | / /   ` .   *   /   \\ \\ | | |   :   | | | / /   \\   *   /   _ | | | | |   - : -   | | | | | -   \\   *   |   |   \\ \\ \\   -   / / /   |   |   *   |   \\ _ |   ' ' \\ --- / ' '   |   |   *   \\   .- \\ __   ` - `   ___ / -.   /   *   ___ ` .   . '   / --.-- \\   ` .   .   __   *   . \" \"   ' <   ` .___ \\ _ < | > _ / ___. '   > ' \" \" .   *   |   |   :   ` -   \\ ` . ; ` \\   _   / ` ; . ` /   -   `   :   |   |   *   \\   \\   ` -.   \\ _   __ \\   / __   _ /   .- `   /   /   *   = = = = = = ` -.____ ` -.___ \\ _____ / ___.- ` ____.- ' = = = = = =   *   ` = --- = '   *   ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^   *   \u4f5b\u7956 \u4fdd\u4f51   \u6c38\u65e0 BUG   *   \u4f5b \u66f0 :   *   \u5199\u5b57 \u5199\u5b57\u697c \u91cc \u5199\u5b57 \u5199\u5b57\u95f4 \uff0c \u5199\u5b57 \u5199\u5b57\u95f4 \u91cc \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1b   *   \u7a0b\u5e8f \u4eba\u5458 \u5199 \u7a0b\u5e8f \uff0c \u53c8 \u62ff \u7a0b\u5e8f \u6362 \u9152\u94b1 \u3002   *   \u9152\u9192 \u53ea \u5728 \u7f51\u4e0a \u5750 \uff0c \u9152\u9189 \u8fd8\u6765 \u7f51\u4e0b \u7f51\u4e0b\u7720 \uff1b   *   \u9152\u9189 \u9152\u9192 \u65e5\u590d \u65e5 \uff0c \u7f51\u4e0a \u4e0a\u7f51 \u7f51\u4e0a\u7f51 \u4e0b\u5e74 \u590d\u5e74 \u3002   *   \u4f46\u613f \u8001\u6b7b \u7535\u8111 \u95f4 \uff0c \u4e0d\u613f \u97a0\u8eac \u8001\u677f \u524d \uff1b   *   \u5954\u9a70 \u5b9d\u9a6c \u8d35\u8005\u8da3 \uff0c \u516c\u4ea4 \u81ea\u884c \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \u3002   *   \u522b\u4eba \u7b11 \u6211 \u5fd2 \u75af\u766b \uff0c \u6211 \u7b11 \u81ea\u5df1 \u547d\u592a\u8d31 \uff1b   *   \u4e0d\u89c1 \u6ee1\u8857 \u6f02\u4eae \u59b9 \uff0c \u54ea\u4e2a \u5f52\u5f97 \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1f   * * /   / *   = = = = = = = = = = = = = = = = = = = = = = = = \u4f5b\u7956 \u4fdd\u4f51 ,   \u6c38\u65e0 bug = = = = = = = = = = = = = = = = = = = = = = = =   * /   int   main   ( )   {   / /   oier   cf   solve ( ) ;   return   0 ;   oier   solve   ( ) ;   return   0   ;   }","title":"\u63a8\u8350 \u4f7f\u7528   cp   editor"},{"location":"#mingw","text":"","title":"mingw   \u914d\u7f6e"},{"location":"#mingw_1","text":"\u5148 \u4e0b\u8f7d   \u300c   my _ mingw   \u300d   \u89e3\u538b \u538b\u7f29 \u89e3\u538b\u7f29 \u540e \u627e\u5230 \u8def\u5f84 \uff1a   my _ mingw / bin   \u5c06   bin   \u76ee\u5f55 \u6dfb\u52a0 \u8fdb \u73af\u5883 \u53d8\u91cf \u73af\u5883\u53d8 \u73af\u5883\u53d8\u91cf \u91cc \uff0c \u8fd9\u6837 \u6211\u4eec \u5c31 \u53ef\u4ee5 \u5728 \u547d\u4ee4 \u884c\u5185 \u76f4\u63a5 \u8c03\u7528   g ++. exe \u3001 gcc . exe \u3001 gdb . exe   \u5de5\u5177 \u7f16\u8bd1 \u6211\u4eec \u7684 \u4ee3\u7801 \u4e86","title":"\u65e7\u7248   mingw   \u914d\u7f6e :"},{"location":"#msys2","text":"\u53bb \u5b98\u7f51 \u4e0b\u8f7d   msys2   \u6216\u8005 \u5728 \u767e\u5ea6 \u767e\u5ea6\u7f51 \u76d8 \u91cc \uff1a \u94fe\u63a5 \uff1a   \u767e\u5ea6 \u767e\u5ea6\u7f51 \u76d8   \u63d0\u53d6 \u7801 \uff1a 1111   \u6253\u5f00   msys2 . exe   \u6267\u884c \u4e0b\u8ff0 \u547d\u4ee4 \uff1a   pacman   -   Syu   --   disable   -   download   -   timeout   pacman   -   Syu   --   disable   -   download   -   timeout   pacman   -   S   mingw   -   w64   -   x86 _ 64   -   gcc   --   disable   -   download   -   timeout   pacman   -   S   mingw   -   w64   -   x86 _ 64   -   make   --   disable   -   download   -   timeout   pacman   -   S   mingw   -   w64   -   x86 _ 64   -   gdb   --   disable   -   download   -   timeout   pacman   -   Syu   --   disable   -   download   -   timeout   \u8bbe\u7f6e \u73af\u5883 \u53d8\u91cf \u73af\u5883\u53d8 \u73af\u5883\u53d8\u91cf \u4e3a   mingw   \u4e0b \u7684   bin   \u76ee\u5f55","title":"\u501f\u52a9   msys2   \u5305 \u7ba1\u7406\u5de5\u5177"},{"location":"#sublime","text":"\u5148 \u4e0b\u8f7d   \u300c   my _ sublime   \u300d   \u89e3\u538b \u538b\u7f29 \u89e3\u538b\u7f29 \u540e \u53cc\u51fb   sublime _ text . exe   \u8be5 \u7a0b\u5e8f \u5c31\u662f \u6211\u4eec \u8981 \u4f7f\u7528 \u7684 \u7a0b\u5e8f","title":"sublime   \u914d\u7f6e"},{"location":"#g","text":"\u8ddf\u7740 \u8def\u5f84 \u70b9\u51fb   \uff1a   Tools   - >   Build   System   - >   New   Build   System   ...   \u5c06 \u91cc\u9762 \u7684 \u5185\u5bb9 \u5168 \u5220\u6389 \uff0c \u7c98\u8d34 \u4ee3\u7801 \uff1a   g ++. sublime - build   {   \" cmd \"   :   [   \" g ++ \"   ,   \" $ { file } \"   ,   \" - o \"   ,   \" $ { file _ path } / $ { file _ base _ name } \"   ] ,   \" file _ regex \"   :   \" ^ ( .. [ ^ : ] * ) : ( [ 0 - 9 ] + ) : ? ( [ 0 - 9 ] + ) ? : ?   ( . * ) $ \"   ,   \" working _ dir \"   :   \" $ { file _ path } \"   ,   \" selector \"   :   \" source . c ,   source . c++ \"   ,   \" variants \"   :   [   {   \" name \"   :   \" Run \"   ,   \" cmd \"   :   [   \" cmd \"   ,   \" / c \"   ,   \" g ++ \"   ,   \" $ { file } \"   ,   \" - o \"   ,   \" $ { file _ path } / $ { file _ base _ name } \"   ,   \" && \"   ,   \" cmd \"   ,   \" / c \"   ,   \" $ { file _ path } / $ { file _ base _ name } \"   ]   } ,   {   \" name \"   :   \" RunInCommand \"   ,   \" cmd \"   :   [   \" cmd \"   ,   \" / c \"   ,   \" g ++ \"   ,   \" $ { file } \"   ,   \" - o \"   ,   \" $ { file _ path } / $ { file _ base _ name } \"   ,   \" && \"   ,   \" start \"   ,   \" cmd \"   ,   \" / c \"   ,   \" $ { file _ path } / $ { file _ base _ name }   &   pause \"   ]   }   ]   }   \u7136\u540e \u4fdd\u5b58 \u5230 \u8def\u5f84 \uff1a   my _ sublime / Data / Packages / User   \u4e0b \uff0c \u6587\u4ef6 \u6587\u4ef6\u540d \u4e3a \uff1a   g ++. sublime - build","title":"\u914d\u7f6e   g ++   \u7f16\u8bd1 \u73af\u5883"},{"location":"#_2","text":"\u70b9\u51fb \u8def\u5f84 \uff1a   Tools   - >   Developer   - >   New   snippet   \u5c06 \u6253\u5f00 \u7684 \u6587\u4ef6 \u5185\u5bb9 \u5168\u90fd \u5220\u6389 \uff0c \u7136\u540e \u7c98\u8d34 \uff1a   code . sublime - snippet   <   snippet   >   <   content   > < !   [   CDATA   [   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   $   {   1   }   void   solve   (   void   )   {   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main   (   void   )   {   ifstream   fi   ;   ofstream   fo   ;   fi   .   open   (   \" . / lrq . in \"   ) ;   fo   .   open   (   \" . / lrq . out \"   ) ;   if   (   fi   .   is _ open   ( )   &&   fo   .   is _ open   ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl   ;   fo   .   close   ( ) ;   fi   .   close   ( ) ;   for   (   long   long   i   =   1   ;   i   < =   4e8   +   2e7   ;   i   ++   ) ;   FILE   *   fin   =   freopen   (   \" . / lrq . in \"   ,   \" r \"   ,   stdin   ) ;   FILE   *   fout   =   freopen   (   \" . / lrq . out \"   ,   \" w \"   ,   stdout   ) ;   solve   ( ) ;   fclose   (   fin   ) ;   fclose   (   fout   ) ;   }   else   solve   ( ) ;   return   0   ;   }   ] ]   > < /   content   >   < ! --   Optional   :   Set   a   tabTrigger   to   define   how   to   trigger   the   snippet   -- >   < ! --   <   tabTrigger   >   hello   < /   tabTrigger   >   -- >   < ! --   Optional   :   Set   a   scope   to   limit   where   the   snippet   will   trigger   -- >   < ! --   <   scope   >   source   .   python   < /   scope   >   -- >   <   tabTrigger   >   code   < /   tabTrigger   >   < /   snippet   >   \u4fdd\u5b58 \u5230 \u76ee\u5f55 \uff1a   my _ sublime / Data / Packages / User   \u4e0b \uff0c \u4f60 \u4e5f \u53ef\u4ee5 \u5728 \u8be5 \u76ee\u5f55 \u4e0b \u521b\u5efa \u4e00\u4e2a \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \uff1a   snippet   \uff0c \u7136\u540e \u70b9\u51fb \u4fdd\u5b58 \u5230 \u8be5 \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u5185 \uff0c \u4fdd\u5b58 \u7684 \u6587\u4ef6 \u6587\u4ef6\u540d \u4e3a \uff1a   code . sublime - snippet","title":"\u914d\u7f6e \u7528\u6237 \u4ee3\u7801 \u7247\u6bb5"},{"location":"#_3","text":"view   - >   Groups   - >   New   Group   view   - >   word   wrap   / /   \u6362\u884c   view   - >   SideBar   - >   show   SideBar   /   Hide   SideBar   / /   \u6253\u5f00 \u6216 \u5173\u95ed \u8d44\u6e90 \u7a97\u53e3 \u3002","title":"\u591a\u7a97\u53e3"},{"location":"#python","text":"> > >   import   this   The   Zen   of   Python ,   by   Tim   Peters   Beautiful   is   better   than   ugly .   Explicit   is   better   than   implicit .   Simple   is   better   than   complex .   Complex   is   better   than   complicated .   Flat   is   better   than   nested .   Sparse   is   better   than   dense .   Readability   counts .   Special   cases   aren ' t   special   enough   to   break   the   rules .   Although   practicality   beats   purity .   Errors   should   never   pass   silently .   Unless   explicitly   silenced .   In   the   face   of   ambiguity ,   refuse   the   temptation   to   guess .   There   should   be   one --   and   preferably   only   one   -- obvious   way   to   do   it .   Although   that   way   may   not   be   obvious   at   first   unless   you ' re   Dutch .   Now   is   better   than   never .   Although   never   is   often   better   than   * right *   now .   If   the   implementation   is   hard   to   explain ,   it ' s   a   bad   idea .   If   the   implementation   is   easy   to   explain ,   it   may   be   a   good   idea .   Namespaces   are   one   honking   great   idea   --   let ' s   do   more   of   those !   Python \u4e4b\u7985   by   Tim   Peters   \u4f18\u7f8e \u80dc \u4e8e \u4e11\u964b \uff08 Python   \u4ee5 \u7f16\u5199 \u4f18\u7f8e \u7684 \u4ee3\u7801 \u4e3a \u76ee\u6807 \uff09   \u660e \u4e86 \u80dc\u4e8e \u6666\u6da9 \uff08 \u4f18\u7f8e \u7684 \u4ee3\u7801 \u5e94\u5f53 \u662f \u660e \u4e86 \u7684 \uff0c \u547d\u540d \u89c4\u8303 \uff0c \u98ce\u683c \u76f8\u4f3c \uff09   \u7b80\u6d01 \u80dc \u4e8e \u590d\u6742 \uff08 \u4f18\u7f8e \u7684 \u4ee3\u7801 \u5e94\u5f53 \u662f \u7b80\u6d01 \u7684 \uff0c \u4e0d\u8981 \u6709 \u590d\u6742 \u7684 \u5185\u90e8 \u5b9e\u73b0 \uff09   \u590d\u6742 \u80dc \u4e8e \u51cc\u4e71 \uff08 \u5982\u679c \u590d\u6742 \u4e0d\u53ef \u907f\u514d \u4e0d\u53ef\u907f\u514d \uff0c \u90a3 \u4ee3\u7801 \u95f4 \u4e5f \u4e0d\u80fd \u6709 \u96be\u61c2 \u7684 \u5173\u7cfb \uff0c \u8981 \u4fdd\u6301 \u63a5\u53e3 \u7b80\u6d01 \uff09   \u6241\u5e73 \u80dc \u4e8e \u5d4c\u5957 \uff08 \u4f18\u7f8e \u7684 \u4ee3\u7801 \u5e94\u5f53 \u662f \u6241\u5e73 \u7684 \uff0c \u4e0d\u80fd \u592a\u591a \u6709\u592a\u591a \u7684 \u5d4c\u5957 \uff09   \u95f4\u9694 \u80dc \u4e8e \u7d27\u51d1 \uff08 \u4f18\u7f8e \u7684 \u4ee3\u7801 \u6709 \u9002\u5f53 \u7684 \u95f4\u9694 \uff0c \u4e0d\u8981 \u5962\u671b \u4e00\u884c \u4ee3\u7801 \u89e3\u51b3 \u95ee\u9898 \u89e3\u51b3\u95ee\u9898 \uff09   \u53ef\u8bfb \u53ef\u8bfb\u6027 \u5f88 \u91cd\u8981 \uff08 \u4f18\u7f8e \u7684 \u4ee3\u7801 \u662f \u53ef\u8bfb \u7684 \uff09   \u5373\u4fbf \u5047\u501f \u7279\u4f8b \u7684 \u5b9e\u7528 \u5b9e\u7528\u6027 \u4e4b\u540d \uff0c \u4e5f \u4e0d\u53ef \u8fdd\u80cc \u8fd9\u4e9b \u89c4\u5219 \uff08 \u8fd9\u4e9b \u89c4\u5219 \u65e0\u4e0a \u81f3\u9ad8\u65e0\u4e0a \uff09   \u4e0d\u8981 \u5305\u5bb9 \u6240\u6709 \u9519\u8bef \uff0c \u9664\u975e \u4f60 \u786e\u5b9a \u9700\u8981 \u8fd9\u6837 \u505a \uff08 \u7cbe\u51c6 \u5730 \u6355\u83b7 \u5f02\u5e38 \uff0c \u4e0d\u5199   except : pass   \u98ce\u683c \u7684 \u4ee3\u7801 \uff09   \u5f53 \u5b58\u5728 \u591a\u79cd \u53ef\u80fd \uff0c \u4e0d\u8981 \u5c1d\u8bd5 \u53bb \u731c\u6d4b   \u800c\u662f \u5c3d\u91cf \u627e \u4e00\u79cd \uff0c \u6700\u597d \u662f \u552f\u4e00 \u4e00\u79cd \u660e\u663e \u7684 \u89e3\u51b3 \u65b9\u6848 \u89e3\u51b3\u65b9\u6848 \uff08 \u5982\u679c \u4e0d \u786e\u5b9a \uff0c \u5c31 \u7528 \u7a77\u4e3e \u7a77\u4e3e\u6cd5 \uff09   \u867d\u7136 \u8fd9 \u5e76 \u4e0d \u5bb9\u6613 \uff0c \u56e0\u4e3a \u4f60 \u4e0d\u662f   Python   \u4e4b \u7236 \uff08 \u8fd9\u91cc \u7684   Dutch   \u662f \u6307   Guido   \uff09   \u505a \u4e5f\u8bb8 \u597d\u8fc7 \u4e0d \u505a \uff0c \u4f46 \u601d\u7d22 \u4e0d\u5047\u601d\u7d22 \u5c31 \u52a8\u624b \u8fd8 \u4e0d\u5982 \u4e0d \u505a \uff08 \u52a8\u624b \u4e4b\u524d \u8981\u7ec6 \u601d\u91cf \uff09   \u5982\u679c \u4f60 \u65e0\u6cd5 \u5411 \u4eba \u63cf\u8ff0 \u4f60 \u7684 \u65b9\u6848 \uff0c \u90a3 \u80af\u5b9a \u4e0d\u662f \u4e00\u4e2a \u597d \u65b9\u6848 \uff1b \u53cd\u4e4b \u4ea6\u7136 \u53cd\u4e4b\u4ea6\u7136 \uff08 \u65b9\u6848 \u6d4b\u8bc4 \u6807\u51c6 \uff09   \u547d\u540d \u7a7a\u95f4 \u662f \u4e00\u79cd \u7edd\u5999 \u7684 \u7406\u5ff5 \uff0c \u6211\u4eec \u5e94\u5f53 \u591a\u52a0 \u5229\u7528 \uff08 \u5021\u5bfc \u4e0e \u53f7\u53ec \uff09","title":"python   \u4e4b\u7985"},{"location":"#_4","text":"TDM - GCC   cp   editor   Material   for   MkDocs   csacademy   \u753b\u56fe \u8bba","title":"\u4e00\u4e9b \u8d44\u6e90 \u7f51\u7ad9"},{"location":"git/","text":"git   \u4f7f\u7528   \u514b\u9686   git   clone   < url >   \u521d\u59cb   git   init   \u72b6\u6001   git   status   \u6dfb\u52a0   git   add   .   git   add   < file >   \u6539\u540d   git   mv   < old >   < new >   \u5220\u9664   git   rm   < file >   \u6dfb\u52a0 \u540e\u79fb \u51fa   git   rm   -- cached   < file >   \u79fb\u5165 \u672c\u5730 \u4ed3\u5e93   git   commit   - m   \" message \"   git   \u547d\u4ee4","title":"git   \u4f7f\u7528"},{"location":"git/#git","text":"","title":"git   \u4f7f\u7528"},{"location":"git/#_1","text":"git   clone   < url >","title":"\u514b\u9686"},{"location":"git/#_2","text":"git   init","title":"\u521d\u59cb"},{"location":"git/#_3","text":"git   status","title":"\u72b6\u6001"},{"location":"git/#_4","text":"git   add   .   git   add   < file >","title":"\u6dfb\u52a0"},{"location":"git/#_5","text":"git   mv   < old >   < new >","title":"\u6539\u540d"},{"location":"git/#_6","text":"git   rm   < file >","title":"\u5220\u9664"},{"location":"git/#_7","text":"git   rm   -- cached   < file >","title":"\u6dfb\u52a0 \u540e\u79fb \u51fa"},{"location":"git/#_8","text":"git   commit   - m   \" message \"   git   \u547d\u4ee4","title":"\u79fb\u5165 \u672c\u5730 \u4ed3\u5e93"},{"location":"label/sublime/","text":"sublime   \u914d\u7f6e   g ++. sublime - build   C : \\ Users \\ huaxv \\ AppData \\ Roaming \\ Sublime   Text \\ Packages \\ User \\   g ++. sublime - build   {   \" cmd \"   :   [   \" g ++ \"   ,   \" $ { file } \"   ,   \" - o \"   ,   \" $ { file _ path } / $ { file _ base _ name } \"   ] ,   \" file _ regex \"   :   \" ^ ( .. [ ^ : ] * ) : ( [ 0 - 9 ] + ) : ? ( [ 0 - 9 ] + ) ? : ?   ( . * ) $ \"   ,   \" working _ dir \"   :   \" $ { file _ path } \"   ,   \" selector \"   :   \" source . c ,   source . c++ \"   ,   \" variants \"   :   [   {   \" name \"   :   \" Run \"   ,   \" cmd \"   :   [   \" cmd \"   ,   \" / c \"   ,   \" g ++ \"   ,   \" $ { file } \"   ,   \" - o \"   ,   \" $ { file _ path } / $ { file _ base _ name } \"   ,   \" && \"   ,   \" cmd \"   ,   \" / c \"   ,   \" $ { file _ path } / $ { file _ base _ name } \"   ]   } ,   {   \" name \"   :   \" RunInCommand \"   ,   \" cmd \"   :   [   \" cmd \"   ,   \" / c \"   ,   \" g ++ \"   ,   \" $ { file } \"   ,   \" - o \"   ,   \" $ { file _ path } / $ { file _ base _ name } \"   ,   \" && \"   ,   \" start \"   ,   \" cmd \"   ,   \" / c \"   ,   \" $ { file _ path } / $ { file _ base _ name }   &   pause \"   ]   }   ]   }   mycode . sublime - snippet   C : \\ Users \\ huaxv \\ AppData \\ Roaming \\ Sublime   Text \\ Packages \\ User \\ snippet   mycode . sublime - snippet   <   snippet   >   <   content   >   < ! [ CDATA [   # include   < bits / std c++ . h >   using   namespace   std ;   int   debuggersum   =   0 ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   $ { 1 }   void   solve ( void )   {   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main ( void )   {   ifstream   fi ( \" . / lrq . in \" ) ;   ofstream   fo ( \" . / lrq . out \" ) ;   if   ( fi . is _ open ( )   &&   fo . is _ open ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl ;   fo . close ( ) ;   fi . close ( ) ;   for   ( long   long   i   =   1 ;   i   < =   400000000 ;   i ++ )   ;   FILE   * fin   =   freopen ( \" . / lrq . in \" ,   \" r \" ,   stdin ) ;   FILE   * fout   =   freopen ( \" . / lrq . out \" ,   \" w \" ,   stdout ) ;   solve ( ) ;   fclose ( fin ) ;   fclose ( fout ) ;   }   else   {   solve ( ) ;   }   return   0 ;   }   ] ] >   < /   content   >   < ! --   Optional :   Set   a   tabTrigger   to   define   how   to   trigger   the   snippet   -- >   < ! --   < tabTrigger > hello < / tabTrigger >   -- >   < ! --   Optional :   Set   a   scope   to   limit   where   the   snippet   will   trigger   -- >   < ! --   < scope > source . python < / scope >   -- >   <   tabTrigger   >   mycode   < /   tabTrigger   >   < /   snippet   >","title":"sublime   \u914d\u7f6e"},{"location":"label/sublime/#sublime","text":"","title":"sublime   \u914d\u7f6e"},{"location":"label/sublime/#gsublime-build","text":"C : \\ Users \\ huaxv \\ AppData \\ Roaming \\ Sublime   Text \\ Packages \\ User \\   g ++. sublime - build   {   \" cmd \"   :   [   \" g ++ \"   ,   \" $ { file } \"   ,   \" - o \"   ,   \" $ { file _ path } / $ { file _ base _ name } \"   ] ,   \" file _ regex \"   :   \" ^ ( .. [ ^ : ] * ) : ( [ 0 - 9 ] + ) : ? ( [ 0 - 9 ] + ) ? : ?   ( . * ) $ \"   ,   \" working _ dir \"   :   \" $ { file _ path } \"   ,   \" selector \"   :   \" source . c ,   source . c++ \"   ,   \" variants \"   :   [   {   \" name \"   :   \" Run \"   ,   \" cmd \"   :   [   \" cmd \"   ,   \" / c \"   ,   \" g ++ \"   ,   \" $ { file } \"   ,   \" - o \"   ,   \" $ { file _ path } / $ { file _ base _ name } \"   ,   \" && \"   ,   \" cmd \"   ,   \" / c \"   ,   \" $ { file _ path } / $ { file _ base _ name } \"   ]   } ,   {   \" name \"   :   \" RunInCommand \"   ,   \" cmd \"   :   [   \" cmd \"   ,   \" / c \"   ,   \" g ++ \"   ,   \" $ { file } \"   ,   \" - o \"   ,   \" $ { file _ path } / $ { file _ base _ name } \"   ,   \" && \"   ,   \" start \"   ,   \" cmd \"   ,   \" / c \"   ,   \" $ { file _ path } / $ { file _ base _ name }   &   pause \"   ]   }   ]   }","title":"g ++. sublime - build"},{"location":"label/sublime/#mycodesublime-snippet","text":"C : \\ Users \\ huaxv \\ AppData \\ Roaming \\ Sublime   Text \\ Packages \\ User \\ snippet   mycode . sublime - snippet   <   snippet   >   <   content   >   < ! [ CDATA [   # include   < bits / std c++ . h >   using   namespace   std ;   int   debuggersum   =   0 ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   $ { 1 }   void   solve ( void )   {   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main ( void )   {   ifstream   fi ( \" . / lrq . in \" ) ;   ofstream   fo ( \" . / lrq . out \" ) ;   if   ( fi . is _ open ( )   &&   fo . is _ open ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl ;   fo . close ( ) ;   fi . close ( ) ;   for   ( long   long   i   =   1 ;   i   < =   400000000 ;   i ++ )   ;   FILE   * fin   =   freopen ( \" . / lrq . in \" ,   \" r \" ,   stdin ) ;   FILE   * fout   =   freopen ( \" . / lrq . out \" ,   \" w \" ,   stdout ) ;   solve ( ) ;   fclose ( fin ) ;   fclose ( fout ) ;   }   else   {   solve ( ) ;   }   return   0 ;   }   ] ] >   < /   content   >   < ! --   Optional :   Set   a   tabTrigger   to   define   how   to   trigger   the   snippet   -- >   < ! --   < tabTrigger > hello < / tabTrigger >   -- >   < ! --   Optional :   Set   a   scope   to   limit   where   the   snippet   will   trigger   -- >   < ! --   < scope > source . python < / scope >   -- >   <   tabTrigger   >   mycode   < /   tabTrigger   >   < /   snippet   >","title":"mycode . sublime - snippet"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/","text":"","title":"Index"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/D-%E8%8E%B2%E5%AD%90%E7%9A%84%E7%89%A9%E7%90%86%E7%83%AD%E5%8A%9B%E5%AD%A6/","text":"D - \u83b2\u5b50 \u7684 \u7269\u7406 \u70ed\u529b \u529b\u5b66 \u70ed\u529b\u5b66   \u9898\u76ee \u80cc\u666f   \u83b2\u5b50 \u6b63\u5728 \u7814\u7a76 \u5206\u5b50 \u7684 \u8fd0\u52a8 \u3002   \u6bcf\u4e2a \u5206\u5b50 \u90fd \u6709 \u4e00\u4e2a \u901f\u5ea6 \uff0c \u7ea6\u5b9a \u6b63 \u65b9\u5411 \u4e3a \u6b63 \uff0c \u8d1f \u65b9\u5411 \u4e3a \u8d1f \u3002 \u5206\u5b50 \u7684 \u6570\u91cf \u6781 \u591a \uff0c \u901f\u5ea6 \u53c8 \u5e76 \u4e0d \u4e00\u81f4 \uff0c \u770b\u4e0a \u4e0a\u53bb \u770b\u4e0a\u53bb \u6742\u4e71 \u6742\u4e71\u65e0\u7ae0 \u3002 \u4e8e\u662f \u83b2\u5b50 \u5e0c\u671b \u8c03\u6574 \u90e8\u5206 \u5206\u5b50 \u7684 \u901f\u5ea6 \uff0c \u4f7f\u5f97 \u6700\u7ec8 \u5206\u5b50 \u4eec \u770b\u4e0a \u4e0a\u53bb \u770b\u4e0a\u53bb \u6574\u9f50 \u3002   \u9898\u76ee \u63cf\u8ff0   \u83b2\u5b50 \u7ed9\u5b9a \u4e86   \\ ( n \\ )   \u4e2a \u6574\u6570   \\ ( a _ 1 , a _ 2 , \\ cdots   a _ n \\ )   \uff0c \u63cf\u8ff0 \u6bcf\u4e2a \u5206\u5b50 \u3002 \u73b0\u5728 \u5979 \u53ef\u4ee5 \u8fdb\u884c   \u81f3\u591a   \\ ( m \\ )   \u6b21 \u64cd\u4f5c \uff08 \u4e5f \u53ef\u4ee5 \u4e00\u6b21 \u4e5f \u4e0d \u8fdb\u884c \uff09 \uff0c \u6bcf\u6b21 \u64cd\u4f5c \u53ef\u4ee5 \u6267\u884c \u4ee5\u4e0b \u4e24\u6761 \u4e4b\u4e00 \uff1a   \u9009\u62e9   \\ ( i \\ )   \uff0c \u6ee1\u8db3   \\ ( a _ i = \\ min _ j \\ { a _ j \\ } \\ )   \uff0c \u7136\u540e \u5c06   \\ ( a _ i \\ )   \u53d8\u4e3a   \\ ( \\ max _ j \\ { a _ j \\ } \\ )   \u3002   \u9009\u62e9   \\ ( i \\ )   \uff0c \u6ee1\u8db3   \\ ( a _ i = \\ max _ j \\ { a _ j \\ } \\ )   \uff0c \u7136\u540e \u5c06   \\ ( a _ i \\ )   \u53d8\u4e3a   \\ ( \\ min _ j \\ { a _ j \\ } \\ )   \u3002   \u73b0\u5728 \u83b2\u5b50 \u5e0c\u671b \u9700\u8981 \u6700\u5c0f \u6700\u5c0f\u5316 \u6700\u7ec8 \u5e8f\u5217 \u7684 \u6781\u5dee \uff08 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u51cf\u53bb \u6700\u5c0f \u6700\u5c0f\u503c \u7684 \u5dee \uff09 \u3002 \u8bf7\u6c42 \u51fa \u6700\u5c0f \u7684 \u6781\u5dee \u3002   \u4f8b\u5982 \uff0c \u5bf9\u4e8e \u5e8f\u5217   \\ ( a = \\ { 5 , 1 , 4 \\ } \\ )   \uff0c \u53ef\u4ee5 \u8fdb\u884c \u5982\u4e0b \u51e0\u6b21 \u64cd\u4f5c \uff1a   \u9009\u62e9   \\ ( i = 1 \\ )   \uff0c \u6ee1\u8db3   \\ ( a _ 1 = 5 \\ )   \u662f \u5f53\u524d \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c   \\ ( 5 \\ )   \uff0c \u53ef\u4ee5 \u5c06   \\ ( a _ 1 \\ )   \u4fee\u6539 \u6210 \u5f53\u524d \u7684 \u6700\u5c0f \u6700\u5c0f\u503c   \\ ( 1 \\ )   \uff0c \u6b64\u65f6 \u5e8f\u5217 \u53d8\u6210   \\ ( \\ { 1 , 1 , 4 \\ } \\ )   \uff1b   \u518d\u9009   \\ ( i = 2 \\ )   \uff0c \u6ee1\u8db3   \\ ( a _ 2 = 1 \\ )   \u662f \u5f53\u524d \u7684 \u6700\u5c0f \u6700\u5c0f\u503c   \\ ( 1 \\ )   \uff0c \u53ef\u4ee5 \u5c06   \\ ( a _ 2 \\ )   \u4fee\u6539 \u6210 \u5f53\u524d \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c   \\ ( 4 \\ )   \uff0c \u6b64\u65f6 \u5e8f\u5217 \u53d8\u6210   \\ ( \\ { 1 , 4 , 4 \\ } \\ )   \u3002   \u8fd9 \u4e24\u6b21 \u64cd\u4f5c \u540e \u5f97\u5230 \u7684 \u5e8f\u5217 \u4e3a   \\ ( \\ { 1 , 4 , 4 \\ } \\ )   \u3002 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u51cf\u53bb \u6700\u5c0f \u6700\u5c0f\u503c \u7684 \u5dee\u4e3a   \\ ( | 4 - 1 | = 3 \\ )   \u3002   \u5f53\u7136 \uff0c \u8fd9\u79cd \u64cd\u4f5c \u65b9\u5f0f \u5f97\u5230 \u7684 \u6781\u5dee \u5e76\u975e \u6700\u5c0f \u3002 \u6700\u4f18 \u7b56\u7565 \u662f \uff0c \u5148 \u5c06 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c   \\ ( a _ 1 = 5 \\ )   \u53d8\u6210 \u76ee\u524d \u7684 \u6700\u5c0f \u6700\u5c0f\u503c   \\ ( 1 \\ )   \uff0c \u518d \u628a \u6b64\u65f6 \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c   \\ ( a _ 3 = 4 \\ )   \u53d8\u6210 \u76ee\u524d \u7684 \u6700\u5c0f \u6700\u5c0f\u503c   \\ ( 1 \\ )   \u3002 \u6b64\u65f6 \u5e8f\u5217 \u4e3a   \\ ( \\ { 1 , 1 , 1 \\ } \\ )   \uff0c \u5f97\u5230 \u7684 \u6781\u5dee   \\ ( | 1 - 1 | = 0 \\ )   \u662f \u6240\u6709 \u7b56\u7565 \u4e2d \u6700\u5c0f \u7684 \u3002   \u8f93\u5165 \u683c\u5f0f   \u7b2c\u4e00 \u4e00\u884c \u7b2c\u4e00\u884c \u6709 \u4e24\u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( n , m \\ )   \uff0c \u5206\u522b \u8868\u793a \u5e8f\u5217 \u7684 \u957f\u5ea6 \u548c \u4f60 \u6700 \u591a \u53ef\u4ee5 \u8fdb\u884c \u7684 \u64cd\u4f5c \u6b21\u6570 \u3002   \u7b2c\u4e8c \u4e8c\u884c \u7b2c\u4e8c\u884c \u6709   \\ ( n \\ )   \u4e2a \u6574\u6570   \\ ( a \\ )   \uff0c \u63cf\u8ff0 \u7ed9\u5b9a \u7684 \u5e8f\u5217 \u3002   \u8f93\u51fa \u683c\u5f0f   \u8f93\u51fa \u5171 \u4e00\u884c \u4e00\u4e2a \u6574\u6570 \uff0c \u8868\u793a \u6700\u4f18 \u7b56\u7565 \u4e0b\u80fd \u5f97\u5230 \u7684 \u6700\u5c0f \u6781\u5dee \u3002   \u6837\u4f8b   # 1   \u6837\u4f8b \u8f93\u5165   # 1   3   2   5   1   4   \u6837\u4f8b \u8f93\u51fa   # 1   0   \u6837\u4f8b   # 2   \u6837\u4f8b \u8f93\u5165   # 2   8   0   1   2   3   4   5   6   7   8   \u6837\u4f8b \u8f93\u51fa   # 2   7   \u6837\u4f8b   # 3   \u6837\u4f8b \u8f93\u5165   # 3   8   3   1   5   5   5   6   6   9   10   \u6837\u4f8b \u8f93\u51fa   # 3   4   \u63d0\u793a   \u6837\u4f8b \u89e3\u91ca   \u6837\u4f8b   \\ ( 1 \\ )   \uff1a   \\ ( \\ { 5 , 1 , 4 \\ } \\ to \\ { 1 , 1 , 4 \\ } \\ to \\ { 1 , 1 , 1 \\ } \\ )   \uff0c \u6781\u5dee \u4e3a   \\ ( 0 \\ )   \u3002   \u6837\u4f8b   \\ ( 2 \\ )   \uff1a   \\ ( \\ { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 \\ } \\ )   \uff0c \u4ec0\u4e48 \u4e5f \u4e0d\u4e86 \u505a\u4e0d\u4e86 \uff0c \u6781\u5dee \u4e3a   \\ ( 7 \\ )   \u3002   \u6837\u4f8b   \\ ( 3 \\ )   \uff1a   \\ ( \\ { 1 , 5 , 5 , 5 , 6 , 6 , 9 , 10 \\ } \\ to \\ { 10 , 5 , 5 , 5 , 6 , 6 , 9 , 10 \\ } \\ to \\ { 5 , 5 , 5 , 5 , 6 , 6 , 9 , 10 \\ } \\ to \\ { 5 , 5 , 5 , 5 , 6 , 6 , 9 , 5 \\ } \\ )   \uff0c \u6781\u5dee \u4e3a   \\ ( 4 \\ )   \u3002   \u6570\u636e \u8303\u56f4 \u53ca \u7ea6\u5b9a   \u5bf9\u4e8e \u5168\u90e8 \u6570\u636e \uff0c \u4fdd\u8bc1   \\ ( 1 \\ le   n   \\ le   10 ^ 5 \\ )   \uff0c   \\ ( 0 \\ le   m \\ le10 ^ 9 \\ )   \uff0c   \\ ( | a _ i | \\ le   10 ^ 9 \\ )   \u3002   \u601d\u8def \uff1a \u8d2a\u5fc3   \u5047\u8bbe \u8fdb\u884c \u4e86   \\ ( m \\ )   \u6b21 \u64cd\u4f5c \u4e4b\u540e \u7684 \u6700\u4f18 \u503c\u57df \u4e3a \uff1a   \\ ( [ l ,   r ] \\ )   \uff0c \u5219 \u5728 \u539f\u6765   \\ ( a \\ )   \u6570\u7ec4 \u5185 \u6240\u6709 \u4e25\u683c \u5c0f\u4e8e   \\ ( l \\ )   \uff0c \u6240\u6709 \u4e25\u683c \u5927\u4e8e   \\ ( r \\ )   \u7684 \u6570 \u90fd \u88ab \u64cd\u4f5c \u4e86 \u3002   \u5047\u8bbe \u6240\u6709 \u4e25\u683c \u5c0f\u4e8e   \\ ( l \\ )   \u7684 \u4e2a\u6570 \u4e3a   \\ ( u \\ )   \uff0c \u6240\u6709 \u4e25\u683c \u5927\u4e8e   \\ ( r \\ )   \u7684 \u4e2a\u6570 \u4e3a   \\ ( v \\ )   \uff0c \u4e3a\u4e86 \u7814\u7a76 \u65b9\u4fbf \uff0c \u6211\u4eec \u5148 \u5c06 \u539f \u6570\u7ec4   \\ ( a \\ )   \u4ece\u5c0f \u4ece\u5c0f\u5230\u5927 \u7684 \u987a\u5e8f \u6392\u5217 \u987a\u5e8f\u6392\u5217 \uff0c \u90a3\u4e48 \u4e25\u683c \u5c0f\u4e8e   \\ ( l \\ )   \u7684 \u6570\u636e \u662f \u6392\u5e8f \u540e \u7684 \u6570\u7ec4 \u5de6\u8fb9 \u524d   \\ ( 1   \\ sim   u \\ )   \u4e2a\u6570 \uff0c \u4e25\u683c \u5927\u4e8e   \\ ( r \\ )   \u7684 \u6570\u636e \u662f \u6392\u5e8f \u540e \u7684 \u6570\u7ec4 \u53f3\u8fb9 \u524d   \\ ( 1   \\ sim   v \\ )   \u4e2a\u6570 \u3002   \u6211\u4eec \u5148 \u628a \u5de6\u8fb9 \u524d   \\ ( 1   \\ sim   u \\ )   \u4e2a\u6570 \u90fd \u8f6c\u6210 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u653e\u5230 \u53f3\u8fb9 \uff0c \u5219 \u73b0\u5728 \u6bd4   \\ ( l \\ )   \u4e25\u683c \u5c0f \u7684 \u6570\u4e3a   0   \u4e2a \uff0c \u6bd4   \\ ( r \\ )   \u4e25\u683c \u5927 \u7684 \u6570\u6709   \\ ( u   +   v \\ )   \u4e2a \uff0c \u63a5\u7740 \u5c06   \\ ( u   +   v \\ )   \u4e2a\u6570 \u5168\u90e8 \u8f6c \u6210 \u6700\u5c0f \u6700\u5c0f\u503c \u653e\u5230 \u6700 \u5de6\u8fb9 \uff0c \u5219   \u6bd4   \\ ( l \\ )   \u5c0f \u7684 \u6570 \u548c \u6bd4   \\ ( r \\ )   \u5927 \u7684 \u6570 \u5168\u90e8 \u4e3a   0   \u4e2a \uff0c \u8fd9\u91cc \u64cd\u4f5c \u4e86 \uff1a   \\ ( u   +   u   +   v \\ )   \u6b21   \u5982\u679c \u4e00 \u5f00\u59cb \u6211 \u662f \u5148 \u5c06 \u53f3\u8fb9 \u524d   \\ ( 1   \\ sim   v \\ )   \u4e2a\u6570 \u653e\u5230 \u6700 \u5de6\u8fb9 \uff0c \u6309\u7167 \u4e0a\u9762 \u7684 \u903b\u8f91 \u518d \u653e\u5230 \u6700 \u53f3\u8fb9 \uff0c \u8fd9\u91cc \u64cd\u4f5c \u4e86 \uff1a   \\ ( v   +   u   +   v \\ )   \u6b21   \u4e24\u79cd \u64cd\u4f5c \u90fd \u80fd \u8fbe\u5230 \u76ee\u7684 \uff0c \u6211\u4eec \u8981 \u9009\u62e9 \u64cd\u4f5c \u4f5c\u6570 \u64cd\u4f5c\u6570 \u6700\u5c0f \u7684 \uff1a   \\ ( u   +   v   +   min ( u ,   v ) \\ )   \u6211\u4eec \u8981 \u5982\u4f55 \u786e\u5b9a \u51fa   \\ ( l \\ )   \u5462 \uff1f   \u53ea\u80fd \u4ece \u5de6\u8fb9 \u4e00\u4e2a \u4e00\u4e2a \u904d\u5386 \uff0c \u4e0d\u65ad \u7684 \u5047\u5b9a \u5f53\u524d \u7684 \u8282\u70b9 \u5c31\u662f   \\ ( l \\ )   \u3002   \u5982\u679c   \\ ( l \\ )   \u56fa\u5b9a \u4e3a \u67d0\u4e2a \u503c \uff0c   \\ ( r \\ )   \u600e\u4e48 \u6c42 \uff1f \u5047\u8bbe   \\ ( l   -   1   \\ leq   n   -   r \\ )   \uff0c \u5219   \\ ( u   +   v   +   min ( u ,   v )   \\ leq   m \\ )   \u5c31 \u53ef\u4ee5 \u53d8\u6210 \uff1a   \\ ( l   -   1   +   n   -   r   +   l   -   1   =   n   +   2l   -   2   -   r   \\ leq   m \\ )   \uff0c \u5219   \\ ( r   \\ geq   n   +   2l   -   2   -   m \\ )   \u8fd8 \u5f97 \u6ee1\u8db3 \u5047\u8bbe \u6761\u4ef6 \uff1a   \\ ( l   -   1   \\ leq   n   -   r \\ )   \u6240\u4ee5 :   \\ ( n   +   2l   -   2   -   m   \\ leq   r   \\ leq   n   -   l   +   1 \\ )   \uff0c \u6b64\u65f6   \\ ( 3l   -   3   \\ leq   m \\ )   \u5982\u679c   \\ ( l \\ )   \u56fa\u5b9a \u4e3a \u67d0\u4e2a \u503c \uff0c \u5e76 \u5047\u8bbe   \\ ( l   -   1   \\ geq   n   -   r \\ )   \uff0c \u5219   \\ ( u   +   v   +   min ( u ,   v )   \\ leq   m \\ )   \u5c31 \u53ef\u4ee5 \u53d8\u6210 \uff1a   \\ ( l   -   1   +   n   -   r   +   n   -   r   =   2n   -   2l   +   l   -   1   \\ leq   m \\ )   \u8fd8\u8981 \u6ee1\u8db3 \u5047\u8bbe \u6761\u4ef6 \uff1a   \\ ( l   -   1   \\ geq   n   -   r \\ )   \uff0c \u6240\u4ee5 \u6709 \uff1a   \\ ( 2r   \\ geq   \\ max ( 2n   -   m   +   l   -   1 ,   2n   -   2l   +   2 ) \\ )   \u7531\u4e8e \u4e0a\u8ff0 \u4e24\u79cd \u5047\u8bbe \u76f8\u4e92 \u5bf9\u7acb \uff0c \u4e0d\u662f \u5047\u8bbe \u4e00 \u6210\u7acb \uff0c \u5c31\u662f \u5047\u8bbe \u4e8c \u6210\u7acb \uff0c \u6240\u4ee5 \u6211\u4eec \u53ef\u4ee5 \u901a\u8fc7   \\ ( 3l   -   3   \\ leq   m \\ )   \u662f\u5426 \u6210\u7acb \u6765 \u9009\u53d6 \u90a3\u79cd \u5bf9\u5e94 \u7684 \u5047\u8bbe \uff0c \u5982\u679c \u6210\u7acb \uff0c \u9009\u53d6   \\ ( n   +   2l   -   2   -   m   \\ leq   r \\ )   \uff1b \u5426\u5219 \u9009\u53d6   \\ ( 2r   \\ geq   \\ max ( 2n   -   m   +   l   -   1 ,   2n   -   2l   +   2 ) \\ )   \uff0c \u8fd9\u91cc \u7684   \\ ( r \\ )   \u8981 \u5411\u4e0a \u53d6\u6574 \uff0c \u5411\u4e0a \u53d6\u6574 \u7167\u6837 \u6ee1\u8db3   \\ ( l   -   1   \\ geq   n   -   r \\ )   \u8fd9\u4e2a \u6761\u4ef6 \u3002   \u5f53\u7136   \\ ( l \\ )   \u6700 \u591a \u53ea\u80fd \u53bb \u5230   \\ ( m   +   1 \\ )   \uff0c   \\ ( r \\ )   \u6700\u5927 \u4e5f \u53ea\u80fd \u662f   \\ ( n \\ )   \u4e0d\u80fd \u8d8a\u754c \uff01   \u82e5   \\ ( 3l   -   3   \\ leq   m \\ )   \uff0c \u5219   \\ ( n   +   2l   -   2   -   m   \\ leq   n \\ )   \uff1b \u5426\u5219   \\ ( 2n   -   m   +   l   -   1   \\ leq   2n \uff0c 2n   -   2l   +   2   \\ leq   2n \\ )   \uff0c \u82e5   \\ ( r \\ )   \u53d6\u503c   \u5404\u81ea \u8303\u56f4 \u7684 \u6700\u5c0f \uff0c \u90fd \u80fd \u4fdd\u8bc1   \\ ( r   \\ leq   n \\ )   \uff0c \u8bf7 \u653e\u5fc3 \u4f7f\u7528 \u653e\u5fc3\u4f7f\u7528 \u3002   \u7279\u5224 \uff1a   \u5982\u679c   \\ ( m   \\ geq   n   -   1 \\ )   \u5219 \u628a \u6570\u7ec4   \\ ( a \\ )   \u5168\u90e8 \u53d8\u6210 \u76f8\u540c \u7684 \u503c \uff0c \u6781\u5dee \u4e3a   0   \uff0c \u6b64\u65f6 \u6700\u5c0f \u3002   \u5982\u679c   \\ ( m   =   0 \\ )   \uff0c \u5219 \u6781\u5dee \u4e3a   \\ ( \\ max \\ { b \\ }   -   \\ min \\ { a \\ } \\ )   \u3002   \u4ee3\u7801 \u53c2\u8003   # include   < iostream >   # include   < iomanip >   # include   < algorithm >   # include   < cstdio >   # include   < cstdlib >   # include   < cstring >   # include   < string >   # include   < vector >   # include   < queue >   # include   < deque >   # include   < stack >   # include   < map >   # include   < set >   # include   < unordered _ map >   # include   < unordered _ set >   using   namespace   std   ;   # define   endl   ' \\ n '   # define   pique   priority _ queue   # define   oier   \\   ios _ base : : sync _ with _ stdio ( false ) ; \\   cin . tie ( nullptr ) ;   cout . tie ( nullptr ) ;   # define   cf   int   t ;   cin   > >   t ;   while   ( t   -- )   # define   upfor ( i ,   l ,   r )   for   ( i   =   ( l ) ;   i   < =   ( r ) ;   i   ++ )   # define   downfor ( i ,   l ,   r )   for   ( i   =   ( r ) ;   i   > =   ( l ) ;   i   -- )   / /   # define   int   long   long   typedef   long   long   LL   ;   typedef   long   double   LD   ;   / / typedef   __ int128 _ t   int128 ;   const   int   inf   =   ~   (   1   < <   31   ) ;   / /   \u6b63 \u65e0\u7a77   const   int   ninf   =   (   1   < <   31   ) ;   / /   \u8d1f \u65e0\u7a77   const   LL   infll   =   ~   (   1l   l   < <   63   ) ;   / /   \u6b63 \u65e0\u7a77   const   LL   ninfll   =   (   1l   l   < <   63   ) ;   / /   \u8d1f \u65e0\u7a77   const   int   N   =   int   (   1e7   +   10   ) ;   inline   LL   rll   ( )   {   oier   LL   x   ;   cin   > >   x   ;   return   x   ;   }   inline   int   rint   ( )   {   oier   int   x   ;   cin   > >   x   ;   return   x   ;   }   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   int   n   ,   m   ;   int   q   [   N   ] ;   void   qsort   (   int   l   ,   int   r   )   {   if   (   l   > =   r   )   return   ;   int   x   =   q   [ (   l   +   r   )   /   2   ] ;   int   i   =   l   -   1   ,   j   =   r   +   1   ;   while   (   i   <   j   )   {   while   (   q   [   ++   i   ]   <   x   ) ;   while   (   x   <   q   [   --   j   ] ) ;   if   (   i   <   j   )   swap   (   q   [   i   ] ,   q   [   j   ] ) ;   }   qsort   (   l   ,   j   ) ;   qsort   (   j   +   1   ,   r   ) ;   }   void   solve   ( )   {   oier   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   n   =   rint   ( ) ;   m   =   rint   ( ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   q   [   i   ]   =   rint   ( ) ;   if   (   m   > =   n   -   1   )   {   cout   < <   0   < <   endl   ;   return   ;   }   int   res   =   inf   ;   qsort   (   1   ,   n   ) ;   if   (   m   = =   0   )   {   cout   < <   q   [   n   ]   -   q   [   1   ]   < <   endl   ;   return   ;   }   for   (   int   l   =   1   ,   r   ;   l   < =   m   +   1   ;   l   ++   )   {   if   (   3   *   l   -   3   < =   m   )   r   =   n   +   2   *   l   -   2   -   m   ;   else   r   =   max   (   2   *   n   -   m   +   l   -   1   ,   2   *   n   -   2   *   l   +   2   )   /   2.0   +   0.5   ;   res   =   min   (   res   ,   q   [   r   ]   -   q   [   l   ] ) ;   }   cout   < <   res   < <   endl   ;   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   }   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   / * *   *   _ ooOoo _   *   o8888888o   *   88 \"   .   \" 88   *   ( |   -_-   | )   *   O \\   =   / O   *   ____ / ` --- ' \\ ____   *   . '   \\ \\ |   | / /   ` .   *   /   \\ \\ | | |   :   | | | / /   \\   *   /   _ | | | | |   - : -   | | | | | -   \\   *   |   |   \\ \\ \\   -   / / /   |   |   *   |   \\ _ |   ' ' \\ --- / ' '   |   |   *   \\   .- \\ __   ` - `   ___ / -.   /   *   ___ ` .   . '   / --.-- \\   ` .   .   __   *   . \" \"   ' <   ` .___ \\ _ < | > _ / ___. '   > ' \" \" .   *   |   |   :   ` -   \\ ` . ; ` \\   _   / ` ; . ` /   -   `   :   |   |   *   \\   \\   ` -.   \\ _   __ \\   / __   _ /   .- `   /   /   *   = = = = = = ` -.____ ` -.___ \\ _____ / ___.- ` ____.- ' = = = = = =   *   ` = --- = '   *   ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^   *   \u4f5b\u7956 \u4fdd\u4f51   \u6c38\u65e0 BUG   *   \u4f5b \u66f0 :   *   \u5199\u5b57 \u5199\u5b57\u697c \u91cc \u5199\u5b57 \u5199\u5b57\u95f4 \uff0c \u5199\u5b57 \u5199\u5b57\u95f4 \u91cc \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1b   *   \u7a0b\u5e8f \u4eba\u5458 \u5199 \u7a0b\u5e8f \uff0c \u53c8 \u62ff \u7a0b\u5e8f \u6362 \u9152\u94b1 \u3002   *   \u9152\u9192 \u53ea \u5728 \u7f51\u4e0a \u5750 \uff0c \u9152\u9189 \u8fd8\u6765 \u7f51\u4e0b \u7f51\u4e0b\u7720 \uff1b   *   \u9152\u9189 \u9152\u9192 \u65e5\u590d \u65e5 \uff0c \u7f51\u4e0a \u4e0a\u7f51 \u7f51\u4e0a\u7f51 \u4e0b\u5e74 \u590d\u5e74 \u3002   *   \u4f46\u613f \u8001\u6b7b \u7535\u8111 \u95f4 \uff0c \u4e0d\u613f \u97a0\u8eac \u8001\u677f \u524d \uff1b   *   \u5954\u9a70 \u5b9d\u9a6c \u8d35\u8005\u8da3 \uff0c \u516c\u4ea4 \u81ea\u884c \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \u3002   *   \u522b\u4eba \u7b11 \u6211 \u5fd2 \u75af\u766b \uff0c \u6211 \u7b11 \u81ea\u5df1 \u547d\u592a\u8d31 \uff1b   *   \u4e0d\u89c1 \u6ee1\u8857 \u6f02\u4eae \u59b9 \uff0c \u54ea\u4e2a \u5f52\u5f97 \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1f   * /   int   main   ( )   {   / /   oier   cf   solve ( ) ;   return   0 ;   oier   solve   ( ) ;   return   0   ;   }","title":"D - \u83b2\u5b50 \u7684 \u7269\u7406 \u70ed\u529b\u5b66"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/D-%E8%8E%B2%E5%AD%90%E7%9A%84%E7%89%A9%E7%90%86%E7%83%AD%E5%8A%9B%E5%AD%A6/#d-","text":"","title":"D - \u83b2\u5b50 \u7684 \u7269\u7406 \u70ed\u529b\u5b66"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/D-%E8%8E%B2%E5%AD%90%E7%9A%84%E7%89%A9%E7%90%86%E7%83%AD%E5%8A%9B%E5%AD%A6/#_1","text":"\u83b2\u5b50 \u6b63\u5728 \u7814\u7a76 \u5206\u5b50 \u7684 \u8fd0\u52a8 \u3002   \u6bcf\u4e2a \u5206\u5b50 \u90fd \u6709 \u4e00\u4e2a \u901f\u5ea6 \uff0c \u7ea6\u5b9a \u6b63 \u65b9\u5411 \u4e3a \u6b63 \uff0c \u8d1f \u65b9\u5411 \u4e3a \u8d1f \u3002 \u5206\u5b50 \u7684 \u6570\u91cf \u6781 \u591a \uff0c \u901f\u5ea6 \u53c8 \u5e76 \u4e0d \u4e00\u81f4 \uff0c \u770b\u4e0a \u4e0a\u53bb \u770b\u4e0a\u53bb \u6742\u4e71 \u6742\u4e71\u65e0\u7ae0 \u3002 \u4e8e\u662f \u83b2\u5b50 \u5e0c\u671b \u8c03\u6574 \u90e8\u5206 \u5206\u5b50 \u7684 \u901f\u5ea6 \uff0c \u4f7f\u5f97 \u6700\u7ec8 \u5206\u5b50 \u4eec \u770b\u4e0a \u4e0a\u53bb \u770b\u4e0a\u53bb \u6574\u9f50 \u3002","title":"\u9898\u76ee \u80cc\u666f"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/D-%E8%8E%B2%E5%AD%90%E7%9A%84%E7%89%A9%E7%90%86%E7%83%AD%E5%8A%9B%E5%AD%A6/#_2","text":"\u83b2\u5b50 \u7ed9\u5b9a \u4e86   \\ ( n \\ )   \u4e2a \u6574\u6570   \\ ( a _ 1 , a _ 2 , \\ cdots   a _ n \\ )   \uff0c \u63cf\u8ff0 \u6bcf\u4e2a \u5206\u5b50 \u3002 \u73b0\u5728 \u5979 \u53ef\u4ee5 \u8fdb\u884c   \u81f3\u591a   \\ ( m \\ )   \u6b21 \u64cd\u4f5c \uff08 \u4e5f \u53ef\u4ee5 \u4e00\u6b21 \u4e5f \u4e0d \u8fdb\u884c \uff09 \uff0c \u6bcf\u6b21 \u64cd\u4f5c \u53ef\u4ee5 \u6267\u884c \u4ee5\u4e0b \u4e24\u6761 \u4e4b\u4e00 \uff1a   \u9009\u62e9   \\ ( i \\ )   \uff0c \u6ee1\u8db3   \\ ( a _ i = \\ min _ j \\ { a _ j \\ } \\ )   \uff0c \u7136\u540e \u5c06   \\ ( a _ i \\ )   \u53d8\u4e3a   \\ ( \\ max _ j \\ { a _ j \\ } \\ )   \u3002   \u9009\u62e9   \\ ( i \\ )   \uff0c \u6ee1\u8db3   \\ ( a _ i = \\ max _ j \\ { a _ j \\ } \\ )   \uff0c \u7136\u540e \u5c06   \\ ( a _ i \\ )   \u53d8\u4e3a   \\ ( \\ min _ j \\ { a _ j \\ } \\ )   \u3002   \u73b0\u5728 \u83b2\u5b50 \u5e0c\u671b \u9700\u8981 \u6700\u5c0f \u6700\u5c0f\u5316 \u6700\u7ec8 \u5e8f\u5217 \u7684 \u6781\u5dee \uff08 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u51cf\u53bb \u6700\u5c0f \u6700\u5c0f\u503c \u7684 \u5dee \uff09 \u3002 \u8bf7\u6c42 \u51fa \u6700\u5c0f \u7684 \u6781\u5dee \u3002   \u4f8b\u5982 \uff0c \u5bf9\u4e8e \u5e8f\u5217   \\ ( a = \\ { 5 , 1 , 4 \\ } \\ )   \uff0c \u53ef\u4ee5 \u8fdb\u884c \u5982\u4e0b \u51e0\u6b21 \u64cd\u4f5c \uff1a   \u9009\u62e9   \\ ( i = 1 \\ )   \uff0c \u6ee1\u8db3   \\ ( a _ 1 = 5 \\ )   \u662f \u5f53\u524d \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c   \\ ( 5 \\ )   \uff0c \u53ef\u4ee5 \u5c06   \\ ( a _ 1 \\ )   \u4fee\u6539 \u6210 \u5f53\u524d \u7684 \u6700\u5c0f \u6700\u5c0f\u503c   \\ ( 1 \\ )   \uff0c \u6b64\u65f6 \u5e8f\u5217 \u53d8\u6210   \\ ( \\ { 1 , 1 , 4 \\ } \\ )   \uff1b   \u518d\u9009   \\ ( i = 2 \\ )   \uff0c \u6ee1\u8db3   \\ ( a _ 2 = 1 \\ )   \u662f \u5f53\u524d \u7684 \u6700\u5c0f \u6700\u5c0f\u503c   \\ ( 1 \\ )   \uff0c \u53ef\u4ee5 \u5c06   \\ ( a _ 2 \\ )   \u4fee\u6539 \u6210 \u5f53\u524d \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c   \\ ( 4 \\ )   \uff0c \u6b64\u65f6 \u5e8f\u5217 \u53d8\u6210   \\ ( \\ { 1 , 4 , 4 \\ } \\ )   \u3002   \u8fd9 \u4e24\u6b21 \u64cd\u4f5c \u540e \u5f97\u5230 \u7684 \u5e8f\u5217 \u4e3a   \\ ( \\ { 1 , 4 , 4 \\ } \\ )   \u3002 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u51cf\u53bb \u6700\u5c0f \u6700\u5c0f\u503c \u7684 \u5dee\u4e3a   \\ ( | 4 - 1 | = 3 \\ )   \u3002   \u5f53\u7136 \uff0c \u8fd9\u79cd \u64cd\u4f5c \u65b9\u5f0f \u5f97\u5230 \u7684 \u6781\u5dee \u5e76\u975e \u6700\u5c0f \u3002 \u6700\u4f18 \u7b56\u7565 \u662f \uff0c \u5148 \u5c06 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c   \\ ( a _ 1 = 5 \\ )   \u53d8\u6210 \u76ee\u524d \u7684 \u6700\u5c0f \u6700\u5c0f\u503c   \\ ( 1 \\ )   \uff0c \u518d \u628a \u6b64\u65f6 \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c   \\ ( a _ 3 = 4 \\ )   \u53d8\u6210 \u76ee\u524d \u7684 \u6700\u5c0f \u6700\u5c0f\u503c   \\ ( 1 \\ )   \u3002 \u6b64\u65f6 \u5e8f\u5217 \u4e3a   \\ ( \\ { 1 , 1 , 1 \\ } \\ )   \uff0c \u5f97\u5230 \u7684 \u6781\u5dee   \\ ( | 1 - 1 | = 0 \\ )   \u662f \u6240\u6709 \u7b56\u7565 \u4e2d \u6700\u5c0f \u7684 \u3002","title":"\u9898\u76ee \u63cf\u8ff0"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/D-%E8%8E%B2%E5%AD%90%E7%9A%84%E7%89%A9%E7%90%86%E7%83%AD%E5%8A%9B%E5%AD%A6/#_3","text":"\u7b2c\u4e00 \u4e00\u884c \u7b2c\u4e00\u884c \u6709 \u4e24\u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( n , m \\ )   \uff0c \u5206\u522b \u8868\u793a \u5e8f\u5217 \u7684 \u957f\u5ea6 \u548c \u4f60 \u6700 \u591a \u53ef\u4ee5 \u8fdb\u884c \u7684 \u64cd\u4f5c \u6b21\u6570 \u3002   \u7b2c\u4e8c \u4e8c\u884c \u7b2c\u4e8c\u884c \u6709   \\ ( n \\ )   \u4e2a \u6574\u6570   \\ ( a \\ )   \uff0c \u63cf\u8ff0 \u7ed9\u5b9a \u7684 \u5e8f\u5217 \u3002","title":"\u8f93\u5165 \u683c\u5f0f"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/D-%E8%8E%B2%E5%AD%90%E7%9A%84%E7%89%A9%E7%90%86%E7%83%AD%E5%8A%9B%E5%AD%A6/#_4","text":"\u8f93\u51fa \u5171 \u4e00\u884c \u4e00\u4e2a \u6574\u6570 \uff0c \u8868\u793a \u6700\u4f18 \u7b56\u7565 \u4e0b\u80fd \u5f97\u5230 \u7684 \u6700\u5c0f \u6781\u5dee \u3002","title":"\u8f93\u51fa \u683c\u5f0f"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/D-%E8%8E%B2%E5%AD%90%E7%9A%84%E7%89%A9%E7%90%86%E7%83%AD%E5%8A%9B%E5%AD%A6/#1","text":"","title":"\u6837\u4f8b   # 1"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/D-%E8%8E%B2%E5%AD%90%E7%9A%84%E7%89%A9%E7%90%86%E7%83%AD%E5%8A%9B%E5%AD%A6/#1_1","text":"3   2   5   1   4","title":"\u6837\u4f8b \u8f93\u5165   # 1"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/D-%E8%8E%B2%E5%AD%90%E7%9A%84%E7%89%A9%E7%90%86%E7%83%AD%E5%8A%9B%E5%AD%A6/#1_2","text":"0","title":"\u6837\u4f8b \u8f93\u51fa   # 1"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/D-%E8%8E%B2%E5%AD%90%E7%9A%84%E7%89%A9%E7%90%86%E7%83%AD%E5%8A%9B%E5%AD%A6/#2","text":"","title":"\u6837\u4f8b   # 2"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/D-%E8%8E%B2%E5%AD%90%E7%9A%84%E7%89%A9%E7%90%86%E7%83%AD%E5%8A%9B%E5%AD%A6/#2_1","text":"8   0   1   2   3   4   5   6   7   8","title":"\u6837\u4f8b \u8f93\u5165   # 2"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/D-%E8%8E%B2%E5%AD%90%E7%9A%84%E7%89%A9%E7%90%86%E7%83%AD%E5%8A%9B%E5%AD%A6/#2_2","text":"7","title":"\u6837\u4f8b \u8f93\u51fa   # 2"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/D-%E8%8E%B2%E5%AD%90%E7%9A%84%E7%89%A9%E7%90%86%E7%83%AD%E5%8A%9B%E5%AD%A6/#3","text":"","title":"\u6837\u4f8b   # 3"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/D-%E8%8E%B2%E5%AD%90%E7%9A%84%E7%89%A9%E7%90%86%E7%83%AD%E5%8A%9B%E5%AD%A6/#3_1","text":"8   3   1   5   5   5   6   6   9   10","title":"\u6837\u4f8b \u8f93\u5165   # 3"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/D-%E8%8E%B2%E5%AD%90%E7%9A%84%E7%89%A9%E7%90%86%E7%83%AD%E5%8A%9B%E5%AD%A6/#3_2","text":"4","title":"\u6837\u4f8b \u8f93\u51fa   # 3"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/D-%E8%8E%B2%E5%AD%90%E7%9A%84%E7%89%A9%E7%90%86%E7%83%AD%E5%8A%9B%E5%AD%A6/#_5","text":"","title":"\u63d0\u793a"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/D-%E8%8E%B2%E5%AD%90%E7%9A%84%E7%89%A9%E7%90%86%E7%83%AD%E5%8A%9B%E5%AD%A6/#_6","text":"\u6837\u4f8b   \\ ( 1 \\ )   \uff1a   \\ ( \\ { 5 , 1 , 4 \\ } \\ to \\ { 1 , 1 , 4 \\ } \\ to \\ { 1 , 1 , 1 \\ } \\ )   \uff0c \u6781\u5dee \u4e3a   \\ ( 0 \\ )   \u3002   \u6837\u4f8b   \\ ( 2 \\ )   \uff1a   \\ ( \\ { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 \\ } \\ )   \uff0c \u4ec0\u4e48 \u4e5f \u4e0d\u4e86 \u505a\u4e0d\u4e86 \uff0c \u6781\u5dee \u4e3a   \\ ( 7 \\ )   \u3002   \u6837\u4f8b   \\ ( 3 \\ )   \uff1a   \\ ( \\ { 1 , 5 , 5 , 5 , 6 , 6 , 9 , 10 \\ } \\ to \\ { 10 , 5 , 5 , 5 , 6 , 6 , 9 , 10 \\ } \\ to \\ { 5 , 5 , 5 , 5 , 6 , 6 , 9 , 10 \\ } \\ to \\ { 5 , 5 , 5 , 5 , 6 , 6 , 9 , 5 \\ } \\ )   \uff0c \u6781\u5dee \u4e3a   \\ ( 4 \\ )   \u3002","title":"\u6837\u4f8b \u89e3\u91ca"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/D-%E8%8E%B2%E5%AD%90%E7%9A%84%E7%89%A9%E7%90%86%E7%83%AD%E5%8A%9B%E5%AD%A6/#_7","text":"\u5bf9\u4e8e \u5168\u90e8 \u6570\u636e \uff0c \u4fdd\u8bc1   \\ ( 1 \\ le   n   \\ le   10 ^ 5 \\ )   \uff0c   \\ ( 0 \\ le   m \\ le10 ^ 9 \\ )   \uff0c   \\ ( | a _ i | \\ le   10 ^ 9 \\ )   \u3002","title":"\u6570\u636e \u8303\u56f4 \u53ca \u7ea6\u5b9a"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/D-%E8%8E%B2%E5%AD%90%E7%9A%84%E7%89%A9%E7%90%86%E7%83%AD%E5%8A%9B%E5%AD%A6/#_8","text":"\u5047\u8bbe \u8fdb\u884c \u4e86   \\ ( m \\ )   \u6b21 \u64cd\u4f5c \u4e4b\u540e \u7684 \u6700\u4f18 \u503c\u57df \u4e3a \uff1a   \\ ( [ l ,   r ] \\ )   \uff0c \u5219 \u5728 \u539f\u6765   \\ ( a \\ )   \u6570\u7ec4 \u5185 \u6240\u6709 \u4e25\u683c \u5c0f\u4e8e   \\ ( l \\ )   \uff0c \u6240\u6709 \u4e25\u683c \u5927\u4e8e   \\ ( r \\ )   \u7684 \u6570 \u90fd \u88ab \u64cd\u4f5c \u4e86 \u3002   \u5047\u8bbe \u6240\u6709 \u4e25\u683c \u5c0f\u4e8e   \\ ( l \\ )   \u7684 \u4e2a\u6570 \u4e3a   \\ ( u \\ )   \uff0c \u6240\u6709 \u4e25\u683c \u5927\u4e8e   \\ ( r \\ )   \u7684 \u4e2a\u6570 \u4e3a   \\ ( v \\ )   \uff0c \u4e3a\u4e86 \u7814\u7a76 \u65b9\u4fbf \uff0c \u6211\u4eec \u5148 \u5c06 \u539f \u6570\u7ec4   \\ ( a \\ )   \u4ece\u5c0f \u4ece\u5c0f\u5230\u5927 \u7684 \u987a\u5e8f \u6392\u5217 \u987a\u5e8f\u6392\u5217 \uff0c \u90a3\u4e48 \u4e25\u683c \u5c0f\u4e8e   \\ ( l \\ )   \u7684 \u6570\u636e \u662f \u6392\u5e8f \u540e \u7684 \u6570\u7ec4 \u5de6\u8fb9 \u524d   \\ ( 1   \\ sim   u \\ )   \u4e2a\u6570 \uff0c \u4e25\u683c \u5927\u4e8e   \\ ( r \\ )   \u7684 \u6570\u636e \u662f \u6392\u5e8f \u540e \u7684 \u6570\u7ec4 \u53f3\u8fb9 \u524d   \\ ( 1   \\ sim   v \\ )   \u4e2a\u6570 \u3002   \u6211\u4eec \u5148 \u628a \u5de6\u8fb9 \u524d   \\ ( 1   \\ sim   u \\ )   \u4e2a\u6570 \u90fd \u8f6c\u6210 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u653e\u5230 \u53f3\u8fb9 \uff0c \u5219 \u73b0\u5728 \u6bd4   \\ ( l \\ )   \u4e25\u683c \u5c0f \u7684 \u6570\u4e3a   0   \u4e2a \uff0c \u6bd4   \\ ( r \\ )   \u4e25\u683c \u5927 \u7684 \u6570\u6709   \\ ( u   +   v \\ )   \u4e2a \uff0c \u63a5\u7740 \u5c06   \\ ( u   +   v \\ )   \u4e2a\u6570 \u5168\u90e8 \u8f6c \u6210 \u6700\u5c0f \u6700\u5c0f\u503c \u653e\u5230 \u6700 \u5de6\u8fb9 \uff0c \u5219   \u6bd4   \\ ( l \\ )   \u5c0f \u7684 \u6570 \u548c \u6bd4   \\ ( r \\ )   \u5927 \u7684 \u6570 \u5168\u90e8 \u4e3a   0   \u4e2a \uff0c \u8fd9\u91cc \u64cd\u4f5c \u4e86 \uff1a   \\ ( u   +   u   +   v \\ )   \u6b21   \u5982\u679c \u4e00 \u5f00\u59cb \u6211 \u662f \u5148 \u5c06 \u53f3\u8fb9 \u524d   \\ ( 1   \\ sim   v \\ )   \u4e2a\u6570 \u653e\u5230 \u6700 \u5de6\u8fb9 \uff0c \u6309\u7167 \u4e0a\u9762 \u7684 \u903b\u8f91 \u518d \u653e\u5230 \u6700 \u53f3\u8fb9 \uff0c \u8fd9\u91cc \u64cd\u4f5c \u4e86 \uff1a   \\ ( v   +   u   +   v \\ )   \u6b21   \u4e24\u79cd \u64cd\u4f5c \u90fd \u80fd \u8fbe\u5230 \u76ee\u7684 \uff0c \u6211\u4eec \u8981 \u9009\u62e9 \u64cd\u4f5c \u4f5c\u6570 \u64cd\u4f5c\u6570 \u6700\u5c0f \u7684 \uff1a   \\ ( u   +   v   +   min ( u ,   v ) \\ )   \u6211\u4eec \u8981 \u5982\u4f55 \u786e\u5b9a \u51fa   \\ ( l \\ )   \u5462 \uff1f   \u53ea\u80fd \u4ece \u5de6\u8fb9 \u4e00\u4e2a \u4e00\u4e2a \u904d\u5386 \uff0c \u4e0d\u65ad \u7684 \u5047\u5b9a \u5f53\u524d \u7684 \u8282\u70b9 \u5c31\u662f   \\ ( l \\ )   \u3002   \u5982\u679c   \\ ( l \\ )   \u56fa\u5b9a \u4e3a \u67d0\u4e2a \u503c \uff0c   \\ ( r \\ )   \u600e\u4e48 \u6c42 \uff1f \u5047\u8bbe   \\ ( l   -   1   \\ leq   n   -   r \\ )   \uff0c \u5219   \\ ( u   +   v   +   min ( u ,   v )   \\ leq   m \\ )   \u5c31 \u53ef\u4ee5 \u53d8\u6210 \uff1a   \\ ( l   -   1   +   n   -   r   +   l   -   1   =   n   +   2l   -   2   -   r   \\ leq   m \\ )   \uff0c \u5219   \\ ( r   \\ geq   n   +   2l   -   2   -   m \\ )   \u8fd8 \u5f97 \u6ee1\u8db3 \u5047\u8bbe \u6761\u4ef6 \uff1a   \\ ( l   -   1   \\ leq   n   -   r \\ )   \u6240\u4ee5 :   \\ ( n   +   2l   -   2   -   m   \\ leq   r   \\ leq   n   -   l   +   1 \\ )   \uff0c \u6b64\u65f6   \\ ( 3l   -   3   \\ leq   m \\ )   \u5982\u679c   \\ ( l \\ )   \u56fa\u5b9a \u4e3a \u67d0\u4e2a \u503c \uff0c \u5e76 \u5047\u8bbe   \\ ( l   -   1   \\ geq   n   -   r \\ )   \uff0c \u5219   \\ ( u   +   v   +   min ( u ,   v )   \\ leq   m \\ )   \u5c31 \u53ef\u4ee5 \u53d8\u6210 \uff1a   \\ ( l   -   1   +   n   -   r   +   n   -   r   =   2n   -   2l   +   l   -   1   \\ leq   m \\ )   \u8fd8\u8981 \u6ee1\u8db3 \u5047\u8bbe \u6761\u4ef6 \uff1a   \\ ( l   -   1   \\ geq   n   -   r \\ )   \uff0c \u6240\u4ee5 \u6709 \uff1a   \\ ( 2r   \\ geq   \\ max ( 2n   -   m   +   l   -   1 ,   2n   -   2l   +   2 ) \\ )   \u7531\u4e8e \u4e0a\u8ff0 \u4e24\u79cd \u5047\u8bbe \u76f8\u4e92 \u5bf9\u7acb \uff0c \u4e0d\u662f \u5047\u8bbe \u4e00 \u6210\u7acb \uff0c \u5c31\u662f \u5047\u8bbe \u4e8c \u6210\u7acb \uff0c \u6240\u4ee5 \u6211\u4eec \u53ef\u4ee5 \u901a\u8fc7   \\ ( 3l   -   3   \\ leq   m \\ )   \u662f\u5426 \u6210\u7acb \u6765 \u9009\u53d6 \u90a3\u79cd \u5bf9\u5e94 \u7684 \u5047\u8bbe \uff0c \u5982\u679c \u6210\u7acb \uff0c \u9009\u53d6   \\ ( n   +   2l   -   2   -   m   \\ leq   r \\ )   \uff1b \u5426\u5219 \u9009\u53d6   \\ ( 2r   \\ geq   \\ max ( 2n   -   m   +   l   -   1 ,   2n   -   2l   +   2 ) \\ )   \uff0c \u8fd9\u91cc \u7684   \\ ( r \\ )   \u8981 \u5411\u4e0a \u53d6\u6574 \uff0c \u5411\u4e0a \u53d6\u6574 \u7167\u6837 \u6ee1\u8db3   \\ ( l   -   1   \\ geq   n   -   r \\ )   \u8fd9\u4e2a \u6761\u4ef6 \u3002   \u5f53\u7136   \\ ( l \\ )   \u6700 \u591a \u53ea\u80fd \u53bb \u5230   \\ ( m   +   1 \\ )   \uff0c   \\ ( r \\ )   \u6700\u5927 \u4e5f \u53ea\u80fd \u662f   \\ ( n \\ )   \u4e0d\u80fd \u8d8a\u754c \uff01   \u82e5   \\ ( 3l   -   3   \\ leq   m \\ )   \uff0c \u5219   \\ ( n   +   2l   -   2   -   m   \\ leq   n \\ )   \uff1b \u5426\u5219   \\ ( 2n   -   m   +   l   -   1   \\ leq   2n \uff0c 2n   -   2l   +   2   \\ leq   2n \\ )   \uff0c \u82e5   \\ ( r \\ )   \u53d6\u503c   \u5404\u81ea \u8303\u56f4 \u7684 \u6700\u5c0f \uff0c \u90fd \u80fd \u4fdd\u8bc1   \\ ( r   \\ leq   n \\ )   \uff0c \u8bf7 \u653e\u5fc3 \u4f7f\u7528 \u653e\u5fc3\u4f7f\u7528 \u3002   \u7279\u5224 \uff1a   \u5982\u679c   \\ ( m   \\ geq   n   -   1 \\ )   \u5219 \u628a \u6570\u7ec4   \\ ( a \\ )   \u5168\u90e8 \u53d8\u6210 \u76f8\u540c \u7684 \u503c \uff0c \u6781\u5dee \u4e3a   0   \uff0c \u6b64\u65f6 \u6700\u5c0f \u3002   \u5982\u679c   \\ ( m   =   0 \\ )   \uff0c \u5219 \u6781\u5dee \u4e3a   \\ ( \\ max \\ { b \\ }   -   \\ min \\ { a \\ } \\ )   \u3002   \u4ee3\u7801 \u53c2\u8003   # include   < iostream >   # include   < iomanip >   # include   < algorithm >   # include   < cstdio >   # include   < cstdlib >   # include   < cstring >   # include   < string >   # include   < vector >   # include   < queue >   # include   < deque >   # include   < stack >   # include   < map >   # include   < set >   # include   < unordered _ map >   # include   < unordered _ set >   using   namespace   std   ;   # define   endl   ' \\ n '   # define   pique   priority _ queue   # define   oier   \\   ios _ base : : sync _ with _ stdio ( false ) ; \\   cin . tie ( nullptr ) ;   cout . tie ( nullptr ) ;   # define   cf   int   t ;   cin   > >   t ;   while   ( t   -- )   # define   upfor ( i ,   l ,   r )   for   ( i   =   ( l ) ;   i   < =   ( r ) ;   i   ++ )   # define   downfor ( i ,   l ,   r )   for   ( i   =   ( r ) ;   i   > =   ( l ) ;   i   -- )   / /   # define   int   long   long   typedef   long   long   LL   ;   typedef   long   double   LD   ;   / / typedef   __ int128 _ t   int128 ;   const   int   inf   =   ~   (   1   < <   31   ) ;   / /   \u6b63 \u65e0\u7a77   const   int   ninf   =   (   1   < <   31   ) ;   / /   \u8d1f \u65e0\u7a77   const   LL   infll   =   ~   (   1l   l   < <   63   ) ;   / /   \u6b63 \u65e0\u7a77   const   LL   ninfll   =   (   1l   l   < <   63   ) ;   / /   \u8d1f \u65e0\u7a77   const   int   N   =   int   (   1e7   +   10   ) ;   inline   LL   rll   ( )   {   oier   LL   x   ;   cin   > >   x   ;   return   x   ;   }   inline   int   rint   ( )   {   oier   int   x   ;   cin   > >   x   ;   return   x   ;   }   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   int   n   ,   m   ;   int   q   [   N   ] ;   void   qsort   (   int   l   ,   int   r   )   {   if   (   l   > =   r   )   return   ;   int   x   =   q   [ (   l   +   r   )   /   2   ] ;   int   i   =   l   -   1   ,   j   =   r   +   1   ;   while   (   i   <   j   )   {   while   (   q   [   ++   i   ]   <   x   ) ;   while   (   x   <   q   [   --   j   ] ) ;   if   (   i   <   j   )   swap   (   q   [   i   ] ,   q   [   j   ] ) ;   }   qsort   (   l   ,   j   ) ;   qsort   (   j   +   1   ,   r   ) ;   }   void   solve   ( )   {   oier   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   n   =   rint   ( ) ;   m   =   rint   ( ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   q   [   i   ]   =   rint   ( ) ;   if   (   m   > =   n   -   1   )   {   cout   < <   0   < <   endl   ;   return   ;   }   int   res   =   inf   ;   qsort   (   1   ,   n   ) ;   if   (   m   = =   0   )   {   cout   < <   q   [   n   ]   -   q   [   1   ]   < <   endl   ;   return   ;   }   for   (   int   l   =   1   ,   r   ;   l   < =   m   +   1   ;   l   ++   )   {   if   (   3   *   l   -   3   < =   m   )   r   =   n   +   2   *   l   -   2   -   m   ;   else   r   =   max   (   2   *   n   -   m   +   l   -   1   ,   2   *   n   -   2   *   l   +   2   )   /   2.0   +   0.5   ;   res   =   min   (   res   ,   q   [   r   ]   -   q   [   l   ] ) ;   }   cout   < <   res   < <   endl   ;   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   }   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   / * *   *   _ ooOoo _   *   o8888888o   *   88 \"   .   \" 88   *   ( |   -_-   | )   *   O \\   =   / O   *   ____ / ` --- ' \\ ____   *   . '   \\ \\ |   | / /   ` .   *   /   \\ \\ | | |   :   | | | / /   \\   *   /   _ | | | | |   - : -   | | | | | -   \\   *   |   |   \\ \\ \\   -   / / /   |   |   *   |   \\ _ |   ' ' \\ --- / ' '   |   |   *   \\   .- \\ __   ` - `   ___ / -.   /   *   ___ ` .   . '   / --.-- \\   ` .   .   __   *   . \" \"   ' <   ` .___ \\ _ < | > _ / ___. '   > ' \" \" .   *   |   |   :   ` -   \\ ` . ; ` \\   _   / ` ; . ` /   -   `   :   |   |   *   \\   \\   ` -.   \\ _   __ \\   / __   _ /   .- `   /   /   *   = = = = = = ` -.____ ` -.___ \\ _____ / ___.- ` ____.- ' = = = = = =   *   ` = --- = '   *   ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^   *   \u4f5b\u7956 \u4fdd\u4f51   \u6c38\u65e0 BUG   *   \u4f5b \u66f0 :   *   \u5199\u5b57 \u5199\u5b57\u697c \u91cc \u5199\u5b57 \u5199\u5b57\u95f4 \uff0c \u5199\u5b57 \u5199\u5b57\u95f4 \u91cc \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1b   *   \u7a0b\u5e8f \u4eba\u5458 \u5199 \u7a0b\u5e8f \uff0c \u53c8 \u62ff \u7a0b\u5e8f \u6362 \u9152\u94b1 \u3002   *   \u9152\u9192 \u53ea \u5728 \u7f51\u4e0a \u5750 \uff0c \u9152\u9189 \u8fd8\u6765 \u7f51\u4e0b \u7f51\u4e0b\u7720 \uff1b   *   \u9152\u9189 \u9152\u9192 \u65e5\u590d \u65e5 \uff0c \u7f51\u4e0a \u4e0a\u7f51 \u7f51\u4e0a\u7f51 \u4e0b\u5e74 \u590d\u5e74 \u3002   *   \u4f46\u613f \u8001\u6b7b \u7535\u8111 \u95f4 \uff0c \u4e0d\u613f \u97a0\u8eac \u8001\u677f \u524d \uff1b   *   \u5954\u9a70 \u5b9d\u9a6c \u8d35\u8005\u8da3 \uff0c \u516c\u4ea4 \u81ea\u884c \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \u3002   *   \u522b\u4eba \u7b11 \u6211 \u5fd2 \u75af\u766b \uff0c \u6211 \u7b11 \u81ea\u5df1 \u547d\u592a\u8d31 \uff1b   *   \u4e0d\u89c1 \u6ee1\u8857 \u6f02\u4eae \u59b9 \uff0c \u54ea\u4e2a \u5f52\u5f97 \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1f   * /   int   main   ( )   {   / /   oier   cf   solve ( ) ;   return   0 ;   oier   solve   ( ) ;   return   0   ;   }","title":"\u601d\u8def \uff1a \u8d2a\u5fc3"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0/","text":"\u5269\u4e0b \u7684 \u6570   \u9898\u76ee \u5927\u610f   \u6709   \\ ( t \\ )   \u4e2a \u6d4b\u8bd5 \u3002   \u7ed9\u5b9a \u4e00\u4e2a \u8303\u56f4   \\ ( [ l ,   r ] \\ )   \uff0c \u7136\u540e \u518d \u7ed9\u5b9a \u4e00\u4e2a   \\ ( m \\ )   \u4ee3\u8868 \u8981 \u8be2\u95ee   \\ ( m \\ )   \u6b21 \u3002   \u5bf9\u4e8e \u6bcf \u4e00\u6b21 \u8be2\u95ee \uff0c \u90fd \u4f1a \u8f93\u5165 \u4e00\u4e2a \u6570   \\ ( x \\ )   \uff0c \u5c06 \u8303\u56f4   \\ ( [ l ,   r ] \\ )   \u7684 \u6574\u6570 \u770b\u6210 \u662f \u4e00\u4e2a \u73af \uff0c \u5bfb\u627e \u8be5\u73af \u7684 \u67d0 \u8fde\u7eed \u7247\u6bb5 \uff0c \u4f7f\u5f97 \u8be5 \u7247\u6bb5 \u7684 \u548c \u6070\u597d \u662f   \\ ( x \\ )   \u7684 \u500d\u6570 \uff0c \u7136\u540e \u6211\u4eec \u8981 \u5220\u6389 \u8be5 \u7247\u6bb5 \uff0c \u5269\u4e0b \u7684 \u6570 \u8fd8\u662f \u8981 \u6309 \u987a\u5e8f \u8fde\u6210 \u65b0 \u7684 \u73af \uff0c \u5982\u679c \u8be5\u73af \u8fd8 \u80fd \u627e\u5230 \u548c \u4e3a   \\ ( x \\ )   \u7684 \u500d\u6570 \u7684 \u8fde\u7eed \u7247\u6bb5 \uff0c \u5c31 \u7ee7\u7eed \u5220\u9664 \u3001 \u62fc\u63a5 \u6210\u65b0\u73af \uff0c \u76f4\u5230 \u65e0\u6cd5 \u7ee7\u7eed \u64cd\u4f5c \u4e3a\u6b62 \u3002   \u95ee \u64cd\u4f5c \u505c\u6b62 \u4e4b\u540e \uff0c \u8be5\u73af \u6700\u5c11 \u8fd8\u4f1a \u5269\u4e0b \u591a\u5c11 \u4e2a \u5143\u7d20 \uff1f   \u6ce8\u610f \uff1a   \\ ( 0 < x \u2264 ( r \u2212 l + 1 ) \\ )   \u601d\u8def   \u5c06   \\ ( [ l ,   r ] \\ )   \u8303\u56f4 \u5185 \u7684 \u6570 \u8fdb\u884c \u6c42\u548c \u5f97\u51fa   \\ ( sum \\ )   \uff0c \u7531\u4e8e   \\ ( 0 < x \u2264 ( r \u2212 l + 1 ) \\ )   \uff0c \u6240\u4ee5   \\ ( x \\ )   \u7684 \u500d\u6570 \u4e00\u5b9a \u4f1a \u51fa\u73b0   \\ ( [ l ,   r ] \\ )   \u91cc\u9762 \uff0c \u82e5 \u5bf9 \u6570\u7ec4   \\ ( [ l ,   r ] \\ )   \u6a21\u4e8e   \\ ( x \\ )   \u5f97\u5230 \u4e00\u4e2a \u65b0 \u7684 \u6570\u7ec4   \\ ( q \\ )   \uff0c \u5219 \u6570\u7ec4   \\ ( q \\ )   \u4e00\u5b9a \u542b\u6709 \u5143\u7d20   \\ ( 0   \\ sim   x   -   1 \\ )   \u3002   \u6211\u4eec \u4ee4 \uff1a   \\ ( ans   =   sum   \\ bmod   x \\ )   \uff0c \u5982\u679c   \\ ( ans   =   0 \\ )   \uff0c \u8bf4\u660e \u6574\u4e2a \u8303\u56f4 \u7684 \u548c \u80fd \u88ab   \\ ( x \\ )   \u6574\u9664 \uff0c \u6240\u4ee5 \u8be5\u73af \u6700\u7ec8 \u4f1a \u5269\u4e0b   \\ ( 0 \\ )   \u4e2a \u5143\u7d20 \uff1b   \u82e5   \\ ( ans   \\ neq   0 \\ )   \uff0c \u6211\u4eec \u53ea \u9700\u8981 \u5728 \u6570\u7ec4   \\ ( q \\ )   \u4e2d \u5254\u9664   \\ ( ans   \\ neq   0 \\ )   \uff0c \u90a3\u4e48 \u5269\u4e0b \u5143\u7d20 \u7684 \u548c \uff08 \u5728 \u73af\u5185 \u4e5f \u7167\u6837 \u8fde\u7eed \uff09 \u4e5f \u4e00\u5b9a \u53ef\u4ee5 \u88ab   \\ ( x \\ )   \u6574\u9664 \uff0c \u6240\u4ee5 \u6700\u7ec8 \u6700\u5c11 \u53ea\u4f1a \u5269\u4e0b \u4e00\u4e2a \u5143\u7d20 \u3002   \u4ee3\u7801 \u53c2\u8003   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80   81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96   97   98   99   100   101   102   103   # include   < iostream >   # include   < iomanip >   # include   < algorithm >   # include   < cstdio >   # include   < cstdlib >   # include   < cstring >   # include   < string >   # include   < vector >   # include   < queue >   # include   < deque >   # include   < stack >   # include   < map >   # include   < set >   # include   < unordered _ map >   # include   < unordered _ set >   using   namespace   std   ;   # define   endl   ' \\ n '   # define   pique   priority _ queue   # define   oier   \\   ios _ base : : sync _ with _ stdio ( false ) ; \\   cin . tie ( nullptr ) ;   cout . tie ( nullptr ) ;   typedef   long   long   LL   ;   typedef   long   double   LD   ;   / / typedef   __ int128 _ t   int128 ;   const   int   inf   =   ~   (   1   < <   31   ) ;   / /   \u6b63 \u65e0\u7a77   const   int   ninf   =   (   1   < <   31   ) ;   / /   \u8d1f \u65e0\u7a77   const   LL   infll   =   ~   (   1l   l   < <   63   ) ;   / /   \u6b63 \u65e0\u7a77   const   LL   ninfll   =   (   1l   l   < <   63   ) ;   / /   \u8d1f \u65e0\u7a77   const   int   N   =   int   (   1e7   +   10   ) ;   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   LL   t   ;   LL   n   ,   l   ,   r   ,   x   ;   LL   ans   ;   inline   LL   f   (   LL   a   ,   LL   b   )   {   return   (   a   +   b   )   *   (   b   -   a   +   1   )   /   2   ;   }   void   solve   ( )   {   oier   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   cin   > >   t   ;   while   (   t   --   )   {   cin   > >   l   > >   r   > >   n   ;   ans   =   f   (   l   ,   r   ) ;   while   (   n   --   )   {   cin   > >   x   ;   if   (   ans   %   x   )   cout   < <   1   < <   endl   ;   else   cout   < <   0   < <   endl   ;   }   }   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   }   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   / * *   *   _ ooOoo _   *   o8888888o   *   88 \"   .   \" 88   *   ( |   -_-   | )   *   O \\   =   / O   *   ____ / ` --- ' \\ ____   *   . '   \\ \\ |   | / /   ` .   *   /   \\ \\ | | |   :   | | | / /   \\   *   /   _ | | | | |   - : -   | | | | | -   \\   *   |   |   \\ \\ \\   -   / / /   |   |   *   |   \\ _ |   ' ' \\ --- / ' '   |   |   *   \\   .- \\ __   ` - `   ___ / -.   /   *   ___ ` .   . '   / --.-- \\   ` .   .   __   *   . \" \"   ' <   ` .___ \\ _ < | > _ / ___. '   > ' \" \" .   *   |   |   :   ` -   \\ ` . ; ` \\   _   / ` ; . ` /   -   `   :   |   |   *   \\   \\   ` -.   \\ _   __ \\   / __   _ /   .- `   /   /   *   = = = = = = ` -.____ ` -.___ \\ _____ / ___.- ` ____.- ' = = = = = =   *   ` = --- = '   *   ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^   *   \u4f5b\u7956 \u4fdd\u4f51   \u6c38\u65e0 BUG   *   \u4f5b \u66f0 :   *   \u5199\u5b57 \u5199\u5b57\u697c \u91cc \u5199\u5b57 \u5199\u5b57\u95f4 \uff0c \u5199\u5b57 \u5199\u5b57\u95f4 \u91cc \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1b   *   \u7a0b\u5e8f \u4eba\u5458 \u5199 \u7a0b\u5e8f \uff0c \u53c8 \u62ff \u7a0b\u5e8f \u6362 \u9152\u94b1 \u3002   *   \u9152\u9192 \u53ea \u5728 \u7f51\u4e0a \u5750 \uff0c \u9152\u9189 \u8fd8\u6765 \u7f51\u4e0b \u7f51\u4e0b\u7720 \uff1b   *   \u9152\u9189 \u9152\u9192 \u65e5\u590d \u65e5 \uff0c \u7f51\u4e0a \u4e0a\u7f51 \u7f51\u4e0a\u7f51 \u4e0b\u5e74 \u590d\u5e74 \u3002   *   \u4f46\u613f \u8001\u6b7b \u7535\u8111 \u95f4 \uff0c \u4e0d\u613f \u97a0\u8eac \u8001\u677f \u524d \uff1b   *   \u5954\u9a70 \u5b9d\u9a6c \u8d35\u8005\u8da3 \uff0c \u516c\u4ea4 \u81ea\u884c \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \u3002   *   \u522b\u4eba \u7b11 \u6211 \u5fd2 \u75af\u766b \uff0c \u6211 \u7b11 \u81ea\u5df1 \u547d\u592a\u8d31 \uff1b   *   \u4e0d\u89c1 \u6ee1\u8857 \u6f02\u4eae \u59b9 \uff0c \u54ea\u4e2a \u5f52\u5f97 \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1f   * /   int   main   ( )   {   solve   ( ) ;   return   0   ;   }","title":"\u5269\u4e0b \u7684 \u6570"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0/#_1","text":"\u9898\u76ee \u5927\u610f   \u6709   \\ ( t \\ )   \u4e2a \u6d4b\u8bd5 \u3002   \u7ed9\u5b9a \u4e00\u4e2a \u8303\u56f4   \\ ( [ l ,   r ] \\ )   \uff0c \u7136\u540e \u518d \u7ed9\u5b9a \u4e00\u4e2a   \\ ( m \\ )   \u4ee3\u8868 \u8981 \u8be2\u95ee   \\ ( m \\ )   \u6b21 \u3002   \u5bf9\u4e8e \u6bcf \u4e00\u6b21 \u8be2\u95ee \uff0c \u90fd \u4f1a \u8f93\u5165 \u4e00\u4e2a \u6570   \\ ( x \\ )   \uff0c \u5c06 \u8303\u56f4   \\ ( [ l ,   r ] \\ )   \u7684 \u6574\u6570 \u770b\u6210 \u662f \u4e00\u4e2a \u73af \uff0c \u5bfb\u627e \u8be5\u73af \u7684 \u67d0 \u8fde\u7eed \u7247\u6bb5 \uff0c \u4f7f\u5f97 \u8be5 \u7247\u6bb5 \u7684 \u548c \u6070\u597d \u662f   \\ ( x \\ )   \u7684 \u500d\u6570 \uff0c \u7136\u540e \u6211\u4eec \u8981 \u5220\u6389 \u8be5 \u7247\u6bb5 \uff0c \u5269\u4e0b \u7684 \u6570 \u8fd8\u662f \u8981 \u6309 \u987a\u5e8f \u8fde\u6210 \u65b0 \u7684 \u73af \uff0c \u5982\u679c \u8be5\u73af \u8fd8 \u80fd \u627e\u5230 \u548c \u4e3a   \\ ( x \\ )   \u7684 \u500d\u6570 \u7684 \u8fde\u7eed \u7247\u6bb5 \uff0c \u5c31 \u7ee7\u7eed \u5220\u9664 \u3001 \u62fc\u63a5 \u6210\u65b0\u73af \uff0c \u76f4\u5230 \u65e0\u6cd5 \u7ee7\u7eed \u64cd\u4f5c \u4e3a\u6b62 \u3002   \u95ee \u64cd\u4f5c \u505c\u6b62 \u4e4b\u540e \uff0c \u8be5\u73af \u6700\u5c11 \u8fd8\u4f1a \u5269\u4e0b \u591a\u5c11 \u4e2a \u5143\u7d20 \uff1f   \u6ce8\u610f \uff1a   \\ ( 0 < x \u2264 ( r \u2212 l + 1 ) \\ )","title":"\u5269\u4e0b \u7684 \u6570"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0/#_2","text":"\u5c06   \\ ( [ l ,   r ] \\ )   \u8303\u56f4 \u5185 \u7684 \u6570 \u8fdb\u884c \u6c42\u548c \u5f97\u51fa   \\ ( sum \\ )   \uff0c \u7531\u4e8e   \\ ( 0 < x \u2264 ( r \u2212 l + 1 ) \\ )   \uff0c \u6240\u4ee5   \\ ( x \\ )   \u7684 \u500d\u6570 \u4e00\u5b9a \u4f1a \u51fa\u73b0   \\ ( [ l ,   r ] \\ )   \u91cc\u9762 \uff0c \u82e5 \u5bf9 \u6570\u7ec4   \\ ( [ l ,   r ] \\ )   \u6a21\u4e8e   \\ ( x \\ )   \u5f97\u5230 \u4e00\u4e2a \u65b0 \u7684 \u6570\u7ec4   \\ ( q \\ )   \uff0c \u5219 \u6570\u7ec4   \\ ( q \\ )   \u4e00\u5b9a \u542b\u6709 \u5143\u7d20   \\ ( 0   \\ sim   x   -   1 \\ )   \u3002   \u6211\u4eec \u4ee4 \uff1a   \\ ( ans   =   sum   \\ bmod   x \\ )   \uff0c \u5982\u679c   \\ ( ans   =   0 \\ )   \uff0c \u8bf4\u660e \u6574\u4e2a \u8303\u56f4 \u7684 \u548c \u80fd \u88ab   \\ ( x \\ )   \u6574\u9664 \uff0c \u6240\u4ee5 \u8be5\u73af \u6700\u7ec8 \u4f1a \u5269\u4e0b   \\ ( 0 \\ )   \u4e2a \u5143\u7d20 \uff1b   \u82e5   \\ ( ans   \\ neq   0 \\ )   \uff0c \u6211\u4eec \u53ea \u9700\u8981 \u5728 \u6570\u7ec4   \\ ( q \\ )   \u4e2d \u5254\u9664   \\ ( ans   \\ neq   0 \\ )   \uff0c \u90a3\u4e48 \u5269\u4e0b \u5143\u7d20 \u7684 \u548c \uff08 \u5728 \u73af\u5185 \u4e5f \u7167\u6837 \u8fde\u7eed \uff09 \u4e5f \u4e00\u5b9a \u53ef\u4ee5 \u88ab   \\ ( x \\ )   \u6574\u9664 \uff0c \u6240\u4ee5 \u6700\u7ec8 \u6700\u5c11 \u53ea\u4f1a \u5269\u4e0b \u4e00\u4e2a \u5143\u7d20 \u3002   \u4ee3\u7801 \u53c2\u8003   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80   81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96   97   98   99   100   101   102   103   # include   < iostream >   # include   < iomanip >   # include   < algorithm >   # include   < cstdio >   # include   < cstdlib >   # include   < cstring >   # include   < string >   # include   < vector >   # include   < queue >   # include   < deque >   # include   < stack >   # include   < map >   # include   < set >   # include   < unordered _ map >   # include   < unordered _ set >   using   namespace   std   ;   # define   endl   ' \\ n '   # define   pique   priority _ queue   # define   oier   \\   ios _ base : : sync _ with _ stdio ( false ) ; \\   cin . tie ( nullptr ) ;   cout . tie ( nullptr ) ;   typedef   long   long   LL   ;   typedef   long   double   LD   ;   / / typedef   __ int128 _ t   int128 ;   const   int   inf   =   ~   (   1   < <   31   ) ;   / /   \u6b63 \u65e0\u7a77   const   int   ninf   =   (   1   < <   31   ) ;   / /   \u8d1f \u65e0\u7a77   const   LL   infll   =   ~   (   1l   l   < <   63   ) ;   / /   \u6b63 \u65e0\u7a77   const   LL   ninfll   =   (   1l   l   < <   63   ) ;   / /   \u8d1f \u65e0\u7a77   const   int   N   =   int   (   1e7   +   10   ) ;   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   LL   t   ;   LL   n   ,   l   ,   r   ,   x   ;   LL   ans   ;   inline   LL   f   (   LL   a   ,   LL   b   )   {   return   (   a   +   b   )   *   (   b   -   a   +   1   )   /   2   ;   }   void   solve   ( )   {   oier   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   cin   > >   t   ;   while   (   t   --   )   {   cin   > >   l   > >   r   > >   n   ;   ans   =   f   (   l   ,   r   ) ;   while   (   n   --   )   {   cin   > >   x   ;   if   (   ans   %   x   )   cout   < <   1   < <   endl   ;   else   cout   < <   0   < <   endl   ;   }   }   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   }   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   / * *   *   _ ooOoo _   *   o8888888o   *   88 \"   .   \" 88   *   ( |   -_-   | )   *   O \\   =   / O   *   ____ / ` --- ' \\ ____   *   . '   \\ \\ |   | / /   ` .   *   /   \\ \\ | | |   :   | | | / /   \\   *   /   _ | | | | |   - : -   | | | | | -   \\   *   |   |   \\ \\ \\   -   / / /   |   |   *   |   \\ _ |   ' ' \\ --- / ' '   |   |   *   \\   .- \\ __   ` - `   ___ / -.   /   *   ___ ` .   . '   / --.-- \\   ` .   .   __   *   . \" \"   ' <   ` .___ \\ _ < | > _ / ___. '   > ' \" \" .   *   |   |   :   ` -   \\ ` . ; ` \\   _   / ` ; . ` /   -   `   :   |   |   *   \\   \\   ` -.   \\ _   __ \\   / __   _ /   .- `   /   /   *   = = = = = = ` -.____ ` -.___ \\ _____ / ___.- ` ____.- ' = = = = = =   *   ` = --- = '   *   ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^   *   \u4f5b\u7956 \u4fdd\u4f51   \u6c38\u65e0 BUG   *   \u4f5b \u66f0 :   *   \u5199\u5b57 \u5199\u5b57\u697c \u91cc \u5199\u5b57 \u5199\u5b57\u95f4 \uff0c \u5199\u5b57 \u5199\u5b57\u95f4 \u91cc \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1b   *   \u7a0b\u5e8f \u4eba\u5458 \u5199 \u7a0b\u5e8f \uff0c \u53c8 \u62ff \u7a0b\u5e8f \u6362 \u9152\u94b1 \u3002   *   \u9152\u9192 \u53ea \u5728 \u7f51\u4e0a \u5750 \uff0c \u9152\u9189 \u8fd8\u6765 \u7f51\u4e0b \u7f51\u4e0b\u7720 \uff1b   *   \u9152\u9189 \u9152\u9192 \u65e5\u590d \u65e5 \uff0c \u7f51\u4e0a \u4e0a\u7f51 \u7f51\u4e0a\u7f51 \u4e0b\u5e74 \u590d\u5e74 \u3002   *   \u4f46\u613f \u8001\u6b7b \u7535\u8111 \u95f4 \uff0c \u4e0d\u613f \u97a0\u8eac \u8001\u677f \u524d \uff1b   *   \u5954\u9a70 \u5b9d\u9a6c \u8d35\u8005\u8da3 \uff0c \u516c\u4ea4 \u81ea\u884c \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \u3002   *   \u522b\u4eba \u7b11 \u6211 \u5fd2 \u75af\u766b \uff0c \u6211 \u7b11 \u81ea\u5df1 \u547d\u592a\u8d31 \uff1b   *   \u4e0d\u89c1 \u6ee1\u8857 \u6f02\u4eae \u59b9 \uff0c \u54ea\u4e2a \u5f52\u5f97 \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1f   * /   int   main   ( )   {   solve   ( ) ;   return   0   ;   }","title":"\u601d\u8def"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C/","text":"\u6700\u5927 \u5b50\u6bb5 \u548c   \u6700\u5927 \u5b50\u6bb5 \u548c   \u7ed9\u5b9a \u4e00\u4e2a \u957f\u5ea6 \u4e3a   \\ ( n \\ )   \u7684 \u5e8f\u5217 \uff0c \u8bf7\u6c42 \u51fa \u8fde\u7eed \u5b50 \u5e8f\u5217 \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u3002   \u8f93\u5165 \u683c\u5f0f   \u7b2c\u4e00 \u4e00\u884c \u7b2c\u4e00\u884c \u8f93\u5165 \u4e00\u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( n \\ )   \u7b2c\u4e8c \u4e8c\u884c \u7b2c\u4e8c\u884c \u8f93\u5165   \\ ( n \\ )   \u4e2a \u6574\u6570 \uff0c \u53ef\u80fd \u4e3a \u8d1f\u6570   \u8f93\u51fa \u683c\u5f0f   \u8f93\u51fa \u4e00\u4e2a \u6574\u6570 \u4ee3\u8868 \u8fde\u7eed \u5b50 \u5e8f\u5217 \u548c \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u3002   \u601d\u8def   \u5047\u8bbe \u8be5 \u6700\u4f18 \u7684 \u8fde\u7eed \u5b50\u6bb5 \u4e3a   \\ ( [ i ,   j ] \\ )   \uff0c \u90a3\u4e48 \u8be5\u5b50 \u6bb5 \u591a \u4e00\u4e2a \u5143\u7d20 \uff0c \u5c11 \u4e00\u4e2a \u5143\u7d20 \u90fd \u4e0d \u53ef\u4ee5 :   \\ ( [ i   +   1 ,   j ]   <   [ i ,   j ] \\ )   \\ ( [ i ,   j   +   1 ]   <   [ i ,   j ] \\ )   \\ ( [ i   -   1 ,   j ]   <   [ i ,   j ] \\ )   \\ ( [ i ,   j   -   1 ]   <   [ i ,   j ] \\ )   \u5e76\u4e14 \u5bf9\u4e8e \u4efb\u610f \u7684   \\ ( i   \\ leq   k   \\ leq   j \\ )   \u6765\u8bf4 \uff0c   \\ ( [ i ,   k ] \\ )   \u548c   \\ ( [ k ,   j ] \\ )   \u90fd \u4e0d \u53ef\u80fd \u4e3a \u8d1f \uff0c \u4e0d\u7136 \u6211 \u53ef\u4ee5 \u4e22\u5f03 \u8fd9\u90e8 \u90e8\u5206 \u8fd9\u90e8\u5206 \u503c\u4f1a\u53d8 \u7684 \u66f4 \u5927 \uff1b   \u82e5 \u9898\u76ee \u7ed9 \u7684 \u5e8f\u5217 \u5168\u662f \u6574\u6570 \u6b63\u6574\u6570 \uff0c \u90a3\u4e48 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u5c31\u662f \u5e8f\u5217 \u603b\u548c \uff1b   \u5982\u679c \u5e8f\u5217 \u5168\u662f \u8d1f\u6570 \uff0c \u90a3\u4e48 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u5c31\u662f \u8be5 \u5e8f\u5217 \u7684 \u6700\u5927 \u5143\u7d20 \u503c \u3002   \u5982\u679c \u662f \u6574\u6570 \u6b63\u6574\u6570 \u548c \u8d1f\u6570 \u6df7\u5408 \u7684 \u60c5\u51b5 \u4e0b \uff0c \u6211\u8981 \u4e0d\u65ad \u7684 \u7ef4\u62a4 \u4e00\u4e2a \u7a97\u53e3   \\ ( [ i ,   j ] \\ )   \uff0c \u5982\u679c   \\ ( j ++ \\ )   \u541e\u5e76 \u53f3\u8fb9 \u7684 \u5143\u7d20 \uff0c \u7a97\u53e3 \u603b\u548c \u4e3a \u8d1f\u6570 \u4e86 \uff0c \u90a3\u4e48 \u6700\u4f18 \u5b50\u6bb5 \u4e00\u5b9a \u4e0d \u5305\u542b \u8fd9\u90e8 \u90e8\u5206 \u8fd9\u90e8\u5206 \uff0c \u7a97\u53e3 \u7684 \u8d77\u70b9 \u8981 \u4ece   \\ ( j   +   1 \\ )   \u5f00\u59cb \uff1b \u5426\u5219 \u5c31 \u7ee7\u7eed \u541e\u5e76 \u3002   \u4ee3\u7801 \u53c2\u8003   # include   < iostream >   using   namespace   std   ;   typedef   long   long   LL   ;   const   int   N   =   1e7   +   10   ;   / /   &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&   / /   / /   \u6700\u4f18 \u7684 \u8fde\u7eed \u533a\u95f4 \uff0c \u591a \u4e00\u4e2a \u4e0d\u884c \uff0c \u5c11 \u4e00\u4e2a \u4e5f \u4e0d\u884c   / /   \u5982\u679c \u5168\u90e8 \u6574\u6570 \u6b63\u6574\u6570 \uff0c \u7b54\u6848 \u5c31\u662f \u603b\u548c   / /   \u5047\u8bbe \u8be5 \u533a\u95f4 \u4e3a   [ i ,   j ]   \u5219   [ i   +   1 ,   j ]   <   [ i ,   j ]   \u4e14   [ i ,   j   +   1 ]   <   [ i ,   j ]   / /   \u5e76\u4e14   [ i ,   j ]   \u5185 \u5bf9\u4e8e \u4efb\u610f \u7684   [ i ,   k ]   \u6216\u8005   [ k ,   j ]   \u90fd \u5fc5\u5b9a \u662f \u6574\u6570 \u6b63\u6574\u6570 \uff0c \u4e0d\u7136 \u7684\u8bdd \u4e0d\u7136\u7684\u8bdd \u6211 \u4e22\u5f03 \u8fd9 \u90e8\u4efd \u5c82 \u4e0d\u662f \u66f4\u5927 \uff1f   / /   \u60f3\u8c61 \u4e00\u4e0b \u533a\u95f4 \u541e\u5e76 \uff0c \u4e0d\u65ad \u7684 \u541e\u5e76 \u53f3\u8fb9 \u7684 \u6570 \uff0c \u5982\u679c \u541e\u5e76 \u540e \u7684 \u548c \u4e3a \u8d1f\u6570 \uff0c \u8bf4\u660e \u6b64\u65f6 \u6700\u5927 \u7684 \u8fde\u7eed \u53ea\u80fd \u662f   [ i ,   j   -   1 ]   \u4e3a\u4e86 \u5bfb\u627e \u4e0b \u4e00\u6bb5 \u8fde\u7eed \u533a\u95f4   i   \u8981 \u79fb\u52a8 \u5230   j   \u5904   LL   n   ,   res   ,   i   ,   j   ,   sum   ;   LL   a   [   N   ] ;   void   solve   ( )   {   cin   > >   n   ;   for   (   i   =   1   ;   i   < =   n   ;   i   ++   )   cin   > >   a   [   i   ] ;   i   =   j   =   1   ,   sum   =   0   ;   res   =   1   < <   31   ;   while   (   j   < =   n   )   {   res   =   max   (   res   ,   a   [   j   ] ) ;   if   (   sum   +   a   [   j   ]   > =   0   )   res   =   max   (   res   ,   sum   + =   a   [   j   ++   ] ) ;   else   sum   =   0   ,   i   =   j   =   j   +   1   ;   }   cout   < <   res   < <   endl   ;   }   / /   &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&   / /   int   main   (   void   )   {   solve   ( ) ;   return   0   ;   }","title":"\u6700\u5927 \u5b50\u6bb5 \u548c"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C/#_1","text":"\u6700\u5927 \u5b50\u6bb5 \u548c   \u7ed9\u5b9a \u4e00\u4e2a \u957f\u5ea6 \u4e3a   \\ ( n \\ )   \u7684 \u5e8f\u5217 \uff0c \u8bf7\u6c42 \u51fa \u8fde\u7eed \u5b50 \u5e8f\u5217 \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u3002   \u8f93\u5165 \u683c\u5f0f   \u7b2c\u4e00 \u4e00\u884c \u7b2c\u4e00\u884c \u8f93\u5165 \u4e00\u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( n \\ )   \u7b2c\u4e8c \u4e8c\u884c \u7b2c\u4e8c\u884c \u8f93\u5165   \\ ( n \\ )   \u4e2a \u6574\u6570 \uff0c \u53ef\u80fd \u4e3a \u8d1f\u6570   \u8f93\u51fa \u683c\u5f0f   \u8f93\u51fa \u4e00\u4e2a \u6574\u6570 \u4ee3\u8868 \u8fde\u7eed \u5b50 \u5e8f\u5217 \u548c \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u3002","title":"\u6700\u5927 \u5b50\u6bb5 \u548c"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C/#_2","text":"\u5047\u8bbe \u8be5 \u6700\u4f18 \u7684 \u8fde\u7eed \u5b50\u6bb5 \u4e3a   \\ ( [ i ,   j ] \\ )   \uff0c \u90a3\u4e48 \u8be5\u5b50 \u6bb5 \u591a \u4e00\u4e2a \u5143\u7d20 \uff0c \u5c11 \u4e00\u4e2a \u5143\u7d20 \u90fd \u4e0d \u53ef\u4ee5 :   \\ ( [ i   +   1 ,   j ]   <   [ i ,   j ] \\ )   \\ ( [ i ,   j   +   1 ]   <   [ i ,   j ] \\ )   \\ ( [ i   -   1 ,   j ]   <   [ i ,   j ] \\ )   \\ ( [ i ,   j   -   1 ]   <   [ i ,   j ] \\ )   \u5e76\u4e14 \u5bf9\u4e8e \u4efb\u610f \u7684   \\ ( i   \\ leq   k   \\ leq   j \\ )   \u6765\u8bf4 \uff0c   \\ ( [ i ,   k ] \\ )   \u548c   \\ ( [ k ,   j ] \\ )   \u90fd \u4e0d \u53ef\u80fd \u4e3a \u8d1f \uff0c \u4e0d\u7136 \u6211 \u53ef\u4ee5 \u4e22\u5f03 \u8fd9\u90e8 \u90e8\u5206 \u8fd9\u90e8\u5206 \u503c\u4f1a\u53d8 \u7684 \u66f4 \u5927 \uff1b   \u82e5 \u9898\u76ee \u7ed9 \u7684 \u5e8f\u5217 \u5168\u662f \u6574\u6570 \u6b63\u6574\u6570 \uff0c \u90a3\u4e48 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u5c31\u662f \u5e8f\u5217 \u603b\u548c \uff1b   \u5982\u679c \u5e8f\u5217 \u5168\u662f \u8d1f\u6570 \uff0c \u90a3\u4e48 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u5c31\u662f \u8be5 \u5e8f\u5217 \u7684 \u6700\u5927 \u5143\u7d20 \u503c \u3002   \u5982\u679c \u662f \u6574\u6570 \u6b63\u6574\u6570 \u548c \u8d1f\u6570 \u6df7\u5408 \u7684 \u60c5\u51b5 \u4e0b \uff0c \u6211\u8981 \u4e0d\u65ad \u7684 \u7ef4\u62a4 \u4e00\u4e2a \u7a97\u53e3   \\ ( [ i ,   j ] \\ )   \uff0c \u5982\u679c   \\ ( j ++ \\ )   \u541e\u5e76 \u53f3\u8fb9 \u7684 \u5143\u7d20 \uff0c \u7a97\u53e3 \u603b\u548c \u4e3a \u8d1f\u6570 \u4e86 \uff0c \u90a3\u4e48 \u6700\u4f18 \u5b50\u6bb5 \u4e00\u5b9a \u4e0d \u5305\u542b \u8fd9\u90e8 \u90e8\u5206 \u8fd9\u90e8\u5206 \uff0c \u7a97\u53e3 \u7684 \u8d77\u70b9 \u8981 \u4ece   \\ ( j   +   1 \\ )   \u5f00\u59cb \uff1b \u5426\u5219 \u5c31 \u7ee7\u7eed \u541e\u5e76 \u3002   \u4ee3\u7801 \u53c2\u8003   # include   < iostream >   using   namespace   std   ;   typedef   long   long   LL   ;   const   int   N   =   1e7   +   10   ;   / /   &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&   / /   / /   \u6700\u4f18 \u7684 \u8fde\u7eed \u533a\u95f4 \uff0c \u591a \u4e00\u4e2a \u4e0d\u884c \uff0c \u5c11 \u4e00\u4e2a \u4e5f \u4e0d\u884c   / /   \u5982\u679c \u5168\u90e8 \u6574\u6570 \u6b63\u6574\u6570 \uff0c \u7b54\u6848 \u5c31\u662f \u603b\u548c   / /   \u5047\u8bbe \u8be5 \u533a\u95f4 \u4e3a   [ i ,   j ]   \u5219   [ i   +   1 ,   j ]   <   [ i ,   j ]   \u4e14   [ i ,   j   +   1 ]   <   [ i ,   j ]   / /   \u5e76\u4e14   [ i ,   j ]   \u5185 \u5bf9\u4e8e \u4efb\u610f \u7684   [ i ,   k ]   \u6216\u8005   [ k ,   j ]   \u90fd \u5fc5\u5b9a \u662f \u6574\u6570 \u6b63\u6574\u6570 \uff0c \u4e0d\u7136 \u7684\u8bdd \u4e0d\u7136\u7684\u8bdd \u6211 \u4e22\u5f03 \u8fd9 \u90e8\u4efd \u5c82 \u4e0d\u662f \u66f4\u5927 \uff1f   / /   \u60f3\u8c61 \u4e00\u4e0b \u533a\u95f4 \u541e\u5e76 \uff0c \u4e0d\u65ad \u7684 \u541e\u5e76 \u53f3\u8fb9 \u7684 \u6570 \uff0c \u5982\u679c \u541e\u5e76 \u540e \u7684 \u548c \u4e3a \u8d1f\u6570 \uff0c \u8bf4\u660e \u6b64\u65f6 \u6700\u5927 \u7684 \u8fde\u7eed \u53ea\u80fd \u662f   [ i ,   j   -   1 ]   \u4e3a\u4e86 \u5bfb\u627e \u4e0b \u4e00\u6bb5 \u8fde\u7eed \u533a\u95f4   i   \u8981 \u79fb\u52a8 \u5230   j   \u5904   LL   n   ,   res   ,   i   ,   j   ,   sum   ;   LL   a   [   N   ] ;   void   solve   ( )   {   cin   > >   n   ;   for   (   i   =   1   ;   i   < =   n   ;   i   ++   )   cin   > >   a   [   i   ] ;   i   =   j   =   1   ,   sum   =   0   ;   res   =   1   < <   31   ;   while   (   j   < =   n   )   {   res   =   max   (   res   ,   a   [   j   ] ) ;   if   (   sum   +   a   [   j   ]   > =   0   )   res   =   max   (   res   ,   sum   + =   a   [   j   ++   ] ) ;   else   sum   =   0   ,   i   =   j   =   j   +   1   ;   }   cout   < <   res   < <   endl   ;   }   / /   &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&   / /   int   main   (   void   )   {   solve   ( ) ;   return   0   ;   }","title":"\u601d\u8def"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/%E6%B6%88%E8%80%97%E4%BD%93%E5%8A%9B%E7%88%AC%E5%BE%97%E6%9B%B4%E9%AB%98/","text":"\u6d88\u8017 \u4f53\u529b \u722c \u5f97 \u66f4 \u9ad8   Question   \u540d\u5b57 \u53eb   LKX   \u7684 \u670b\u53cb \u5c0f\u670b\u53cb \u60f3\u8981 \u722c\u5c71 \uff0c \u4ed6 \u6709 \u4e00\u4e2a \u4f53\u529b \u6761 \uff0c \u5f53\u8be5 \u4f53\u529b \u6761 \u8017\u5c3d \u540e \uff0c \u4ed6 \u5c31 \u4e0d\u80fd \u518d \u5f80\u4e0a \u4e0a\u722c \u5f80\u4e0a\u722c \u4e86 \u3002   \u5047\u8bbe   LKX   \u7684 \u4f53\u529b \u6761 \u6570\u503c \u4e3a \u6574\u6570 \u6b63\u6574\u6570   \\ ( S \\ )   \uff0c \u4ed6 \u6709 \u4e24\u79cd \u6500\u722c \u65b9\u5f0f \uff0c \u4e00\u79cd \u662f \u722c\u884c \uff0c \u6d88\u8017   \\ ( 1 \\ )   \u4f53\u529b \uff0c \u5411 \u4e0a\u722c   \\ ( a \\ )   \u7c73 \uff1b \u53e6 \u4e00\u79cd \u662f \u8df3\u8dc3 \uff0c \u6d88\u8017   \\ ( b \\ )   \u4f53\u529b \uff0c \u5411\u4e0a \u8df3   \\ ( c \\ )   \u7c73 \u3002   \u5982\u679c \u5269\u4f59 \u7684 \u4f53\u529b \u4f53\u529b\u503c \u5c0f\u4e8e   \\ ( b \\ )   \u5b83 \u4ecd\u7136 \u53ef\u4ee5 \u6d88\u8017 \u8017\u6389 \u6d88\u8017\u6389 \u5269\u4f59 \u4f53\u529b \u5f80 \u4e0a \u8df3\u8d8a   \\ ( c \\ )   \u7c73 \uff1b   \u95ee\u8be5 \u670b\u53cb \u5c0f\u670b\u53cb   LKX   \u6700\u5927 \u80fd \u722c \u591a\u5c11 \u7c73 \uff1f   \u8f93\u5165 \uff1a   \u7b2c\u4e00 \u4e00\u884c \u7b2c\u4e00\u884c \u8f93\u5165 \u4e00\u4e2a \u6574\u6570   \\ ( t \\ )   \u4ee3\u8868 \u6709   \\ ( t \\ )   \u4e2a \u6d4b\u8bd5 \uff1b   \u5bf9\u4e8e \u5269\u4e0b \u7684   \\ ( t \\ )   \u884c \uff0c \u6bcf\u884c \u90fd \u662f \u4e00\u4e2a \u6d4b\u8bd5 \u8bd5\u70b9 \u6d4b\u8bd5\u70b9 \uff0c \u6bcf\u4e2a \u6d4b\u8bd5 \u8bd5\u70b9 \u6d4b\u8bd5\u70b9 \u90fd \u5305\u542b   \\ ( 4 \\ )   \u4e2a \u6574\u6570 \u6b63\u6574\u6570 \uff1a   \\ ( a ,   b ,   c ,   S \\ )   \u3002   \u8f93\u51fa \uff1a   \u8f93\u51fa   \\ ( t \\ )   \u884c \uff0c \u6bcf\u884c \u4e00\u4e2a \u6574\u6570 \u6b63\u6574\u6570 \uff0c \u4ee3\u8868 \u6240\u80fd \u722c \u7684 \u6700\u5927 \u9ad8\u5ea6 \u3002   \u6570\u636e \u4fdd\u8bc1 \uff1a   \\ ( t   \\ in   [ 1 ,   30000 ] \\ )   \\ ( a ,   b ,   c ,   S   \\ in   [ 1 ,   10 ^ 9 ] \\ )   \u6700\u521d \u7684 \u60f3\u6cd5 \u5c31\u662f \u5148 \u6bd4\u8f83 \u4e00\u4e0b \u5355\u4f4d \u4f53\u529b \u4e0b \u7684 \u90a3\u79cd \u6500\u722c \u65b9\u5f0f \u66f4\u9ad8 \uff1b   \u5982\u679c   \\ ( a   > =   \\ frac { c } { b } \\ )   \uff0c \u90a3\u4e48 \u524d   \\ ( S   -   1 \\ )   \u4efd \u4f53\u529b \u80af\u5b9a \u662f \u91c7\u53d6 \u5411\u4e0a \u722c\u884c \u7684 \u65b9\u5f0f \uff0c \u90a3\u4e48 \u5269\u4e0b \u7684 \u4e00 \u4f53\u529b \u662f \u53ef\u4ee5 \u9009\u62e9 \u8df3\u8dc3 \u6216\u8005 \u7ee7\u7eed \u5411\u4e0a \u722c\u884c \u7684 \uff0c \u53d6\u51b3 \u56e0\u7d20 \u662f   \\ ( \\ max ( a ,   c ) \\ )   \uff0c \u6240\u4ee5 \u8fd9\u79cd \u60c5\u51b5 \u4e0b \u7684 \u6700\u4f18 \u503c\u4e3a \uff1a   \\ ( ( S   -   1 )   \\ times   a   +   \\ max ( a ,   c ) \\ )   \u5982\u679c   \\ ( a   <   \\ frac { c } { b } \\ )   \uff0c \u90a3\u4e48 \u80af\u5b9a \u6709 \uff1a   \\ ( c   >   a \\ )   \u8fd9\u662f \u663e\u7136 \u7684 \uff0c \u6211\u4eec \u7d22\u6027 \u7acb\u9a6c \u62bd\u51fa   \\ ( 1 \\ )   \u4f53\u529b \u4ee3\u8868 \u6700\u7ec8 \u8981 \u7528   \\ ( 1 \\ )   \u4f53\u529b \u8df3\u8dc3   \\ ( c \\ )   \u7c73 \uff1b   \u63a5\u7740 \u5bf9\u4e8e \u5269\u4e0b \u7684   \\ ( S   -   1 \\ )   \u4f53\u529b \uff0c \u8981 \u5206\u5272 \u6210   \\ ( \\ left   \\ lfloor   \\ frac { S   -   1 } { b }   \\ right   \\ rfloor \\ )   \u4efd \uff0c \u5bf9\u4e8e \u6bcf \u4e00\u4efd \u8981 \u8df3\u8dc3   \\ ( c \\ )   \u7c73 \uff0c \u5bf9\u4e8e \u5269\u4e0b \u7684   \\ ( S   -   1   -   \\ left   \\ lfloor   \\ frac { S   -   1 } { b }   \\ right   \\ rfloor \\ )   \u90fd \u8981 \u5411\u4e0a \u722c\u884c   \\ ( a \\ )   \u7c73 \uff1b   \u6240\u4ee5 \u53ef \u51dd\u7ec3 \u51fa \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \uff1a   \\ ( c   +   \\ left   \\ lfloor   \\ frac { S   -   1 } { b }   \\ right   \\ rfloor   *   c   +   ( ( S   -   1 )   \\ bmod   b )   *   a \\ )   Code   # include   < iostream >   # include   < iomanip >   # include   < algorithm >   # include   < cstdio >   # include   < cstdlib >   # include   < cstring >   # include   < string >   # include   < vector >   # include   < queue >   # include   < deque >   # include   < stack >   # include   < map >   # include   < set >   # include   < unordered _ map >   # include   < unordered _ set >   using   namespace   std   ;   # define   endl   ' \\ n '   # define   pique   priority _ queue   # define   oier   \\   ios _ base : : sync _ with _ stdio ( false ) ; \\   cin . tie ( nullptr ) ;   cout . tie ( nullptr ) ;   # define   cf   int   t ;   cin   > >   t ;   while   ( t   -- )   # define   upfor ( i ,   l ,   r )   for   ( i   =   ( l ) ;   i   < =   ( r ) ;   i   ++ )   # define   downfor ( i ,   l ,   r )   for   ( i   =   ( r ) ;   i   > =   ( l ) ;   i   -- )   / /   # define   int   long   long   typedef   long   long   LL   ;   typedef   long   double   LD   ;   / / typedef   __ int128 _ t   int128 ;   const   int   inf   =   ~   (   1   < <   31   ) ;   / /   \u6b63 \u65e0\u7a77   const   int   ninf   =   (   1   < <   31   ) ;   / /   \u8d1f \u65e0\u7a77   const   LL   infll   =   ~   (   1l   l   < <   63   ) ;   / /   \u6b63 \u65e0\u7a77   const   LL   ninfll   =   (   1l   l   < <   63   ) ;   / /   \u8d1f \u65e0\u7a77   inline   LL   rll   ( )   {   oier   LL   x   ;   cin   > >   x   ;   return   x   ;   }   inline   int   rint   ( )   {   oier   int   x   ;   cin   > >   x   ;   return   x   ;   }   const   int   N   =   int   (   1e7   +   10   ) ;   / /   \u7531\u4e8e \u60c5\u62a5 \u4e0d\u8db3 \uff0c \u53ea\u80fd \u900f\u8fc7 \u300c \u8bd5\u884c \u9519\u8bef \u300d \u6765 \u83b7\u53d6 \u3002   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   LL   t   ,   a   ,   b   ,   c   ,   S   ;   void   solve   ( )   {   oier   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   cin   > >   t   ;   while   (   t   --   )   {   cin   > >   a   > >   b   > >   c   > >   S   ;   LL   res   =   (   a   *   b   > =   c   )   ?   (   S   -   1   )   *   a   +   max   (   a   ,   c   )   :   ( (   S   -   1   )   /   b   +   1   )   *   c   +   ( (   S   -   1   )   %   b   )   *   a   ;   cout   < <   res   < <   endl   ;   }   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   }   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   / * *   *   _ ooOoo _   *   o8888888o   *   88 \"   .   \" 88   *   ( |   -_-   | )   *   O \\   =   / O   *   ____ / ` --- ' \\ ____   *   . '   \\ \\ |   | / /   ` .   *   /   \\ \\ | | |   :   | | | / /   \\   *   /   _ | | | | |   - : -   | | | | | -   \\   *   |   |   \\ \\ \\   -   / / /   |   |   *   |   \\ _ |   ' ' \\ --- / ' '   |   |   *   \\   .- \\ __   ` - `   ___ / -.   /   *   ___ ` .   . '   / --.-- \\   ` .   .   __   *   . \" \"   ' <   ` .___ \\ _ < | > _ / ___. '   > ' \" \" .   *   |   |   :   ` -   \\ ` . ; ` \\   _   / ` ; . ` /   -   `   :   |   |   *   \\   \\   ` -.   \\ _   __ \\   / __   _ /   .- `   /   /   *   = = = = = = ` -.____ ` -.___ \\ _____ / ___.- ` ____.- ' = = = = = =   *   ` = --- = '   *   ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^   *   \u4f5b\u7956 \u4fdd\u4f51   \u6c38\u65e0 BUG   *   \u4f5b \u66f0 :   *   \u5199\u5b57 \u5199\u5b57\u697c \u91cc \u5199\u5b57 \u5199\u5b57\u95f4 \uff0c \u5199\u5b57 \u5199\u5b57\u95f4 \u91cc \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1b   *   \u7a0b\u5e8f \u4eba\u5458 \u5199 \u7a0b\u5e8f \uff0c \u53c8 \u62ff \u7a0b\u5e8f \u6362 \u9152\u94b1 \u3002   *   \u9152\u9192 \u53ea \u5728 \u7f51\u4e0a \u5750 \uff0c \u9152\u9189 \u8fd8\u6765 \u7f51\u4e0b \u7f51\u4e0b\u7720 \uff1b   *   \u9152\u9189 \u9152\u9192 \u65e5\u590d \u65e5 \uff0c \u7f51\u4e0a \u4e0a\u7f51 \u7f51\u4e0a\u7f51 \u4e0b\u5e74 \u590d\u5e74 \u3002   *   \u4f46\u613f \u8001\u6b7b \u7535\u8111 \u95f4 \uff0c \u4e0d\u613f \u97a0\u8eac \u8001\u677f \u524d \uff1b   *   \u5954\u9a70 \u5b9d\u9a6c \u8d35\u8005\u8da3 \uff0c \u516c\u4ea4 \u81ea\u884c \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \u3002   *   \u522b\u4eba \u7b11 \u6211 \u5fd2 \u75af\u766b \uff0c \u6211 \u7b11 \u81ea\u5df1 \u547d\u592a\u8d31 \uff1b   *   \u4e0d\u89c1 \u6ee1\u8857 \u6f02\u4eae \u59b9 \uff0c \u54ea\u4e2a \u5f52\u5f97 \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1f   * * /   / *   = = = = = = = = = = = = = = = = = = = = = = = = \u4f5b\u7956 \u4fdd\u4f51 ,   \u6c38\u65e0 bug = = = = = = = = = = = = = = = = = = = = = = = =   * /   int   main   ( )   {   / /   oier   cf   solve ( ) ;   return   0 ;   oier   solve   ( ) ;   return   0   ;   }","title":"\u6d88\u8017 \u4f53\u529b \u722c \u5f97 \u66f4 \u9ad8"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/%E6%B6%88%E8%80%97%E4%BD%93%E5%8A%9B%E7%88%AC%E5%BE%97%E6%9B%B4%E9%AB%98/#_1","text":"Question   \u540d\u5b57 \u53eb   LKX   \u7684 \u670b\u53cb \u5c0f\u670b\u53cb \u60f3\u8981 \u722c\u5c71 \uff0c \u4ed6 \u6709 \u4e00\u4e2a \u4f53\u529b \u6761 \uff0c \u5f53\u8be5 \u4f53\u529b \u6761 \u8017\u5c3d \u540e \uff0c \u4ed6 \u5c31 \u4e0d\u80fd \u518d \u5f80\u4e0a \u4e0a\u722c \u5f80\u4e0a\u722c \u4e86 \u3002   \u5047\u8bbe   LKX   \u7684 \u4f53\u529b \u6761 \u6570\u503c \u4e3a \u6574\u6570 \u6b63\u6574\u6570   \\ ( S \\ )   \uff0c \u4ed6 \u6709 \u4e24\u79cd \u6500\u722c \u65b9\u5f0f \uff0c \u4e00\u79cd \u662f \u722c\u884c \uff0c \u6d88\u8017   \\ ( 1 \\ )   \u4f53\u529b \uff0c \u5411 \u4e0a\u722c   \\ ( a \\ )   \u7c73 \uff1b \u53e6 \u4e00\u79cd \u662f \u8df3\u8dc3 \uff0c \u6d88\u8017   \\ ( b \\ )   \u4f53\u529b \uff0c \u5411\u4e0a \u8df3   \\ ( c \\ )   \u7c73 \u3002   \u5982\u679c \u5269\u4f59 \u7684 \u4f53\u529b \u4f53\u529b\u503c \u5c0f\u4e8e   \\ ( b \\ )   \u5b83 \u4ecd\u7136 \u53ef\u4ee5 \u6d88\u8017 \u8017\u6389 \u6d88\u8017\u6389 \u5269\u4f59 \u4f53\u529b \u5f80 \u4e0a \u8df3\u8d8a   \\ ( c \\ )   \u7c73 \uff1b   \u95ee\u8be5 \u670b\u53cb \u5c0f\u670b\u53cb   LKX   \u6700\u5927 \u80fd \u722c \u591a\u5c11 \u7c73 \uff1f   \u8f93\u5165 \uff1a   \u7b2c\u4e00 \u4e00\u884c \u7b2c\u4e00\u884c \u8f93\u5165 \u4e00\u4e2a \u6574\u6570   \\ ( t \\ )   \u4ee3\u8868 \u6709   \\ ( t \\ )   \u4e2a \u6d4b\u8bd5 \uff1b   \u5bf9\u4e8e \u5269\u4e0b \u7684   \\ ( t \\ )   \u884c \uff0c \u6bcf\u884c \u90fd \u662f \u4e00\u4e2a \u6d4b\u8bd5 \u8bd5\u70b9 \u6d4b\u8bd5\u70b9 \uff0c \u6bcf\u4e2a \u6d4b\u8bd5 \u8bd5\u70b9 \u6d4b\u8bd5\u70b9 \u90fd \u5305\u542b   \\ ( 4 \\ )   \u4e2a \u6574\u6570 \u6b63\u6574\u6570 \uff1a   \\ ( a ,   b ,   c ,   S \\ )   \u3002   \u8f93\u51fa \uff1a   \u8f93\u51fa   \\ ( t \\ )   \u884c \uff0c \u6bcf\u884c \u4e00\u4e2a \u6574\u6570 \u6b63\u6574\u6570 \uff0c \u4ee3\u8868 \u6240\u80fd \u722c \u7684 \u6700\u5927 \u9ad8\u5ea6 \u3002   \u6570\u636e \u4fdd\u8bc1 \uff1a   \\ ( t   \\ in   [ 1 ,   30000 ] \\ )   \\ ( a ,   b ,   c ,   S   \\ in   [ 1 ,   10 ^ 9 ] \\ )   \u6700\u521d \u7684 \u60f3\u6cd5 \u5c31\u662f \u5148 \u6bd4\u8f83 \u4e00\u4e0b \u5355\u4f4d \u4f53\u529b \u4e0b \u7684 \u90a3\u79cd \u6500\u722c \u65b9\u5f0f \u66f4\u9ad8 \uff1b   \u5982\u679c   \\ ( a   > =   \\ frac { c } { b } \\ )   \uff0c \u90a3\u4e48 \u524d   \\ ( S   -   1 \\ )   \u4efd \u4f53\u529b \u80af\u5b9a \u662f \u91c7\u53d6 \u5411\u4e0a \u722c\u884c \u7684 \u65b9\u5f0f \uff0c \u90a3\u4e48 \u5269\u4e0b \u7684 \u4e00 \u4f53\u529b \u662f \u53ef\u4ee5 \u9009\u62e9 \u8df3\u8dc3 \u6216\u8005 \u7ee7\u7eed \u5411\u4e0a \u722c\u884c \u7684 \uff0c \u53d6\u51b3 \u56e0\u7d20 \u662f   \\ ( \\ max ( a ,   c ) \\ )   \uff0c \u6240\u4ee5 \u8fd9\u79cd \u60c5\u51b5 \u4e0b \u7684 \u6700\u4f18 \u503c\u4e3a \uff1a   \\ ( ( S   -   1 )   \\ times   a   +   \\ max ( a ,   c ) \\ )   \u5982\u679c   \\ ( a   <   \\ frac { c } { b } \\ )   \uff0c \u90a3\u4e48 \u80af\u5b9a \u6709 \uff1a   \\ ( c   >   a \\ )   \u8fd9\u662f \u663e\u7136 \u7684 \uff0c \u6211\u4eec \u7d22\u6027 \u7acb\u9a6c \u62bd\u51fa   \\ ( 1 \\ )   \u4f53\u529b \u4ee3\u8868 \u6700\u7ec8 \u8981 \u7528   \\ ( 1 \\ )   \u4f53\u529b \u8df3\u8dc3   \\ ( c \\ )   \u7c73 \uff1b   \u63a5\u7740 \u5bf9\u4e8e \u5269\u4e0b \u7684   \\ ( S   -   1 \\ )   \u4f53\u529b \uff0c \u8981 \u5206\u5272 \u6210   \\ ( \\ left   \\ lfloor   \\ frac { S   -   1 } { b }   \\ right   \\ rfloor \\ )   \u4efd \uff0c \u5bf9\u4e8e \u6bcf \u4e00\u4efd \u8981 \u8df3\u8dc3   \\ ( c \\ )   \u7c73 \uff0c \u5bf9\u4e8e \u5269\u4e0b \u7684   \\ ( S   -   1   -   \\ left   \\ lfloor   \\ frac { S   -   1 } { b }   \\ right   \\ rfloor \\ )   \u90fd \u8981 \u5411\u4e0a \u722c\u884c   \\ ( a \\ )   \u7c73 \uff1b   \u6240\u4ee5 \u53ef \u51dd\u7ec3 \u51fa \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \uff1a   \\ ( c   +   \\ left   \\ lfloor   \\ frac { S   -   1 } { b }   \\ right   \\ rfloor   *   c   +   ( ( S   -   1 )   \\ bmod   b )   *   a \\ )   Code   # include   < iostream >   # include   < iomanip >   # include   < algorithm >   # include   < cstdio >   # include   < cstdlib >   # include   < cstring >   # include   < string >   # include   < vector >   # include   < queue >   # include   < deque >   # include   < stack >   # include   < map >   # include   < set >   # include   < unordered _ map >   # include   < unordered _ set >   using   namespace   std   ;   # define   endl   ' \\ n '   # define   pique   priority _ queue   # define   oier   \\   ios _ base : : sync _ with _ stdio ( false ) ; \\   cin . tie ( nullptr ) ;   cout . tie ( nullptr ) ;   # define   cf   int   t ;   cin   > >   t ;   while   ( t   -- )   # define   upfor ( i ,   l ,   r )   for   ( i   =   ( l ) ;   i   < =   ( r ) ;   i   ++ )   # define   downfor ( i ,   l ,   r )   for   ( i   =   ( r ) ;   i   > =   ( l ) ;   i   -- )   / /   # define   int   long   long   typedef   long   long   LL   ;   typedef   long   double   LD   ;   / / typedef   __ int128 _ t   int128 ;   const   int   inf   =   ~   (   1   < <   31   ) ;   / /   \u6b63 \u65e0\u7a77   const   int   ninf   =   (   1   < <   31   ) ;   / /   \u8d1f \u65e0\u7a77   const   LL   infll   =   ~   (   1l   l   < <   63   ) ;   / /   \u6b63 \u65e0\u7a77   const   LL   ninfll   =   (   1l   l   < <   63   ) ;   / /   \u8d1f \u65e0\u7a77   inline   LL   rll   ( )   {   oier   LL   x   ;   cin   > >   x   ;   return   x   ;   }   inline   int   rint   ( )   {   oier   int   x   ;   cin   > >   x   ;   return   x   ;   }   const   int   N   =   int   (   1e7   +   10   ) ;   / /   \u7531\u4e8e \u60c5\u62a5 \u4e0d\u8db3 \uff0c \u53ea\u80fd \u900f\u8fc7 \u300c \u8bd5\u884c \u9519\u8bef \u300d \u6765 \u83b7\u53d6 \u3002   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   LL   t   ,   a   ,   b   ,   c   ,   S   ;   void   solve   ( )   {   oier   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   cin   > >   t   ;   while   (   t   --   )   {   cin   > >   a   > >   b   > >   c   > >   S   ;   LL   res   =   (   a   *   b   > =   c   )   ?   (   S   -   1   )   *   a   +   max   (   a   ,   c   )   :   ( (   S   -   1   )   /   b   +   1   )   *   c   +   ( (   S   -   1   )   %   b   )   *   a   ;   cout   < <   res   < <   endl   ;   }   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   }   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   / * *   *   _ ooOoo _   *   o8888888o   *   88 \"   .   \" 88   *   ( |   -_-   | )   *   O \\   =   / O   *   ____ / ` --- ' \\ ____   *   . '   \\ \\ |   | / /   ` .   *   /   \\ \\ | | |   :   | | | / /   \\   *   /   _ | | | | |   - : -   | | | | | -   \\   *   |   |   \\ \\ \\   -   / / /   |   |   *   |   \\ _ |   ' ' \\ --- / ' '   |   |   *   \\   .- \\ __   ` - `   ___ / -.   /   *   ___ ` .   . '   / --.-- \\   ` .   .   __   *   . \" \"   ' <   ` .___ \\ _ < | > _ / ___. '   > ' \" \" .   *   |   |   :   ` -   \\ ` . ; ` \\   _   / ` ; . ` /   -   `   :   |   |   *   \\   \\   ` -.   \\ _   __ \\   / __   _ /   .- `   /   /   *   = = = = = = ` -.____ ` -.___ \\ _____ / ___.- ` ____.- ' = = = = = =   *   ` = --- = '   *   ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^   *   \u4f5b\u7956 \u4fdd\u4f51   \u6c38\u65e0 BUG   *   \u4f5b \u66f0 :   *   \u5199\u5b57 \u5199\u5b57\u697c \u91cc \u5199\u5b57 \u5199\u5b57\u95f4 \uff0c \u5199\u5b57 \u5199\u5b57\u95f4 \u91cc \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1b   *   \u7a0b\u5e8f \u4eba\u5458 \u5199 \u7a0b\u5e8f \uff0c \u53c8 \u62ff \u7a0b\u5e8f \u6362 \u9152\u94b1 \u3002   *   \u9152\u9192 \u53ea \u5728 \u7f51\u4e0a \u5750 \uff0c \u9152\u9189 \u8fd8\u6765 \u7f51\u4e0b \u7f51\u4e0b\u7720 \uff1b   *   \u9152\u9189 \u9152\u9192 \u65e5\u590d \u65e5 \uff0c \u7f51\u4e0a \u4e0a\u7f51 \u7f51\u4e0a\u7f51 \u4e0b\u5e74 \u590d\u5e74 \u3002   *   \u4f46\u613f \u8001\u6b7b \u7535\u8111 \u95f4 \uff0c \u4e0d\u613f \u97a0\u8eac \u8001\u677f \u524d \uff1b   *   \u5954\u9a70 \u5b9d\u9a6c \u8d35\u8005\u8da3 \uff0c \u516c\u4ea4 \u81ea\u884c \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \u3002   *   \u522b\u4eba \u7b11 \u6211 \u5fd2 \u75af\u766b \uff0c \u6211 \u7b11 \u81ea\u5df1 \u547d\u592a\u8d31 \uff1b   *   \u4e0d\u89c1 \u6ee1\u8857 \u6f02\u4eae \u59b9 \uff0c \u54ea\u4e2a \u5f52\u5f97 \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1f   * * /   / *   = = = = = = = = = = = = = = = = = = = = = = = = \u4f5b\u7956 \u4fdd\u4f51 ,   \u6c38\u65e0 bug = = = = = = = = = = = = = = = = = = = = = = = =   * /   int   main   ( )   {   / /   oier   cf   solve ( ) ;   return   0 ;   oier   solve   ( ) ;   return   0   ;   }","title":"\u6d88\u8017 \u4f53\u529b \u722c \u5f97 \u66f4 \u9ad8"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/","text":"11 .   \u76db \u6700\u591a \u6700\u591a\u6c34 \u7684 \u5bb9\u5668   \u7ed9\u5b9a \u4e00\u4e2a \u957f\u5ea6 \u4e3a   n   \u7684 \u6574\u6570 \u6570\u7ec4   height   \u3002 \u6709   n   \u6761 \u5782\u7ebf \uff0c \u7b2c   i   \u6761\u7ebf \u7684 \u4e24\u4e2a \u7aef\u70b9 \u662f   ( i ,   0 )   \u548c   ( i ,   height [ i ] )   \u3002   \u627e\u51fa \u5176\u4e2d \u7684 \u4e24\u6761 \u4e24\u6761\u7ebf \uff0c \u4f7f\u5f97 \u5b83\u4eec \u4e0e   x   \u8f74 \u5171\u540c \u6784\u6210 \u7684 \u5bb9\u5668 \u53ef\u4ee5 \u5bb9\u7eb3 \u6700\u591a \u7684 \u6c34 \u3002   \u8fd4\u56de \u5bb9\u5668 \u53ef\u4ee5 \u50a8\u5b58 \u7684 \u6700\u5927 \u6c34\u91cf \u3002   \u8bf4\u660e \uff1a   \u4f60 \u4e0d\u80fd \u503e\u659c \u5bb9\u5668 \u3002   \u793a\u4f8b   1 \uff1a   \u8f93\u5165 \uff1a   [ 1 , 8 , 6 , 2 , 5 , 4 , 8 , 3 , 7 ]   \u8f93\u51fa \uff1a   49   \u89e3\u91ca \uff1a   \u56fe\u4e2d \u5782\u76f4 \u76f4\u7ebf \u5782\u76f4\u7ebf \u4ee3\u8868 \u8f93\u5165 \u6570\u7ec4   [ 1 , 8 , 6 , 2 , 5 , 4 , 8 , 3 , 7 ] \u3002 \u5728 \u6b64 \u60c5\u51b5 \u4e0b \uff0c \u5bb9\u5668 \u80fd\u591f \u5bb9\u7eb3 \u6c34 \uff08 \u8868\u793a \u4e3a \u84dd\u8272 \u90e8\u5206 \uff09 \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u4e3a   49 \u3002   \u793a\u4f8b   2 \uff1a   \u8f93\u5165 \uff1a   height   =   [ 1 , 1 ]   \u8f93\u51fa \uff1a   1   \u63d0\u793a \uff1a   n   = =   height . length   2   < =   n   < =   10   5   0   < =   height [ i ]   < =   10   4   \u8f83 \u66b4\u529b \u7684 \u903b\u8f91   \u5bf9\u4e8e \u524d\u9762 \u7684 \u6bcf \u4e00\u6761 \u4e00\u6761\u7ebf   \\ ( i \\ )   \uff0c \u80fd \u6784\u6210 \u76db \u6700\u591a \u6700\u591a\u6c34 \u7684 \u5bb9\u5668 \u7684 \u53e6\u5916 \u4e00\u6761 \u4e00\u6761\u7ebf \u80af\u5b9a \u662f \u79bb \u5b83 \u8d8a \u8fdc \u8d8a \u597d \uff0c \u8fd9\u6837 \u7684\u8bdd \u8fd9\u6837\u7684\u8bdd \uff0c \u8be5 \u5bb9\u5668 \u7684 \u5bbd \u5c31 \u4f1a \u88ab \u62c9\u957f \uff1b   \u4f46 \u4e5f \u5e76 \u4e0d\u662f \u5bbd \u8d8a\u957f \uff0c \u79bb \u5b83 \u8d8a\u8fdc \uff0c \u76db \u7684 \u6c34 \u5c31 \u8d8a \u591a \uff0c \u8fd8 \u5f97 \u770b \u6700\u540e \u9762 \u7684 \u90a3 \u51e0\u6761 \u7ebf \u7684 \u9ad8\u5ea6 \u5982\u4f55 \uff0c \u82e5 \u6700\u540e \u4e00\u6761 \u4e00\u6761\u7ebf \u9ad8\u4e8e \u524d\u9762 \u7684 \u7ebf   \\ ( i \\ )   \uff0c \u90a3\u4e48 \u4e0e   \\ ( i \\ )   \u6784\u6210 \u76db \u6700\u591a \u6700\u591a\u6c34 \u7684 \u5bb9\u5668 \u7684 \u53e6\u5916 \u4e00\u6761 \u8fb9 \uff0c \u7edd\u5bf9 \u5c31\u662f \u8fd9\u6761 \u8fb9 \uff1b   \u4f46 \u5b9e\u9645 \u60c5\u51b5 \u4e0b \uff0c \u6bd4 \u8fd9 \u66f4 \u590d\u6742 \uff0c \u6211\u4eec \u5148 \u4ece \u540e\u9762 \u5f80\u524d \u627e\u5230 \u6bd4   \\ ( i \\ )   \u9ad8 \u6216 \u7b49 \u7684 \u7ebf   \\ ( j \\ )   \uff0c \u5219   \\ ( i   \\ sim   j \\ )   \u4e4b\u95f4 \u80fd \u4e0e   \\ ( i \\ )   \u6784\u6210 \u76db \u6700\u5927 \u6c34\u91cf \u7684 \u5bb9\u5668 \u5fc5\u5b9a \u662f   \\ ( j \\ )   \u7ebf \uff1b   \u4f46 \u5bf9\u4e8e   \\ ( j   \\ sim   n \\ )   \u4e4b\u95f4 \u7684 \u7ebf \uff0c \u7531\u4e8e \u5bbd\u5ea6 \u589e\u52a0 \u4e86 \uff0c \u867d\u7136 \u9ad8\u5ea6 \u6709 \u4e9b\u8bb8 \u4e0b\u964d \uff0c \u4f46 \u6211\u4eec \u8fd8 \u5f97 \u904d\u5386 \u4e00\u904d   \\ ( j   \\ sim   n \\ )   \u4e4b\u95f4 \u7684 \u7ebf \uff0c \u624d\u80fd \u786e\u5b9a \u6700\u5927 \u76db \u6c34\u91cf \u3002   \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6   \\ ( O ( n ^ 2 ) \\ )   \u4ee3\u7801 \u53c2\u8003   class   Solution   {   public   :   int   maxArea   (   vector   <   int   > &   height   )   {   int   res   =   0   ;   for   (   int   i   =   0   ;   i   <   height   .   size   ( ) ;   i   ++   )   {   for   (   int   j   =   height   .   size   ( )   -   1   ;   ;   j   --   )   {   res   =   max   (   res   ,   (   j   -   i   )   *   min   (   height   [   i   ] ,   height   [   j   ] ) ) ;   if   (   height   [   j   ]   > =   height   [   i   ] )   break   ;   }   }   return   res   ;   }   } ;   \u53cc \u6307\u9488","title":"\u76db \u6700\u591a\u6c34 \u7684 \u5bb9\u5668"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/#11","text":"\u7ed9\u5b9a \u4e00\u4e2a \u957f\u5ea6 \u4e3a   n   \u7684 \u6574\u6570 \u6570\u7ec4   height   \u3002 \u6709   n   \u6761 \u5782\u7ebf \uff0c \u7b2c   i   \u6761\u7ebf \u7684 \u4e24\u4e2a \u7aef\u70b9 \u662f   ( i ,   0 )   \u548c   ( i ,   height [ i ] )   \u3002   \u627e\u51fa \u5176\u4e2d \u7684 \u4e24\u6761 \u4e24\u6761\u7ebf \uff0c \u4f7f\u5f97 \u5b83\u4eec \u4e0e   x   \u8f74 \u5171\u540c \u6784\u6210 \u7684 \u5bb9\u5668 \u53ef\u4ee5 \u5bb9\u7eb3 \u6700\u591a \u7684 \u6c34 \u3002   \u8fd4\u56de \u5bb9\u5668 \u53ef\u4ee5 \u50a8\u5b58 \u7684 \u6700\u5927 \u6c34\u91cf \u3002   \u8bf4\u660e \uff1a   \u4f60 \u4e0d\u80fd \u503e\u659c \u5bb9\u5668 \u3002   \u793a\u4f8b   1 \uff1a   \u8f93\u5165 \uff1a   [ 1 , 8 , 6 , 2 , 5 , 4 , 8 , 3 , 7 ]   \u8f93\u51fa \uff1a   49   \u89e3\u91ca \uff1a   \u56fe\u4e2d \u5782\u76f4 \u76f4\u7ebf \u5782\u76f4\u7ebf \u4ee3\u8868 \u8f93\u5165 \u6570\u7ec4   [ 1 , 8 , 6 , 2 , 5 , 4 , 8 , 3 , 7 ] \u3002 \u5728 \u6b64 \u60c5\u51b5 \u4e0b \uff0c \u5bb9\u5668 \u80fd\u591f \u5bb9\u7eb3 \u6c34 \uff08 \u8868\u793a \u4e3a \u84dd\u8272 \u90e8\u5206 \uff09 \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u4e3a   49 \u3002   \u793a\u4f8b   2 \uff1a   \u8f93\u5165 \uff1a   height   =   [ 1 , 1 ]   \u8f93\u51fa \uff1a   1   \u63d0\u793a \uff1a   n   = =   height . length   2   < =   n   < =   10   5   0   < =   height [ i ]   < =   10   4","title":"11 .   \u76db \u6700\u591a\u6c34 \u7684 \u5bb9\u5668"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/#_1","text":"\u5bf9\u4e8e \u524d\u9762 \u7684 \u6bcf \u4e00\u6761 \u4e00\u6761\u7ebf   \\ ( i \\ )   \uff0c \u80fd \u6784\u6210 \u76db \u6700\u591a \u6700\u591a\u6c34 \u7684 \u5bb9\u5668 \u7684 \u53e6\u5916 \u4e00\u6761 \u4e00\u6761\u7ebf \u80af\u5b9a \u662f \u79bb \u5b83 \u8d8a \u8fdc \u8d8a \u597d \uff0c \u8fd9\u6837 \u7684\u8bdd \u8fd9\u6837\u7684\u8bdd \uff0c \u8be5 \u5bb9\u5668 \u7684 \u5bbd \u5c31 \u4f1a \u88ab \u62c9\u957f \uff1b   \u4f46 \u4e5f \u5e76 \u4e0d\u662f \u5bbd \u8d8a\u957f \uff0c \u79bb \u5b83 \u8d8a\u8fdc \uff0c \u76db \u7684 \u6c34 \u5c31 \u8d8a \u591a \uff0c \u8fd8 \u5f97 \u770b \u6700\u540e \u9762 \u7684 \u90a3 \u51e0\u6761 \u7ebf \u7684 \u9ad8\u5ea6 \u5982\u4f55 \uff0c \u82e5 \u6700\u540e \u4e00\u6761 \u4e00\u6761\u7ebf \u9ad8\u4e8e \u524d\u9762 \u7684 \u7ebf   \\ ( i \\ )   \uff0c \u90a3\u4e48 \u4e0e   \\ ( i \\ )   \u6784\u6210 \u76db \u6700\u591a \u6700\u591a\u6c34 \u7684 \u5bb9\u5668 \u7684 \u53e6\u5916 \u4e00\u6761 \u8fb9 \uff0c \u7edd\u5bf9 \u5c31\u662f \u8fd9\u6761 \u8fb9 \uff1b   \u4f46 \u5b9e\u9645 \u60c5\u51b5 \u4e0b \uff0c \u6bd4 \u8fd9 \u66f4 \u590d\u6742 \uff0c \u6211\u4eec \u5148 \u4ece \u540e\u9762 \u5f80\u524d \u627e\u5230 \u6bd4   \\ ( i \\ )   \u9ad8 \u6216 \u7b49 \u7684 \u7ebf   \\ ( j \\ )   \uff0c \u5219   \\ ( i   \\ sim   j \\ )   \u4e4b\u95f4 \u80fd \u4e0e   \\ ( i \\ )   \u6784\u6210 \u76db \u6700\u5927 \u6c34\u91cf \u7684 \u5bb9\u5668 \u5fc5\u5b9a \u662f   \\ ( j \\ )   \u7ebf \uff1b   \u4f46 \u5bf9\u4e8e   \\ ( j   \\ sim   n \\ )   \u4e4b\u95f4 \u7684 \u7ebf \uff0c \u7531\u4e8e \u5bbd\u5ea6 \u589e\u52a0 \u4e86 \uff0c \u867d\u7136 \u9ad8\u5ea6 \u6709 \u4e9b\u8bb8 \u4e0b\u964d \uff0c \u4f46 \u6211\u4eec \u8fd8 \u5f97 \u904d\u5386 \u4e00\u904d   \\ ( j   \\ sim   n \\ )   \u4e4b\u95f4 \u7684 \u7ebf \uff0c \u624d\u80fd \u786e\u5b9a \u6700\u5927 \u76db \u6c34\u91cf \u3002   \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6   \\ ( O ( n ^ 2 ) \\ )   \u4ee3\u7801 \u53c2\u8003   class   Solution   {   public   :   int   maxArea   (   vector   <   int   > &   height   )   {   int   res   =   0   ;   for   (   int   i   =   0   ;   i   <   height   .   size   ( ) ;   i   ++   )   {   for   (   int   j   =   height   .   size   ( )   -   1   ;   ;   j   --   )   {   res   =   max   (   res   ,   (   j   -   i   )   *   min   (   height   [   i   ] ,   height   [   j   ] ) ) ;   if   (   height   [   j   ]   > =   height   [   i   ] )   break   ;   }   }   return   res   ;   }   } ;","title":"\u8f83 \u66b4\u529b \u7684 \u903b\u8f91"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/#_2","text":"","title":"\u53cc \u6307\u9488"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/","text":"\u7ea6\u745f \u745f\u592b \u7ea6\u745f\u592b \u95ee\u9898   \u7ea6\u745f \u745f\u592b \u7ea6\u745f\u592b \u95ee\u9898   \u6709   \\ ( n \\ )   \u4e2a\u4eba \uff0c \u7f16\u53f7 \u4e3a   \\ ( 1   \\ sim   n \\ )   \u6309 \u987a\u5e8f \u56f4\u6210 \u4e00\u5708 \uff0c \u4ece \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u4eba \u5f00\u59cb \u62a5\u6570 \uff0c \u6570\u5230   \\ ( m \\ )   \u7684 \u4eba \u51fa\u5217 \uff0c \u518d \u7531 \u4e0b \u4e00\u4e2a \u4eba \u4ece   \\ ( 1 \\ )   \u5f00\u59cb \u62a5\u6570 \uff0c \u6570\u5230   \\ ( m \\ )   \u518d \u51fa\u5217 \uff0c \u4ee5\u6b64 \u6b64\u7c7b \u7c7b\u63a8 \u4ee5\u6b64\u7c7b\u63a8 \u3002   \u8bf7 \u4f9d\u6b21 \u8f93\u51fa \u51fa\u5217 \u4eba \u7f16\u53f7 \u3002   \u8f93\u5165 \u683c\u5f0f   \u4e24\u4e2a \u6574\u6570 \u5206\u522b \u4ee3\u8868   \\ ( n , m \\ )   \u3002   \u8f93\u51fa \u683c\u5f0f   \\ ( n \\ )   \u4e2a \u6574\u6570 \uff0c \u6309 \u987a\u5e8f \u8f93\u51fa \u6bcf\u4e2a \u51fa\u5217 \u4eba \u7684 \u7f16\u53f7 \u3002   \u6570\u636e \u8303\u56f4   \\ ( 1   \\ leq   n ,   m   \\ leq   100 \\ )   \u3002   \u5faa\u73af \u94fe\u8868   \u5148\u751f \u6210   \\ ( 1   \\ sim   n \\ )   \u7684 \u94fe\u8868 \uff0c \u5c3e\u5df4 \u8981 \u6307\u5411 \u5934 \u8282\u70b9 \uff0c \u51fa\u5934 \u8282\u70b9 \u4f9d\u6b21 \u5f00\u59cb \u6570 \uff0c \u6570\u5230   \\ ( m \\ )   \u51fa \u94fe\u8868 \uff0c \u77e5\u9053 \u53ea \u5269 \u6700\u540e \u4e00\u4e2a \u8282\u70b9 \u4e3a\u6b62 \uff0c \u6b64\u65f6   p   =   p - > ne   \u5faa\u73af \u94fe\u8868 \u4ee3\u7801 \u53c2\u8003   # include   < iostream >   using   namespace   std   ;   const   int   N   =   int   (   1e7   +   10   ) ;   struct   Node   {   int   v   ;   Node   *   ne   ;   Node   (   int   val   =   0   ,   Node   *   next   =   nullptr   )   :   v   (   val   ) ,   ne   (   next   )   { }   } ;   Node   *   head   ,   *   p   ,   *   q   ;   int   n   ,   m   ,   cnt   ;   int   main   (   void   )   {   cin   > >   n   > >   m   ;   p   =   head   =   new   Node   ( ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   p   - >   ne   =   new   Node   (   i   ) ;   p   =   p   - >   ne   ;   }   p   - >   ne   =   head   - >   ne   ;   while   (   p   ! =   p   - >   ne   )   {   if   (   ++   cnt   = =   m   )   {   cout   < <   p   - >   ne   - >   v   < <   '   '   ;   p   - >   ne   =   p   - >   ne   - >   ne   ;   cnt   =   0   ;   }   else   p   =   p   - >   ne   ;   }   cout   < <   p   - >   v   < <   endl   ;   return   0   ;   }   \u6807\u8bb0 \u6cd5   \u7531\u4e8e \u6570\u636e \u6570\u636e\u91cf \u5f88\u5c11 \uff0c \u53ef\u4ee5 \u7ed9\u51fa \u5217 \u7684 \u4eba \u6253 \u4e0a \u4e00\u4e2a \u6807\u8bb0 \u5e76 \u8fc7\u6ee4 \u6389 \u5373\u53ef   \u6253 \u6807\u8bb0 \u8fc7\u6ee4   # include   < iostream >   using   namespace   std   ;   const   int   N   =   int   (   1e7   +   10   ) ;   int   a   [   N   ] ;   int   n   ,   m   ,   cnt   ,   sum   ;   int   main   (   void   )   {   cin   > >   n   > >   m   ;   for   (   int   i   =   1   ;   sum   ! =   n   ;   i   =   i   %   n   +   1   )   if   (   !   a   [   i   ]   &&   ++   cnt   = =   m   )   cout   < <   i   < <   '   '   ,   sum   ++   ,   cnt   =   0   ,   a   [   i   ]   =   1   ;   cout   < <   endl   ;   return   0   ;   }","title":"\u7ea6\u745f\u592b \u95ee\u9898"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/#_1","text":"\u7ea6\u745f \u745f\u592b \u7ea6\u745f\u592b \u95ee\u9898   \u6709   \\ ( n \\ )   \u4e2a\u4eba \uff0c \u7f16\u53f7 \u4e3a   \\ ( 1   \\ sim   n \\ )   \u6309 \u987a\u5e8f \u56f4\u6210 \u4e00\u5708 \uff0c \u4ece \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u4eba \u5f00\u59cb \u62a5\u6570 \uff0c \u6570\u5230   \\ ( m \\ )   \u7684 \u4eba \u51fa\u5217 \uff0c \u518d \u7531 \u4e0b \u4e00\u4e2a \u4eba \u4ece   \\ ( 1 \\ )   \u5f00\u59cb \u62a5\u6570 \uff0c \u6570\u5230   \\ ( m \\ )   \u518d \u51fa\u5217 \uff0c \u4ee5\u6b64 \u6b64\u7c7b \u7c7b\u63a8 \u4ee5\u6b64\u7c7b\u63a8 \u3002   \u8bf7 \u4f9d\u6b21 \u8f93\u51fa \u51fa\u5217 \u4eba \u7f16\u53f7 \u3002   \u8f93\u5165 \u683c\u5f0f   \u4e24\u4e2a \u6574\u6570 \u5206\u522b \u4ee3\u8868   \\ ( n , m \\ )   \u3002   \u8f93\u51fa \u683c\u5f0f   \\ ( n \\ )   \u4e2a \u6574\u6570 \uff0c \u6309 \u987a\u5e8f \u8f93\u51fa \u6bcf\u4e2a \u51fa\u5217 \u4eba \u7684 \u7f16\u53f7 \u3002   \u6570\u636e \u8303\u56f4   \\ ( 1   \\ leq   n ,   m   \\ leq   100 \\ )   \u3002","title":"\u7ea6\u745f\u592b \u95ee\u9898"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/#_2","text":"\u5148\u751f \u6210   \\ ( 1   \\ sim   n \\ )   \u7684 \u94fe\u8868 \uff0c \u5c3e\u5df4 \u8981 \u6307\u5411 \u5934 \u8282\u70b9 \uff0c \u51fa\u5934 \u8282\u70b9 \u4f9d\u6b21 \u5f00\u59cb \u6570 \uff0c \u6570\u5230   \\ ( m \\ )   \u51fa \u94fe\u8868 \uff0c \u77e5\u9053 \u53ea \u5269 \u6700\u540e \u4e00\u4e2a \u8282\u70b9 \u4e3a\u6b62 \uff0c \u6b64\u65f6   p   =   p - > ne   \u5faa\u73af \u94fe\u8868 \u4ee3\u7801 \u53c2\u8003   # include   < iostream >   using   namespace   std   ;   const   int   N   =   int   (   1e7   +   10   ) ;   struct   Node   {   int   v   ;   Node   *   ne   ;   Node   (   int   val   =   0   ,   Node   *   next   =   nullptr   )   :   v   (   val   ) ,   ne   (   next   )   { }   } ;   Node   *   head   ,   *   p   ,   *   q   ;   int   n   ,   m   ,   cnt   ;   int   main   (   void   )   {   cin   > >   n   > >   m   ;   p   =   head   =   new   Node   ( ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   p   - >   ne   =   new   Node   (   i   ) ;   p   =   p   - >   ne   ;   }   p   - >   ne   =   head   - >   ne   ;   while   (   p   ! =   p   - >   ne   )   {   if   (   ++   cnt   = =   m   )   {   cout   < <   p   - >   ne   - >   v   < <   '   '   ;   p   - >   ne   =   p   - >   ne   - >   ne   ;   cnt   =   0   ;   }   else   p   =   p   - >   ne   ;   }   cout   < <   p   - >   v   < <   endl   ;   return   0   ;   }","title":"\u5faa\u73af \u94fe\u8868"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/#_3","text":"\u7531\u4e8e \u6570\u636e \u6570\u636e\u91cf \u5f88\u5c11 \uff0c \u53ef\u4ee5 \u7ed9\u51fa \u5217 \u7684 \u4eba \u6253 \u4e0a \u4e00\u4e2a \u6807\u8bb0 \u5e76 \u8fc7\u6ee4 \u6389 \u5373\u53ef   \u6253 \u6807\u8bb0 \u8fc7\u6ee4   # include   < iostream >   using   namespace   std   ;   const   int   N   =   int   (   1e7   +   10   ) ;   int   a   [   N   ] ;   int   n   ,   m   ,   cnt   ,   sum   ;   int   main   (   void   )   {   cin   > >   n   > >   m   ;   for   (   int   i   =   1   ;   sum   ! =   n   ;   i   =   i   %   n   +   1   )   if   (   !   a   [   i   ]   &&   ++   cnt   = =   m   )   cout   < <   i   < <   '   '   ,   sum   ++   ,   cnt   =   0   ,   a   [   i   ]   =   1   ;   cout   < <   endl   ;   return   0   ;   }","title":"\u6807\u8bb0 \u6cd5"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/%E9%AA%8C%E8%AF%81%E6%A0%88%E5%BA%8F%E5%88%97/","text":"\u9a8c\u8bc1 \u6808 \u5e8f\u5217   \u9a8c\u8bc1 \u6808 \u5e8f\u5217   \u7ed9\u5b9a \u4e24\u4e2a \u5e8f\u5217   a   \u548c   b   \uff0c \u5176\u4e2d \u8fd9 \u4e24\u4e2a \u5e8f\u5217 \u7684 \u957f\u5ea6 \u76f8\u540c \uff0c \u4e14 \u6ca1\u6709 \u91cd\u590d \u7684 \u5143\u7d20 \uff1b \u8fd9 \u4e24\u4e2a \u5e8f\u5217 \u7684 \u957f\u5ea6 \u4e0d \u8d85\u8fc7   \\ ( 1000 \\ )   \u4e14 \u5b58\u50a8 \u7684 \u5143\u7d20 \u90fd \u662f \u6574\u6570 \uff0c \u8303\u56f4 \u5728   \\ ( 0   \\ sim   1000 \\ )   \u5b50\u5185 \u3002   \u8bf7 \u4f60 \u5224\u65ad \u5e8f\u5217   b   \u662f\u5426 \u53ef\u4ee5 \u901a\u8fc7 \u5e8f\u5217   a   \u501f\u52a9 \u6808 \u6240\u5f97 \u3002   \u8f93\u5165 \u6837\u4f8b   a   =   1   2   3   4   5   b   =   4   5   3   2   1   \u8f93\u51fa \u6837\u4f8b   true   \u5148\u627e \u4e00\u4e0b \u6709 \u4ec0\u4e48 \u89c4\u5f8b \u3001 \u7279\u5f81   \u82e5 \u4e00 \u5f00\u59cb \u5c31 \u8f93\u51fa   4 \uff0c \u90a3\u4e48 \u5728 \u539f \u5e8f\u5217   a   \u4e2d \uff0c \u6bd4   4   \u66f4 \u524d\u9762 \u7684 \u5143\u7d20   1   2   3   \u4e00\u5b9a \u8fd8\u4f1a \u6ede\u7559 \u5728 \u6808 \u4e2d   \u4e0b \u4e00\u6b21 \u8f93\u51fa \u65f6 \uff0c \u8981\u4e48 \u5c31 \u8f93\u51fa \u6bd4   4   \u66f4\u540e \u7684 \u5143\u7d20 \uff0c \u8981\u4e48 \u5c31 \u8f93\u51fa \u6b64\u65f6 \u7684 \u6808\u9876 \u5143\u7d20   3 .   \u5982\u679c \u4e0b\u6b21 \u8f93\u51fa   5   \uff0c \u90a3\u4e48 \u6bd4   5   \u66f4\u524d \u7684 \uff0c \u8fd8 \u6ca1\u6709 \u8f93\u51fa \u7684 \u5143\u7d20 \u80af\u5b9a \u8fd8\u4f1a \u6ede\u7559 \u5728 \u6808 \u4e2d \uff0c \u6211\u4eec \u53ef\u4ee5 \u7528 \u9012\u5f52 \u601d\u8def \u6765 \u6c42\u89e3 \u6b64\u9898 \u3002   \u627e \u89c4\u5f8b \u3001 \u627e \u7279\u5f81 \u7684 \u601d\u8def   vector   <   int   >   a   ,   b   ,   c   ;   / /   3   \u72b6\u6001 \uff1a 0   \u672a \u8bbf\u95ee \uff0c 1   \u6ede\u7559 \u6808\u4e2d \uff0c 2   \u5df2 \u8f93\u51fa   int   cur   ,   n   ;   stack   <   int   >   st   ;   bool   isstack   (   int   pos   )   {   if   (   pos   = =   n   )   return   true   ;   if   (   c   [   b   [   pos   ] ]   = =   1   )   {   if   (   st   .   size   ( )   &&   st   .   top   ( )   = =   b   [   pos   ] )   {   c   [   b   [   pos   ] ]   =   2   ;   st   .   pop   ( ) ;   return   isstack   (   pos   +   1   ) ;   }   else   return   false   ;   }   else   {   while   (   cur   <   n   &&   a   [   cur   ]   ! =   b   [   pos   ] )   {   if   (   c   [   a   [   cur   ] ]   = =   0   )   st   .   push   (   a   [   cur   ] ) ,   c   [   a   [   cur   ] ]   =   1   ;   cur   ++   ;   }   if   (   cur   > =   n   )   return   false   ;   c   [   b   [   pos   ] ]   =   2   ;   return   isstack   (   pos   +   1   ) ;   }   }   \u6808 \u6a21\u62df   \u5148 \u5c06 \u5e8f\u5217   a   \u4e2d \u7684 \u5143\u7d20 \u90fd \u4f9d\u6b21 \u653e\u5165 \u6808\u4e2d   \u5728 \u653e \u7684 \u8fc7\u7a0b \u4e2d\u8981 \u4e0d\u65ad \u5730 \u5c06 \u6808\u9876 \u5143\u7d20 \u4e0e \u5e8f\u5217   b   \u4e2d \u7684 \u5f00\u59cb \u5143\u7d20 \u6bd4\u8f83 \uff0c \u5982\u679c \u6808\u9876 \u5143\u7d20 \u4e0e   b   \u7684 \u5f00\u59cb \u5143\u7d20 \u76f8\u540c \uff0c \u5c31 \u629b\u5f03 \u6808\u9876 \u5143\u7d20 \u548c   b   \u7684 \u5f00\u59cb \u5143\u7d20 \uff0c \u76f4\u5230 \u6808\u4e3a \u7a7a \u6216 \u4e0d \u51fa\u73b0 \u6808\u9876 \u5143\u7d20 \u4e0e \u5f00\u59cb \u5143\u7d20 \u76f8\u540c \u4e3a\u6b62 \u3002   \u5982\u679c \u6700\u7ec8   a   \u8bfb\u5b8c \u4e86 \uff0c \u4f46\u662f   b   \u5374 \u8fd8\u6709 \u5269 \uff0c \u8bf4\u660e \u4e0d\u662f \u6808 \u5e8f\u5217 \uff0c \u6b64\u65f6 \u7684 \u6808 \u4e5f \u4e0d \u4e3a \u7a7a \u3002   \u8be5 \u601d\u8def \u672c\u8d28 \u4e0a \u662f \u627e \u89c4\u5f8b \u3001 \u627e \u7279\u5f81 \u7684 \u601d\u8def \u7684 \u7b80\u5316 \u3002   \u6808 \u6a21\u62df \u601d\u8def   vector   <   int   >   a   ,   b   ;   stack   <   int   >   st   ;   int   n   ;   bool   isstack   ( )   {   int   i   =   0   ,   j   =   0   ;   for   ( ;   i   <   n   &&   j   <   n   ;   i   ++   )   {   st   .   push   (   a   [   i   ] ) ;   while   (   j   <   n   &&   st   .   size   ( )   &&   st   .   top   ( )   = =   b   [   j   ] )   {   st   .   pop   ( ) ;   j   ++   ;   }   }   return   st   .   size   ( )   = =   0   ;   }","title":"\u9a8c\u8bc1 \u6808 \u5e8f\u5217"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/%E9%AA%8C%E8%AF%81%E6%A0%88%E5%BA%8F%E5%88%97/#_1","text":"\u9a8c\u8bc1 \u6808 \u5e8f\u5217   \u7ed9\u5b9a \u4e24\u4e2a \u5e8f\u5217   a   \u548c   b   \uff0c \u5176\u4e2d \u8fd9 \u4e24\u4e2a \u5e8f\u5217 \u7684 \u957f\u5ea6 \u76f8\u540c \uff0c \u4e14 \u6ca1\u6709 \u91cd\u590d \u7684 \u5143\u7d20 \uff1b \u8fd9 \u4e24\u4e2a \u5e8f\u5217 \u7684 \u957f\u5ea6 \u4e0d \u8d85\u8fc7   \\ ( 1000 \\ )   \u4e14 \u5b58\u50a8 \u7684 \u5143\u7d20 \u90fd \u662f \u6574\u6570 \uff0c \u8303\u56f4 \u5728   \\ ( 0   \\ sim   1000 \\ )   \u5b50\u5185 \u3002   \u8bf7 \u4f60 \u5224\u65ad \u5e8f\u5217   b   \u662f\u5426 \u53ef\u4ee5 \u901a\u8fc7 \u5e8f\u5217   a   \u501f\u52a9 \u6808 \u6240\u5f97 \u3002   \u8f93\u5165 \u6837\u4f8b   a   =   1   2   3   4   5   b   =   4   5   3   2   1   \u8f93\u51fa \u6837\u4f8b   true","title":"\u9a8c\u8bc1 \u6808 \u5e8f\u5217"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/%E9%AA%8C%E8%AF%81%E6%A0%88%E5%BA%8F%E5%88%97/#_2","text":"\u82e5 \u4e00 \u5f00\u59cb \u5c31 \u8f93\u51fa   4 \uff0c \u90a3\u4e48 \u5728 \u539f \u5e8f\u5217   a   \u4e2d \uff0c \u6bd4   4   \u66f4 \u524d\u9762 \u7684 \u5143\u7d20   1   2   3   \u4e00\u5b9a \u8fd8\u4f1a \u6ede\u7559 \u5728 \u6808 \u4e2d   \u4e0b \u4e00\u6b21 \u8f93\u51fa \u65f6 \uff0c \u8981\u4e48 \u5c31 \u8f93\u51fa \u6bd4   4   \u66f4\u540e \u7684 \u5143\u7d20 \uff0c \u8981\u4e48 \u5c31 \u8f93\u51fa \u6b64\u65f6 \u7684 \u6808\u9876 \u5143\u7d20   3 .   \u5982\u679c \u4e0b\u6b21 \u8f93\u51fa   5   \uff0c \u90a3\u4e48 \u6bd4   5   \u66f4\u524d \u7684 \uff0c \u8fd8 \u6ca1\u6709 \u8f93\u51fa \u7684 \u5143\u7d20 \u80af\u5b9a \u8fd8\u4f1a \u6ede\u7559 \u5728 \u6808 \u4e2d \uff0c \u6211\u4eec \u53ef\u4ee5 \u7528 \u9012\u5f52 \u601d\u8def \u6765 \u6c42\u89e3 \u6b64\u9898 \u3002   \u627e \u89c4\u5f8b \u3001 \u627e \u7279\u5f81 \u7684 \u601d\u8def   vector   <   int   >   a   ,   b   ,   c   ;   / /   3   \u72b6\u6001 \uff1a 0   \u672a \u8bbf\u95ee \uff0c 1   \u6ede\u7559 \u6808\u4e2d \uff0c 2   \u5df2 \u8f93\u51fa   int   cur   ,   n   ;   stack   <   int   >   st   ;   bool   isstack   (   int   pos   )   {   if   (   pos   = =   n   )   return   true   ;   if   (   c   [   b   [   pos   ] ]   = =   1   )   {   if   (   st   .   size   ( )   &&   st   .   top   ( )   = =   b   [   pos   ] )   {   c   [   b   [   pos   ] ]   =   2   ;   st   .   pop   ( ) ;   return   isstack   (   pos   +   1   ) ;   }   else   return   false   ;   }   else   {   while   (   cur   <   n   &&   a   [   cur   ]   ! =   b   [   pos   ] )   {   if   (   c   [   a   [   cur   ] ]   = =   0   )   st   .   push   (   a   [   cur   ] ) ,   c   [   a   [   cur   ] ]   =   1   ;   cur   ++   ;   }   if   (   cur   > =   n   )   return   false   ;   c   [   b   [   pos   ] ]   =   2   ;   return   isstack   (   pos   +   1   ) ;   }   }","title":"\u5148\u627e \u4e00\u4e0b \u6709 \u4ec0\u4e48 \u89c4\u5f8b \u3001 \u7279\u5f81"},{"location":"label/%E5%88%B7%E9%A2%98%E5%86%8C/%E9%AA%8C%E8%AF%81%E6%A0%88%E5%BA%8F%E5%88%97/#_3","text":"\u5148 \u5c06 \u5e8f\u5217   a   \u4e2d \u7684 \u5143\u7d20 \u90fd \u4f9d\u6b21 \u653e\u5165 \u6808\u4e2d   \u5728 \u653e \u7684 \u8fc7\u7a0b \u4e2d\u8981 \u4e0d\u65ad \u5730 \u5c06 \u6808\u9876 \u5143\u7d20 \u4e0e \u5e8f\u5217   b   \u4e2d \u7684 \u5f00\u59cb \u5143\u7d20 \u6bd4\u8f83 \uff0c \u5982\u679c \u6808\u9876 \u5143\u7d20 \u4e0e   b   \u7684 \u5f00\u59cb \u5143\u7d20 \u76f8\u540c \uff0c \u5c31 \u629b\u5f03 \u6808\u9876 \u5143\u7d20 \u548c   b   \u7684 \u5f00\u59cb \u5143\u7d20 \uff0c \u76f4\u5230 \u6808\u4e3a \u7a7a \u6216 \u4e0d \u51fa\u73b0 \u6808\u9876 \u5143\u7d20 \u4e0e \u5f00\u59cb \u5143\u7d20 \u76f8\u540c \u4e3a\u6b62 \u3002   \u5982\u679c \u6700\u7ec8   a   \u8bfb\u5b8c \u4e86 \uff0c \u4f46\u662f   b   \u5374 \u8fd8\u6709 \u5269 \uff0c \u8bf4\u660e \u4e0d\u662f \u6808 \u5e8f\u5217 \uff0c \u6b64\u65f6 \u7684 \u6808 \u4e5f \u4e0d \u4e3a \u7a7a \u3002   \u8be5 \u601d\u8def \u672c\u8d28 \u4e0a \u662f \u627e \u89c4\u5f8b \u3001 \u627e \u7279\u5f81 \u7684 \u601d\u8def \u7684 \u7b80\u5316 \u3002   \u6808 \u6a21\u62df \u601d\u8def   vector   <   int   >   a   ,   b   ;   stack   <   int   >   st   ;   int   n   ;   bool   isstack   ( )   {   int   i   =   0   ,   j   =   0   ;   for   ( ;   i   <   n   &&   j   <   n   ;   i   ++   )   {   st   .   push   (   a   [   i   ] ) ;   while   (   j   <   n   &&   st   .   size   ( )   &&   st   .   top   ( )   = =   b   [   j   ] )   {   st   .   pop   ( ) ;   j   ++   ;   }   }   return   st   .   size   ( )   = =   0   ;   }","title":"\u6808 \u6a21\u62df"},{"location":"label/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","text":"","title":"Index"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/n%E4%B8%AD%E5%8F%96r/","text":"n   \u4e2d\u53d6   r   \u9898\u76ee \u4e00   \u5728   \\ ( n \\ )   \u4e2a \u76f8\u5f02 \u7684 \u7269\u4ef6 \u4e2d\u53d6   \\ ( r \\ )   \u4e2a \u7684 \u4e0d\u540c \u6392\u5217 \u603b\u6570 \u3002   \\ ( p _ r ^ n   =   A _ r ^ n   =   n   ( n   -   1 )   ( n   -   2 )   \\ cdots   ( n   -   r   +   1 )   =   \\ frac { n ! } { ( n   -   r ) ! } \\ )   \u9898\u76ee \u4e8c   \u5728   \\ ( n \\ )   \u4e2a \u76f8\u5f02 \u7684 \u7269\u4ef6 \u4e2d\u53d6   \\ ( r \\ )   \u4e2a \u7684 \u4e0d\u540c \u7ec4\u5408 \u603b\u6570 \u3002   \\ ( C _ r ^ n   =   \\ frac { p _ r ^ n } { r ! }   =   \\ frac { n ! } { r ! ( n   -   r ) ! } \\ )   \uff0c \u6211\u4eec \u4e5f \u53ef\u4ee5 \u4f7f\u7528   \\ ( \\ binom { n } { r } \\ )   \u4ee3\u66ff   \\ ( C _ r ^ n \\ )   \u3002   \u7ec4\u5408 \u6570\u53c8\u5e38 \u79f0\u4e3a \u300c \u4e8c\u9879 \u4e8c\u9879\u5f0f \u7cfb\u6570 \u300d \uff0c \u56e0\u4e3a \u5b83\u5e38 \u51fa\u73b0 \u5728 \uff1a   \\ ( ( a   +   b ) ^ n   =   \\ sum ^ { n } _ { i   =   0 }   \\ binom { n } { i } a ^ ib ^ { n   -   i } \\ )   \u5efa\u8bae \u7ed3\u5408 \u300c \u4e09\u89d2 \u6768\u8f89\u4e09\u89d2 \u300d \u7406\u89e3 \u7ec4\u5408 \u6570 \uff1a   \u9898\u76ee \u4e09   \u5c06   n   \u4e2a \u76f8\u5f02 \u7684 \u7269\u4ef6 \u5206\u6210   \\ ( k \\ )   \u5806 \uff0c \u5404\u5806 \u7269\u4ef6 \u6570 \u5206\u522b \u4e3a   \\ ( r _ 1 \u3001 \\ cdots   \u3001 r _ k \\ )   \u7684 \u5206\u6cd5 \u3002   \\ ( \\ frac { n ! } { r _ 1 !   \\ cdots   r _ k ! } \\ )   \u89e3\u91ca \u4e00\u4e0b \u89e3\u91ca\u4e00\u4e0b \uff0c \u5b83 \u8fd9\u4e2a   \\ ( k \\ )   \u5806 \u662f \u6709 \u7f16\u53f7 \u7684 \uff0c \u5373 \uff1a \u7b2c   \\ ( 1 \\ )   \u5806 \u3001 \u7b2c   \\ ( 2 \\ )   \u5806 \u3001   \\ ( \\ cdots \\ )   \u3001 \u7b2c   \\ ( k \\ )   \u5806 \u3002   \u9898\u76ee \u56db   \u5c06   n   \u4e2a \u76f8\u5f02 \u7684 \u7269\u4ef6 \u5e73\u5747 \u5206\u6210   \\ ( k \\ )   \u7ec4 \u7684 \u5206\u6cd5 \u3002   \u6570\u636e \u4fdd\u8bc1   \\ ( n   =   sk \\ )   \uff0c \u5176\u4e2d   \\ ( n \u3001 s \u3001 k \\ )   \u90fd \u662f \u6574\u6570 \u3002   \u5148 \u6309\u7167 \u5206\u5806 \u7684 \u65b9\u6cd5 \uff0c \u5206\u6210   \\ ( k \\ )   \u5806 \uff0c \u6bcf\u5806   \\ ( \\ frac { n } { k } \\ )   \u4e2a \u7684 \u5206\u6cd5 \u4e3a \uff1a   \\ ( \\ frac { n ! } { ( \\ frac { n } { k } ) ^ k } \\ )   \u7531\u4e8e \u5206\u7ec4 \u662f \u4e0d \u8981\u6c42 \u5bf9 \u7ec4\u6709 \u6b21\u5e8f \u3001 \u7f16\u53f7 \u4e4b\u5206 \u7684 \uff0c \u800c\u5806 \u6070\u597d \u76f8\u53cd \u6070\u597d\u76f8\u53cd \uff0c \u82e5 \u7b2c\u4e00 \u5806 \u4e0e \u7b2c\u4e8c \u5806 \u4ea4\u6362 \u4f4d\u7f6e \uff0c \u5c06\u4f1a \u662f \u65b0 \u7684 \u5206\u6cd5 \uff0c \u4f46 \u5728 \u5206\u7ec4 \u91cc\u9762 \u7b2c\u4e00 \u4e00\u7ec4 \u7b2c\u4e00\u7ec4 \u548c \u7b2c\u4e8c \u4e8c\u7ec4 \u7b2c\u4e8c\u7ec4 \u4ea4\u6362 \u4f4d\u7f6e \u8fd8\u662f \u540c \u4e00\u79cd \u5206 \u6cd5 \uff0c \u6240\u4ee5 \u6309\u7167 \u5206\u7ec4 \u7684 \u5206\u6cd5 \u4e3a \uff1a   \\ ( \\ frac { n ! } { ( \\ frac { n } { k } ) ^ kk ! } \\ )","title":"n   \u4e2d\u53d6   r"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/n%E4%B8%AD%E5%8F%96r/#n-r","text":"\u9898\u76ee \u4e00   \u5728   \\ ( n \\ )   \u4e2a \u76f8\u5f02 \u7684 \u7269\u4ef6 \u4e2d\u53d6   \\ ( r \\ )   \u4e2a \u7684 \u4e0d\u540c \u6392\u5217 \u603b\u6570 \u3002   \\ ( p _ r ^ n   =   A _ r ^ n   =   n   ( n   -   1 )   ( n   -   2 )   \\ cdots   ( n   -   r   +   1 )   =   \\ frac { n ! } { ( n   -   r ) ! } \\ )   \u9898\u76ee \u4e8c   \u5728   \\ ( n \\ )   \u4e2a \u76f8\u5f02 \u7684 \u7269\u4ef6 \u4e2d\u53d6   \\ ( r \\ )   \u4e2a \u7684 \u4e0d\u540c \u7ec4\u5408 \u603b\u6570 \u3002   \\ ( C _ r ^ n   =   \\ frac { p _ r ^ n } { r ! }   =   \\ frac { n ! } { r ! ( n   -   r ) ! } \\ )   \uff0c \u6211\u4eec \u4e5f \u53ef\u4ee5 \u4f7f\u7528   \\ ( \\ binom { n } { r } \\ )   \u4ee3\u66ff   \\ ( C _ r ^ n \\ )   \u3002   \u7ec4\u5408 \u6570\u53c8\u5e38 \u79f0\u4e3a \u300c \u4e8c\u9879 \u4e8c\u9879\u5f0f \u7cfb\u6570 \u300d \uff0c \u56e0\u4e3a \u5b83\u5e38 \u51fa\u73b0 \u5728 \uff1a   \\ ( ( a   +   b ) ^ n   =   \\ sum ^ { n } _ { i   =   0 }   \\ binom { n } { i } a ^ ib ^ { n   -   i } \\ )   \u5efa\u8bae \u7ed3\u5408 \u300c \u4e09\u89d2 \u6768\u8f89\u4e09\u89d2 \u300d \u7406\u89e3 \u7ec4\u5408 \u6570 \uff1a   \u9898\u76ee \u4e09   \u5c06   n   \u4e2a \u76f8\u5f02 \u7684 \u7269\u4ef6 \u5206\u6210   \\ ( k \\ )   \u5806 \uff0c \u5404\u5806 \u7269\u4ef6 \u6570 \u5206\u522b \u4e3a   \\ ( r _ 1 \u3001 \\ cdots   \u3001 r _ k \\ )   \u7684 \u5206\u6cd5 \u3002   \\ ( \\ frac { n ! } { r _ 1 !   \\ cdots   r _ k ! } \\ )   \u89e3\u91ca \u4e00\u4e0b \u89e3\u91ca\u4e00\u4e0b \uff0c \u5b83 \u8fd9\u4e2a   \\ ( k \\ )   \u5806 \u662f \u6709 \u7f16\u53f7 \u7684 \uff0c \u5373 \uff1a \u7b2c   \\ ( 1 \\ )   \u5806 \u3001 \u7b2c   \\ ( 2 \\ )   \u5806 \u3001   \\ ( \\ cdots \\ )   \u3001 \u7b2c   \\ ( k \\ )   \u5806 \u3002   \u9898\u76ee \u56db   \u5c06   n   \u4e2a \u76f8\u5f02 \u7684 \u7269\u4ef6 \u5e73\u5747 \u5206\u6210   \\ ( k \\ )   \u7ec4 \u7684 \u5206\u6cd5 \u3002   \u6570\u636e \u4fdd\u8bc1   \\ ( n   =   sk \\ )   \uff0c \u5176\u4e2d   \\ ( n \u3001 s \u3001 k \\ )   \u90fd \u662f \u6574\u6570 \u3002   \u5148 \u6309\u7167 \u5206\u5806 \u7684 \u65b9\u6cd5 \uff0c \u5206\u6210   \\ ( k \\ )   \u5806 \uff0c \u6bcf\u5806   \\ ( \\ frac { n } { k } \\ )   \u4e2a \u7684 \u5206\u6cd5 \u4e3a \uff1a   \\ ( \\ frac { n ! } { ( \\ frac { n } { k } ) ^ k } \\ )   \u7531\u4e8e \u5206\u7ec4 \u662f \u4e0d \u8981\u6c42 \u5bf9 \u7ec4\u6709 \u6b21\u5e8f \u3001 \u7f16\u53f7 \u4e4b\u5206 \u7684 \uff0c \u800c\u5806 \u6070\u597d \u76f8\u53cd \u6070\u597d\u76f8\u53cd \uff0c \u82e5 \u7b2c\u4e00 \u5806 \u4e0e \u7b2c\u4e8c \u5806 \u4ea4\u6362 \u4f4d\u7f6e \uff0c \u5c06\u4f1a \u662f \u65b0 \u7684 \u5206\u6cd5 \uff0c \u4f46 \u5728 \u5206\u7ec4 \u91cc\u9762 \u7b2c\u4e00 \u4e00\u7ec4 \u7b2c\u4e00\u7ec4 \u548c \u7b2c\u4e8c \u4e8c\u7ec4 \u7b2c\u4e8c\u7ec4 \u4ea4\u6362 \u4f4d\u7f6e \u8fd8\u662f \u540c \u4e00\u79cd \u5206 \u6cd5 \uff0c \u6240\u4ee5 \u6309\u7167 \u5206\u7ec4 \u7684 \u5206\u6cd5 \u4e3a \uff1a   \\ ( \\ frac { n ! } { ( \\ frac { n } { k } ) ^ kk ! } \\ )","title":"n   \u4e2d\u53d6   r"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E4%B8%A4%E7%B2%92%E9%AA%B0%E5%AD%90/","text":"\u4e24\u7c92 \u9ab0\u5b50   \u9898\u76ee   \u63b7 \u4e24\u7c92 \u9ab0\u5b50 \uff0c \u9ab0\u5b50   1   \u7684 \u7ed3\u679c \u53ef\u80fd \u4e3a   \\ ( a \\ )   \uff0c \u9ab0\u5b50   2   \u7684 \u7ed3\u679c \u53ef\u80fd \u4e3a   \\ ( b \\ )   \u3002   \u6c42   \\ ( a   +   b \\ )   \u7684 \u6982\u7387 \u5206\u5e03 \u6982\u7387\u5206\u5e03 \uff08 \u4e5f \u53ef\u4ee5 \u79f0\u547c \u6982\u7387 \u5206\u5e03 \u6982\u7387\u5206\u5e03 \u4e3a \uff1a \u5206\u5e03 \u8868 \u3001 \u5206\u5e03 \u5f8b \uff09   \u8bbe \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u4e3a   \\ ( a   +   b \\ )   \u7684 \u548c \uff0c \u5219   \\ ( X \\ )   \u7684 \u53ef\u80fd \u53d6\u503c \u4e3a \uff1a   \\ ( 2 \u3001 3 \u3001 4 \u3001 5 \u3001 6 \u3001 7 \u3001 8 \u3001 9 \u3001 10 \u3001 11 \u3001 12 \\ )   .   \u6982\u7387 \u5206\u5e03 \u6982\u7387\u5206\u5e03 \u4e3a \uff0c \u6216\u79f0 \u5206\u5e03 \u8868\u4e3a \uff0c \u6216\u79f0 \u5206\u5e03 \u5f8b\u4e3a \uff1a   X   2   3   4   5   6   7   8   9   10   11   12   \u6982   \u7387   \\ ( \\ frac { 1 } { 36 } \\ )   \\ ( \\ frac { 2 } { 36 } \\ )   \\ ( \\ frac { 3 } { 36 } \\ )   \\ ( \\ frac { 4 } { 36 } \\ )   \\ ( \\ frac { 5 } { 36 } \\ )   \\ ( \\ frac { 6 } { 36 } \\ )   \\ ( \\ frac { 5 } { 36 } \\ )   \\ ( \\ frac { 4 } { 36 } \\ )   \\ ( \\ frac { 3 } { 36 } \\ )   \\ ( \\ frac { 2 } { 36 } \\ )   \\ ( \\ frac { 1 } { 36 } \\ )","title":"\u4e24\u7c92 \u9ab0\u5b50"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E4%B8%A4%E7%B2%92%E9%AA%B0%E5%AD%90/#_1","text":"\u9898\u76ee   \u63b7 \u4e24\u7c92 \u9ab0\u5b50 \uff0c \u9ab0\u5b50   1   \u7684 \u7ed3\u679c \u53ef\u80fd \u4e3a   \\ ( a \\ )   \uff0c \u9ab0\u5b50   2   \u7684 \u7ed3\u679c \u53ef\u80fd \u4e3a   \\ ( b \\ )   \u3002   \u6c42   \\ ( a   +   b \\ )   \u7684 \u6982\u7387 \u5206\u5e03 \u6982\u7387\u5206\u5e03 \uff08 \u4e5f \u53ef\u4ee5 \u79f0\u547c \u6982\u7387 \u5206\u5e03 \u6982\u7387\u5206\u5e03 \u4e3a \uff1a \u5206\u5e03 \u8868 \u3001 \u5206\u5e03 \u5f8b \uff09   \u8bbe \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u4e3a   \\ ( a   +   b \\ )   \u7684 \u548c \uff0c \u5219   \\ ( X \\ )   \u7684 \u53ef\u80fd \u53d6\u503c \u4e3a \uff1a   \\ ( 2 \u3001 3 \u3001 4 \u3001 5 \u3001 6 \u3001 7 \u3001 8 \u3001 9 \u3001 10 \u3001 11 \u3001 12 \\ )   .   \u6982\u7387 \u5206\u5e03 \u6982\u7387\u5206\u5e03 \u4e3a \uff0c \u6216\u79f0 \u5206\u5e03 \u8868\u4e3a \uff0c \u6216\u79f0 \u5206\u5e03 \u5f8b\u4e3a \uff1a   X   2   3   4   5   6   7   8   9   10   11   12   \u6982   \u7387   \\ ( \\ frac { 1 } { 36 } \\ )   \\ ( \\ frac { 2 } { 36 } \\ )   \\ ( \\ frac { 3 } { 36 } \\ )   \\ ( \\ frac { 4 } { 36 } \\ )   \\ ( \\ frac { 5 } { 36 } \\ )   \\ ( \\ frac { 6 } { 36 } \\ )   \\ ( \\ frac { 5 } { 36 } \\ )   \\ ( \\ frac { 4 } { 36 } \\ )   \\ ( \\ frac { 3 } { 36 } \\ )   \\ ( \\ frac { 2 } { 36 } \\ )   \\ ( \\ frac { 1 } { 36 } \\ )","title":"\u4e24\u7c92 \u9ab0\u5b50"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E4%BA%8C%E7%BB%B4%E5%9D%87%E5%8C%80%E5%88%86%E5%B8%83%E7%AE%80%E5%8D%95%E4%BE%8B%E9%A2%98/","text":"\u4e8c\u7ef4 \u5747\u5300 \u5206\u5e03 \u5747\u5300\u5206\u5e03 \u7b80\u5355 \u4f8b\u9898   Question   \u8bbe   \\ ( ( X ,   Y ) \\ )   \u5728 \u5706\u57df   \\ ( x ^ 2   +   y   ^   2   \\ leq   4 \\ )   \u4e0a \u670d\u4ece \u5747\u5300 \u5206\u5e03 \u5747\u5300\u5206\u5e03   \u6c42   \\ ( ( X ,   Y ) \\ )   \u7684 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \uff1b   \u6c42   \\ ( P \\ { 0   <   X   <   1 ,   0   <   Y   <   1 \\ } \\ )   \uff1b   \u5bf9\u4e8e \u5747\u5300 \u5206\u5e03 \u5747\u5300\u5206\u5e03 \uff0c \u5176 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570   \\ ( f ( x ,   y ) \\ )   \u7531\u4e8e \u5747\u5300 \uff0c \u5bf9\u4e8e \u5b9a\u4e49 \u5b9a\u4e49\u57df \u5185 \u7684 \u5bb9\u6613 \u4e00\u5c0f \u5c0f\u5757 \u4e00\u5c0f\u5757   \\ ( dxdy \\ )   \u6765\u8bf4 \uff0c \u9ad8 \u90fd \u4f1a \u662f \u5e38\u6570 \u4e14 \u5904\u5904 \u76f8\u7b49 \uff0c \u6240\u4ee5   \\ ( f ( x ,   y ) \\ )   \u662f \u4e00\u4e2a \u5e38\u6570   \u5747\u5300 \u5206\u5e03 \u5747\u5300\u5206\u5e03 \uff0c \u65e0\u8bba \u591a\u5c11 \u7ef4\u5ea6 \uff0c \u5176 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u7684 \u300c \u9ad8 \u300d \uff0c \u90fd \u4f1a \u662f \u5e38\u6570 \uff0c \u4e0d\u5982 \u5012\u4e0d\u5982 \u4e0d\u5982\u8bf4 \u5012\u4e0d\u5982\u8bf4 \uff0c \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u5c31\u662f \u4e00\u4e2a \u5e38\u6570   \u4e0d\u4ec5 \u5982\u6b64 \u4e0d\u4ec5\u5982\u6b64 \uff0c   \\ ( \\ iint _ Df ( x ,   y ) dxdy   =   1 \\ )   \uff0c \u7531\u4e8e \u5e95 \u9762\u79ef \u662f   \\ ( D \\ )   \uff0c \u6240\u4ee5 \uff1a   \\ ( \\ iint _ Df ( x ,   y ) dxdy   =   \\ iint _ Dcdxdy   =   c   \\ iint _ Ddxdy   =   c   \\ times   D \\ )   \u89e3\u5f97   \\ ( f ( x ,   y )   =   \\ frac { 1 } { D } \\ )   \u7531 \u9898\u610f \u77e5 \uff0c \u82e5   \\ ( x ^ 2   +   y   ^   2   \\ leq   4 \\ )   \uff0c \u5219 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u7684 \u5e95 \u9762\u79ef \u662f   \\ ( 4   \\ pi \\ )   \uff0c \u6240\u4ee5 \uff1a   \\ ( f ( x , y )   =   \\ frac { 1 } { 4   \\ pi } \\ )   \\ ( P \\ { 0   <   X   <   1 ,   0   <   Y   <   1 \\ }   =   \\ int _ { 0 } ^ { 1 } dx \\ int _ { 0 } ^ { 1 } \\ frac { 1 } { 4   \\ pi } dy   =   \\ frac { 1 } { 4   \\ pi } \\ )","title":"\u4e8c\u7ef4 \u5747\u5300\u5206\u5e03 \u7b80\u5355 \u4f8b\u9898"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E4%BA%8C%E7%BB%B4%E5%9D%87%E5%8C%80%E5%88%86%E5%B8%83%E7%AE%80%E5%8D%95%E4%BE%8B%E9%A2%98/#_1","text":"Question   \u8bbe   \\ ( ( X ,   Y ) \\ )   \u5728 \u5706\u57df   \\ ( x ^ 2   +   y   ^   2   \\ leq   4 \\ )   \u4e0a \u670d\u4ece \u5747\u5300 \u5206\u5e03 \u5747\u5300\u5206\u5e03   \u6c42   \\ ( ( X ,   Y ) \\ )   \u7684 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \uff1b   \u6c42   \\ ( P \\ { 0   <   X   <   1 ,   0   <   Y   <   1 \\ } \\ )   \uff1b   \u5bf9\u4e8e \u5747\u5300 \u5206\u5e03 \u5747\u5300\u5206\u5e03 \uff0c \u5176 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570   \\ ( f ( x ,   y ) \\ )   \u7531\u4e8e \u5747\u5300 \uff0c \u5bf9\u4e8e \u5b9a\u4e49 \u5b9a\u4e49\u57df \u5185 \u7684 \u5bb9\u6613 \u4e00\u5c0f \u5c0f\u5757 \u4e00\u5c0f\u5757   \\ ( dxdy \\ )   \u6765\u8bf4 \uff0c \u9ad8 \u90fd \u4f1a \u662f \u5e38\u6570 \u4e14 \u5904\u5904 \u76f8\u7b49 \uff0c \u6240\u4ee5   \\ ( f ( x ,   y ) \\ )   \u662f \u4e00\u4e2a \u5e38\u6570   \u5747\u5300 \u5206\u5e03 \u5747\u5300\u5206\u5e03 \uff0c \u65e0\u8bba \u591a\u5c11 \u7ef4\u5ea6 \uff0c \u5176 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u7684 \u300c \u9ad8 \u300d \uff0c \u90fd \u4f1a \u662f \u5e38\u6570 \uff0c \u4e0d\u5982 \u5012\u4e0d\u5982 \u4e0d\u5982\u8bf4 \u5012\u4e0d\u5982\u8bf4 \uff0c \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u5c31\u662f \u4e00\u4e2a \u5e38\u6570   \u4e0d\u4ec5 \u5982\u6b64 \u4e0d\u4ec5\u5982\u6b64 \uff0c   \\ ( \\ iint _ Df ( x ,   y ) dxdy   =   1 \\ )   \uff0c \u7531\u4e8e \u5e95 \u9762\u79ef \u662f   \\ ( D \\ )   \uff0c \u6240\u4ee5 \uff1a   \\ ( \\ iint _ Df ( x ,   y ) dxdy   =   \\ iint _ Dcdxdy   =   c   \\ iint _ Ddxdy   =   c   \\ times   D \\ )   \u89e3\u5f97   \\ ( f ( x ,   y )   =   \\ frac { 1 } { D } \\ )   \u7531 \u9898\u610f \u77e5 \uff0c \u82e5   \\ ( x ^ 2   +   y   ^   2   \\ leq   4 \\ )   \uff0c \u5219 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u7684 \u5e95 \u9762\u79ef \u662f   \\ ( 4   \\ pi \\ )   \uff0c \u6240\u4ee5 \uff1a   \\ ( f ( x , y )   =   \\ frac { 1 } { 4   \\ pi } \\ )   \\ ( P \\ { 0   <   X   <   1 ,   0   <   Y   <   1 \\ }   =   \\ int _ { 0 } ^ { 1 } dx \\ int _ { 0 } ^ { 1 } \\ frac { 1 } { 4   \\ pi } dy   =   \\ frac { 1 } { 4   \\ pi } \\ )","title":"\u4e8c\u7ef4 \u5747\u5300\u5206\u5e03 \u7b80\u5355 \u4f8b\u9898"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E4%BA%8C%E7%BB%B4%E6%AD%A3%E5%A4%AA%E5%88%86%E5%B8%83%E7%AE%80%E5%8D%95%E4%BE%8B%E9%A2%98/","text":"\u4e8c\u7ef4 \u6b63\u592a \u5206\u5e03 \u7b80\u5355 \u4f8b\u9898   Question   \u8bbe   \\ ( ( X ,   Y )   \\ sim   N ( 0 ,   0 ,   \\ sigma   ^   2 ,   \\ sigma   ^   2 ,   0 ) \\ )   \uff0c \u6c42   \\ ( P \\ { X   <   Y \\ } \\ )   \u3002   \u82e5 \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( ( X ,   Y ) \\ )   \u7684 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u6ee1\u8db3 \uff1a   \u5c31 \u79f0 \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( ( X ,   Y ) \\ )   \u670d\u4ece \u4e8c\u7ef4 \u6b63\u592a \u5206\u5e03 \uff0c \u8bb0 \u4f5c \uff1a   \\ ( ( X ,   Y )   \\ sim   N ( \\ mu   _ 1 ,   \\ mu   _ 2 ,   \\ sigma   _ 1   ^   2 ,   \\ sigma   _ 2   ^   2 ,   \\ rho ) \\ )   \u7531 \u9898\u610f \u53ef\u77e5 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u4e3a \uff1a   \\ ( f ( x ,   y )   =   \\ frac { 1 } { 2 \\ pi   \\ sigma   ^   2 } e   ^   { - \\ frac { x   ^   2   +   y   ^   2 } { 2   \\ sigma   ^   2 } } \\ )   \u6240\u4ee5 \u82e5 \u8981\u6c42   \\ ( P \\ { X   <   Y \\ } \\ )   \u7684 \u6982\u7387 \uff0c \u9700\u8981 \u5148 \u5c06   \\ ( Y \\ )   \u56fa\u5b9a \u4e0b\u6765 \uff0c \u5219   \\ ( X \\ )   \u7684 \u53d6\u503c \u8303\u56f4 \u4e3a \uff1a   \\ ( - \\ infty   <   X   <   Y \\ )   :   \\ ( P \\ { X   <   Y \\ }   =   \\ int _ { - \\ infty } ^ { + \\ infty } \\ int _ { - \\ infty } ^ { Y } \\ frac { 1 } { 2 \\ pi   \\ sigma   ^   2 } e   ^   { - \\ frac { x   ^   2   +   y   ^   2 } { 2   \\ sigma   ^   2 } } dxdy \\ )   \u8f6c\u6362 \u6362\u6210 \u8f6c\u6362\u6210 \u5750\u6807 \u6781\u5750\u6807 \uff0c \u5c06 \u5b9a\u4e49 \u5b9a\u4e49\u57df \u7684 \u9762\u79ef \u5355\u5143 \u5728 \u65e0\u9650 \u65e0\u9650\u5c0f \u7684 \u60c5\u51b5 \u4e0b \uff0c \u51e0\u4e4e \u76f8\u540c \uff0c \u6240\u4ee5 \u5bf9\u4e8e   \\ ( ( dx ,   dy ) \\ )   \u548c   \\ ( ( dr ,   d \\ theta ) \\ )   \u5728 \u65e0\u9650 \u65e0\u9650\u5c0f \u7684 \u60c5\u51b5 \u4e0b\u5206 \u7684 \u5230 \u7684 \u9762\u79ef \u53ef\u4ee5 \u753b\u4e0a \u7b49 \u53f7 \uff1a   \\ ( dxdy   =   rdrd \\ theta \\ )   \u4ee4   \\ ( x   =   r \\ cos   \\ theta ,   y   =   r   \\ sin   \\ theta \\ )   \uff0c \u5219   \\ ( X   <   Y \\ )   \u53ef\u4ee5 \u8868\u793a \u6210 \uff1a   \\ ( \\ theta   \\ in   [ \\ frac { \\ pi } { 4 } ,   \\ frac { 5 \\ pi } { 4 } ] \\ )   \u6240\u4ee5 \u539f \u79ef\u5206 \u5f0f \u7528 \u5750\u6807 \u6781\u5750\u6807 \u8868\u793a \u5982\u4e0b \uff1a   \\ ( \\ int _ { \\ frac { \\ pi } { 4 } } ^ { \\ frac { 5 \\ pi } { 4 } } \\ int _ { 0 } ^ { + \\ infty } \\ frac { 1 } { 2 \\ pi   \\ sigma   ^   2 } e   ^   { - \\ frac { r   ^   2 } { 2   \\ sigma   ^   2 } } rdrd \\ theta \\ )   \u7ed3\u679c \u4e3a \uff1a   \\ ( \\ frac { 1 } { 2 } \\ )","title":"\u4e8c\u7ef4 \u6b63\u592a \u5206\u5e03 \u7b80\u5355 \u4f8b\u9898"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E4%BA%8C%E7%BB%B4%E6%AD%A3%E5%A4%AA%E5%88%86%E5%B8%83%E7%AE%80%E5%8D%95%E4%BE%8B%E9%A2%98/#_1","text":"Question   \u8bbe   \\ ( ( X ,   Y )   \\ sim   N ( 0 ,   0 ,   \\ sigma   ^   2 ,   \\ sigma   ^   2 ,   0 ) \\ )   \uff0c \u6c42   \\ ( P \\ { X   <   Y \\ } \\ )   \u3002   \u82e5 \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( ( X ,   Y ) \\ )   \u7684 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u6ee1\u8db3 \uff1a   \u5c31 \u79f0 \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( ( X ,   Y ) \\ )   \u670d\u4ece \u4e8c\u7ef4 \u6b63\u592a \u5206\u5e03 \uff0c \u8bb0 \u4f5c \uff1a   \\ ( ( X ,   Y )   \\ sim   N ( \\ mu   _ 1 ,   \\ mu   _ 2 ,   \\ sigma   _ 1   ^   2 ,   \\ sigma   _ 2   ^   2 ,   \\ rho ) \\ )   \u7531 \u9898\u610f \u53ef\u77e5 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u4e3a \uff1a   \\ ( f ( x ,   y )   =   \\ frac { 1 } { 2 \\ pi   \\ sigma   ^   2 } e   ^   { - \\ frac { x   ^   2   +   y   ^   2 } { 2   \\ sigma   ^   2 } } \\ )   \u6240\u4ee5 \u82e5 \u8981\u6c42   \\ ( P \\ { X   <   Y \\ } \\ )   \u7684 \u6982\u7387 \uff0c \u9700\u8981 \u5148 \u5c06   \\ ( Y \\ )   \u56fa\u5b9a \u4e0b\u6765 \uff0c \u5219   \\ ( X \\ )   \u7684 \u53d6\u503c \u8303\u56f4 \u4e3a \uff1a   \\ ( - \\ infty   <   X   <   Y \\ )   :   \\ ( P \\ { X   <   Y \\ }   =   \\ int _ { - \\ infty } ^ { + \\ infty } \\ int _ { - \\ infty } ^ { Y } \\ frac { 1 } { 2 \\ pi   \\ sigma   ^   2 } e   ^   { - \\ frac { x   ^   2   +   y   ^   2 } { 2   \\ sigma   ^   2 } } dxdy \\ )   \u8f6c\u6362 \u6362\u6210 \u8f6c\u6362\u6210 \u5750\u6807 \u6781\u5750\u6807 \uff0c \u5c06 \u5b9a\u4e49 \u5b9a\u4e49\u57df \u7684 \u9762\u79ef \u5355\u5143 \u5728 \u65e0\u9650 \u65e0\u9650\u5c0f \u7684 \u60c5\u51b5 \u4e0b \uff0c \u51e0\u4e4e \u76f8\u540c \uff0c \u6240\u4ee5 \u5bf9\u4e8e   \\ ( ( dx ,   dy ) \\ )   \u548c   \\ ( ( dr ,   d \\ theta ) \\ )   \u5728 \u65e0\u9650 \u65e0\u9650\u5c0f \u7684 \u60c5\u51b5 \u4e0b\u5206 \u7684 \u5230 \u7684 \u9762\u79ef \u53ef\u4ee5 \u753b\u4e0a \u7b49 \u53f7 \uff1a   \\ ( dxdy   =   rdrd \\ theta \\ )   \u4ee4   \\ ( x   =   r \\ cos   \\ theta ,   y   =   r   \\ sin   \\ theta \\ )   \uff0c \u5219   \\ ( X   <   Y \\ )   \u53ef\u4ee5 \u8868\u793a \u6210 \uff1a   \\ ( \\ theta   \\ in   [ \\ frac { \\ pi } { 4 } ,   \\ frac { 5 \\ pi } { 4 } ] \\ )   \u6240\u4ee5 \u539f \u79ef\u5206 \u5f0f \u7528 \u5750\u6807 \u6781\u5750\u6807 \u8868\u793a \u5982\u4e0b \uff1a   \\ ( \\ int _ { \\ frac { \\ pi } { 4 } } ^ { \\ frac { 5 \\ pi } { 4 } } \\ int _ { 0 } ^ { + \\ infty } \\ frac { 1 } { 2 \\ pi   \\ sigma   ^   2 } e   ^   { - \\ frac { r   ^   2 } { 2   \\ sigma   ^   2 } } rdrd \\ theta \\ )   \u7ed3\u679c \u4e3a \uff1a   \\ ( \\ frac { 1 } { 2 } \\ )","title":"\u4e8c\u7ef4 \u6b63\u592a \u5206\u5e03 \u7b80\u5355 \u4f8b\u9898"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E4%BA%8C%E7%BB%B4%E8%BF%9E%E7%BB%AD%E5%9E%8B%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F%E7%9A%84%E8%BE%B9%E7%BC%98%E5%88%86%E5%B8%83%E7%AE%80%E5%8D%95%E4%BE%8B%E9%A2%98/","text":"\u4e8c\u7ef4 \u8fde\u7eed \u8fde\u7eed\u578b \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf \u7684 \u8fb9\u7f18 \u5206\u5e03 \u7b80\u5355 \u4f8b\u9898   Question   \u8bbe \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u548c   \\ ( Y \\ )   \u5177\u6709 \u8054\u5408 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \uff1a   \\ ( x   ^   2   \\ leq   y   \\ leq   x \u65f6 \uff0c f ( x ,   y )   =   6 \\ )   \u5176\u4ed6 \u4e3a   0 .   \u6c42 \u8fb9\u7f18 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570   \\ ( f _ x ( x ) ,   f _ y ( y ) \\ )   \u8fb9\u7f18 \u5206\u5e03 \u51fd\u6570 \uff1a   \\ ( F _ x ( x )   =   \\ int _ { - \\ infty } ^ { x } \\ int _ { - \\ infty } ^ { + \\ infty } f ( x ,   y )   dydx \\ )   \u8fb9\u7f18 \u5bc6\u5ea6 \u51fd\u6570 \uff1a   \\ ( f _ x ( x )   =   \\ int ^ { + \\ infty } _ { - \\ infty }   f ( x ,   y )   dy \uff0c f _ y ( y )   =   \\ int   ^   { + \\ infty } _ { - \\ infty }   f   ( x ,   y )   dx \\ )   \u5bf9\u4e8e \u8fd9\u9053\u9898 \uff0c \u5982\u679c \u6211\u4eec \u8981\u6c42   \\ ( F _ x ( x ) \\ )   \u5f97 \u5148 \u628a   \\ ( x \\ )   \u56fa\u5b9a \u4e0b\u6765 \uff0c \u90a3\u4e48   \\ ( y \\ )   \u7684 \u53d6\u503c \u8303\u56f4 \u662f \uff1a   \\ ( x   ^   2   \\ leq   y   \\ leq   x \\ )   \u6240\u4ee5   \\ ( F _ x ( x ) \\ )   \u7b49\u4e8e \uff1a   \\ ( F _ x ( x )   =   \\ int _ { - \\ infty } ^ { x } \\ int _ { x   ^   2 } ^ { x }   6   dydx \\ )   \u7531\u4e8e   \\ ( x   ^   2   \\ leq   x \\ )   \uff0c \u89e3\u5f97   \\ ( 0   \\ leq   x   \\ leq   1 \\ )   \u6240\u4ee5   \\ ( F _ x ( x )   =   \\ int _ { 0 } ^ { x } \\ int _ { x   ^   2 } ^ { x }   6   dydx \\ )   \u7ed3\u679c \u4e3a \uff1a   \\ ( F _ x ( x )   =   3   x   ^   2   -   2   x   ^   3 \uff0c \u5176\u4e2d   0   \\ leq   x   \\ leq   1 \\ )   \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \uff1a   \\ ( f _ x ( x )   =   \\ int   _   { x   ^   2 }   ^   { x }   6   dy \\ )   \u89e3\u5f97 \uff1a   \\ ( f _ x ( x )   =   6   ( x   -   x   ^   2 ) ,   \u6b64\u65f6   0   \\ leq   x   \\ leq   1 \\ )   \u82e5 \u8981\u6c42   \\ ( Y \\ )   \u7684 \u8fb9\u7f18 \u5206\u5e03 \u51fd\u6570 \uff0c \u5f97 \u5148 \u5c06   \\ ( y \\ )   \u56fa\u5b9a \u4e0b\u6765 \uff0c   \\ ( y \\ )   \u7684 \u53d6\u503c \u8303\u56f4 \u4e3a \uff1a   \\ ( 0   \\ sim   1 \\ )   \\ ( x \\ )   \u7684 \u53d6\u503c \u8303\u56f4 \u4e3a \uff1a   \\ ( y   \\ leq   x   \\ leq   \\ sqrt { y } \\ )   \u6240\u4ee5 \u8fb9\u7f18 \u5206\u5e03 \u51fd\u6570 \u7684 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u4e3a \uff1a   \\ ( F _ y ( y )   =   \\ int _ { 0 } ^ { y } \\ int _ { y } ^ { \\ sqrt { y } } 6dxdy \\ )   \u89e3\u5f97 \uff1a   \\ ( F _ y ( y )   =   4y ^ { \\ frac { 3 } { 2 } }   -   3   y   ^   2 \\ )   \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \uff1a   \\ ( f _ y ( y )   =   \\ int   _   { y }   ^   { \\ sqrt { y } }   6   dx \\ )   \u89e3\u5f97 \uff1a   \\ ( f _ y ( y )   =   6   ( \\ sqrt { y }   -   y ) ,   \u6b64\u65f6   0   \\ leq   y   \\ leq   1 \\ )","title":"\u8fb9\u7f18 \u5206\u5e03 \u7b80\u5355 \u4f8b\u9898"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E4%BA%8C%E7%BB%B4%E8%BF%9E%E7%BB%AD%E5%9E%8B%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F%E7%9A%84%E8%BE%B9%E7%BC%98%E5%88%86%E5%B8%83%E7%AE%80%E5%8D%95%E4%BE%8B%E9%A2%98/#_1","text":"Question   \u8bbe \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u548c   \\ ( Y \\ )   \u5177\u6709 \u8054\u5408 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \uff1a   \\ ( x   ^   2   \\ leq   y   \\ leq   x \u65f6 \uff0c f ( x ,   y )   =   6 \\ )   \u5176\u4ed6 \u4e3a   0 .   \u6c42 \u8fb9\u7f18 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570   \\ ( f _ x ( x ) ,   f _ y ( y ) \\ )   \u8fb9\u7f18 \u5206\u5e03 \u51fd\u6570 \uff1a   \\ ( F _ x ( x )   =   \\ int _ { - \\ infty } ^ { x } \\ int _ { - \\ infty } ^ { + \\ infty } f ( x ,   y )   dydx \\ )   \u8fb9\u7f18 \u5bc6\u5ea6 \u51fd\u6570 \uff1a   \\ ( f _ x ( x )   =   \\ int ^ { + \\ infty } _ { - \\ infty }   f ( x ,   y )   dy \uff0c f _ y ( y )   =   \\ int   ^   { + \\ infty } _ { - \\ infty }   f   ( x ,   y )   dx \\ )   \u5bf9\u4e8e \u8fd9\u9053\u9898 \uff0c \u5982\u679c \u6211\u4eec \u8981\u6c42   \\ ( F _ x ( x ) \\ )   \u5f97 \u5148 \u628a   \\ ( x \\ )   \u56fa\u5b9a \u4e0b\u6765 \uff0c \u90a3\u4e48   \\ ( y \\ )   \u7684 \u53d6\u503c \u8303\u56f4 \u662f \uff1a   \\ ( x   ^   2   \\ leq   y   \\ leq   x \\ )   \u6240\u4ee5   \\ ( F _ x ( x ) \\ )   \u7b49\u4e8e \uff1a   \\ ( F _ x ( x )   =   \\ int _ { - \\ infty } ^ { x } \\ int _ { x   ^   2 } ^ { x }   6   dydx \\ )   \u7531\u4e8e   \\ ( x   ^   2   \\ leq   x \\ )   \uff0c \u89e3\u5f97   \\ ( 0   \\ leq   x   \\ leq   1 \\ )   \u6240\u4ee5   \\ ( F _ x ( x )   =   \\ int _ { 0 } ^ { x } \\ int _ { x   ^   2 } ^ { x }   6   dydx \\ )   \u7ed3\u679c \u4e3a \uff1a   \\ ( F _ x ( x )   =   3   x   ^   2   -   2   x   ^   3 \uff0c \u5176\u4e2d   0   \\ leq   x   \\ leq   1 \\ )   \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \uff1a   \\ ( f _ x ( x )   =   \\ int   _   { x   ^   2 }   ^   { x }   6   dy \\ )   \u89e3\u5f97 \uff1a   \\ ( f _ x ( x )   =   6   ( x   -   x   ^   2 ) ,   \u6b64\u65f6   0   \\ leq   x   \\ leq   1 \\ )   \u82e5 \u8981\u6c42   \\ ( Y \\ )   \u7684 \u8fb9\u7f18 \u5206\u5e03 \u51fd\u6570 \uff0c \u5f97 \u5148 \u5c06   \\ ( y \\ )   \u56fa\u5b9a \u4e0b\u6765 \uff0c   \\ ( y \\ )   \u7684 \u53d6\u503c \u8303\u56f4 \u4e3a \uff1a   \\ ( 0   \\ sim   1 \\ )   \\ ( x \\ )   \u7684 \u53d6\u503c \u8303\u56f4 \u4e3a \uff1a   \\ ( y   \\ leq   x   \\ leq   \\ sqrt { y } \\ )   \u6240\u4ee5 \u8fb9\u7f18 \u5206\u5e03 \u51fd\u6570 \u7684 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u4e3a \uff1a   \\ ( F _ y ( y )   =   \\ int _ { 0 } ^ { y } \\ int _ { y } ^ { \\ sqrt { y } } 6dxdy \\ )   \u89e3\u5f97 \uff1a   \\ ( F _ y ( y )   =   4y ^ { \\ frac { 3 } { 2 } }   -   3   y   ^   2 \\ )   \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \uff1a   \\ ( f _ y ( y )   =   \\ int   _   { y }   ^   { \\ sqrt { y } }   6   dx \\ )   \u89e3\u5f97 \uff1a   \\ ( f _ y ( y )   =   6   ( \\ sqrt { y }   -   y ) ,   \u6b64\u65f6   0   \\ leq   y   \\ leq   1 \\ )","title":"\u4e8c\u7ef4 \u8fde\u7eed\u578b \u968f\u673a\u53d8\u91cf \u7684 \u8fb9\u7f18 \u5206\u5e03 \u7b80\u5355 \u4f8b\u9898"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E4%BA%8C%E7%BB%B4%E9%9A%8F%E6%9C%BA%E5%90%91%E9%87%8F%E7%AE%80%E5%8D%95%E4%BE%8B%E9%A2%98/","text":"\u4e8c\u7ef4 \u968f\u673a \u5411\u91cf \u7b80\u5355 \u4f8b\u9898 \u5f15\u5165   Question   \u8bbe   \u4e8c\u7ef4 \u968f\u673a \u5411\u91cf   \\ ( ( X ,   Y ) \\ )   \u7684 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u4e3a \uff1a   \\ ( f ( x ,   y )   =   ke ^ { - ( 2x   +   3   y ) } ,   x   >   0 ,   y   >   0 \\ )   ;   \u5176\u4ed6 \u4e3a   0 .   \u8bf7 \u786e\u5b9a \u5e38\u6570   \\ ( k \\ )   \uff1b   \u6c42   \\ ( ( X ,   Y ) \\ )   \u7684 \u5206\u5e03 \u51fd\u6570 \uff1b   \u6c42   \\ ( P \\ { X   <   Y \\ } \\ )   \uff1b   \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u7684 \u6027\u8d28 \uff1a   \u5168 \u79ef\u5206 \u4e3a   \\ ( 1 \\ )   \uff1a   \\ ( \\ int _ { - \\ infty } ^ { + \\ infty } \\ int _ { - \\ infty } ^ { + \\ infty } f ( x ,   y ) dxdy   =   1 \\ )   \\ ( F ( x ,   y )   =   \\ int _ { - \\ infty } ^ { y } \\ int _ { - \\ infty } ^ { x } f ( x ,   y ) dxdy \\ )   \u7531 \u9898\u610f \u6613\u5f97 \uff1a   \\ ( \\ int _ { 0 } ^ { + \\ infty } \\ int _ { 0 } ^ { + \\ infty }   f ( x ,   y )   dxdy   =   1 \\ )   \u53ef\u89e3 \u5f97 \uff1a   \\ ( \\ frac { k } { 6 }   =   1 \\ )   \u6240\u4ee5   \\ ( k   =   6 \\ )   \u5206\u5e03 \u51fd\u6570 \uff1a   \\ ( F ( x ,   y )   =   \\ int _ { 0 } ^ { y } \\ int _ { 0 } ^ { x } f ( x ,   y ) dxdy \\ )   \u89e3\u5f97 \uff1a   \\ ( F ( x ,   y )   =   1   +   e   ^   { - ( 2x   +   3y ) }   -   e   ^   { - 2x }   -   e   ^   { - 3y }   =   ( 1   -   e   ^   { - 2x } ) ( 1   -   e   ^   { - 3y } ) \\ )   \u6c42   \\ ( P \\ { X   <   Y \\ } \\ )   \uff0c \u601d\u8def \u662f \u5148 \u56fa\u5b9a \u4e00\u4e2a   \\ ( Y \\ )   \uff0c \u90a3\u4e48 \u6ee1\u8db3 \u6761\u4ef6 \u6ee1\u8db3\u6761\u4ef6 \u7684   \\ ( X \\ )   \u6ee1\u8db3   \\ ( 0   <   X   <   Y \\ )   \uff1a   \\ ( \\ int _ { 0 } ^ { + \\ infty } \\ int _ { 0 } ^ { y } f ( x ,   y ) dxdy   =   \\ frac { 2 } { 5 } \\ )","title":"\u4e8c\u7ef4 \u968f\u673a \u5411\u91cf \u7b80\u5355 \u4f8b\u9898 \u5f15\u5165"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E4%BA%8C%E7%BB%B4%E9%9A%8F%E6%9C%BA%E5%90%91%E9%87%8F%E7%AE%80%E5%8D%95%E4%BE%8B%E9%A2%98/#_1","text":"Question   \u8bbe   \u4e8c\u7ef4 \u968f\u673a \u5411\u91cf   \\ ( ( X ,   Y ) \\ )   \u7684 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u4e3a \uff1a   \\ ( f ( x ,   y )   =   ke ^ { - ( 2x   +   3   y ) } ,   x   >   0 ,   y   >   0 \\ )   ;   \u5176\u4ed6 \u4e3a   0 .   \u8bf7 \u786e\u5b9a \u5e38\u6570   \\ ( k \\ )   \uff1b   \u6c42   \\ ( ( X ,   Y ) \\ )   \u7684 \u5206\u5e03 \u51fd\u6570 \uff1b   \u6c42   \\ ( P \\ { X   <   Y \\ } \\ )   \uff1b   \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u7684 \u6027\u8d28 \uff1a   \u5168 \u79ef\u5206 \u4e3a   \\ ( 1 \\ )   \uff1a   \\ ( \\ int _ { - \\ infty } ^ { + \\ infty } \\ int _ { - \\ infty } ^ { + \\ infty } f ( x ,   y ) dxdy   =   1 \\ )   \\ ( F ( x ,   y )   =   \\ int _ { - \\ infty } ^ { y } \\ int _ { - \\ infty } ^ { x } f ( x ,   y ) dxdy \\ )   \u7531 \u9898\u610f \u6613\u5f97 \uff1a   \\ ( \\ int _ { 0 } ^ { + \\ infty } \\ int _ { 0 } ^ { + \\ infty }   f ( x ,   y )   dxdy   =   1 \\ )   \u53ef\u89e3 \u5f97 \uff1a   \\ ( \\ frac { k } { 6 }   =   1 \\ )   \u6240\u4ee5   \\ ( k   =   6 \\ )   \u5206\u5e03 \u51fd\u6570 \uff1a   \\ ( F ( x ,   y )   =   \\ int _ { 0 } ^ { y } \\ int _ { 0 } ^ { x } f ( x ,   y ) dxdy \\ )   \u89e3\u5f97 \uff1a   \\ ( F ( x ,   y )   =   1   +   e   ^   { - ( 2x   +   3y ) }   -   e   ^   { - 2x }   -   e   ^   { - 3y }   =   ( 1   -   e   ^   { - 2x } ) ( 1   -   e   ^   { - 3y } ) \\ )   \u6c42   \\ ( P \\ { X   <   Y \\ } \\ )   \uff0c \u601d\u8def \u662f \u5148 \u56fa\u5b9a \u4e00\u4e2a   \\ ( Y \\ )   \uff0c \u90a3\u4e48 \u6ee1\u8db3 \u6761\u4ef6 \u6ee1\u8db3\u6761\u4ef6 \u7684   \\ ( X \\ )   \u6ee1\u8db3   \\ ( 0   <   X   <   Y \\ )   \uff1a   \\ ( \\ int _ { 0 } ^ { + \\ infty } \\ int _ { 0 } ^ { y } f ( x ,   y ) dxdy   =   \\ frac { 2 } { 5 } \\ )","title":"\u4e8c\u7ef4 \u968f\u673a \u5411\u91cf \u7b80\u5355 \u4f8b\u9898 \u5f15\u5165"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83/","text":"\u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03   Question   \u8bbe\u67d0 \u4e8b\u4ef6   \\ ( A \\ )   \u5728 \u4e00\u6b21 \u8bd5\u9a8c \u4e2d \u53d1\u751f \u7684 \u6982\u7387 \u4e3a   \\ ( p \\ )   \u3002   \u73b0\u628a \u8fd9\u4e2a \u8bd5\u9a8c \u72ec\u7acb \u5730 \u91cd\u590d   \\ ( n \\ )   \u6b21 \uff0c \u4ee5   \\ ( X \\ )   \u8bb0   \\ ( A \\ )   \u5728 \u8fd9   \\ ( n \\ )   \u6b21 \u5b9e\u9a8c \u4e2d \u53d1\u751f \u7684 \u6b21\u6570 \uff0c \u5219   \\ ( X \\ )   \u7684 \u53ef\u80fd \u53d6\u503c \u4e3a   \\ ( 0 \u3001 1 \u3001 \\ cdots   \u3001 n \\ )   \u3002   \u8bd5\u6c42   \\ ( P ( X   =   k ) \\ )   \u7684 \u6982\u7387 \uff0c \u5176\u4e2d   \\ ( k \\ )   \u662f   \\ ( 0   \\ sim   n \\ )   \u7684 \u6574\u6570 \u3002   \u601d\u7ef4 \u8fc7\u7a0b \u601d\u7ef4\u8fc7\u7a0b   \u7531\u4e8e   \\ ( k \\ )   \u662f \u4e00\u4e2a \u4e0d \u5927\u4e8e   \\ ( n \\ )   \u7684 \u81ea\u7136 \u81ea\u7136\u6570 \uff0c \u4ee3\u8868 \u4e8b\u4ef6   \\ ( A \\ )   \u53d1\u751f \u7684 \u6b21\u6570 \uff1b \u90a3\u4e48 \u4e8b\u4ef6   \\ ( A \\ )   \u4e0d \u53d1\u751f \u7684 \u6b21\u6570 \u4e3a   \\ ( n   -   k \\ )   \u3002   \u76f8\u5f53 \u5f53\u4e8e \u76f8\u5f53\u4e8e \u662f \u5c06   \\ ( n \\ )   \u5206\u6210 \u4e24\u79cd \u5806 \uff0c \u4e00\u79cd \u662f   \u300c   \\ ( A \\ )   \u53d1\u751f \u5806 \u300d \uff0c \u53e6\u5916 \u4e00\u79cd \u662f   \u300c   \\ ( A \\ )   \u4e0d \u53d1\u751f \u5806 \u300d \uff0c \u4e2a\u6570 \u5206\u522b \u4e3a   \\ ( k \\ )   \u3001   \\ ( n   -   k \\ )   \u3002   \u6240\u4ee5 \u6982\u7387 \u4e3a \uff1a   \\ ( P ( X   =   k )   =   \\ binom { n } { k } p ^ k ( 1   -   p )   ^   { n   -   k } \\ )   \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03 \u5b9a\u4e49   \u6211\u4eec \u5b9a\u4e49 \u8fd9\u79cd \u5206\u5e03 \u4e3a \u300c \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03 \u300d \u7528   \\ ( b ( k ;   n ,   p ) \\ )   \u6765 \u8868\u793a \u5728   \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03   \u4e0b \uff0c \u8bd5\u9a8c \u72ec\u7acb \u8fdb\u884c   \\ ( n \\ )   \u6b21 \uff0c \u6bcf\u6b21 \u4e8b\u4ef6 \u53d1\u751f \u7684 \u6982\u7387 \u4e3a   \\ ( p \\ )   \u7684 \u60c5\u51b5 \u4e0b \uff0c \u6c42 \u4e8b\u4ef6 \u53d1\u751f   \\ ( k \\ )   \u6b21 \u7684 \u6982\u7387 \uff1b \u7528   \\ ( X   \\ sim   B ( n ,   p ) \\ )   \u8868\u793a \u8be5 \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u670d\u4ece \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03 \u3002","title":"\u4e8c\u9879\u5206\u5e03"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83/#_1","text":"Question   \u8bbe\u67d0 \u4e8b\u4ef6   \\ ( A \\ )   \u5728 \u4e00\u6b21 \u8bd5\u9a8c \u4e2d \u53d1\u751f \u7684 \u6982\u7387 \u4e3a   \\ ( p \\ )   \u3002   \u73b0\u628a \u8fd9\u4e2a \u8bd5\u9a8c \u72ec\u7acb \u5730 \u91cd\u590d   \\ ( n \\ )   \u6b21 \uff0c \u4ee5   \\ ( X \\ )   \u8bb0   \\ ( A \\ )   \u5728 \u8fd9   \\ ( n \\ )   \u6b21 \u5b9e\u9a8c \u4e2d \u53d1\u751f \u7684 \u6b21\u6570 \uff0c \u5219   \\ ( X \\ )   \u7684 \u53ef\u80fd \u53d6\u503c \u4e3a   \\ ( 0 \u3001 1 \u3001 \\ cdots   \u3001 n \\ )   \u3002   \u8bd5\u6c42   \\ ( P ( X   =   k ) \\ )   \u7684 \u6982\u7387 \uff0c \u5176\u4e2d   \\ ( k \\ )   \u662f   \\ ( 0   \\ sim   n \\ )   \u7684 \u6574\u6570 \u3002","title":"\u4e8c\u9879\u5206\u5e03"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83/#_2","text":"\u7531\u4e8e   \\ ( k \\ )   \u662f \u4e00\u4e2a \u4e0d \u5927\u4e8e   \\ ( n \\ )   \u7684 \u81ea\u7136 \u81ea\u7136\u6570 \uff0c \u4ee3\u8868 \u4e8b\u4ef6   \\ ( A \\ )   \u53d1\u751f \u7684 \u6b21\u6570 \uff1b \u90a3\u4e48 \u4e8b\u4ef6   \\ ( A \\ )   \u4e0d \u53d1\u751f \u7684 \u6b21\u6570 \u4e3a   \\ ( n   -   k \\ )   \u3002   \u76f8\u5f53 \u5f53\u4e8e \u76f8\u5f53\u4e8e \u662f \u5c06   \\ ( n \\ )   \u5206\u6210 \u4e24\u79cd \u5806 \uff0c \u4e00\u79cd \u662f   \u300c   \\ ( A \\ )   \u53d1\u751f \u5806 \u300d \uff0c \u53e6\u5916 \u4e00\u79cd \u662f   \u300c   \\ ( A \\ )   \u4e0d \u53d1\u751f \u5806 \u300d \uff0c \u4e2a\u6570 \u5206\u522b \u4e3a   \\ ( k \\ )   \u3001   \\ ( n   -   k \\ )   \u3002   \u6240\u4ee5 \u6982\u7387 \u4e3a \uff1a   \\ ( P ( X   =   k )   =   \\ binom { n } { k } p ^ k ( 1   -   p )   ^   { n   -   k } \\ )","title":"\u601d\u7ef4\u8fc7\u7a0b"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83/#_3","text":"\u6211\u4eec \u5b9a\u4e49 \u8fd9\u79cd \u5206\u5e03 \u4e3a \u300c \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03 \u300d \u7528   \\ ( b ( k ;   n ,   p ) \\ )   \u6765 \u8868\u793a \u5728   \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03   \u4e0b \uff0c \u8bd5\u9a8c \u72ec\u7acb \u8fdb\u884c   \\ ( n \\ )   \u6b21 \uff0c \u6bcf\u6b21 \u4e8b\u4ef6 \u53d1\u751f \u7684 \u6982\u7387 \u4e3a   \\ ( p \\ )   \u7684 \u60c5\u51b5 \u4e0b \uff0c \u6c42 \u4e8b\u4ef6 \u53d1\u751f   \\ ( k \\ )   \u6b21 \u7684 \u6982\u7387 \uff1b \u7528   \\ ( X   \\ sim   B ( n ,   p ) \\ )   \u8868\u793a \u8be5 \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u670d\u4ece \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03 \u3002","title":"\u4e8c\u9879\u5206\u5e03 \u5b9a\u4e49"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83%E5%8F%AF%E8%BF%91%E4%BC%BC%E7%9C%8B%E6%88%90%E6%B3%8A%E6%9D%BE%E5%88%86%E5%B8%83%E7%9A%84%E6%83%85%E5%86%B5/","text":"\u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03 \u53ef \u8fd1\u4f3c \u770b\u6210 \u6cca\u677e \u5206\u5e03 \u7684 \u60c5\u51b5   Question   \u73b0\u5728 \u9700\u8981   \\ ( 100 \\ )   \u4e2a \u7b26\u5408 \u89c4\u683c \u7684 \u5143\u4ef6 \u3002   \u4ece \u5e02\u573a \u4e0a \u4e70 \u7684 \u8be5 \u5143\u4ef6 \u6709 \u5e9f\u54c1 \u5e9f\u54c1\u7387   \\ ( 0.01 \\ )   \uff0c \u6545\u5982 \u53ea \u4e70   \\ ( 100 \\ )   \u4e2a \uff0c \u5219 \u4ed6\u4eec \u5168\u90e8 \u7b26\u5408 \u89c4\u683c \u7684 \u673a\u4f1a \u6050\u6016 \u4e0d \u5927 \uff0c \u4e3a\u6b64 \uff0c \u6211\u4eec \u4e70   \\ ( 100   +   a \\ )   \u4e2a \u3002   \\ ( a \\ )   \u8fd9\u6837 \u53d6 \uff0c \u4ee5 \u4f7f \u300c \u5728 \u8fd9   \\ ( 100   +   a \\ )   \u4e2a \u5143\u4ef6 \u4e2d \u81f3\u5c11 \u6709   \\ ( 100 \\ )   \u4e2a \u7b26\u5408 \u89c4\u683c \u300d \u8fd9\u4e2a \u4e8b\u4ef6   \\ ( A \\ )   \u7684 \u6982\u7387 \u4e0d \u5c0f\u4e8e   \\ ( 0.95 \\ )   .   \u95ee   \\ ( a \\ )   \u81f3\u5c11 \u8981 \u591a \u5927 \uff1f   \u601d\u7ef4 \u8fc7\u7a0b \u601d\u7ef4\u8fc7\u7a0b   \u82e5   \\ ( 100   +   a \\ )   \u4e2a \u5143\u4ef6 \u4e2d\u6709   \\ ( k ( k   \\ geq   100 ) \\ )   \u4e2a \u7b26\u5408 \u5408\u89c4 \u89c4\u5b9a \u7b26\u5408\u89c4\u5b9a \uff0c \u90a3\u4e48 \u5c31 \u4f1a \u6709   \\ ( 100   -   k \\ )   \u4e2a \u4e0d \u7b26\u5408 \u5408\u89c4 \u89c4\u5b9a \u7b26\u5408\u89c4\u5b9a \uff0c \u8fd9 \u5f88 \u5bb9\u6613 \u60f3\u5230 \u5c06   \\ ( 100   +   a \\ )   \u5206\u6210 \u4e24\u5806 \uff0c \u4e00\u5806 \u4ee3\u8868 \u7b26\u5408 \u6709   \\ ( k \\ )   \u4e2a \uff0c \u53e6 \u4e00\u5806 \u4ee3\u8868 \u4e0d \u7b26\u5408 \u6709   \\ ( 100   -   k \\ )   \u4e2a \uff0c \u8fd9 \u53ef\u4ee5 \u7528 \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03   \\ ( b ( k   \\ geq   100 ;   100   +   a ,   0.99 ) \\ )   \u6765 \u4ee3\u66ff \u3002   \u5bf9\u4e8e   \\ ( 100   \\ leq   k   \\ leq   100   +   a \\ )   \u8303\u56f4 \u5185 \u7684 \u6bcf \u4e00\u4e2a   \\ ( k \\ )   \uff0c \u53d1\u751f \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( P ( X   =   k )   =   \\ binom { n } { k } p ^ k ( 1   -   p ) ^ { n   -   k } \\ )   \u6240\u4ee5 \u5bf9 \u53d6\u503c \u8303\u56f4 \u5185 \u6bcf \u4e00\u4e2a   \\ ( k \\ )   \u6c42\u548c \u4e3a \uff1a   \\ ( \\ sum ^ { 100   +   a } _ { 100 } \\ binom { 100   +   a } { k } 0.99 ^ k0.01 ^ { 100   +   a   -   k }   \\ geq   0.95 \\ )   \u6211\u4eec \u53d1\u73b0 \uff0c \u73b0\u5728 \u7528   \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03 \u6765 \u66b4\u529b \u6c42\u89e3 \u633a \u56f0\u96be \u7684   \uff0c \u9700\u8981 \u4e0d\u65ad \u679a\u4e3e \u6bcf \u4e00\u4e2a   \\ ( k \\ )   \u7684 \u6982\u7387 \u7136\u540e \u6c42\u548c \u3002   \u6cca\u677e \u5206\u5e03   \u82e5 \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u7684 \u53ef\u80fd \u53d6\u503c \u4e3a   \\ ( 0 \u3001 1 \u3001 2 \u3001 \\ cdots \\ )   \u4e14 \u6982\u7387 \u5206\u5e03 \u6982\u7387\u5206\u5e03 \u4e3a :   \\ ( P ( X   =   i )   =   \\ frac { e   ^   { - \\ lambda } \\ lambda   ^   i } { i ! } \\ )   \u5c31 \u79f0   \\ ( X \\ )   \u670d\u4ece \u6cca\u677e \u5206\u5e03 \uff0c \u8bb0 \u4e3a   \\ ( X   \\ sim   P ( \\ lambda ) \\ )   \u3002   \u4e00\u822c \u6765\u8bf4 \u4e00\u822c\u6765\u8bf4 \uff0c \u82e5 \u5bf9\u4e8e \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03   \\ ( X   \\ sim   B ( n ,   p ) \\ )   \uff0c \u5176\u4e2d   \\ ( n \\ )   \u5f88\u5927 \uff0c   \\ ( p \\ )   \u5f88\u5c0f \uff0c \u800c   \\ ( np   =   \\ lambda \\ )   \u5f88 \u5c0f\u65f6 \uff0c   \\ ( X \\ )   \u7684 \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03 \u53ef \u8fd1\u4f3c \u770b\u6210 \u662f \u6cca\u677e \u5206\u5e03 :   \\ ( X   \\ sim   B ( n ,   p )   \\ rightarrow   P ( \\ lambda   =   np ) \\ )   \u4e3a\u4e86 \u5c06 \u4e0a\u8ff0 \u7684 \u601d\u7ef4 \u8fc7\u7a0b \u601d\u7ef4\u8fc7\u7a0b \u7684 \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X   =   k \\ )   \u7684 \u53d6\u503c \u8303\u56f4 \u4ece   \\ ( 100 \\ )   \u5f00\u59cb \u8f6c\u6362 \u6362\u6210 \u8f6c\u6362\u6210 \u4e0e \u6cca\u677e \u5206\u5e03 \u7684 \u4ece   \\ ( 0 \\ )   \u5f00\u59cb \u76f8\u543b \u543b\u5408 \u76f8\u543b\u5408 \uff0c \u6211\u4eec \u4e0d\u59a8 \u8003\u8651 \u4e0d \u7b26\u5408 \u5408\u89c4 \u89c4\u5b9a \u7b26\u5408\u89c4\u5b9a \u7684 \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03 \uff1a   \\ ( b ( k ;   100   +   a ,   0.01 ) \\ )   \u9898\u610f \u8981\u6c42 \u7684 \u6982\u7387 \u8f6c\u800c \u6c42 \u4e0b\u9762 \u7684 \u6c42\u548c \u4e0d\u7b49 \u7b49\u5f0f \u4e0d\u7b49\u5f0f \uff1a   \\ ( \\ sum _ { k   =   0 } ^ { a } \\ binom { 100   +   a } { k } 0.01 ^ k0.99 ^ { 100   +   a   -   k } \\ )   \u7531\u4e8e \u5e9f\u54c1 \u5e9f\u54c1\u7387 \u4e3a   \\ ( 0.01 \\ )   \uff0c \u8fd9 \u610f\u5473 \u610f\u5473\u7740 \u5728   \\ ( 100 \\ )   \u4ef6 \u5e73\u5747 \u4ea7\u54c1 \u4e2d \uff0c \u53ea\u4f1a \u6709 \u4e00\u4ef6 \u6b21\u54c1 \uff1b   \\ ( 200 \\ )   \u4ef6 \u5e73\u5747 \u4ea7\u54c1 \u4e0b \uff0c \u624d \u4f1a \u6709 \u4e24\u4ef6 \u6b21\u54c1 \uff0c   \\ ( 198 \\ )   \u4ef6 \u7b26\u5408 \u4ea7\u54c1 \uff1b \u56e0\u6b64   \\ ( a \\ )   \u7684 \u53d6\u503c \u52bf\u5fc5 \u52bf\u5fc5\u4f1a \u5f88\u5c0f \u3002   \u5e76\u4e14   \\ ( n   \\ geq   10 \uff0c p   \\ leq   0.1 \\ )   \uff0c \u5e76\u4e14 \u7531\u4e8e   \\ ( a \\ )   \u4f1a \u5f88\u5c0f \uff0c \u6240\u4ee5   \\ ( \\ lambda   =   np   =   ( 100   +   a )   \\ times   0.01   =   1   +   a   \\ times   0.01 \\ )   ,   \\ ( a   \\ times   0.01 \\ )   \u53ef \u8fd1\u4f3c \u5ffd\u7565 \u6389 \uff0c \u4e00\u822c \u4e3a\u4e86 \u7b80\u5316 \u4e5f \u4f1a \u60f3 \u529e\u6cd5 \u5f04\u6389 \u672a\u77e5 \u672a\u77e5\u91cf \uff0c \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03 \u53ef \u8fd1\u4f3c \u7684 \u5f53\u4f5c \u6cca\u677e \u5206\u5e03 \u6765 \u505a \uff0c \u4e0a\u8ff0 \u4e0d\u7b49 \u7b49\u5f0f \u4e0d\u7b49\u5f0f \u8f6c\u6362 \u4e3a \uff1a   \\ ( \\ sum _ { k   =   0 } ^ { a } \\ frac { e ^ { - 1 } } { k ! }   \\ geq   0.95 \\ )   \u4e3a\u4e86 \u627e\u51fa \u6700\u5c0f \u7684   \\ ( a \\ )   \uff0c \u6211\u4eec \u4e0d\u59a8 \u4ece \u6700\u5c0f \u6700\u5c0f\u503c   \\ ( 0 \\ )   \u5f80\u4e0a \u4e00 \u4e00\u679a \u4e3e   \\ ( a   =   0 \\ )   \u65f6 \uff0c \u6c42\u548c \u516c\u5f0f \u7684 \u503c \u4e3a   \\ ( 0.368 \\ )   \\ ( a   =   1 \\ )   \u65f6 \uff0c \u6c42\u548c \u516c\u5f0f \u7684 \u503c \u4e3a   \\ ( 0.0 . 736 \\ )   \\ ( a   =   2 \\ )   \u65f6 \uff0c \u6c42\u548c \u516c\u5f0f \u7684 \u503c \u4e3a   \\ ( 0.920 \\ )   \\ ( a   =   3 \\ )   \u65f6 \uff0c \u6c42\u548c \u516c\u5f0f \u7684 \u503c \u4e3a   \\ ( 0.981 \\ )   \u6240\u4ee5 \u6ee1\u8db3 \u9898\u610f \u7684 \u6700\u5c0f \u6700\u5c0f\u503c   \\ ( a   =   3 \\ )   \u3002","title":"\u4e8c\u9879\u5206\u5e03 \u53ef \u8fd1\u4f3c \u770b\u6210 \u6cca\u677e \u5206\u5e03 \u7684 \u60c5\u51b5"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83%E5%8F%AF%E8%BF%91%E4%BC%BC%E7%9C%8B%E6%88%90%E6%B3%8A%E6%9D%BE%E5%88%86%E5%B8%83%E7%9A%84%E6%83%85%E5%86%B5/#_1","text":"Question   \u73b0\u5728 \u9700\u8981   \\ ( 100 \\ )   \u4e2a \u7b26\u5408 \u89c4\u683c \u7684 \u5143\u4ef6 \u3002   \u4ece \u5e02\u573a \u4e0a \u4e70 \u7684 \u8be5 \u5143\u4ef6 \u6709 \u5e9f\u54c1 \u5e9f\u54c1\u7387   \\ ( 0.01 \\ )   \uff0c \u6545\u5982 \u53ea \u4e70   \\ ( 100 \\ )   \u4e2a \uff0c \u5219 \u4ed6\u4eec \u5168\u90e8 \u7b26\u5408 \u89c4\u683c \u7684 \u673a\u4f1a \u6050\u6016 \u4e0d \u5927 \uff0c \u4e3a\u6b64 \uff0c \u6211\u4eec \u4e70   \\ ( 100   +   a \\ )   \u4e2a \u3002   \\ ( a \\ )   \u8fd9\u6837 \u53d6 \uff0c \u4ee5 \u4f7f \u300c \u5728 \u8fd9   \\ ( 100   +   a \\ )   \u4e2a \u5143\u4ef6 \u4e2d \u81f3\u5c11 \u6709   \\ ( 100 \\ )   \u4e2a \u7b26\u5408 \u89c4\u683c \u300d \u8fd9\u4e2a \u4e8b\u4ef6   \\ ( A \\ )   \u7684 \u6982\u7387 \u4e0d \u5c0f\u4e8e   \\ ( 0.95 \\ )   .   \u95ee   \\ ( a \\ )   \u81f3\u5c11 \u8981 \u591a \u5927 \uff1f","title":"\u4e8c\u9879\u5206\u5e03 \u53ef \u8fd1\u4f3c \u770b\u6210 \u6cca\u677e \u5206\u5e03 \u7684 \u60c5\u51b5"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83%E5%8F%AF%E8%BF%91%E4%BC%BC%E7%9C%8B%E6%88%90%E6%B3%8A%E6%9D%BE%E5%88%86%E5%B8%83%E7%9A%84%E6%83%85%E5%86%B5/#_2","text":"\u82e5   \\ ( 100   +   a \\ )   \u4e2a \u5143\u4ef6 \u4e2d\u6709   \\ ( k ( k   \\ geq   100 ) \\ )   \u4e2a \u7b26\u5408 \u5408\u89c4 \u89c4\u5b9a \u7b26\u5408\u89c4\u5b9a \uff0c \u90a3\u4e48 \u5c31 \u4f1a \u6709   \\ ( 100   -   k \\ )   \u4e2a \u4e0d \u7b26\u5408 \u5408\u89c4 \u89c4\u5b9a \u7b26\u5408\u89c4\u5b9a \uff0c \u8fd9 \u5f88 \u5bb9\u6613 \u60f3\u5230 \u5c06   \\ ( 100   +   a \\ )   \u5206\u6210 \u4e24\u5806 \uff0c \u4e00\u5806 \u4ee3\u8868 \u7b26\u5408 \u6709   \\ ( k \\ )   \u4e2a \uff0c \u53e6 \u4e00\u5806 \u4ee3\u8868 \u4e0d \u7b26\u5408 \u6709   \\ ( 100   -   k \\ )   \u4e2a \uff0c \u8fd9 \u53ef\u4ee5 \u7528 \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03   \\ ( b ( k   \\ geq   100 ;   100   +   a ,   0.99 ) \\ )   \u6765 \u4ee3\u66ff \u3002   \u5bf9\u4e8e   \\ ( 100   \\ leq   k   \\ leq   100   +   a \\ )   \u8303\u56f4 \u5185 \u7684 \u6bcf \u4e00\u4e2a   \\ ( k \\ )   \uff0c \u53d1\u751f \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( P ( X   =   k )   =   \\ binom { n } { k } p ^ k ( 1   -   p ) ^ { n   -   k } \\ )   \u6240\u4ee5 \u5bf9 \u53d6\u503c \u8303\u56f4 \u5185 \u6bcf \u4e00\u4e2a   \\ ( k \\ )   \u6c42\u548c \u4e3a \uff1a   \\ ( \\ sum ^ { 100   +   a } _ { 100 } \\ binom { 100   +   a } { k } 0.99 ^ k0.01 ^ { 100   +   a   -   k }   \\ geq   0.95 \\ )   \u6211\u4eec \u53d1\u73b0 \uff0c \u73b0\u5728 \u7528   \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03 \u6765 \u66b4\u529b \u6c42\u89e3 \u633a \u56f0\u96be \u7684   \uff0c \u9700\u8981 \u4e0d\u65ad \u679a\u4e3e \u6bcf \u4e00\u4e2a   \\ ( k \\ )   \u7684 \u6982\u7387 \u7136\u540e \u6c42\u548c \u3002","title":"\u601d\u7ef4\u8fc7\u7a0b"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E4%BA%8C%E9%A1%B9%E5%88%86%E5%B8%83%E5%8F%AF%E8%BF%91%E4%BC%BC%E7%9C%8B%E6%88%90%E6%B3%8A%E6%9D%BE%E5%88%86%E5%B8%83%E7%9A%84%E6%83%85%E5%86%B5/#_3","text":"\u82e5 \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u7684 \u53ef\u80fd \u53d6\u503c \u4e3a   \\ ( 0 \u3001 1 \u3001 2 \u3001 \\ cdots \\ )   \u4e14 \u6982\u7387 \u5206\u5e03 \u6982\u7387\u5206\u5e03 \u4e3a :   \\ ( P ( X   =   i )   =   \\ frac { e   ^   { - \\ lambda } \\ lambda   ^   i } { i ! } \\ )   \u5c31 \u79f0   \\ ( X \\ )   \u670d\u4ece \u6cca\u677e \u5206\u5e03 \uff0c \u8bb0 \u4e3a   \\ ( X   \\ sim   P ( \\ lambda ) \\ )   \u3002   \u4e00\u822c \u6765\u8bf4 \u4e00\u822c\u6765\u8bf4 \uff0c \u82e5 \u5bf9\u4e8e \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03   \\ ( X   \\ sim   B ( n ,   p ) \\ )   \uff0c \u5176\u4e2d   \\ ( n \\ )   \u5f88\u5927 \uff0c   \\ ( p \\ )   \u5f88\u5c0f \uff0c \u800c   \\ ( np   =   \\ lambda \\ )   \u5f88 \u5c0f\u65f6 \uff0c   \\ ( X \\ )   \u7684 \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03 \u53ef \u8fd1\u4f3c \u770b\u6210 \u662f \u6cca\u677e \u5206\u5e03 :   \\ ( X   \\ sim   B ( n ,   p )   \\ rightarrow   P ( \\ lambda   =   np ) \\ )   \u4e3a\u4e86 \u5c06 \u4e0a\u8ff0 \u7684 \u601d\u7ef4 \u8fc7\u7a0b \u601d\u7ef4\u8fc7\u7a0b \u7684 \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X   =   k \\ )   \u7684 \u53d6\u503c \u8303\u56f4 \u4ece   \\ ( 100 \\ )   \u5f00\u59cb \u8f6c\u6362 \u6362\u6210 \u8f6c\u6362\u6210 \u4e0e \u6cca\u677e \u5206\u5e03 \u7684 \u4ece   \\ ( 0 \\ )   \u5f00\u59cb \u76f8\u543b \u543b\u5408 \u76f8\u543b\u5408 \uff0c \u6211\u4eec \u4e0d\u59a8 \u8003\u8651 \u4e0d \u7b26\u5408 \u5408\u89c4 \u89c4\u5b9a \u7b26\u5408\u89c4\u5b9a \u7684 \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03 \uff1a   \\ ( b ( k ;   100   +   a ,   0.01 ) \\ )   \u9898\u610f \u8981\u6c42 \u7684 \u6982\u7387 \u8f6c\u800c \u6c42 \u4e0b\u9762 \u7684 \u6c42\u548c \u4e0d\u7b49 \u7b49\u5f0f \u4e0d\u7b49\u5f0f \uff1a   \\ ( \\ sum _ { k   =   0 } ^ { a } \\ binom { 100   +   a } { k } 0.01 ^ k0.99 ^ { 100   +   a   -   k } \\ )   \u7531\u4e8e \u5e9f\u54c1 \u5e9f\u54c1\u7387 \u4e3a   \\ ( 0.01 \\ )   \uff0c \u8fd9 \u610f\u5473 \u610f\u5473\u7740 \u5728   \\ ( 100 \\ )   \u4ef6 \u5e73\u5747 \u4ea7\u54c1 \u4e2d \uff0c \u53ea\u4f1a \u6709 \u4e00\u4ef6 \u6b21\u54c1 \uff1b   \\ ( 200 \\ )   \u4ef6 \u5e73\u5747 \u4ea7\u54c1 \u4e0b \uff0c \u624d \u4f1a \u6709 \u4e24\u4ef6 \u6b21\u54c1 \uff0c   \\ ( 198 \\ )   \u4ef6 \u7b26\u5408 \u4ea7\u54c1 \uff1b \u56e0\u6b64   \\ ( a \\ )   \u7684 \u53d6\u503c \u52bf\u5fc5 \u52bf\u5fc5\u4f1a \u5f88\u5c0f \u3002   \u5e76\u4e14   \\ ( n   \\ geq   10 \uff0c p   \\ leq   0.1 \\ )   \uff0c \u5e76\u4e14 \u7531\u4e8e   \\ ( a \\ )   \u4f1a \u5f88\u5c0f \uff0c \u6240\u4ee5   \\ ( \\ lambda   =   np   =   ( 100   +   a )   \\ times   0.01   =   1   +   a   \\ times   0.01 \\ )   ,   \\ ( a   \\ times   0.01 \\ )   \u53ef \u8fd1\u4f3c \u5ffd\u7565 \u6389 \uff0c \u4e00\u822c \u4e3a\u4e86 \u7b80\u5316 \u4e5f \u4f1a \u60f3 \u529e\u6cd5 \u5f04\u6389 \u672a\u77e5 \u672a\u77e5\u91cf \uff0c \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03 \u53ef \u8fd1\u4f3c \u7684 \u5f53\u4f5c \u6cca\u677e \u5206\u5e03 \u6765 \u505a \uff0c \u4e0a\u8ff0 \u4e0d\u7b49 \u7b49\u5f0f \u4e0d\u7b49\u5f0f \u8f6c\u6362 \u4e3a \uff1a   \\ ( \\ sum _ { k   =   0 } ^ { a } \\ frac { e ^ { - 1 } } { k ! }   \\ geq   0.95 \\ )   \u4e3a\u4e86 \u627e\u51fa \u6700\u5c0f \u7684   \\ ( a \\ )   \uff0c \u6211\u4eec \u4e0d\u59a8 \u4ece \u6700\u5c0f \u6700\u5c0f\u503c   \\ ( 0 \\ )   \u5f80\u4e0a \u4e00 \u4e00\u679a \u4e3e   \\ ( a   =   0 \\ )   \u65f6 \uff0c \u6c42\u548c \u516c\u5f0f \u7684 \u503c \u4e3a   \\ ( 0.368 \\ )   \\ ( a   =   1 \\ )   \u65f6 \uff0c \u6c42\u548c \u516c\u5f0f \u7684 \u503c \u4e3a   \\ ( 0.0 . 736 \\ )   \\ ( a   =   2 \\ )   \u65f6 \uff0c \u6c42\u548c \u516c\u5f0f \u7684 \u503c \u4e3a   \\ ( 0.920 \\ )   \\ ( a   =   3 \\ )   \u65f6 \uff0c \u6c42\u548c \u516c\u5f0f \u7684 \u503c \u4e3a   \\ ( 0.981 \\ )   \u6240\u4ee5 \u6ee1\u8db3 \u9898\u610f \u7684 \u6700\u5c0f \u6700\u5c0f\u503c   \\ ( a   =   3 \\ )   \u3002","title":"\u6cca\u677e \u5206\u5e03"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E4%BA%94%E9%87%8D%E4%BC%AF%E5%8A%AA%E5%88%A9%E8%AF%95%E9%AA%8C/","text":"\u4e94\u91cd \u4f2f\u52aa\u5229 \u8bd5\u9a8c   Question   \u4f2f\u52aa\u5229 \u8bd5\u9a8c \uff08 Bernoulli   experiment \uff09 \u662f \u5728 \u540c\u6837 \u7684 \u6761\u4ef6 \u4e0b \u91cd\u590d \u5730 \u3001 \u76f8\u4e92 \u72ec\u7acb \u5730 \u8fdb\u884c \u7684 \u4e00\u79cd \u968f\u673a \u8bd5\u9a8c \uff0c \u5176 \u7279\u70b9 \u662f \u8be5 \u968f\u673a \u8bd5\u9a8c \u53ea\u6709 \u4e24\u79cd \u53ef\u80fd \u7ed3\u679c \uff1a \u53d1\u751f \u6216\u8005 \u4e0d \u53d1\u751f \u3002   \u5df2\u77e5   \\ ( 5 \\ )   \u91cd \u4f2f\u52aa\u5229 \u8bd5\u9a8c \u4e2d \u6210\u529f \u7684 \u6b21\u6570   \\ ( X \\ )   \u6ee1\u8db3 \uff1a   \\ ( P \\ { X   =   1 \\ }   =   P \\ { X   =   2 \\ } \\ )   \u3002   \u6c42 \u6982\u7387   \\ ( P \\ { X   =   4 \\ } \\ )   \u3002   \u5047\u8bbe \u968f\u673a \u8bd5\u9a8c \u7684 \u6210\u529f \u6982\u7387 \u4e3a   \\ ( p \\ )   \uff0c \u90a3\u4e48 \u5931\u8d25 \u7684 \u6982\u7387 \u5c31\u662f   \\ ( 1   -   p \\ )   \uff0c \u6240\u4ee5 \uff1a   \u8fdb\u884c   \\ ( n \\ )   \u6b21 \u8bd5\u9a8c \uff0c \u6210\u529f \u4e86   \\ ( k \\ )   \u6b21 \u7684 \u6982\u7387   \\ ( p ( k )   =   \\ binom { k } { n } p ^ k ( 1   -   p )   ^   { n   -   k } \\ )   \u6240\u4ee5 \u5bf9\u4e8e   \\ ( 5 \\ )   \u91cd \u4f2f\u52aa\u5229 \u8bd5\u9a8c \u6210\u529f \u4e86   1   \u6b21 \u3001 2   \u6b21 \u7684 \u6982\u7387 \u5206\u522b \u4e3a \uff1a   \\ ( p ( 1 )   =   \\ binom { 1 } { 5 } p ^ 1 ( 1   -   p )   ^   { 4 } \uff0c p ( 2 )   =   \\ binom { 2 } { 5 } p ^ 2 ( 1   -   p ) ^ 3 \\ )   \u56e0\u4e3a   \\ ( p ( 1 )   =   p ( 2 ) \\ )   \uff0c \u6240\u4ee5 \u89e3\u5f97   \\ ( p   =   \\ frac { 1 } { 3 } \\ )   \uff0c \u6240\u4ee5 \uff1a   \\ ( p ( 4 )   =   \\ binom { 4 } { 5 } p ^ 4 ( 1   -   p )   ^   1   =   \\ frac { 10 } { 243 } \\ )","title":"\u4e94\u91cd \u4f2f\u52aa\u5229 \u8bd5\u9a8c"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E4%BA%94%E9%87%8D%E4%BC%AF%E5%8A%AA%E5%88%A9%E8%AF%95%E9%AA%8C/#_1","text":"Question   \u4f2f\u52aa\u5229 \u8bd5\u9a8c \uff08 Bernoulli   experiment \uff09 \u662f \u5728 \u540c\u6837 \u7684 \u6761\u4ef6 \u4e0b \u91cd\u590d \u5730 \u3001 \u76f8\u4e92 \u72ec\u7acb \u5730 \u8fdb\u884c \u7684 \u4e00\u79cd \u968f\u673a \u8bd5\u9a8c \uff0c \u5176 \u7279\u70b9 \u662f \u8be5 \u968f\u673a \u8bd5\u9a8c \u53ea\u6709 \u4e24\u79cd \u53ef\u80fd \u7ed3\u679c \uff1a \u53d1\u751f \u6216\u8005 \u4e0d \u53d1\u751f \u3002   \u5df2\u77e5   \\ ( 5 \\ )   \u91cd \u4f2f\u52aa\u5229 \u8bd5\u9a8c \u4e2d \u6210\u529f \u7684 \u6b21\u6570   \\ ( X \\ )   \u6ee1\u8db3 \uff1a   \\ ( P \\ { X   =   1 \\ }   =   P \\ { X   =   2 \\ } \\ )   \u3002   \u6c42 \u6982\u7387   \\ ( P \\ { X   =   4 \\ } \\ )   \u3002   \u5047\u8bbe \u968f\u673a \u8bd5\u9a8c \u7684 \u6210\u529f \u6982\u7387 \u4e3a   \\ ( p \\ )   \uff0c \u90a3\u4e48 \u5931\u8d25 \u7684 \u6982\u7387 \u5c31\u662f   \\ ( 1   -   p \\ )   \uff0c \u6240\u4ee5 \uff1a   \u8fdb\u884c   \\ ( n \\ )   \u6b21 \u8bd5\u9a8c \uff0c \u6210\u529f \u4e86   \\ ( k \\ )   \u6b21 \u7684 \u6982\u7387   \\ ( p ( k )   =   \\ binom { k } { n } p ^ k ( 1   -   p )   ^   { n   -   k } \\ )   \u6240\u4ee5 \u5bf9\u4e8e   \\ ( 5 \\ )   \u91cd \u4f2f\u52aa\u5229 \u8bd5\u9a8c \u6210\u529f \u4e86   1   \u6b21 \u3001 2   \u6b21 \u7684 \u6982\u7387 \u5206\u522b \u4e3a \uff1a   \\ ( p ( 1 )   =   \\ binom { 1 } { 5 } p ^ 1 ( 1   -   p )   ^   { 4 } \uff0c p ( 2 )   =   \\ binom { 2 } { 5 } p ^ 2 ( 1   -   p ) ^ 3 \\ )   \u56e0\u4e3a   \\ ( p ( 1 )   =   p ( 2 ) \\ )   \uff0c \u6240\u4ee5 \u89e3\u5f97   \\ ( p   =   \\ frac { 1 } { 3 } \\ )   \uff0c \u6240\u4ee5 \uff1a   \\ ( p ( 4 )   =   \\ binom { 4 } { 5 } p ^ 4 ( 1   -   p )   ^   1   =   \\ frac { 10 } { 243 } \\ )","title":"\u4e94\u91cd \u4f2f\u52aa\u5229 \u8bd5\u9a8c"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E5%85%AC%E5%B9%B3%E7%9A%84%E6%A3%8B%E5%B1%80/","text":"\u516c\u5e73 \u7684 \u68cb\u5c40   \u9898\u76ee   \u7532 \u3001 \u4e59\u4e24\u4eba \u8c61\u68cb \u4e0b\u8c61\u68cb \uff0c \u6bcf\u5c40 \u7532\u80dc \u7684 \u6982\u7387 \u4e3a   \\ ( a \\ )   \uff0c \u4e59\u80dc \u7684 \u6982\u7387 \u4e3a   \\ ( b \\ )   \uff0c \u4e3a \u7b80\u5316 \u95ee\u9898 \uff0c \u8bbe \u6ca1\u6709 \u548c \u5c40 \u7ed9 \u60c5\u51b5 \uff0c \u8fd9 \u610f\u5473 \u610f\u5473\u7740 \u5bf9\u4e8e \u6bcf \u4e00\u53e5 \u8981\u4e48 \u7532 \u8d62 \uff0c \u8981\u4e48 \u5c31 \u4e59 \u8d62 \uff0c   \\ ( a   +   b   =   1 \\ )   \u3002   \u8bbe\u60f3 \u7532 \u7684 \u68cb\u827a \u9ad8\u4e8e \u4e59 \uff0c \u5373   \\ ( a   >   b \\ )   \uff0c \u4e3a\u4e86 \u6e38\u620f \u516c\u5e73 \u516c\u5e73\u6027 \uff0c \u8981 \u9002\u5f53 \u7684 \u6253\u538b \u5f3a\u8005 \uff0c \u7ed9\u4e88 \u5f31\u8005 \u89c4\u5219 \u4e0a \u7684 \u4f18\u60e0 \uff1a   \u5230 \u4ec0\u4e48 \u65f6\u5019 \u4e3a\u6b62 \uff0c \u7532 \u8fde\u80dc \u4e86 \u4e09\u5c40 \uff0c \u5219 \u7532\u80dc \uff1b \u5230 \u4ec0\u4e48 \u65f6\u5019 \u4e3a\u6b62 \uff0c \u4e59 \u8fde\u80dc \u4e86 \u4e24\u5c40 \uff0c \u5219 \u4e59\u80dc \u3002   \u8bf7 \u4f60 \u6c42\u51fa \u300c \u7532 \u6700\u7ec8 \u80dc \u300d \u7684 \u6982\u7387 \u3001 \u300c \u4e59 \u6700\u7ec8 \u80dc \u300d \u7684 \u6982\u7387 \u3002   \u8fd9\u9053 \u9898\u76ee \u6709\u70b9 \u68d8\u624b \uff0c \u56e0\u4e3a \u4e0d\u7559 \u7559\u795e \u7a0d\u4e0d\u7559\u795e \u5c31 \u6709 \u53ef\u80fd \u6bd4\u8d5b \u65e0\u7a77 \u591a\u6b21 \u90fd \u65e0\u6cd5 \u5206\u51fa \u4e2a \u7ed3\u679c \uff1a   \u7532\u4e59 \u7532\u4e59 \u7532\u4e59 \u00b7 \u00b7 \u00b7   \u00b7 \u00b7 \u00b7   \u6211\u4eec \u601d\u8003 \u4e00\u4e0b \uff0c \u5982\u679c \u300c \u7532 \u300d \u6700\u7ec8 \u80dc \uff0c \u5219 \u6700\u7ec8 \u5fc5\u6709 \uff1a   \u7532\u7532\u7532   \u90a3 \u524d\u9762 \u5fc5\u5b9a \u4e0d \u53ef\u80fd \u51fa\u73b0 \u5b50\u4e32 \uff1a   \u7532\u7532\u7532 \u3001 \u4e59\u4e59   \u53ef\u4ee5 \u662f \uff1a   \u7532\u4e59 \u3001 \u7532 \u7532\u4e59   \u7684 \u4efb\u610f \u7ec4\u5408 \uff0c \u5e76\u4e14 \u7531 \u4e0a\u9762 \u8fd9 \u4e24\u79cd \u5b50\u4e32 \u7684 \u4efb\u610f \u591a\u4e2a \uff0c \u4efb\u610f \u4f4d\u7f6e \u7684 \u7ec4\u5408 \u786e\u5b9e \u53ef\u4ee5 \u6784\u6210 \u4f7f\u5f97 \u300c \u7532 \u6700\u7ec8 \u80dc \u300d \u7684 \u6bd4\u8d5b \u53ef\u80fd \u4e32 \u3002   \u82e5 \u4e00 \u5f00\u59cb \u662f \u7532 \u8d62 \uff0c \u5e76\u4e14 \u662f \u7532 \u6700\u7ec8 \u80dc \uff0c \u300c \u7532\u4e59 \u300d \u7247\u6bb5 \u51fa\u73b0 \u7684 \u53ef\u80fd \u53ef\u80fd\u6027 \u4e3a   \\ ( p _ 1   =   ab \\ )   \uff0c \u300c \u7532 \u7532\u4e59 \u300d \u7247\u6bb5 \u51fa\u73b0 \u7684 \u53ef\u80fd \u53ef\u80fd\u6027 \u4e3a   \\ ( p _ 2   =   aab \\ )   \uff1b   \u5047\u8bbe \u6bd4\u8d5b \u5f02\u5e38 \u7126\u707c \uff0c \u6301\u7eed \u4e86   \\ ( n \\ )   \u4e2a \u4e0a\u9762 \u7684 \u7247\u6bb5 \u4e4b\u540e \u6bd4\u8d5b \u624d \u4f7f\u5f97 \u300c \u7532 \u6700\u7ec8 \u80dc \u300d \uff0c \u5bf9\u4e8e \u6bcf \u4e00\u4e2a \u7247\u6bb5 \u7684 \u4f4d\u7f6e \uff0c \u8981\u4e48 \u51fa\u73b0 \u300c \u7532\u4e59 \u300d \uff0c \u8981\u4e48 \u51fa\u73b0 \u300c \u7532 \u7532\u4e59 \u300d \uff0c \u8fd9 \u4e24\u4e2a \u7247\u6bb5 \u51fa\u73b0 \u7684 \u6982\u7387 \u662f \u7b49 \u53ef\u80fd \u7684 \uff0c \u6240\u4ee5 \u6bd4\u8d5b \u51fa\u73b0 \u4e86   \\ ( n \\ )   \u4e2a \u7247\u6bb5 \u4e4b\u540e \uff0c \u7532 \u6700\u7ec8 \u80dc \u7684 \u6982\u7387 \u4e3a \uff0c \u53ef\u4ee5 \u60f3\u8c61 \u6210\u6743\u503c \u76f8\u7b49 \u7684 \u4e8c\u53c9 \u4e8c\u53c9\u6811 \uff1a   \\ ( p   =   ( ab   +   aab )   ^   n   \\ times   aaa \\ )   \u8fd9 \u300c \u4e8c\u53c9 \u9009\u62e9 \u6811 \u300d \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( ( ab   +   aab )   \\ times   ( ab   +   aab )   \\ times   ( ab   +   aab )   =   ( ab   +   aab )   ^   3 \\ )   \u7531\u4e8e   \\ ( n \\ )   \u53ef\u4ee5 \u53d6   \\ ( 0 \u3001 1 \u3001 2 \u3001 \\ cdots   \u3001 \\ infty \\ )   \uff0c \u5c06 \u6bcf \u4e00\u4e2a   \\ ( n \\ )   \u5bf9\u5e94 \u7684 \u7532 \u6700\u7ec8 \u80dc \u7684 \u6982\u7387 \u6c42\u548c \uff1a   \\ ( p _ { all }   =   [ \\ sum _ { n   =   0 } ^ { \\ infty } ( ab   +   aab )   ^   n ]   \\ times   aaa \\ )   \u6839\u636e \u7b49 \u6bd4 \u6c42\u548c \u516c\u5f0f \uff1a   \\ ( s _ n   =   \\ frac { a _ 1 ( 1   -   q ^ n ) } { 1   -   q } \\ )   \uff0c \u6240\u4ee5   \\ ( \\ sum _ { n   =   0 } ^ { \\ infty } ( ab   +   aab )   ^   n   \\ rightarrow   \\ frac { 1 } { 1   -   ab ( 1   +   a ) } \\ )   \u6240\u4ee5 \uff1a   \\ ( p _ { all }   =   \\ frac { a ^ 3 } { 1   -   ab ( 1   +   a ) } \\ )   \u82e5 \u4e00 \u5f00\u59cb \u662f \u4e59\u80dc \uff0c \u5e76\u4e14 \u8fd8\u662f \u300c \u7532 \u6700\u7ec8 \u80dc \u300d \u7684 \u6982\u7387 \u548c \u4e0a\u9762 \u7c7b\u4f3c \uff0c \u53ea\u662f \u591a \u4e58 \u4e86 \u4e00\u4e2a   \\ ( b \\ )   :   \\ ( p _ { all }   =   \\ frac { a ^ 3b } { 1   -   ab ( 1   +   a ) } \\ )   \u7efc\u4e0a \u6240\u8ff0 \u7efc\u4e0a\u6240\u8ff0 \uff0c \u7532 \u6700\u7ec8 \u80dc \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( p   =   \\ frac { a ^ 3 ( 1   +   b ) } { 1   -   ab ( 1   +   a ) } \\ )   \u5bf9\u4e8e \u4e59 \u6700\u7ec8 \u80dc \uff0c \u4e5f \u662f \u6309\u7167 \u8fd9\u79cd \u601d\u8003 \u65b9\u5f0f \uff0c \u5feb \u4e0a\u8bfe \u4e86 \u5c31 \u6682\u65f6 \u4e0d\u5199 \u4e86 \uff0c \u6709\u7a7a \u518d \u8865 \u3002","title":"\u516c\u5e73 \u7684 \u68cb\u5c40"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E5%85%AC%E5%B9%B3%E7%9A%84%E6%A3%8B%E5%B1%80/#_1","text":"\u9898\u76ee   \u7532 \u3001 \u4e59\u4e24\u4eba \u8c61\u68cb \u4e0b\u8c61\u68cb \uff0c \u6bcf\u5c40 \u7532\u80dc \u7684 \u6982\u7387 \u4e3a   \\ ( a \\ )   \uff0c \u4e59\u80dc \u7684 \u6982\u7387 \u4e3a   \\ ( b \\ )   \uff0c \u4e3a \u7b80\u5316 \u95ee\u9898 \uff0c \u8bbe \u6ca1\u6709 \u548c \u5c40 \u7ed9 \u60c5\u51b5 \uff0c \u8fd9 \u610f\u5473 \u610f\u5473\u7740 \u5bf9\u4e8e \u6bcf \u4e00\u53e5 \u8981\u4e48 \u7532 \u8d62 \uff0c \u8981\u4e48 \u5c31 \u4e59 \u8d62 \uff0c   \\ ( a   +   b   =   1 \\ )   \u3002   \u8bbe\u60f3 \u7532 \u7684 \u68cb\u827a \u9ad8\u4e8e \u4e59 \uff0c \u5373   \\ ( a   >   b \\ )   \uff0c \u4e3a\u4e86 \u6e38\u620f \u516c\u5e73 \u516c\u5e73\u6027 \uff0c \u8981 \u9002\u5f53 \u7684 \u6253\u538b \u5f3a\u8005 \uff0c \u7ed9\u4e88 \u5f31\u8005 \u89c4\u5219 \u4e0a \u7684 \u4f18\u60e0 \uff1a   \u5230 \u4ec0\u4e48 \u65f6\u5019 \u4e3a\u6b62 \uff0c \u7532 \u8fde\u80dc \u4e86 \u4e09\u5c40 \uff0c \u5219 \u7532\u80dc \uff1b \u5230 \u4ec0\u4e48 \u65f6\u5019 \u4e3a\u6b62 \uff0c \u4e59 \u8fde\u80dc \u4e86 \u4e24\u5c40 \uff0c \u5219 \u4e59\u80dc \u3002   \u8bf7 \u4f60 \u6c42\u51fa \u300c \u7532 \u6700\u7ec8 \u80dc \u300d \u7684 \u6982\u7387 \u3001 \u300c \u4e59 \u6700\u7ec8 \u80dc \u300d \u7684 \u6982\u7387 \u3002   \u8fd9\u9053 \u9898\u76ee \u6709\u70b9 \u68d8\u624b \uff0c \u56e0\u4e3a \u4e0d\u7559 \u7559\u795e \u7a0d\u4e0d\u7559\u795e \u5c31 \u6709 \u53ef\u80fd \u6bd4\u8d5b \u65e0\u7a77 \u591a\u6b21 \u90fd \u65e0\u6cd5 \u5206\u51fa \u4e2a \u7ed3\u679c \uff1a   \u7532\u4e59 \u7532\u4e59 \u7532\u4e59 \u00b7 \u00b7 \u00b7   \u00b7 \u00b7 \u00b7   \u6211\u4eec \u601d\u8003 \u4e00\u4e0b \uff0c \u5982\u679c \u300c \u7532 \u300d \u6700\u7ec8 \u80dc \uff0c \u5219 \u6700\u7ec8 \u5fc5\u6709 \uff1a   \u7532\u7532\u7532   \u90a3 \u524d\u9762 \u5fc5\u5b9a \u4e0d \u53ef\u80fd \u51fa\u73b0 \u5b50\u4e32 \uff1a   \u7532\u7532\u7532 \u3001 \u4e59\u4e59   \u53ef\u4ee5 \u662f \uff1a   \u7532\u4e59 \u3001 \u7532 \u7532\u4e59   \u7684 \u4efb\u610f \u7ec4\u5408 \uff0c \u5e76\u4e14 \u7531 \u4e0a\u9762 \u8fd9 \u4e24\u79cd \u5b50\u4e32 \u7684 \u4efb\u610f \u591a\u4e2a \uff0c \u4efb\u610f \u4f4d\u7f6e \u7684 \u7ec4\u5408 \u786e\u5b9e \u53ef\u4ee5 \u6784\u6210 \u4f7f\u5f97 \u300c \u7532 \u6700\u7ec8 \u80dc \u300d \u7684 \u6bd4\u8d5b \u53ef\u80fd \u4e32 \u3002   \u82e5 \u4e00 \u5f00\u59cb \u662f \u7532 \u8d62 \uff0c \u5e76\u4e14 \u662f \u7532 \u6700\u7ec8 \u80dc \uff0c \u300c \u7532\u4e59 \u300d \u7247\u6bb5 \u51fa\u73b0 \u7684 \u53ef\u80fd \u53ef\u80fd\u6027 \u4e3a   \\ ( p _ 1   =   ab \\ )   \uff0c \u300c \u7532 \u7532\u4e59 \u300d \u7247\u6bb5 \u51fa\u73b0 \u7684 \u53ef\u80fd \u53ef\u80fd\u6027 \u4e3a   \\ ( p _ 2   =   aab \\ )   \uff1b   \u5047\u8bbe \u6bd4\u8d5b \u5f02\u5e38 \u7126\u707c \uff0c \u6301\u7eed \u4e86   \\ ( n \\ )   \u4e2a \u4e0a\u9762 \u7684 \u7247\u6bb5 \u4e4b\u540e \u6bd4\u8d5b \u624d \u4f7f\u5f97 \u300c \u7532 \u6700\u7ec8 \u80dc \u300d \uff0c \u5bf9\u4e8e \u6bcf \u4e00\u4e2a \u7247\u6bb5 \u7684 \u4f4d\u7f6e \uff0c \u8981\u4e48 \u51fa\u73b0 \u300c \u7532\u4e59 \u300d \uff0c \u8981\u4e48 \u51fa\u73b0 \u300c \u7532 \u7532\u4e59 \u300d \uff0c \u8fd9 \u4e24\u4e2a \u7247\u6bb5 \u51fa\u73b0 \u7684 \u6982\u7387 \u662f \u7b49 \u53ef\u80fd \u7684 \uff0c \u6240\u4ee5 \u6bd4\u8d5b \u51fa\u73b0 \u4e86   \\ ( n \\ )   \u4e2a \u7247\u6bb5 \u4e4b\u540e \uff0c \u7532 \u6700\u7ec8 \u80dc \u7684 \u6982\u7387 \u4e3a \uff0c \u53ef\u4ee5 \u60f3\u8c61 \u6210\u6743\u503c \u76f8\u7b49 \u7684 \u4e8c\u53c9 \u4e8c\u53c9\u6811 \uff1a   \\ ( p   =   ( ab   +   aab )   ^   n   \\ times   aaa \\ )   \u8fd9 \u300c \u4e8c\u53c9 \u9009\u62e9 \u6811 \u300d \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( ( ab   +   aab )   \\ times   ( ab   +   aab )   \\ times   ( ab   +   aab )   =   ( ab   +   aab )   ^   3 \\ )   \u7531\u4e8e   \\ ( n \\ )   \u53ef\u4ee5 \u53d6   \\ ( 0 \u3001 1 \u3001 2 \u3001 \\ cdots   \u3001 \\ infty \\ )   \uff0c \u5c06 \u6bcf \u4e00\u4e2a   \\ ( n \\ )   \u5bf9\u5e94 \u7684 \u7532 \u6700\u7ec8 \u80dc \u7684 \u6982\u7387 \u6c42\u548c \uff1a   \\ ( p _ { all }   =   [ \\ sum _ { n   =   0 } ^ { \\ infty } ( ab   +   aab )   ^   n ]   \\ times   aaa \\ )   \u6839\u636e \u7b49 \u6bd4 \u6c42\u548c \u516c\u5f0f \uff1a   \\ ( s _ n   =   \\ frac { a _ 1 ( 1   -   q ^ n ) } { 1   -   q } \\ )   \uff0c \u6240\u4ee5   \\ ( \\ sum _ { n   =   0 } ^ { \\ infty } ( ab   +   aab )   ^   n   \\ rightarrow   \\ frac { 1 } { 1   -   ab ( 1   +   a ) } \\ )   \u6240\u4ee5 \uff1a   \\ ( p _ { all }   =   \\ frac { a ^ 3 } { 1   -   ab ( 1   +   a ) } \\ )   \u82e5 \u4e00 \u5f00\u59cb \u662f \u4e59\u80dc \uff0c \u5e76\u4e14 \u8fd8\u662f \u300c \u7532 \u6700\u7ec8 \u80dc \u300d \u7684 \u6982\u7387 \u548c \u4e0a\u9762 \u7c7b\u4f3c \uff0c \u53ea\u662f \u591a \u4e58 \u4e86 \u4e00\u4e2a   \\ ( b \\ )   :   \\ ( p _ { all }   =   \\ frac { a ^ 3b } { 1   -   ab ( 1   +   a ) } \\ )   \u7efc\u4e0a \u6240\u8ff0 \u7efc\u4e0a\u6240\u8ff0 \uff0c \u7532 \u6700\u7ec8 \u80dc \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( p   =   \\ frac { a ^ 3 ( 1   +   b ) } { 1   -   ab ( 1   +   a ) } \\ )   \u5bf9\u4e8e \u4e59 \u6700\u7ec8 \u80dc \uff0c \u4e5f \u662f \u6309\u7167 \u8fd9\u79cd \u601d\u8003 \u65b9\u5f0f \uff0c \u5feb \u4e0a\u8bfe \u4e86 \u5c31 \u6682\u65f6 \u4e0d\u5199 \u4e86 \uff0c \u6709\u7a7a \u518d \u8865 \u3002","title":"\u516c\u5e73 \u7684 \u68cb\u5c40"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E5%88%86%E5%B8%83%E5%87%BD%E6%95%B0%E4%B8%8E%E6%A6%82%E7%8E%87%E5%AF%86%E5%BA%A6%E5%87%BD%E6%95%B0/","text":"\u5206\u5e03 \u51fd\u6570 \u4e0e \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570   \u8bbe \u8fde\u7eed \u8fde\u7eed\u6027 \u578b \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u7684 \u5206\u5e03 \u51fd\u6570 \u6709 \uff1a   \\ ( F ( x ) \\ )   \uff0c \u5219   \\ ( F ( x ) \\ )   \u7684 \u5bfc \u51fd\u6570   \\ ( f ( x )   =   { F } ' ( x ) \\ )   \u5c31 \u79f0\u4e3a \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u3002   \u5982 \u5de6 \u4e0b\u56fe \u4e3a \u67d0 \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u7684 \u5206\u5e03 \u51fd\u6570 \u56fe \uff0c \u53f3 \u4e0b\u56fe \u4e3a \u5176 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \uff1a   Info   \u5982\u679c \u6211\u4eec \u8981\u6c42   \\ ( P ( a   \\ leq   X   \\ leq   b ) \\ )   \u7684 \u6982\u7387 \uff0c \u5219 \u53ea \u9700 \u8981\u6c42   \\ ( F ( b )   -   F ( a ) \\ )   \u5373\u53ef \uff0c \u4f46\u662f \u5bf9\u5e94 \u4e8e \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \uff0c \u5219 \u662f \u6c42   \\ ( f ( a )   \\ sim   f ( b ) \\ )   \u8fd9 \u4e00\u6bb5 \u7684 \u79ef\u5206 \uff1a   \\ ( \\ int _ { a } ^ { b } f ( x ) dx \\ )   \uff1b   \u4ec0\u4e48 \u4e3a\u4ec0\u4e48 \u6211\u4eec \u8981 \u666e\u904d \u9009\u62e9 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u800c \u4e0d\u662f \u9009\u62e9 \u5206\u5e03 \u51fd\u6570 \u6765 \u611f\u77e5 \u8fde\u7eed \u8fde\u7eed\u578b \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf \u7684 \u5206\u5e03 \u5462 \uff0c \u7b54\u6848 \u5c31\u662f \u53ef\u4ee5 \u76f4\u63a5 \u4ece \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u56fe \u7684 \u9762\u79ef \u5c31 \u53ef\u4ee5 \u6574\u4f53 \u611f\u77e5 \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf \u7684 \u5927\u81f4 \u53d6\u503c \u5360 \u6bd4 \u3002","title":"\u5206\u5e03 \u51fd\u6570 \u4e0e \u6982\u7387\u5bc6\u5ea6\u51fd\u6570"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E5%88%86%E5%B8%83%E5%87%BD%E6%95%B0%E4%B8%8E%E6%A6%82%E7%8E%87%E5%AF%86%E5%BA%A6%E5%87%BD%E6%95%B0/#_1","text":"\u8bbe \u8fde\u7eed \u8fde\u7eed\u6027 \u578b \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u7684 \u5206\u5e03 \u51fd\u6570 \u6709 \uff1a   \\ ( F ( x ) \\ )   \uff0c \u5219   \\ ( F ( x ) \\ )   \u7684 \u5bfc \u51fd\u6570   \\ ( f ( x )   =   { F } ' ( x ) \\ )   \u5c31 \u79f0\u4e3a \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u3002   \u5982 \u5de6 \u4e0b\u56fe \u4e3a \u67d0 \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u7684 \u5206\u5e03 \u51fd\u6570 \u56fe \uff0c \u53f3 \u4e0b\u56fe \u4e3a \u5176 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \uff1a   Info   \u5982\u679c \u6211\u4eec \u8981\u6c42   \\ ( P ( a   \\ leq   X   \\ leq   b ) \\ )   \u7684 \u6982\u7387 \uff0c \u5219 \u53ea \u9700 \u8981\u6c42   \\ ( F ( b )   -   F ( a ) \\ )   \u5373\u53ef \uff0c \u4f46\u662f \u5bf9\u5e94 \u4e8e \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \uff0c \u5219 \u662f \u6c42   \\ ( f ( a )   \\ sim   f ( b ) \\ )   \u8fd9 \u4e00\u6bb5 \u7684 \u79ef\u5206 \uff1a   \\ ( \\ int _ { a } ^ { b } f ( x ) dx \\ )   \uff1b   \u4ec0\u4e48 \u4e3a\u4ec0\u4e48 \u6211\u4eec \u8981 \u666e\u904d \u9009\u62e9 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u800c \u4e0d\u662f \u9009\u62e9 \u5206\u5e03 \u51fd\u6570 \u6765 \u611f\u77e5 \u8fde\u7eed \u8fde\u7eed\u578b \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf \u7684 \u5206\u5e03 \u5462 \uff0c \u7b54\u6848 \u5c31\u662f \u53ef\u4ee5 \u76f4\u63a5 \u4ece \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u56fe \u7684 \u9762\u79ef \u5c31 \u53ef\u4ee5 \u6574\u4f53 \u611f\u77e5 \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf \u7684 \u5927\u81f4 \u53d6\u503c \u5360 \u6bd4 \u3002","title":"\u5206\u5e03 \u51fd\u6570 \u4e0e \u6982\u7387\u5bc6\u5ea6\u51fd\u6570"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E5%88%86%E5%B8%83%E5%87%BD%E6%95%B0%E7%AE%80%E5%8D%95%E4%BE%8B%E9%A2%98/","text":"\u5206\u5e03 \u51fd\u6570 \u7b80\u5355 \u4f8b\u9898   Question   \u8bbe \u8fde\u7eed \u8fde\u7eed\u578b \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u7684 \u5206\u5e03 \u51fd\u6570 \u4e3a \uff1a   \\ ( F ( x )   =   A   +   Be ^ { - \\ lambda   x } \uff0c x   \\ geq   0 ,   \\ lambda   >   0 \\ )   \u6c42 \u51fa   \\ ( A \u3001 B \\ )   \u7684 \u503c \uff1b   \u6c42 \u51fa \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570   \\ ( f ( x ) \\ )   \u3002   \u7531\u4e8e \u5f53   \\ ( x   \\ rightarrow   + \\ infty \\ )   \u65f6 \uff0c   \\ ( F ( x )   \\ rightarrow   1 \\ )   \uff0c \u6240\u4ee5 \uff1a   \\ ( A   =   1 \\ )   \u7531\u4e8e \u8be5 \u5206\u5e03 \u51fd\u6570 \u8fde\u7eed \uff0c \u6240\u4ee5   \\ ( F ( 0 )   \\ rightarrow   F ( ^ - 0 )   =   0 \\ )   \uff0c \u6240\u4ee5 \uff1a   \\ ( A   +   B   =   0 \\ )   \u89e3\u5f97   \\ ( B   =   - 1 \\ )   \u6240\u4ee5 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570   \\ ( f ( x )   =   { F } ' ( x ) \\ )   :   \\ ( f ( x )   =   \\ lambda   e   ^   { -   \\ lambda   x } ,   x   \\ geq   0 \\ )","title":"\u5206\u5e03 \u51fd\u6570 \u7b80\u5355 \u4f8b\u9898"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E5%88%86%E5%B8%83%E5%87%BD%E6%95%B0%E7%AE%80%E5%8D%95%E4%BE%8B%E9%A2%98/#_1","text":"Question   \u8bbe \u8fde\u7eed \u8fde\u7eed\u578b \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u7684 \u5206\u5e03 \u51fd\u6570 \u4e3a \uff1a   \\ ( F ( x )   =   A   +   Be ^ { - \\ lambda   x } \uff0c x   \\ geq   0 ,   \\ lambda   >   0 \\ )   \u6c42 \u51fa   \\ ( A \u3001 B \\ )   \u7684 \u503c \uff1b   \u6c42 \u51fa \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570   \\ ( f ( x ) \\ )   \u3002   \u7531\u4e8e \u5f53   \\ ( x   \\ rightarrow   + \\ infty \\ )   \u65f6 \uff0c   \\ ( F ( x )   \\ rightarrow   1 \\ )   \uff0c \u6240\u4ee5 \uff1a   \\ ( A   =   1 \\ )   \u7531\u4e8e \u8be5 \u5206\u5e03 \u51fd\u6570 \u8fde\u7eed \uff0c \u6240\u4ee5   \\ ( F ( 0 )   \\ rightarrow   F ( ^ - 0 )   =   0 \\ )   \uff0c \u6240\u4ee5 \uff1a   \\ ( A   +   B   =   0 \\ )   \u89e3\u5f97   \\ ( B   =   - 1 \\ )   \u6240\u4ee5 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570   \\ ( f ( x )   =   { F } ' ( x ) \\ )   :   \\ ( f ( x )   =   \\ lambda   e   ^   { -   \\ lambda   x } ,   x   \\ geq   0 \\ )","title":"\u5206\u5e03 \u51fd\u6570 \u7b80\u5355 \u4f8b\u9898"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E5%88%86%E9%9E%8B%E5%AD%90/","text":"\u5206 \u978b\u5b50   \u9898\u76ee   \\ ( n \\ )   \u53cc \u76f8\u5f02 \u7684 \u978b \u5171   \\ ( 2n \\ )   \u53ea \uff0c \u968f\u673a \u5730 \u5206\u6210   \\ ( n \\ )   \u5806 \uff0c \u6bcf\u5806   \\ ( 2 \\ )   \u53ea \u3002   \u95ee \uff1a \u300c \u5404\u5806 \u90fd \u81ea\u6210 \u4e00\u53cc \u978b \u300d \u8fd9\u4e2a \u4e8b\u4ef6   \\ ( E \\ )   \u7684 \u6982\u7387 \u662f \u591a\u5c11 \uff1f   \u505a\u6cd5 \u4e00 \uff1a   \u5148 \u5c06 \u8fd9   \\ ( 2n \\ )   \u53ea\u978b \u6309 \u6bcf\u5806   \\ ( 2 \\ )   \u53ea \u5206\u6210   \\ ( n \\ )   \u5806 \uff0c \u603b\u5171 \u6709 \uff1a   \\ ( \\ frac { 2n ! } { 2 ^ n } \\ )   \u79cd \u53ef\u80fd   \u82e5\u8981 \u8ba9 \u5404\u5806 \u90fd \u5404\u81ea \u6210 \u4e00\u53cc \u978b \uff0c \u5219 \u6211\u4eec \u53ea \u9700\u8981 \u5bf9 \u8fd9   \\ ( n \\ )   \u53cc\u978b \u968f\u673a \u6392\u5217 \u5373\u53ef \uff0c \u6709 \uff1a   \\ ( n ! \\ )   \u79cd \u53ef\u80fd   \u6240\u4ee5 \u6982\u7387 \u4e3a \uff1a   \\ ( p   =   \\ frac { 2 ^ nn ! } { 2n ! } \\ )   \u505a\u6cd5 \u4e8c \uff1a   \u8003\u8651 \u5c06   \\ ( 2n \\ )   \u53ea\u978b \u653e\u5165   \\ ( 2n \\ )   \u4e2a \u4f4d\u7f6e \uff0c \u603b\u5171 \u6709 \uff1a   \\ ( 2n ! \\ )   \u79cd\u653e\u6cd5   \u82e5\u8981 \u8ba9 \u5404\u5806 \u90fd \u5404\u81ea \u6210 \u4e00\u53cc \u978b \uff0c \u6211\u4eec \u8003\u8651 \u5c06 \u8fd9   \\ ( 2n \\ )   \u4e2a \u4f4d\u7f6e \u4e24 \u4e24 \u4e00\u5806 \u6765 \u5212\u5206 \uff0c \u5373   \\ ( 1 \u3001 2 \\ )   \u4e3a \u7b2c\u4e00 \u5806 \uff0c   \\ ( 3 \u3001 4 \\ )   \u4e3a \u7b2c\u4e8c \u5806 \uff0c \u00b7 \u00b7 \u00b7   \uff0c \u4f9d\u6b64 \u6b64\u7c7b \u7c7b\u63a8 \u4f9d\u6b64\u7c7b\u63a8   \u5bf9\u4e8e \u7b2c   1   \u4e2a \u4f4d\u7f6e \uff0c \u53ef\u4ee5 \u4ece   \\ ( 2n \\ )   \u53ea\u978b \u4e2d \u4efb\u53d6 \u5176\u4e2d \u4e00\u53ea \uff0c \u5230 \u4e86 \u7b2c   2   \u4e2a \u4f4d\u7f6e \u5c31 \u53ea\u80fd \u53d6\u6210 \u5bf9 \u7684 \u90a3\u53cc \u978b \uff0c \u7b2c   3   \u4e2a \u4f4d\u7f6e \u53ef\u4ee5 \u4ece \u5269\u4e0b \u7684   \\ ( 2n   -   2 \\ )   \u53ea\u978b \u4e2d \u4efb\u53d6 \u4e00\u53ea \uff0c \u4f46\u662f \u5230 \u4e86 \u7b2c   4   \u4e2a \u4f4d\u7f6e \u5c31 \u53ea\u80fd \u53d6\u6210 \u5bf9 \u7684 \u90a3\u53cc \u978b \uff0c \u5269\u4e0b \u7684 \u4f4d\u7f6e \u90fd \u4f9d\u6b64 \u6b64\u7c7b \u7c7b\u63a8 \u4f9d\u6b64\u7c7b\u63a8 \uff0c \u6240\u4ee5 \u6709 \uff1a   \\ ( 2n   \\ times   1   \\ times   ( 2n   -   2 )   \\ times   1   \\ times   \\ cdots   \\ times   2   \\ times   1 \\ )   \\ ( 2n   \\ times   ( 2n   -   2 )   \\ times   \\ cdots   \\ times   2   =   2 ^ nn ! \\ )   \u6240\u4ee5 \u6982\u7387 \u4e3a \uff1a   \\ ( p   =   \\ frac { 2 ^ nn ! } { 2n ! } \\ )","title":"\u5206 \u978b\u5b50"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E5%88%86%E9%9E%8B%E5%AD%90/#_1","text":"\u9898\u76ee   \\ ( n \\ )   \u53cc \u76f8\u5f02 \u7684 \u978b \u5171   \\ ( 2n \\ )   \u53ea \uff0c \u968f\u673a \u5730 \u5206\u6210   \\ ( n \\ )   \u5806 \uff0c \u6bcf\u5806   \\ ( 2 \\ )   \u53ea \u3002   \u95ee \uff1a \u300c \u5404\u5806 \u90fd \u81ea\u6210 \u4e00\u53cc \u978b \u300d \u8fd9\u4e2a \u4e8b\u4ef6   \\ ( E \\ )   \u7684 \u6982\u7387 \u662f \u591a\u5c11 \uff1f   \u505a\u6cd5 \u4e00 \uff1a   \u5148 \u5c06 \u8fd9   \\ ( 2n \\ )   \u53ea\u978b \u6309 \u6bcf\u5806   \\ ( 2 \\ )   \u53ea \u5206\u6210   \\ ( n \\ )   \u5806 \uff0c \u603b\u5171 \u6709 \uff1a   \\ ( \\ frac { 2n ! } { 2 ^ n } \\ )   \u79cd \u53ef\u80fd   \u82e5\u8981 \u8ba9 \u5404\u5806 \u90fd \u5404\u81ea \u6210 \u4e00\u53cc \u978b \uff0c \u5219 \u6211\u4eec \u53ea \u9700\u8981 \u5bf9 \u8fd9   \\ ( n \\ )   \u53cc\u978b \u968f\u673a \u6392\u5217 \u5373\u53ef \uff0c \u6709 \uff1a   \\ ( n ! \\ )   \u79cd \u53ef\u80fd   \u6240\u4ee5 \u6982\u7387 \u4e3a \uff1a   \\ ( p   =   \\ frac { 2 ^ nn ! } { 2n ! } \\ )   \u505a\u6cd5 \u4e8c \uff1a   \u8003\u8651 \u5c06   \\ ( 2n \\ )   \u53ea\u978b \u653e\u5165   \\ ( 2n \\ )   \u4e2a \u4f4d\u7f6e \uff0c \u603b\u5171 \u6709 \uff1a   \\ ( 2n ! \\ )   \u79cd\u653e\u6cd5   \u82e5\u8981 \u8ba9 \u5404\u5806 \u90fd \u5404\u81ea \u6210 \u4e00\u53cc \u978b \uff0c \u6211\u4eec \u8003\u8651 \u5c06 \u8fd9   \\ ( 2n \\ )   \u4e2a \u4f4d\u7f6e \u4e24 \u4e24 \u4e00\u5806 \u6765 \u5212\u5206 \uff0c \u5373   \\ ( 1 \u3001 2 \\ )   \u4e3a \u7b2c\u4e00 \u5806 \uff0c   \\ ( 3 \u3001 4 \\ )   \u4e3a \u7b2c\u4e8c \u5806 \uff0c \u00b7 \u00b7 \u00b7   \uff0c \u4f9d\u6b64 \u6b64\u7c7b \u7c7b\u63a8 \u4f9d\u6b64\u7c7b\u63a8   \u5bf9\u4e8e \u7b2c   1   \u4e2a \u4f4d\u7f6e \uff0c \u53ef\u4ee5 \u4ece   \\ ( 2n \\ )   \u53ea\u978b \u4e2d \u4efb\u53d6 \u5176\u4e2d \u4e00\u53ea \uff0c \u5230 \u4e86 \u7b2c   2   \u4e2a \u4f4d\u7f6e \u5c31 \u53ea\u80fd \u53d6\u6210 \u5bf9 \u7684 \u90a3\u53cc \u978b \uff0c \u7b2c   3   \u4e2a \u4f4d\u7f6e \u53ef\u4ee5 \u4ece \u5269\u4e0b \u7684   \\ ( 2n   -   2 \\ )   \u53ea\u978b \u4e2d \u4efb\u53d6 \u4e00\u53ea \uff0c \u4f46\u662f \u5230 \u4e86 \u7b2c   4   \u4e2a \u4f4d\u7f6e \u5c31 \u53ea\u80fd \u53d6\u6210 \u5bf9 \u7684 \u90a3\u53cc \u978b \uff0c \u5269\u4e0b \u7684 \u4f4d\u7f6e \u90fd \u4f9d\u6b64 \u6b64\u7c7b \u7c7b\u63a8 \u4f9d\u6b64\u7c7b\u63a8 \uff0c \u6240\u4ee5 \u6709 \uff1a   \\ ( 2n   \\ times   1   \\ times   ( 2n   -   2 )   \\ times   1   \\ times   \\ cdots   \\ times   2   \\ times   1 \\ )   \\ ( 2n   \\ times   ( 2n   -   2 )   \\ times   \\ cdots   \\ times   2   =   2 ^ nn ! \\ )   \u6240\u4ee5 \u6982\u7387 \u4e3a \uff1a   \\ ( p   =   \\ frac { 2 ^ nn ! } { 2n ! } \\ )","title":"\u5206 \u978b\u5b50"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E5%8F%96%E5%87%BA%E6%AC%A1%E5%93%81%E7%9A%84%E4%B8%AA%E6%95%B0/","text":"\u53d6\u51fa \u6b21\u54c1 \u7684 \u4e2a\u6570   Question   \u8bbe\u5728   \\ ( 15 \\ )   \u53ea\u540c \u7c7b\u578b \u7684 \u96f6\u4ef6 \u4e2d\u6709   \\ ( 2 \\ )   \u53ea \u4e3a \u6b21\u54c1 \uff0c \u5728 \u5176\u4e2d \u53d6   \\ ( 3 \\ )   \u6b21 \uff0c \u6bcf\u6b21 \u4efb\u53d6   \\ ( 1 \\ )   \u53ea \uff0c \u4e0d\u653e \u653e\u56de \u4f5c\u4e0d\u653e\u56de \u62bd\u6837 \uff0c \u4ee5   \\ ( X \\ )   \u8868\u793a \u53d6\u51fa \u7684 \u6b21\u54c1 \u7684 \u4e2a\u6570 \u3002   \u6c42 \uff1a   \\ ( X \\ )   \u7684 \u5206\u5e03 \u5f8b \uff1b   \\ ( X \\ )   \u7684 \u5206\u5e03 \u51fd\u6570 \uff1b   \\ ( X \\ )   \u7684 \u5206\u5e03 \u5f8b   0   1   2   \\ ( \\ frac { \\ binom { 13 } { 3 } \\ binom { 2 } { 0 } } { \\ binom { 15 } { 3 } } \\ )   \\ ( \\ frac { \\ binom { 13 } { 2 } \\ binom { 2 } { 1 } } { \\ binom { 15 } { 3 } } \\ )   \\ ( \\ frac { \\ binom { 13 } { 1 } \\ binom { 2 } { 2 } } { \\ binom { 15 } { 3 } } \\ )","title":"\u53d6\u51fa \u6b21\u54c1 \u7684 \u4e2a\u6570"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E5%8F%96%E5%87%BA%E6%AC%A1%E5%93%81%E7%9A%84%E4%B8%AA%E6%95%B0/#_1","text":"Question   \u8bbe\u5728   \\ ( 15 \\ )   \u53ea\u540c \u7c7b\u578b \u7684 \u96f6\u4ef6 \u4e2d\u6709   \\ ( 2 \\ )   \u53ea \u4e3a \u6b21\u54c1 \uff0c \u5728 \u5176\u4e2d \u53d6   \\ ( 3 \\ )   \u6b21 \uff0c \u6bcf\u6b21 \u4efb\u53d6   \\ ( 1 \\ )   \u53ea \uff0c \u4e0d\u653e \u653e\u56de \u4f5c\u4e0d\u653e\u56de \u62bd\u6837 \uff0c \u4ee5   \\ ( X \\ )   \u8868\u793a \u53d6\u51fa \u7684 \u6b21\u54c1 \u7684 \u4e2a\u6570 \u3002   \u6c42 \uff1a   \\ ( X \\ )   \u7684 \u5206\u5e03 \u5f8b \uff1b   \\ ( X \\ )   \u7684 \u5206\u5e03 \u51fd\u6570 \uff1b","title":"\u53d6\u51fa \u6b21\u54c1 \u7684 \u4e2a\u6570"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E5%8F%96%E5%87%BA%E6%AC%A1%E5%93%81%E7%9A%84%E4%B8%AA%E6%95%B0/#x","text":"0   1   2   \\ ( \\ frac { \\ binom { 13 } { 3 } \\ binom { 2 } { 0 } } { \\ binom { 15 } { 3 } } \\ )   \\ ( \\ frac { \\ binom { 13 } { 2 } \\ binom { 2 } { 1 } } { \\ binom { 15 } { 3 } } \\ )   \\ ( \\ frac { \\ binom { 13 } { 1 } \\ binom { 2 } { 2 } } { \\ binom { 15 } { 3 } } \\ )","title":"\\ ( X \\ )   \u7684 \u5206\u5e03 \u5f8b"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E5%9D%87%E5%8C%80%E5%88%86%E5%B8%83/","text":"\u5747\u5300 \u5206\u5e03 \u5747\u5300\u5206\u5e03","title":"\u5747\u5300\u5206\u5e03"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E5%9D%87%E5%8C%80%E5%88%86%E5%B8%83/#_1","text":"","title":"\u5747\u5300\u5206\u5e03"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E5%9D%87%E5%8C%80%E5%88%86%E5%B8%83%E7%AE%80%E5%8D%95%E4%BE%8B%E9%A2%98/","text":"\u5747\u5300 \u5206\u5e03 \u5747\u5300\u5206\u5e03 \u7b80\u5355 \u4f8b\u9898   Question   \u8bbe \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u5728   \\ ( [ 2 ,   5 ] \\ )   \u4e0a \u670d\u4ece \u5747\u5300 \u5206\u5e03 \u5747\u5300\u5206\u5e03 \u3002   \u73b0\u5bf9   \\ ( X \\ )   \u8fdb\u884c   \\ ( 3 \\ )   \u6b21 \u72ec\u7acb \u89c2\u6d4b \uff1b   \u6c42 \u81f3\u5c11 \u6709 \u4e24\u6b21 \u7684 \u89c2\u5bdf \u503c \u5927\u4e8e   \\ ( 3 \\ )   \u7684 \u6982\u7387 \u3002   \u82e5   \\ ( X \\ )   \u5728   \\ ( [ 2 ,   5 ] \\ )   \u4e0a \u670d\u4ece \u5747\u5300 \u5206\u5e03 \u5747\u5300\u5206\u5e03 \uff0c \u5219   \\ ( \\ int _ { 2 } ^ { 5 } f ( x ) dx   =   1 \\ )   \uff0c \u4e0d\u4ec5 \u5982\u6b64 \u4e0d\u4ec5\u5982\u6b64 \uff0c \u7531\u4e8e \u5206\u5e03 \u5747\u5300 \uff0c \u5219 \u5bc6\u5ea6 \u51fd\u6570 \u5c06\u4f1a \u662f \u4e00\u6761 \u6c34\u5e73 \u6c34\u5e73\u7ebf \uff0c \u5373   \\ ( f ( x )   =   c \\ )   \u662f \u4e00\u4e2a \u5e38\u6570   \u6240\u4ee5   \\ ( \\ int _ { 2 } ^ { 5 } c   dx   =   cx   |   ^ { 5 }   _   { 2 }   =   3c   =   1 \\ )   \u89e3\u5f97   \\ ( c   =   \\ frac { 1 } { 3 } \\ )   \uff0c \u6240\u4ee5   \\ ( F ( x )   =   \\ frac { 1 } { 3 } x ,   x   \\ in   [ 2 ,   5 ] \\ )   \u6240\u4ee5 \uff1a   \\ ( P ( 3   \\ leq   x   \\ leq5 )   =   F ( 5 )   -   F ( 3 )   =   \\ frac { 2 } { 3 } \\ )","title":"\u5747\u5300\u5206\u5e03 \u7b80\u5355 \u4f8b\u9898"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E5%9D%87%E5%8C%80%E5%88%86%E5%B8%83%E7%AE%80%E5%8D%95%E4%BE%8B%E9%A2%98/#_1","text":"Question   \u8bbe \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u5728   \\ ( [ 2 ,   5 ] \\ )   \u4e0a \u670d\u4ece \u5747\u5300 \u5206\u5e03 \u5747\u5300\u5206\u5e03 \u3002   \u73b0\u5bf9   \\ ( X \\ )   \u8fdb\u884c   \\ ( 3 \\ )   \u6b21 \u72ec\u7acb \u89c2\u6d4b \uff1b   \u6c42 \u81f3\u5c11 \u6709 \u4e24\u6b21 \u7684 \u89c2\u5bdf \u503c \u5927\u4e8e   \\ ( 3 \\ )   \u7684 \u6982\u7387 \u3002   \u82e5   \\ ( X \\ )   \u5728   \\ ( [ 2 ,   5 ] \\ )   \u4e0a \u670d\u4ece \u5747\u5300 \u5206\u5e03 \u5747\u5300\u5206\u5e03 \uff0c \u5219   \\ ( \\ int _ { 2 } ^ { 5 } f ( x ) dx   =   1 \\ )   \uff0c \u4e0d\u4ec5 \u5982\u6b64 \u4e0d\u4ec5\u5982\u6b64 \uff0c \u7531\u4e8e \u5206\u5e03 \u5747\u5300 \uff0c \u5219 \u5bc6\u5ea6 \u51fd\u6570 \u5c06\u4f1a \u662f \u4e00\u6761 \u6c34\u5e73 \u6c34\u5e73\u7ebf \uff0c \u5373   \\ ( f ( x )   =   c \\ )   \u662f \u4e00\u4e2a \u5e38\u6570   \u6240\u4ee5   \\ ( \\ int _ { 2 } ^ { 5 } c   dx   =   cx   |   ^ { 5 }   _   { 2 }   =   3c   =   1 \\ )   \u89e3\u5f97   \\ ( c   =   \\ frac { 1 } { 3 } \\ )   \uff0c \u6240\u4ee5   \\ ( F ( x )   =   \\ frac { 1 } { 3 } x ,   x   \\ in   [ 2 ,   5 ] \\ )   \u6240\u4ee5 \uff1a   \\ ( P ( 3   \\ leq   x   \\ leq5 )   =   F ( 5 )   -   F ( 3 )   =   \\ frac { 2 } { 3 } \\ )","title":"\u5747\u5300\u5206\u5e03 \u7b80\u5355 \u4f8b\u9898"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E5%A4%9A%E7%BB%B4%E7%A6%BB%E6%95%A3%E5%9E%8B%E9%9A%8F%E6%9C%BA%E5%90%91%E9%87%8F/","text":"\u591a\u7ef4 \u79bb\u6563 \u578b \u968f\u673a \u5411\u91cf   \u4ee5   \\ ( \\ { a _ { i _ 1 } ,   a _ { i _ 2 } ,   \\ cdots   ,   \\ } \\ )   \u8bb0 \u4e3a   \\ ( X _ i \\ )   \u7684 \u5168\u90e8 \u53ef\u80fd \u53d6\u503c   \\ ( ( i   =   1 ,   2 ,   \\ cdots ) \\ )   \uff0c \u5219 \u4e8b\u4ef6   \\ ( \\ { X _ 1   =   a _ { j _ 1 } ,   X _ 2   =   a _ { j _ 2 } ,   \\ cdots \\ } \\ )   \u7684 \u6982\u7387 \u8868\u793a \u4e3a \uff1a   \\ [   p ( j _ 1 ,   j _ 2 ,   \\ cdots )   =   P ( X _ 1   =   a _ { j _ 1 } ,   X _ 2   =   a _ { j _ 2 } ,   \\ cdots )   \\ ]   \u8868\u793a \u5404\u81ea \u968f\u673a \u5411\u91cf \u5728 \u67d0\u7ec4 \u53d6\u503c \u4e0b \u7684 \u6982\u7387 \u3002","title":"\u591a\u7ef4 \u79bb\u6563 \u578b \u968f\u673a \u5411\u91cf"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E5%A4%9A%E7%BB%B4%E7%A6%BB%E6%95%A3%E5%9E%8B%E9%9A%8F%E6%9C%BA%E5%90%91%E9%87%8F/#_1","text":"\u4ee5   \\ ( \\ { a _ { i _ 1 } ,   a _ { i _ 2 } ,   \\ cdots   ,   \\ } \\ )   \u8bb0 \u4e3a   \\ ( X _ i \\ )   \u7684 \u5168\u90e8 \u53ef\u80fd \u53d6\u503c   \\ ( ( i   =   1 ,   2 ,   \\ cdots ) \\ )   \uff0c \u5219 \u4e8b\u4ef6   \\ ( \\ { X _ 1   =   a _ { j _ 1 } ,   X _ 2   =   a _ { j _ 2 } ,   \\ cdots \\ } \\ )   \u7684 \u6982\u7387 \u8868\u793a \u4e3a \uff1a   \\ [   p ( j _ 1 ,   j _ 2 ,   \\ cdots )   =   P ( X _ 1   =   a _ { j _ 1 } ,   X _ 2   =   a _ { j _ 2 } ,   \\ cdots )   \\ ]   \u8868\u793a \u5404\u81ea \u968f\u673a \u5411\u91cf \u5728 \u67d0\u7ec4 \u53d6\u503c \u4e0b \u7684 \u6982\u7387 \u3002","title":"\u591a\u7ef4 \u79bb\u6563 \u578b \u968f\u673a \u5411\u91cf"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%88%86%E5%B8%83/","text":"\u591a\u9879 \u591a\u9879\u5f0f \u5206\u5e03   \u6211\u4eec \u5c06 \u4e00\u4e2a \u8bd5\u9a8c \u72ec\u7acb \u7684 \u8fdb\u884c \u4e00\u6b21 \uff0c \u5176 \u5b8c\u5907 \u4e8b\u4ef6 \u7fa4\u4e3a \uff1a   \\ ( \\ { A _ 1 ,   A _ 2 ,   \\ cdots   ,   A _ n \\ } \\ )   \uff0c \u4e14 \u4e8b\u4ef6 \u7fa4\u4e2d \uff0c \u4efb\u610f \u4e24\u4e2a \u4e8b\u4ef6 \u76f8\u4e92 \u6392\u65a5 \uff0c \u4e0d \u53ef\u80fd \u540c\u65f6 \u53d1\u751f \u591a\u4e2a \uff0c \u4e00\u6b21 \u53ea\u80fd \u4e14 \u5fc5\u5b9a \u53d1\u751f \u5176\u4e2d \u4e00\u4e2a \u3002   \u5bf9\u4e8e \u4e8b\u4ef6   \\ ( A _ i \\ )   \u53d1\u751f \u7684 \u6982\u7387 \u4e3a   \\ ( p _ i \\ )   \uff0c \u5219   \\ ( p _ 1   +   p _ 2   +   \\ cdots   +   p _ n   =   1 \\ )   \u3002   \u6211\u4eec \u5c06 \u8bd5\u9a8c \u72ec\u7acb \u7684 \u8fdb\u884c   \\ ( N \\ )   \u6b21 \uff0c \u8bb0   \\ ( k _ i \\ )   \u4e3a \u4e8b\u4ef6   \\ ( A _ i \\ )   \u53d1\u751f \u7684 \u6b21\u6570 \uff0c \u5219   \\ ( k _ 1   +   k _ 2   +   \\ cdots   +   k _ n   =   N \\ )   \u3002   \\ ( p ( k _ 1 ,   k _ 2 ,   \\ cdots ,   k _ n )   =   \\ frac { N ! } { k _ 1 ! k _ 2 ! \\ cdots   k _ n ! }   p _ 1 ^ { k _ 1 }   p _ 2 ^ { k _ 2 }   \\ cdots   p _ n ^ { k _ n } \\ )   \uff0c \u60f3\u8c61 \u6210\u5c06   \\ ( N \\ )   \u5206\u6210 \u5927\u5c0f \u5206\u522b \u4e3a   \\ ( k _ 1 ,   k _ 2 ,   \\ cdots   k _ n \\ )   \u7684 \u5806 \u3002   \u7531\u4e8e   \\ ( k _ 1 ,   k _ 2 ,   \\ cdots   ,   k _ n \\ )   \u7684 \u503c \u5e76 \u4e0d \u56fa\u5b9a \uff0c \u53ea \u9700\u8981 \u6ee1\u8db3   \\ ( k _ i \\ )   \u662f\u975e \u8d1f \u6574\u6570 \uff0c   \\ ( k _ 1   +   k _ 2   +   \\ cdots   +   k _ n   =   N \\ )   \u5373\u53ef \u3002   \u6240\u4ee5   \\ ( k _ 1 ,   k _ 2 ,   \\ cdots   ,   k _ n \\ )   \u7684 \u5168 \u6982\u7387 \u548c \u4e3a \uff1a   \\ [   \\ sum _ { k _ 1 ,   k _ 2 ,   \\ cdots ,   k _ n } ^ { * } \\ frac { N ! } { k _ 1 ! k _ 2 ! \\ cdots   k _ n ! }   p _ 1 ^ { k _ 1 }   p _ 2 ^ { k _ 2 }   \\ cdots   p _ n ^ { k _ n }   =   ( p _ 1   +   p _ 2   +   \\ cdots   +   p _ n )   ^   N   =   1   \\ ]   \u7531\u4e8e \u5168 \u6982\u7387 \u6c42\u548c \u516c\u5f0f \u516c\u5f0f\u5316 \u7b80\u7684 \u7ed3\u679c \u4e0e   \u591a\u9879 \u591a\u9879\u5f0f \u516c\u5f0f   \\ ( ( x _ 1   +   x _ 2   +   \\ cdots   +   x _ n )   ^   N \\ )   \u4e00\u81f4 \uff0c \u5c31 \u79f0\u547c \u4e3a   \u591a\u9879 \u591a\u9879\u5f0f \u5206\u5e03   \u3002   \u5bf9\u4e8e \u5f0f\u5b50   \\ ( \\ frac { N ! } { k _ 1 ! k _ 2 ! \\ cdots   k _ n ! }   x _ 1 ^ { k _ 1 }   x _ 2 ^ { k _ 2 }   \\ cdots   x _ n ^ { k _ n } \\ )   \uff0c \u82e5 \u5206\u6bcd \u7684 \u548c \u7b49\u4e8e \u5206\u5b50 \uff0c \u5373   \\ ( k _ 1   +   k _ 2   +   \\ cdots   +   k _ n   =   N \\ )   \uff0c \u4e14 \u53f3\u8fb9 \u4e3a \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( x _ i ^ { k _ i } \\ )   \u5176 \u6c42\u548c \u516c\u5f0f \u5c31 \u53ef\u4ee5 \u5316\u7b80 \u6210 \u591a\u9879 \u591a\u9879\u5f0f \u7684 \u5f62\u5f0f \uff1a   \\ ( ( x _ 1   +   x _ 2   +   \\ cdots   +   x _ n )   ^   N \\ )   \u3002   \u56fa\u5b9a \u4e00\u4e2a \u8bd5\u9a8c \u7ed3\u679c \u53d1\u751f \u7684 \u6b21\u6570 \uff0c \u6c42 \u6982\u7387   Question   \u67d0\u79cd \u8bd5\u9a8c \u7684 \u7ed3\u679c \u4e3a \uff1a   \\ ( A _ 1 ,   A _ 2 ,   \\ cdots   ,   A _ n \\ )   \u4e2d \u7684 \u4e00\u79cd \uff0c \u5e76\u4e14 \u6bcf \u4e00\u79cd \u53ef\u80fd \u7684 \u7ed3\u679c \u4e92\u76f8 \u6392\u65a5 \uff1b   \u5bf9\u4e8e \u7ed3\u679c   \\ ( A _ i \\ )   \u53d1\u751f \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( p _ i \\ )   \uff1b   \u82e5 \u5bf9 \u8be5 \u8bd5\u9a8c \u72ec\u7acb \u8fdb\u884c \u4e86   \\ ( N \\ )   \u6b21 \uff0c \u6c42 \u8bd5\u9a8c \u7ed3\u679c   \\ ( A _ 1 \\ )   \u53d1\u751f   \\ ( k _ 1 \\ )   \u6b21 \u7684 \u6982\u7387 \u3002   \u601d\u8def \u4e00 \uff1a   \u5c06   \\ ( N \\ )   \u5206\u6210 \u5927\u5c0f \u5206\u522b \u4e3a   \\ ( k _ 1 \u3001 N   -   k _ 1 \\ )   \u7684 \u4e24\u4e2a \u5806 \uff0c \u5219 \u6709   \\ ( \\ frac { N ! } { k _ 1 ! ( N   -   k _ 1 ) ! } \\ )   \u79cd \u5212\u5206 \u65b9\u6cd5 \uff1b   \u5176\u4e2d \u5927\u5c0f \u4e3a   \\ ( k _ 1 \\ )   \u7684 \u5806 \u4e3a   \\ ( A _ 1 \\ )   \u53d1\u751f \u6240\u5728 \u7684 \u5806 \uff0c \u5269\u4e0b \u7684 \u5927\u5c0f \u4e3a   \\ ( N   -   k _ 1 \\ )   \u7684 \u5806 \u7531 \u5269\u4e0b \u7684 \u8bd5\u9a8c \u7ed3\u679c   \\ ( A _ 2 \u3001 \\ cdots \u3001 A _ n \\ )   \u53d1\u751f \u7684 \u6b21\u6570 \u6784\u6210 \uff1b   \u6211\u4eec \u5c06 \u8bd5\u9a8c \u7ed3\u679c   \\ ( A _ 1 \\ )   \u72ec\u7acb \u51fa\u53bb \uff0c \u5c06 \u5269\u4e0b \u7684 \u8bd5\u9a8c \u7ed3\u679c \u770b\u6210 \u662f \u67d0\u79cd \u8bd5\u9a8c   \\ ( B \\ )   \u8fdb\u884c \u4e00\u6b21 \u7684 \u53ef\u80fd \u53d6\u503c \uff0c \u5219 \u5bf9\u4e8e   \\ ( A _ i ,   i   \\ geq   2 \\ )   \u5728 \u8bd5\u9a8c   \\ ( B \\ )   \u4e2d \u53d1\u751f \u7684 \u53ef\u80fd \u53ef\u80fd\u6027 \u4e3a \uff1a   \\ ( \\ frac { p _ i } { 1   -   p _ i } \\ )   \u7531\u5168 \u6982\u7387 \u548c \u516c\u5f0f \uff1a   \\ [   \\ begin { aligned }   \\ sum _ { k _ 2 \u3001 k _ 3 \u3001 \\ cdots   \u3001 k _ n } ^ { * } \\ frac { N ( N - k _ 1 ) ! } { k _ 2 ! k _ 3 !   \\ cdots   k _ n ! } ( \\ frac { p _ 2 } { 1   -   p _ 1 } ) ^ { k _ 2 } ( \\ frac { p _ 3 } { 1   -   p _ 1 } ) ^ { k _ 3 }   \\ cdots   ( \\ frac { p _ n } { 1   -   p _ 1 } ) ^ { k _ n }   \\ \\   =   ( \\ frac { p _ 2 } { 1   -   p _ 1 }   +   \\ frac { p _ 3 } { 1   -   p _ 1 }   +   \\ cdots   +   \\ frac { p _ n } { 1   -   p _ 1 } )   ^   N   =   1   \\ end { aligned }   \\ ]   \u6240\u4ee5   \\ ( A _ 1 \\ )   \u56fa\u5b9a \u53d1\u751f   \\ ( k _ 1 \\ )   \u6b21 \u7684 \u6982\u7387 \u4e3a :   \\ ( \\ frac { N ! } { k _ 1 ! ( N - k _ 1 ) ! } p _ 1 ^ { k _ 1 } ( 1   -   p _ 1 ) ^ ( N   -   k _ 1 ) \\ )   \u601d\u8def \u4e8c \uff1a   \u7531\u4e8e   \\ ( k _ 1 \\ )   \u56fa\u5b9a \uff0c \u4f46   \\ ( k _ 2 \u3001 k _ 3 \u3001 \\ cdots   \u3001 k _ n \\ )   \u4e0d\u662f \u56fa\u5b9a \uff0c \u6240\u4ee5 \u6982\u7387 \u548c \u4e3a \uff1a   \\ [   \\ begin { aligned }   \\ sum ^ { * } _ { k _ 2 ,   k _ 3 ,   \\ cdots   ,   k _ n }   \\ frac { N ! } { k _ 1 ! k _ 2 ! \\ cdots   k _ n ! }   p _ 1 ^ { k _ 1 } p _ 2 ^ { k _ 2 } \\ cdots   p _ n ^ { k _ n }   \\ end { aligned }   \\ ]   \u5c06 \u56fa\u5b9a \u7684 \u503c \u90fd \u63d0\u53d6 \u51fa\u6765 \uff1a   \\ [   \\ begin { aligned }   \\ frac { N ! } { k _ 1 ! } p _ 1 ^ { k _ 1 }   \\ sum ^ { * } _ { k _ 2 ! ,   , k _ 3 ! , \\ cdots ,   k _ n ! } \\ frac { 1 } { k _ 2 ! k _ 3 ! \\ cdots   k _ n ! } p _ 2 ^ { k _ 2 } p _ 3 ^ { k _ 3 } \\ cdots   p _ n ^ { k _ n }   \\ end { aligned }   \\ ]   \u5316\u7b80 \u6210 \u591a\u9879 \u591a\u9879\u5f0f \u7684 \u5f62\u5f0f \uff0c \u5206\u6bcd \u7684 \u548c \u4e3a \u5206\u5b50 \uff0c \u53f3\u8fb9 \u4e3a \u5206\u6bcd \u5404\u9879 \u7684 \u6b21\u65b9 \uff1a   \\ [   \\ begin { aligned }   \\ frac { N ! } { k _ 1 ! ( N   -   k _ 1 ) ! } p _ 1 ^ { k _ 1 } ( 1   -   p _ 1 ) ^ { N   -   k _ 1 }   \\ sum _ { k _ 2 , k _ 3 , \\ cdots , k _ n } ^ { * } \\ frac { ( N   -   k _ 1 ) ! } { k _ 2 ! k _ 3 ! \\ cdots   k _ n ! } ( \\ frac { p _ 2 } { 1   -   p _ 1 } ) ^ { k _ 2 } ( \\ frac { p _ 3 } { 1   -   p _ 1 } ) ^ { k _ 3 }   \\ cdots   ( \\ frac { p _ n } { 1   -   p _ 1 } ) ^ { k _ n }   \\ end { aligned }   \\ ]   \u5316\u7b80 \u6210 \u591a\u9879 \u591a\u9879\u5f0f \u7684 \u5f62\u5f0f \uff1a   \\ [   \\ begin { aligned }   \\ frac { N ! } { k _ 1 ! ( N   -   k _ 1 ) ! } p _ 1 ^ { k _ 1 } ( 1   -   p _ 1 ) ^ { N   -   k _ 1 }   ( \\ frac { p _ 2 } { 1   -   p _ 1 }   +   \\ frac { p _ 3 } { 1   -   p _ 1 }   +   \\ cdots   +   \\ frac { p _ n } { 1   -   p _ 1 } )   ^   N   \\ end { aligned }   \\ ]   \u7ed3\u679c \u4e3a \uff1a   \\ ( \\ frac { N ! } { k _ 1 ! ( N   -   k _ 1 ) ! } p _ 1 ^ { k _ 1 } ( 1   -   p _ 1 ) ^ { N   -   k _ 1 } \\ )   \u601d\u8def \u4e09 \uff1a   \u60f3\u8c61 \u6210 \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03 \u4e8b\u4ef6 \uff0c \u5b9e\u9a8c \u7ed3\u679c   \\ ( A _ 1 \\ )   \u53d1\u751f \u4e86   \\ ( k _ 1 \\ )   \u6b21 \uff0c \u6ca1\u6709 \u53d1\u751f   \\ ( N   -   k _ 1 \\ )   \u6b21 \u7684 \u6982\u7387 \u4e3a :   \\ ( \\ frac { N ! } { k _ 1 ! ( N   -   k _ 1 ) ! } p _ 1 ^ { k _ 1 } ( 1   -   p _ 1 ) ^ { N   -   k _ 1 } \\ )   \u7ed3\u8bba \uff1a \u82e5 \u8981\u6c42 \u67d0 \u8bd5\u9a8c \u7ed3\u679c   \\ ( A _ i \\ )   \u56fa\u5b9a \u53d1\u751f \u4e86   \\ ( k _ i \\ )   \u6b21 \u7684 \u6982\u7387 \uff0c \u53ea \u9700\u8981 \u5f53\u4f5c \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03   \\ ( b ( k _ i ;   N ,   p _ i ) \\ )   \u6765\u6c42 \u5c31 \u884c \u3002   \u63a8\u5e7f \u5230 \u591a\u4e2a \u8bd5\u9a8c \u7ed3\u679c \u56fa\u5b9a \u6b21\u6570 \uff0c \u6c42 \u6982\u7387   Question   \u82e5 \u4e00\u4e2a \u8bd5\u9a8c \u7684 \u8bd5\u9a8c \u7ed3\u679c \u662f   \\ ( \\ { A _ 1 ,   A _ 2 ,   \\ cdots   ,   A _ n \\ } \\ )   \u4e2d \u7684 \u4e00\u79cd \uff0c \u4e14 \u4e0a\u9762 \u7684 \u8bd5\u9a8c \u7ed3\u679c \u4e92\u76f8 \u6392\u65a5 \uff0c \u6bcf \u4e00\u6b21 \u8bd5\u9a8c \u6709\u4e14 \u4ec5 \u6709 \u4e00\u79cd \u8bd5\u9a8c \u7ed3\u679c \u53d1\u751f \uff0c \u5bf9\u4e8e \u4efb\u610f \u4e00\u4e2a \u8bd5\u9a8c \u7ed3\u679c   \\ ( A _ i \\ )   \u53d1\u751f \u7684 \u6982\u7387 \u4e3a   \\ ( p _ i \\ )   \u3002   \u82e5 \u5bf9 \u8be5 \u8bd5\u9a8c \u8fdb\u884c \u4e86   \\ ( N \\ )   \u6b21 \uff0c \u8bf7 \u4f60 \u6c42 \u8bd5\u9a8c \u7ed3\u679c   \\ ( A _ 1 \u3001 A _ 2 \u3001 \\ cdots   \u3001 A _ s \\ )   \u5206\u522b \u53d1\u751f   \\ ( k _ 1 \u3001 k _ 2 \u3001 \\ cdots   \u3001 k _ s \\ )   \u6b21 \u7684 \u6982\u7387 \u3002   \u5c06   \\ ( N \\ )   \u5206\u6210 \u5927\u5c0f \u5206\u522b \u4e3a \uff1a   \\ ( k _ 1 \u3001 k _ 2 \u3001 \\ cdots \u3001 k _ s \u3001 ( N   -   k _ 1   -   k _ 2   -   \\ cdots   -   k _ s ) \\ )   \u7684 \u5806 \uff0c \u603b\u5171 \u6709 \u591a\u5c11 \u5206\u6cd5 \u79cd\u5206\u6cd5 \uff1a   \u603b\u5171 \u6709   \\ ( \\ frac { N ! } { k _ 1 ! k _ 2 ! \\ cdots   k _ s ! ( N   -   k _ 1   -   k _ 2   -   \\ cdots   -   k _ s ) ! } \\ )   \u5206\u6cd5 \u79cd\u5206\u6cd5   \u5047\u8bbe \u6709 \u8fd9\u6837 \u7684 \u8bd5\u9a8c   \\ ( B \\ )   \u5176 \u8bd5\u9a8c \u7ed3\u679c \u4e3a \uff1a   \\ ( A _ { s + 1 }   \\ cdots   A _ n \\ )   \uff0c \u4e14 \u5bf9\u4e8e \u4efb\u610f \u7684 \u8bd5\u9a8c \u7ed3\u679c   \\ ( A _ i ( i   \\ geq   s   +   1 ) \\ )   \u6765\u8bf4 \uff0c \u5176 \u53d1\u751f \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( \\ frac { p _ i } { 1   -   ( p _ 1   +   p _ 2   +   \\ cdots   p _ s ) } \\ )   \u6240\u4ee5 \u9898\u76ee \u6240\u6c42 \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( \\ frac { N ! } { k _ 1 ! k _ 2 ! \\ cdots   k _ s ! ( N   -   k _ 1   -   k _ 2   -   \\ cdots   -   k _ s ) ! } p _ 1 ^ { k _ 1 }   \\ cdots   p _ s ^ { k _ s }   \\ times   ( 1   -   p _ 1   -   \\ cdots   p _ s )   ^   ( N   -   k _ 1   -   \\ cdots   k _ s ) \\ )   \\ ( \\ times \\ )   \\ ( \\ sum _ { k _ { s   +   1 }   \\ cdots   k _ n } ^ { * } \\ frac { ( N   -   k _ 1   -   \\ cdots   k _ s ) ! } { k _ { s   +   1 } ! k _ { s   +   2 } ! \\ cdots ,   k _ n ! } ( \\ frac { p _ { s   +   1 } } { 1   -   k _ 1   -   \\ cdots   k _ s } )   ^   { k _ { s   +   1 } }   \\ cdots   ( \\ frac { p _ n } { 1   -   k _ 1   -   \\ cdots   k _ s } )   ^   { k _ n } \\ )   \\ ( = \\ )   \\ ( \\ frac { N ! } { k _ 1 ! k _ 2 ! \\ cdots   k _ s ! ( N   -   k _ 1   -   k _ 2   -   \\ cdots   -   k _ s ) ! } p _ 1 ^ { k _ 1 }   \\ cdots   p _ s ^ { k _ s }   \\ times   ( 1   -   p _ 1   -   \\ cdots   p _ s )   ^   ( N   -   k _ 1   -   \\ cdots   k _ s ) \\ )   \u7ed3\u8bba \uff1a \u82e5 \u5c06 \u67d0\u4e9b \u8bd5\u9a8c \u7ed3\u679c \u56fa\u5b9a \u53d1\u751f \u591a\u5c11 \u6b21 \uff0c \u53eb \u4f60 \u6c42 \u8fd9\u6837 \u7684 \u6982\u7387 \uff0c \u53ea \u9700\u8981 \u5c06 \u8bd5\u9a8c \u6b21\u6570   \\ ( N \\ )   \u5206\u6210 \u5927\u5c0f \u5206\u522b \u4e3a   \\ ( k _ 1 \u3001 k _ 2 \u3001 \\ cdots   \u3001 k _ s   \u3001 ( N   -   k _ 1   -   k _ 2   -   \\ cdots   -   k _ s ) \\ )   \u7684 \u5806 \uff0c \u5206\u522b \u4ee3\u8868 \u4e8b\u4ef6   \\ ( A _ 1 \u3001 A _ 2 \u3001 \\ cdots   \u3001 A _ s \u3001 \\ bar { A } \\ )   \u53d1\u751f \u7684 \u6b21\u6570 \uff0c \u6bcf \u4e00\u4e2a \u8bd5\u9a8c \u5206\u522b \u53d1\u751f \u7684 \u6982\u7387 \u5206\u522b \u5bf9\u5e94   \\ ( p _ 1 \u3001 p _ 2 \u3001 \\ cdots   \u3001 p _ s \u3001 ( 1   -   p _ 1 \u3001 p _ 2 \u3001 \\ cdots   \u3001 p _ s ) \\ )   \uff0c \u6c42 \u8fd9\u6837 \u7684 \u6982\u7387   \u5728 \u591a\u9879 \u591a\u9879\u5f0f \u5206\u5e03 \u4e2d \uff0c \u5728 \u5df2\u77e5 \u67d0 \u4e8b\u4ef6 \u56fa\u5b9a \u53d1\u751f \u4e86 \u51e0\u6b21 \u7684 \u60c5\u51b5 \u4e0b \uff0c \u6c42 \u53e6 \u4e00 \u4e8b\u4ef6 \u53d1\u751f \u67d0\u6b21 \u7684 \u6982\u7387   Question   \u82e5 \u8fdb\u884c \u4e00\u6b21 \u8bd5\u9a8c \uff0c \u5176 \u53ef\u80fd \u7684 \u7ed3\u679c \u4e3a   \\ ( A _ 1 \u3001 A _ 2 \u3001 \\ cdots   \u3001 A _ n \\ )   \u4e2d \u7684 \u4e00\u79cd \uff0c \u5e76\u4e14 \u8fd9\u4e9b \u53ef\u80fd \u7684 \u7ed3\u679c \u76f8\u4e92 \u6392\u65a5 \uff0c \u6bcf \u4e00\u6b21 \u8bd5\u9a8c \u6709\u4e14 \u4ec5 \u6709 \u4e00\u79cd \u7ed3\u679c \u53d1\u751f \u3002   \u6bcf \u4e00\u79cd \u7ed3\u679c \u5206\u522b \u5bf9\u5e94 \u7684 \u53d1\u751f \u6982\u7387 \u4e3a \uff1a   \\ ( p _ 1 \u3001 p _ 2 \u3001 \\ cdots   \u3001 p _ n \\ )   \u3002   \u82e5 \u8fdb\u884c   \\ ( N \\ )   \u6b21 \u72ec\u7acb \u7684 \u8bd5\u9a8c \uff0c \u5df2\u77e5 \u7ed3\u679c \u4e3a   \\ ( A _ 2 \\ )   \u53d1\u751f \u4e86   \\ ( k _ 2 \\ )   \u6b21 \uff0c \u6c42 \u6b64\u65f6   \\ ( A _ 1 \\ )   \u53d1\u751f \u4e86   \\ ( k _ 1 \\ )   \u6b21 \u7684 \u6982\u7387 \u3002   \u5148\u6c42   \\ ( p ( A _ 2   =   k _ 2 ) \\ )   \u7684 \u6982\u7387 \uff0c \u518d\u6c42   \\ ( p ( A _ 1   =   k _ 1 ,   A _ 2   =   k _ 2 ) \\ )   \u7684 \u6982\u7387 \uff0c \u90a3\u4e48 \u7b54\u6848 \u5c31\u662f \uff1a   \\ ( \\ frac { p ( A _ 1   =   k _ 1 ,   A _ 2   =   k _ 2 ) } { p ( A _ 2   =   k _ 2 ) } \\ )   \u7531 \u4e0a\u9762 \u7684 \u7ed3\u8bba \u6211\u4eec \u5bb9\u6613 \u5f97 \uff1a   \\ ( p ( A _ 2   =   k _ 2 )   =   \\ frac { N ! } { k _ 2 ! ( N   -   k _ 2 ) ! } p _ 2 ^ { k _ 2 } ( 1   -   p _ 2 )   ^   ( N   -   k _ 2 ) \\ )   \\ ( p ( A _ 1   =   k _ 1 ,   A _ 2   =   k _ 2 )   =   \\ frac { N ! } { k _ 1 ! k _ 2 ! ( N   -   k _ 1   -   k _ 2 ) ! } p _ 1 ^ { k _ 1 } p _ 2 ^ { k _ 2 } ( 1   -   p _ 1   -   p _ 2 )   ^   ( N   -   k _ 1   -   k _ 2 ) \\ )   \u6240\u4ee5   \\ ( p ( A _ 1   =   k _ 1   |   A _ 2   =   k _ 2 )   \\ frac { p ( A _ 1   =   k _ 1 ,   A _ 2   =   k _ 2 ) } { p ( A _ 2   =   k _ 2 ) }   =   \\ frac { p _ 1 ^ { k _ 1 } ( 1   -   p _ 1   -   p _ 2 )   ^   { N   -   k _   2   -   k _ 1 }   ( N   -   k _ 2 ) ! } { k _ 1 ! ( N   -   k _ 1   -   k _ 2 ) ! ( 1   -   p _ 2 ) ^ { N   -   k _ 2 } } \\ )   \u5316\u7b80 \u6b65\u9aa4 \u4e5f \u770b\u4e00\u770b \u5427 \uff1a   \\ ( \\ frac { p _ 1 ^ { k _ 1 } ( 1   -   p _ 1   -   p _ 2 )   ^   { N   -   k _   2   -   k _ 1 }   ( N   -   k _ 2 ) ! } { k _ 1 ! ( N   -   k _ 1   -   k _ 2 ) ! ( 1   -   p _ 2 ) ^ { N   -   k _ 2 } }   =   \\ frac { p _ 1 ^ { k _ 1 } ( 1   -   p _ 1   -   p _ 2 )   ^   { N   -   k _   2   -   k _ 1 }   ( N   -   k _ 2 ) ! } { ( 1   -   p _ 2 )   ^   { k _ 1 }   k _ 1 ! ( N   -   k _ 1   -   k _ 2 ) ! ( 1   -   p _ 2 ) ^ { N   -   k _ 2   -   k _ 1 } } \\ )   \u6700\u7ec8 \u53ef \u5316\u7b80 \u6210 \uff1a   \\ ( \\ frac { ( N   -   k _ 2 ) ! } { k _ 1 ! ( N   -   k _ 1   -   k _ 2 ) ! } ( \\ frac { p _ 1 } { 1   -   p _ 2 } )   ^   { k _ 1 }   ( 1   -   \\ frac { p _ 1 } { 1   -   p _ 2 } )   ^   { N   -   k _ 1   -   k _ 2 } \\ )   \u53ef\u4ee5 \u8868\u793a \u6210 \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03 \uff1a   \\ ( b ( k _ 1 ;   N   -   k _ 2 ,   \\ frac { p _ 1 } { 1   -   p _ 2 } ) \\ )","title":"\u591a\u9879\u5f0f \u5206\u5e03"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%88%86%E5%B8%83/#_1","text":"\u6211\u4eec \u5c06 \u4e00\u4e2a \u8bd5\u9a8c \u72ec\u7acb \u7684 \u8fdb\u884c \u4e00\u6b21 \uff0c \u5176 \u5b8c\u5907 \u4e8b\u4ef6 \u7fa4\u4e3a \uff1a   \\ ( \\ { A _ 1 ,   A _ 2 ,   \\ cdots   ,   A _ n \\ } \\ )   \uff0c \u4e14 \u4e8b\u4ef6 \u7fa4\u4e2d \uff0c \u4efb\u610f \u4e24\u4e2a \u4e8b\u4ef6 \u76f8\u4e92 \u6392\u65a5 \uff0c \u4e0d \u53ef\u80fd \u540c\u65f6 \u53d1\u751f \u591a\u4e2a \uff0c \u4e00\u6b21 \u53ea\u80fd \u4e14 \u5fc5\u5b9a \u53d1\u751f \u5176\u4e2d \u4e00\u4e2a \u3002   \u5bf9\u4e8e \u4e8b\u4ef6   \\ ( A _ i \\ )   \u53d1\u751f \u7684 \u6982\u7387 \u4e3a   \\ ( p _ i \\ )   \uff0c \u5219   \\ ( p _ 1   +   p _ 2   +   \\ cdots   +   p _ n   =   1 \\ )   \u3002   \u6211\u4eec \u5c06 \u8bd5\u9a8c \u72ec\u7acb \u7684 \u8fdb\u884c   \\ ( N \\ )   \u6b21 \uff0c \u8bb0   \\ ( k _ i \\ )   \u4e3a \u4e8b\u4ef6   \\ ( A _ i \\ )   \u53d1\u751f \u7684 \u6b21\u6570 \uff0c \u5219   \\ ( k _ 1   +   k _ 2   +   \\ cdots   +   k _ n   =   N \\ )   \u3002   \\ ( p ( k _ 1 ,   k _ 2 ,   \\ cdots ,   k _ n )   =   \\ frac { N ! } { k _ 1 ! k _ 2 ! \\ cdots   k _ n ! }   p _ 1 ^ { k _ 1 }   p _ 2 ^ { k _ 2 }   \\ cdots   p _ n ^ { k _ n } \\ )   \uff0c \u60f3\u8c61 \u6210\u5c06   \\ ( N \\ )   \u5206\u6210 \u5927\u5c0f \u5206\u522b \u4e3a   \\ ( k _ 1 ,   k _ 2 ,   \\ cdots   k _ n \\ )   \u7684 \u5806 \u3002   \u7531\u4e8e   \\ ( k _ 1 ,   k _ 2 ,   \\ cdots   ,   k _ n \\ )   \u7684 \u503c \u5e76 \u4e0d \u56fa\u5b9a \uff0c \u53ea \u9700\u8981 \u6ee1\u8db3   \\ ( k _ i \\ )   \u662f\u975e \u8d1f \u6574\u6570 \uff0c   \\ ( k _ 1   +   k _ 2   +   \\ cdots   +   k _ n   =   N \\ )   \u5373\u53ef \u3002   \u6240\u4ee5   \\ ( k _ 1 ,   k _ 2 ,   \\ cdots   ,   k _ n \\ )   \u7684 \u5168 \u6982\u7387 \u548c \u4e3a \uff1a   \\ [   \\ sum _ { k _ 1 ,   k _ 2 ,   \\ cdots ,   k _ n } ^ { * } \\ frac { N ! } { k _ 1 ! k _ 2 ! \\ cdots   k _ n ! }   p _ 1 ^ { k _ 1 }   p _ 2 ^ { k _ 2 }   \\ cdots   p _ n ^ { k _ n }   =   ( p _ 1   +   p _ 2   +   \\ cdots   +   p _ n )   ^   N   =   1   \\ ]   \u7531\u4e8e \u5168 \u6982\u7387 \u6c42\u548c \u516c\u5f0f \u516c\u5f0f\u5316 \u7b80\u7684 \u7ed3\u679c \u4e0e   \u591a\u9879 \u591a\u9879\u5f0f \u516c\u5f0f   \\ ( ( x _ 1   +   x _ 2   +   \\ cdots   +   x _ n )   ^   N \\ )   \u4e00\u81f4 \uff0c \u5c31 \u79f0\u547c \u4e3a   \u591a\u9879 \u591a\u9879\u5f0f \u5206\u5e03   \u3002   \u5bf9\u4e8e \u5f0f\u5b50   \\ ( \\ frac { N ! } { k _ 1 ! k _ 2 ! \\ cdots   k _ n ! }   x _ 1 ^ { k _ 1 }   x _ 2 ^ { k _ 2 }   \\ cdots   x _ n ^ { k _ n } \\ )   \uff0c \u82e5 \u5206\u6bcd \u7684 \u548c \u7b49\u4e8e \u5206\u5b50 \uff0c \u5373   \\ ( k _ 1   +   k _ 2   +   \\ cdots   +   k _ n   =   N \\ )   \uff0c \u4e14 \u53f3\u8fb9 \u4e3a \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( x _ i ^ { k _ i } \\ )   \u5176 \u6c42\u548c \u516c\u5f0f \u5c31 \u53ef\u4ee5 \u5316\u7b80 \u6210 \u591a\u9879 \u591a\u9879\u5f0f \u7684 \u5f62\u5f0f \uff1a   \\ ( ( x _ 1   +   x _ 2   +   \\ cdots   +   x _ n )   ^   N \\ )   \u3002","title":"\u591a\u9879\u5f0f \u5206\u5e03"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%88%86%E5%B8%83/#_2","text":"Question   \u67d0\u79cd \u8bd5\u9a8c \u7684 \u7ed3\u679c \u4e3a \uff1a   \\ ( A _ 1 ,   A _ 2 ,   \\ cdots   ,   A _ n \\ )   \u4e2d \u7684 \u4e00\u79cd \uff0c \u5e76\u4e14 \u6bcf \u4e00\u79cd \u53ef\u80fd \u7684 \u7ed3\u679c \u4e92\u76f8 \u6392\u65a5 \uff1b   \u5bf9\u4e8e \u7ed3\u679c   \\ ( A _ i \\ )   \u53d1\u751f \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( p _ i \\ )   \uff1b   \u82e5 \u5bf9 \u8be5 \u8bd5\u9a8c \u72ec\u7acb \u8fdb\u884c \u4e86   \\ ( N \\ )   \u6b21 \uff0c \u6c42 \u8bd5\u9a8c \u7ed3\u679c   \\ ( A _ 1 \\ )   \u53d1\u751f   \\ ( k _ 1 \\ )   \u6b21 \u7684 \u6982\u7387 \u3002   \u601d\u8def \u4e00 \uff1a   \u5c06   \\ ( N \\ )   \u5206\u6210 \u5927\u5c0f \u5206\u522b \u4e3a   \\ ( k _ 1 \u3001 N   -   k _ 1 \\ )   \u7684 \u4e24\u4e2a \u5806 \uff0c \u5219 \u6709   \\ ( \\ frac { N ! } { k _ 1 ! ( N   -   k _ 1 ) ! } \\ )   \u79cd \u5212\u5206 \u65b9\u6cd5 \uff1b   \u5176\u4e2d \u5927\u5c0f \u4e3a   \\ ( k _ 1 \\ )   \u7684 \u5806 \u4e3a   \\ ( A _ 1 \\ )   \u53d1\u751f \u6240\u5728 \u7684 \u5806 \uff0c \u5269\u4e0b \u7684 \u5927\u5c0f \u4e3a   \\ ( N   -   k _ 1 \\ )   \u7684 \u5806 \u7531 \u5269\u4e0b \u7684 \u8bd5\u9a8c \u7ed3\u679c   \\ ( A _ 2 \u3001 \\ cdots \u3001 A _ n \\ )   \u53d1\u751f \u7684 \u6b21\u6570 \u6784\u6210 \uff1b   \u6211\u4eec \u5c06 \u8bd5\u9a8c \u7ed3\u679c   \\ ( A _ 1 \\ )   \u72ec\u7acb \u51fa\u53bb \uff0c \u5c06 \u5269\u4e0b \u7684 \u8bd5\u9a8c \u7ed3\u679c \u770b\u6210 \u662f \u67d0\u79cd \u8bd5\u9a8c   \\ ( B \\ )   \u8fdb\u884c \u4e00\u6b21 \u7684 \u53ef\u80fd \u53d6\u503c \uff0c \u5219 \u5bf9\u4e8e   \\ ( A _ i ,   i   \\ geq   2 \\ )   \u5728 \u8bd5\u9a8c   \\ ( B \\ )   \u4e2d \u53d1\u751f \u7684 \u53ef\u80fd \u53ef\u80fd\u6027 \u4e3a \uff1a   \\ ( \\ frac { p _ i } { 1   -   p _ i } \\ )   \u7531\u5168 \u6982\u7387 \u548c \u516c\u5f0f \uff1a   \\ [   \\ begin { aligned }   \\ sum _ { k _ 2 \u3001 k _ 3 \u3001 \\ cdots   \u3001 k _ n } ^ { * } \\ frac { N ( N - k _ 1 ) ! } { k _ 2 ! k _ 3 !   \\ cdots   k _ n ! } ( \\ frac { p _ 2 } { 1   -   p _ 1 } ) ^ { k _ 2 } ( \\ frac { p _ 3 } { 1   -   p _ 1 } ) ^ { k _ 3 }   \\ cdots   ( \\ frac { p _ n } { 1   -   p _ 1 } ) ^ { k _ n }   \\ \\   =   ( \\ frac { p _ 2 } { 1   -   p _ 1 }   +   \\ frac { p _ 3 } { 1   -   p _ 1 }   +   \\ cdots   +   \\ frac { p _ n } { 1   -   p _ 1 } )   ^   N   =   1   \\ end { aligned }   \\ ]   \u6240\u4ee5   \\ ( A _ 1 \\ )   \u56fa\u5b9a \u53d1\u751f   \\ ( k _ 1 \\ )   \u6b21 \u7684 \u6982\u7387 \u4e3a :   \\ ( \\ frac { N ! } { k _ 1 ! ( N - k _ 1 ) ! } p _ 1 ^ { k _ 1 } ( 1   -   p _ 1 ) ^ ( N   -   k _ 1 ) \\ )   \u601d\u8def \u4e8c \uff1a   \u7531\u4e8e   \\ ( k _ 1 \\ )   \u56fa\u5b9a \uff0c \u4f46   \\ ( k _ 2 \u3001 k _ 3 \u3001 \\ cdots   \u3001 k _ n \\ )   \u4e0d\u662f \u56fa\u5b9a \uff0c \u6240\u4ee5 \u6982\u7387 \u548c \u4e3a \uff1a   \\ [   \\ begin { aligned }   \\ sum ^ { * } _ { k _ 2 ,   k _ 3 ,   \\ cdots   ,   k _ n }   \\ frac { N ! } { k _ 1 ! k _ 2 ! \\ cdots   k _ n ! }   p _ 1 ^ { k _ 1 } p _ 2 ^ { k _ 2 } \\ cdots   p _ n ^ { k _ n }   \\ end { aligned }   \\ ]   \u5c06 \u56fa\u5b9a \u7684 \u503c \u90fd \u63d0\u53d6 \u51fa\u6765 \uff1a   \\ [   \\ begin { aligned }   \\ frac { N ! } { k _ 1 ! } p _ 1 ^ { k _ 1 }   \\ sum ^ { * } _ { k _ 2 ! ,   , k _ 3 ! , \\ cdots ,   k _ n ! } \\ frac { 1 } { k _ 2 ! k _ 3 ! \\ cdots   k _ n ! } p _ 2 ^ { k _ 2 } p _ 3 ^ { k _ 3 } \\ cdots   p _ n ^ { k _ n }   \\ end { aligned }   \\ ]   \u5316\u7b80 \u6210 \u591a\u9879 \u591a\u9879\u5f0f \u7684 \u5f62\u5f0f \uff0c \u5206\u6bcd \u7684 \u548c \u4e3a \u5206\u5b50 \uff0c \u53f3\u8fb9 \u4e3a \u5206\u6bcd \u5404\u9879 \u7684 \u6b21\u65b9 \uff1a   \\ [   \\ begin { aligned }   \\ frac { N ! } { k _ 1 ! ( N   -   k _ 1 ) ! } p _ 1 ^ { k _ 1 } ( 1   -   p _ 1 ) ^ { N   -   k _ 1 }   \\ sum _ { k _ 2 , k _ 3 , \\ cdots , k _ n } ^ { * } \\ frac { ( N   -   k _ 1 ) ! } { k _ 2 ! k _ 3 ! \\ cdots   k _ n ! } ( \\ frac { p _ 2 } { 1   -   p _ 1 } ) ^ { k _ 2 } ( \\ frac { p _ 3 } { 1   -   p _ 1 } ) ^ { k _ 3 }   \\ cdots   ( \\ frac { p _ n } { 1   -   p _ 1 } ) ^ { k _ n }   \\ end { aligned }   \\ ]   \u5316\u7b80 \u6210 \u591a\u9879 \u591a\u9879\u5f0f \u7684 \u5f62\u5f0f \uff1a   \\ [   \\ begin { aligned }   \\ frac { N ! } { k _ 1 ! ( N   -   k _ 1 ) ! } p _ 1 ^ { k _ 1 } ( 1   -   p _ 1 ) ^ { N   -   k _ 1 }   ( \\ frac { p _ 2 } { 1   -   p _ 1 }   +   \\ frac { p _ 3 } { 1   -   p _ 1 }   +   \\ cdots   +   \\ frac { p _ n } { 1   -   p _ 1 } )   ^   N   \\ end { aligned }   \\ ]   \u7ed3\u679c \u4e3a \uff1a   \\ ( \\ frac { N ! } { k _ 1 ! ( N   -   k _ 1 ) ! } p _ 1 ^ { k _ 1 } ( 1   -   p _ 1 ) ^ { N   -   k _ 1 } \\ )   \u601d\u8def \u4e09 \uff1a   \u60f3\u8c61 \u6210 \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03 \u4e8b\u4ef6 \uff0c \u5b9e\u9a8c \u7ed3\u679c   \\ ( A _ 1 \\ )   \u53d1\u751f \u4e86   \\ ( k _ 1 \\ )   \u6b21 \uff0c \u6ca1\u6709 \u53d1\u751f   \\ ( N   -   k _ 1 \\ )   \u6b21 \u7684 \u6982\u7387 \u4e3a :   \\ ( \\ frac { N ! } { k _ 1 ! ( N   -   k _ 1 ) ! } p _ 1 ^ { k _ 1 } ( 1   -   p _ 1 ) ^ { N   -   k _ 1 } \\ )   \u7ed3\u8bba \uff1a \u82e5 \u8981\u6c42 \u67d0 \u8bd5\u9a8c \u7ed3\u679c   \\ ( A _ i \\ )   \u56fa\u5b9a \u53d1\u751f \u4e86   \\ ( k _ i \\ )   \u6b21 \u7684 \u6982\u7387 \uff0c \u53ea \u9700\u8981 \u5f53\u4f5c \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03   \\ ( b ( k _ i ;   N ,   p _ i ) \\ )   \u6765\u6c42 \u5c31 \u884c \u3002","title":"\u56fa\u5b9a \u4e00\u4e2a \u8bd5\u9a8c \u7ed3\u679c \u53d1\u751f \u7684 \u6b21\u6570 \uff0c \u6c42 \u6982\u7387"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%88%86%E5%B8%83/#_3","text":"Question   \u82e5 \u4e00\u4e2a \u8bd5\u9a8c \u7684 \u8bd5\u9a8c \u7ed3\u679c \u662f   \\ ( \\ { A _ 1 ,   A _ 2 ,   \\ cdots   ,   A _ n \\ } \\ )   \u4e2d \u7684 \u4e00\u79cd \uff0c \u4e14 \u4e0a\u9762 \u7684 \u8bd5\u9a8c \u7ed3\u679c \u4e92\u76f8 \u6392\u65a5 \uff0c \u6bcf \u4e00\u6b21 \u8bd5\u9a8c \u6709\u4e14 \u4ec5 \u6709 \u4e00\u79cd \u8bd5\u9a8c \u7ed3\u679c \u53d1\u751f \uff0c \u5bf9\u4e8e \u4efb\u610f \u4e00\u4e2a \u8bd5\u9a8c \u7ed3\u679c   \\ ( A _ i \\ )   \u53d1\u751f \u7684 \u6982\u7387 \u4e3a   \\ ( p _ i \\ )   \u3002   \u82e5 \u5bf9 \u8be5 \u8bd5\u9a8c \u8fdb\u884c \u4e86   \\ ( N \\ )   \u6b21 \uff0c \u8bf7 \u4f60 \u6c42 \u8bd5\u9a8c \u7ed3\u679c   \\ ( A _ 1 \u3001 A _ 2 \u3001 \\ cdots   \u3001 A _ s \\ )   \u5206\u522b \u53d1\u751f   \\ ( k _ 1 \u3001 k _ 2 \u3001 \\ cdots   \u3001 k _ s \\ )   \u6b21 \u7684 \u6982\u7387 \u3002   \u5c06   \\ ( N \\ )   \u5206\u6210 \u5927\u5c0f \u5206\u522b \u4e3a \uff1a   \\ ( k _ 1 \u3001 k _ 2 \u3001 \\ cdots \u3001 k _ s \u3001 ( N   -   k _ 1   -   k _ 2   -   \\ cdots   -   k _ s ) \\ )   \u7684 \u5806 \uff0c \u603b\u5171 \u6709 \u591a\u5c11 \u5206\u6cd5 \u79cd\u5206\u6cd5 \uff1a   \u603b\u5171 \u6709   \\ ( \\ frac { N ! } { k _ 1 ! k _ 2 ! \\ cdots   k _ s ! ( N   -   k _ 1   -   k _ 2   -   \\ cdots   -   k _ s ) ! } \\ )   \u5206\u6cd5 \u79cd\u5206\u6cd5   \u5047\u8bbe \u6709 \u8fd9\u6837 \u7684 \u8bd5\u9a8c   \\ ( B \\ )   \u5176 \u8bd5\u9a8c \u7ed3\u679c \u4e3a \uff1a   \\ ( A _ { s + 1 }   \\ cdots   A _ n \\ )   \uff0c \u4e14 \u5bf9\u4e8e \u4efb\u610f \u7684 \u8bd5\u9a8c \u7ed3\u679c   \\ ( A _ i ( i   \\ geq   s   +   1 ) \\ )   \u6765\u8bf4 \uff0c \u5176 \u53d1\u751f \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( \\ frac { p _ i } { 1   -   ( p _ 1   +   p _ 2   +   \\ cdots   p _ s ) } \\ )   \u6240\u4ee5 \u9898\u76ee \u6240\u6c42 \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( \\ frac { N ! } { k _ 1 ! k _ 2 ! \\ cdots   k _ s ! ( N   -   k _ 1   -   k _ 2   -   \\ cdots   -   k _ s ) ! } p _ 1 ^ { k _ 1 }   \\ cdots   p _ s ^ { k _ s }   \\ times   ( 1   -   p _ 1   -   \\ cdots   p _ s )   ^   ( N   -   k _ 1   -   \\ cdots   k _ s ) \\ )   \\ ( \\ times \\ )   \\ ( \\ sum _ { k _ { s   +   1 }   \\ cdots   k _ n } ^ { * } \\ frac { ( N   -   k _ 1   -   \\ cdots   k _ s ) ! } { k _ { s   +   1 } ! k _ { s   +   2 } ! \\ cdots ,   k _ n ! } ( \\ frac { p _ { s   +   1 } } { 1   -   k _ 1   -   \\ cdots   k _ s } )   ^   { k _ { s   +   1 } }   \\ cdots   ( \\ frac { p _ n } { 1   -   k _ 1   -   \\ cdots   k _ s } )   ^   { k _ n } \\ )   \\ ( = \\ )   \\ ( \\ frac { N ! } { k _ 1 ! k _ 2 ! \\ cdots   k _ s ! ( N   -   k _ 1   -   k _ 2   -   \\ cdots   -   k _ s ) ! } p _ 1 ^ { k _ 1 }   \\ cdots   p _ s ^ { k _ s }   \\ times   ( 1   -   p _ 1   -   \\ cdots   p _ s )   ^   ( N   -   k _ 1   -   \\ cdots   k _ s ) \\ )   \u7ed3\u8bba \uff1a \u82e5 \u5c06 \u67d0\u4e9b \u8bd5\u9a8c \u7ed3\u679c \u56fa\u5b9a \u53d1\u751f \u591a\u5c11 \u6b21 \uff0c \u53eb \u4f60 \u6c42 \u8fd9\u6837 \u7684 \u6982\u7387 \uff0c \u53ea \u9700\u8981 \u5c06 \u8bd5\u9a8c \u6b21\u6570   \\ ( N \\ )   \u5206\u6210 \u5927\u5c0f \u5206\u522b \u4e3a   \\ ( k _ 1 \u3001 k _ 2 \u3001 \\ cdots   \u3001 k _ s   \u3001 ( N   -   k _ 1   -   k _ 2   -   \\ cdots   -   k _ s ) \\ )   \u7684 \u5806 \uff0c \u5206\u522b \u4ee3\u8868 \u4e8b\u4ef6   \\ ( A _ 1 \u3001 A _ 2 \u3001 \\ cdots   \u3001 A _ s \u3001 \\ bar { A } \\ )   \u53d1\u751f \u7684 \u6b21\u6570 \uff0c \u6bcf \u4e00\u4e2a \u8bd5\u9a8c \u5206\u522b \u53d1\u751f \u7684 \u6982\u7387 \u5206\u522b \u5bf9\u5e94   \\ ( p _ 1 \u3001 p _ 2 \u3001 \\ cdots   \u3001 p _ s \u3001 ( 1   -   p _ 1 \u3001 p _ 2 \u3001 \\ cdots   \u3001 p _ s ) \\ )   \uff0c \u6c42 \u8fd9\u6837 \u7684 \u6982\u7387","title":"\u63a8\u5e7f \u5230 \u591a\u4e2a \u8bd5\u9a8c \u7ed3\u679c \u56fa\u5b9a \u6b21\u6570 \uff0c \u6c42 \u6982\u7387"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%88%86%E5%B8%83/#_4","text":"Question   \u82e5 \u8fdb\u884c \u4e00\u6b21 \u8bd5\u9a8c \uff0c \u5176 \u53ef\u80fd \u7684 \u7ed3\u679c \u4e3a   \\ ( A _ 1 \u3001 A _ 2 \u3001 \\ cdots   \u3001 A _ n \\ )   \u4e2d \u7684 \u4e00\u79cd \uff0c \u5e76\u4e14 \u8fd9\u4e9b \u53ef\u80fd \u7684 \u7ed3\u679c \u76f8\u4e92 \u6392\u65a5 \uff0c \u6bcf \u4e00\u6b21 \u8bd5\u9a8c \u6709\u4e14 \u4ec5 \u6709 \u4e00\u79cd \u7ed3\u679c \u53d1\u751f \u3002   \u6bcf \u4e00\u79cd \u7ed3\u679c \u5206\u522b \u5bf9\u5e94 \u7684 \u53d1\u751f \u6982\u7387 \u4e3a \uff1a   \\ ( p _ 1 \u3001 p _ 2 \u3001 \\ cdots   \u3001 p _ n \\ )   \u3002   \u82e5 \u8fdb\u884c   \\ ( N \\ )   \u6b21 \u72ec\u7acb \u7684 \u8bd5\u9a8c \uff0c \u5df2\u77e5 \u7ed3\u679c \u4e3a   \\ ( A _ 2 \\ )   \u53d1\u751f \u4e86   \\ ( k _ 2 \\ )   \u6b21 \uff0c \u6c42 \u6b64\u65f6   \\ ( A _ 1 \\ )   \u53d1\u751f \u4e86   \\ ( k _ 1 \\ )   \u6b21 \u7684 \u6982\u7387 \u3002   \u5148\u6c42   \\ ( p ( A _ 2   =   k _ 2 ) \\ )   \u7684 \u6982\u7387 \uff0c \u518d\u6c42   \\ ( p ( A _ 1   =   k _ 1 ,   A _ 2   =   k _ 2 ) \\ )   \u7684 \u6982\u7387 \uff0c \u90a3\u4e48 \u7b54\u6848 \u5c31\u662f \uff1a   \\ ( \\ frac { p ( A _ 1   =   k _ 1 ,   A _ 2   =   k _ 2 ) } { p ( A _ 2   =   k _ 2 ) } \\ )   \u7531 \u4e0a\u9762 \u7684 \u7ed3\u8bba \u6211\u4eec \u5bb9\u6613 \u5f97 \uff1a   \\ ( p ( A _ 2   =   k _ 2 )   =   \\ frac { N ! } { k _ 2 ! ( N   -   k _ 2 ) ! } p _ 2 ^ { k _ 2 } ( 1   -   p _ 2 )   ^   ( N   -   k _ 2 ) \\ )   \\ ( p ( A _ 1   =   k _ 1 ,   A _ 2   =   k _ 2 )   =   \\ frac { N ! } { k _ 1 ! k _ 2 ! ( N   -   k _ 1   -   k _ 2 ) ! } p _ 1 ^ { k _ 1 } p _ 2 ^ { k _ 2 } ( 1   -   p _ 1   -   p _ 2 )   ^   ( N   -   k _ 1   -   k _ 2 ) \\ )   \u6240\u4ee5   \\ ( p ( A _ 1   =   k _ 1   |   A _ 2   =   k _ 2 )   \\ frac { p ( A _ 1   =   k _ 1 ,   A _ 2   =   k _ 2 ) } { p ( A _ 2   =   k _ 2 ) }   =   \\ frac { p _ 1 ^ { k _ 1 } ( 1   -   p _ 1   -   p _ 2 )   ^   { N   -   k _   2   -   k _ 1 }   ( N   -   k _ 2 ) ! } { k _ 1 ! ( N   -   k _ 1   -   k _ 2 ) ! ( 1   -   p _ 2 ) ^ { N   -   k _ 2 } } \\ )   \u5316\u7b80 \u6b65\u9aa4 \u4e5f \u770b\u4e00\u770b \u5427 \uff1a   \\ ( \\ frac { p _ 1 ^ { k _ 1 } ( 1   -   p _ 1   -   p _ 2 )   ^   { N   -   k _   2   -   k _ 1 }   ( N   -   k _ 2 ) ! } { k _ 1 ! ( N   -   k _ 1   -   k _ 2 ) ! ( 1   -   p _ 2 ) ^ { N   -   k _ 2 } }   =   \\ frac { p _ 1 ^ { k _ 1 } ( 1   -   p _ 1   -   p _ 2 )   ^   { N   -   k _   2   -   k _ 1 }   ( N   -   k _ 2 ) ! } { ( 1   -   p _ 2 )   ^   { k _ 1 }   k _ 1 ! ( N   -   k _ 1   -   k _ 2 ) ! ( 1   -   p _ 2 ) ^ { N   -   k _ 2   -   k _ 1 } } \\ )   \u6700\u7ec8 \u53ef \u5316\u7b80 \u6210 \uff1a   \\ ( \\ frac { ( N   -   k _ 2 ) ! } { k _ 1 ! ( N   -   k _ 1   -   k _ 2 ) ! } ( \\ frac { p _ 1 } { 1   -   p _ 2 } )   ^   { k _ 1 }   ( 1   -   \\ frac { p _ 1 } { 1   -   p _ 2 } )   ^   { N   -   k _ 1   -   k _ 2 } \\ )   \u53ef\u4ee5 \u8868\u793a \u6210 \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03 \uff1a   \\ ( b ( k _ 1 ;   N   -   k _ 2 ,   \\ frac { p _ 1 } { 1   -   p _ 2 } ) \\ )","title":"\u5728 \u591a\u9879\u5f0f \u5206\u5e03 \u4e2d \uff0c \u5728 \u5df2\u77e5 \u67d0 \u4e8b\u4ef6 \u56fa\u5b9a \u53d1\u751f \u4e86 \u51e0\u6b21 \u7684 \u60c5\u51b5 \u4e0b \uff0c \u6c42 \u53e6 \u4e00 \u4e8b\u4ef6 \u53d1\u751f \u67d0\u6b21 \u7684 \u6982\u7387"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E5%AE%B6%E5%BA%AD%E7%9A%84%E5%B0%8F%E5%AD%A9%E5%85%A8%E6%98%AF%E5%90%8C%E6%80%A7/","text":"\u5bb6\u5ead \u7684 \u5c0f\u5b69 \u5168\u662f \u540c\u6027   \u9898\u76ee   \u8bbe \u4e00\u4e2a \u5bb6\u5ead \u6709   \\ ( k \\ )   \u4e2a \u5c0f\u5b69 \u7684 \u6982\u7387 \u4e3a   \\ ( p _ k \\ )   \u3002   \u53c8 \u8bbe \u5404 \u5c0f\u5b69 \u7684 \u6027\u522b \u72ec\u7acb \uff0c \u4e14 \u7537\u751f \u751f\u7537\u751f \u751f\u7537\u751f\u5973 \u7684 \u6982\u7387 \u5404\u4e3a   \\ ( \\ frac { 1 } { 2 } \\ )   \u3002   \u8bd5\u6c42 \u4e8b\u4ef6   \\ ( A \\ )   =   {   \u5bb6\u5ead \u4e2d \u6240\u6709 \u5c0f\u5b69 \u90fd \u662f \u540c\u6027   }   \u7684 \u6982\u7387 \u3002   \u5f15\u8fdb \u4e8b\u4ef6   \\ ( B _ k \\ )   =   {   \u5bb6\u5ead \u4e2d\u6709   \\ ( k \\ )   \u4e2a \u5c0f\u5b69   } \uff0c \u5219   \\ ( B _ 0 \u3001 B _ 1 \u3001 B _ 2 \u3001 \\ cdots \u3001   B _ { \\ infty } \\ )   \u6784\u6210 \u5b8c\u6574 \u4e8b\u4ef6 \u7fa4 \uff0c \u5e76\u4e14 \u6211\u4eec \u53ef\u4ee5 \u5355\u72ec \u6c42\u51fa \u6bcf \u4e00\u4e2a   \\ ( B _ K \\ )   \u7684 \u6982\u7387 \uff1a   \\ ( p _ { B _ k }   =   p _ k \\ )   \u5728 \u6709 \u4e86   \\ ( k \\ )   \u4e2a \u5c0f\u5b69 \u7684 \u57fa\u7840 \u4e0a \uff0c \u5168\u662f \u7537\u6027 \u548c \u5168\u662f \u5973\u6027 \u7684 \u6982\u7387 \u90fd \u662f \uff1a   \\ ( p ( A \\   | \\   B _ k )   =   ( \\ frac { 1 } { 2 } ) ^ k \\ )   \u6240\u4ee5 \u751f \u4e0b   \\ ( k \\ )   \u4e2a \u90fd \u662f \u540c\u6027 \u5c0f\u5b69 \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( p _ { AB _ k }   =   2   \\ times   p _ k ( \\ frac { 1 } { 2 } ) ^ k \\ )   \u5219 \u7531\u4e8e   \\ ( k   =   0 \u3001 1 \u3001 2 \u3001 \\ cdots   \u3001 \\ infty \\ )   \uff0c \u6240\u4ee5 \u5168 \u6982\u7387 \u4e3a \uff1a   \\ ( p ( A )   =   \\ sum _ { k   =   0 } ^ { \\ infty } 2   \\ times   p _ k ( \\ frac { 1 } { 2 } ) ^ k \\ )","title":"\u5bb6\u5ead \u7684 \u5c0f\u5b69 \u5168\u662f \u540c\u6027"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E5%AE%B6%E5%BA%AD%E7%9A%84%E5%B0%8F%E5%AD%A9%E5%85%A8%E6%98%AF%E5%90%8C%E6%80%A7/#_1","text":"\u9898\u76ee   \u8bbe \u4e00\u4e2a \u5bb6\u5ead \u6709   \\ ( k \\ )   \u4e2a \u5c0f\u5b69 \u7684 \u6982\u7387 \u4e3a   \\ ( p _ k \\ )   \u3002   \u53c8 \u8bbe \u5404 \u5c0f\u5b69 \u7684 \u6027\u522b \u72ec\u7acb \uff0c \u4e14 \u7537\u751f \u751f\u7537\u751f \u751f\u7537\u751f\u5973 \u7684 \u6982\u7387 \u5404\u4e3a   \\ ( \\ frac { 1 } { 2 } \\ )   \u3002   \u8bd5\u6c42 \u4e8b\u4ef6   \\ ( A \\ )   =   {   \u5bb6\u5ead \u4e2d \u6240\u6709 \u5c0f\u5b69 \u90fd \u662f \u540c\u6027   }   \u7684 \u6982\u7387 \u3002   \u5f15\u8fdb \u4e8b\u4ef6   \\ ( B _ k \\ )   =   {   \u5bb6\u5ead \u4e2d\u6709   \\ ( k \\ )   \u4e2a \u5c0f\u5b69   } \uff0c \u5219   \\ ( B _ 0 \u3001 B _ 1 \u3001 B _ 2 \u3001 \\ cdots \u3001   B _ { \\ infty } \\ )   \u6784\u6210 \u5b8c\u6574 \u4e8b\u4ef6 \u7fa4 \uff0c \u5e76\u4e14 \u6211\u4eec \u53ef\u4ee5 \u5355\u72ec \u6c42\u51fa \u6bcf \u4e00\u4e2a   \\ ( B _ K \\ )   \u7684 \u6982\u7387 \uff1a   \\ ( p _ { B _ k }   =   p _ k \\ )   \u5728 \u6709 \u4e86   \\ ( k \\ )   \u4e2a \u5c0f\u5b69 \u7684 \u57fa\u7840 \u4e0a \uff0c \u5168\u662f \u7537\u6027 \u548c \u5168\u662f \u5973\u6027 \u7684 \u6982\u7387 \u90fd \u662f \uff1a   \\ ( p ( A \\   | \\   B _ k )   =   ( \\ frac { 1 } { 2 } ) ^ k \\ )   \u6240\u4ee5 \u751f \u4e0b   \\ ( k \\ )   \u4e2a \u90fd \u662f \u540c\u6027 \u5c0f\u5b69 \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( p _ { AB _ k }   =   2   \\ times   p _ k ( \\ frac { 1 } { 2 } ) ^ k \\ )   \u5219 \u7531\u4e8e   \\ ( k   =   0 \u3001 1 \u3001 2 \u3001 \\ cdots   \u3001 \\ infty \\ )   \uff0c \u6240\u4ee5 \u5168 \u6982\u7387 \u4e3a \uff1a   \\ ( p ( A )   =   \\ sum _ { k   =   0 } ^ { \\ infty } 2   \\ times   p _ k ( \\ frac { 1 } { 2 } ) ^ k \\ )","title":"\u5bb6\u5ead \u7684 \u5c0f\u5b69 \u5168\u662f \u540c\u6027"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E6%8C%87%E6%95%B0%E5%88%86%E5%B8%83/","text":"\u6307\u6570 \u6570\u5206 \u5206\u5e03 \u6307\u6570\u5206\u5e03   Note   \u82e5 \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u6709 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570   \\ ( x   >   0 \\ )   \u65f6 \uff0c   \\ ( f ( x )   =   \\ lambda   e   ^   { - \\ lambda   x } \\ )   \uff0c \u5176\u4ed6 \u4e3a   \\ ( 0 \\ )   \uff1b   \u5c31 \u79f0   \\ ( X \\ )   \u670d\u4ece \u6307\u6570 \u6570\u5206 \u5206\u5e03 \u6307\u6570\u5206\u5e03 \uff0c \u5176\u4e2d   \\ ( \\ lambda   >   0 \\ )   \uff1b   \u5e38\u8bb0 \u4e3a   \\ ( X   \\ sim   E ( \\ lambda ) \\ )   \u3002   \u63a8\u5bfc \u8fc7\u7a0b \u53ea\u80fd \u770b \u9648\u5e0c\u5b7a \u6559\u6388 \u7684 \u300c \u6982\u7387 \u6982\u7387\u8bba \u4e0e \u6570\u7406 \u7edf\u8ba1 \u6570\u7406\u7edf\u8ba1 \u300d P52 \u3002","title":"\u6307\u6570\u5206\u5e03"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E6%8C%87%E6%95%B0%E5%88%86%E5%B8%83/#_1","text":"Note   \u82e5 \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u6709 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570   \\ ( x   >   0 \\ )   \u65f6 \uff0c   \\ ( f ( x )   =   \\ lambda   e   ^   { - \\ lambda   x } \\ )   \uff0c \u5176\u4ed6 \u4e3a   \\ ( 0 \\ )   \uff1b   \u5c31 \u79f0   \\ ( X \\ )   \u670d\u4ece \u6307\u6570 \u6570\u5206 \u5206\u5e03 \u6307\u6570\u5206\u5e03 \uff0c \u5176\u4e2d   \\ ( \\ lambda   >   0 \\ )   \uff1b   \u5e38\u8bb0 \u4e3a   \\ ( X   \\ sim   E ( \\ lambda ) \\ )   \u3002   \u63a8\u5bfc \u8fc7\u7a0b \u53ea\u80fd \u770b \u9648\u5e0c\u5b7a \u6559\u6388 \u7684 \u300c \u6982\u7387 \u6982\u7387\u8bba \u4e0e \u6570\u7406 \u7edf\u8ba1 \u6570\u7406\u7edf\u8ba1 \u300d P52 \u3002","title":"\u6307\u6570\u5206\u5e03"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E6%8C%87%E6%95%B0%E5%88%86%E5%B8%83%E7%AE%80%E5%8D%95%E4%BE%8B%E9%A2%98/","text":"\u6307\u6570 \u6570\u5206 \u5206\u5e03 \u6307\u6570\u5206\u5e03 \u7b80\u5355 \u4f8b\u9898   Question   \u8bbe \u987e\u5ba2 \u5728 \u67d0 \u94f6\u884c \u7684 \u7a97\u53e3 \u7b49\u5f85 \u670d\u52a1 \u7684 \u65f6\u95f4   \\ ( X \\ )   ( \u4ee5   min   \u8ba1 )   \u670d\u4ece \u6307\u6570 \u6570\u5206 \u5206\u5e03 \u6307\u6570\u5206\u5e03   \\ ( E ( \\ frac { 1 } { 5 } ) \\ )   \u3002   \u67d0 \u987e\u5ba2 \u5728 \u7a97\u53e3 \u7b49\u5f85 \u670d\u52a1 \uff0c \u82e5 \u8d85\u8fc7   \\ ( 10 \\ )   min   \u4ed6 \u5c31 \u79bb\u5f00 \u3002   \u4ed6 \u4e00\u4e2a \u4e00\u4e2a\u6708 \u8981 \u5230 \u94f6\u884c   \\ ( 5 \\ )   \u6b21 \u3002   \u4ee5   \\ ( Y \\ )   \u8868\u793a \u4ed6 \u4e00\u4e2a \u4e00\u4e2a\u6708 \u5185\u672a \u7b49\u5230 \u670d\u52a1 \u800c \u79bb\u5f00 \u7a97\u53e3 \u7684 \u6b21\u6570 \uff0c \u8bd5 \u5199\u51fa   \\ ( Y \\ )   \u7684 \u5206\u5e03 \u5f8b \uff0c \u5e76\u6c42 \u51fa   \\ ( P \\ { Y   \\ geq   1 \\ } \\ )   \u82e5 \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u6709 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570   \\ ( x   >   0 ,   f ( x )   =   \\ lambda   e ^ { - \\ lambda   x } ; \\   \\   x   \\ leq   0 ,   f ( x )   =   0 \\ )   \u5c31 \u79f0   \\ ( X \\ )   \u670d\u4ece \u6307\u6570 \u6570\u5206 \u5206\u5e03 \u6307\u6570\u5206\u5e03 \uff0c \u5176\u4e2d   \\ ( \\ lambda   >   0 \\ )   \uff0c \u8bb0 \u4e3a \uff1a   \\ ( X   \\ sim   E ( \\ lambda ) \\ )   \u56e0\u4e3a \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u662f   \\ ( f ( x )   =   \\ frac { 1 } { 5 } e ^ { - \\ frac { 1 } { 5 } x } \\ )   \uff0c \u6240\u4ee5   \\ ( x \\ )   \u5206\u5e03 \u5728 \u533a\u95f4   \\ ( [ 0 ,   10 ] \\ )   \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( P \\ { 0   \\ leq   x   \\ leq   10 \\ }   =   \\ int _ { 0 } ^ { 10 }   \\ frac { 1 } { 5 } e ^ { - \\ frac { 1 } { 5 } x }   dx   =   1   -   e   ^   { - 2 } \\ )   \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( Y ^ ` \\ )   \u670d\u4ece \u300c \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03 \u300d \uff0c \u5373   \\ ( B ( 5 ,   1   -   e   ^   { - 2 } ) \\ )   \uff0c \u6240\u4ee5 \uff1a   \\ ( P ( Y ^ `   =   k )   =   \\ frac { 5 ! } { k ! ( 5   -   k ) ! } ( 1   -   e ^ { - 2 } ) ^ k ( e   ^   { - 2 } )   ^   { ( 5   -   k ) } \\ )   \u5bb9\u6613 \u6c42\u5f97   \\ ( P \\ { 0 \\ }   =   e   ^   { - 10 } \\ )   \uff0c \u6240\u4ee5 \uff1a   \u4e00\u4e2a \u4e00\u4e2a\u6708 \u5185 \u7b49\u5230 \u4e0d \u4f4e\u4e8e   1   \u6b21 \u670d\u52a1 \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( P \\ { Y ^ `   \\ geq   1 \\ }   =   1   -   e   ^   { - 10 } \\ )   \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( Y \\ )   \u670d\u4ece   \u300c \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03 \u300d \uff0c \u5373   \\ ( B ( 5 ,   e   ^   { - 2 } ) \\ )   \uff0c \u6240\u4ee5 \uff1a   \\ ( P \\ { Y   =   k \\ }   =   \\ frac { 5 ! } { k ! ( 5   -   k ) ! } ( e ^ { - 2 } ) ^ k ( 1   -   e ^ { - 2 } )   ^   { ( 5   -   k ) } \\ )   \u5bb9\u6613 \u6c42\u5f97   \\ ( P \\ { 0 \\ }   =   ( 1   -   e   ^   { - 2 } )   ^   5 \\ )   \uff0c \u6240\u4ee5 \uff1a   \u4e00\u4e2a \u4e00\u4e2a\u6708 \u5185 \u6ca1 \u7b49\u5230 \u4e0d \u4f4e\u4e8e   1   \u6b21 \u670d\u52a1 \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( P \\ { Y   \\ geq   1 \\ }   =   1   -   ( 1   -   e   ^   { - 2 } )   ^   5 \\ )","title":"\u6307\u6570\u5206\u5e03 \u7b80\u5355 - \u4f8b\u9898"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E6%8C%87%E6%95%B0%E5%88%86%E5%B8%83%E7%AE%80%E5%8D%95%E4%BE%8B%E9%A2%98/#_1","text":"Question   \u8bbe \u987e\u5ba2 \u5728 \u67d0 \u94f6\u884c \u7684 \u7a97\u53e3 \u7b49\u5f85 \u670d\u52a1 \u7684 \u65f6\u95f4   \\ ( X \\ )   ( \u4ee5   min   \u8ba1 )   \u670d\u4ece \u6307\u6570 \u6570\u5206 \u5206\u5e03 \u6307\u6570\u5206\u5e03   \\ ( E ( \\ frac { 1 } { 5 } ) \\ )   \u3002   \u67d0 \u987e\u5ba2 \u5728 \u7a97\u53e3 \u7b49\u5f85 \u670d\u52a1 \uff0c \u82e5 \u8d85\u8fc7   \\ ( 10 \\ )   min   \u4ed6 \u5c31 \u79bb\u5f00 \u3002   \u4ed6 \u4e00\u4e2a \u4e00\u4e2a\u6708 \u8981 \u5230 \u94f6\u884c   \\ ( 5 \\ )   \u6b21 \u3002   \u4ee5   \\ ( Y \\ )   \u8868\u793a \u4ed6 \u4e00\u4e2a \u4e00\u4e2a\u6708 \u5185\u672a \u7b49\u5230 \u670d\u52a1 \u800c \u79bb\u5f00 \u7a97\u53e3 \u7684 \u6b21\u6570 \uff0c \u8bd5 \u5199\u51fa   \\ ( Y \\ )   \u7684 \u5206\u5e03 \u5f8b \uff0c \u5e76\u6c42 \u51fa   \\ ( P \\ { Y   \\ geq   1 \\ } \\ )   \u82e5 \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u6709 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570   \\ ( x   >   0 ,   f ( x )   =   \\ lambda   e ^ { - \\ lambda   x } ; \\   \\   x   \\ leq   0 ,   f ( x )   =   0 \\ )   \u5c31 \u79f0   \\ ( X \\ )   \u670d\u4ece \u6307\u6570 \u6570\u5206 \u5206\u5e03 \u6307\u6570\u5206\u5e03 \uff0c \u5176\u4e2d   \\ ( \\ lambda   >   0 \\ )   \uff0c \u8bb0 \u4e3a \uff1a   \\ ( X   \\ sim   E ( \\ lambda ) \\ )   \u56e0\u4e3a \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u662f   \\ ( f ( x )   =   \\ frac { 1 } { 5 } e ^ { - \\ frac { 1 } { 5 } x } \\ )   \uff0c \u6240\u4ee5   \\ ( x \\ )   \u5206\u5e03 \u5728 \u533a\u95f4   \\ ( [ 0 ,   10 ] \\ )   \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( P \\ { 0   \\ leq   x   \\ leq   10 \\ }   =   \\ int _ { 0 } ^ { 10 }   \\ frac { 1 } { 5 } e ^ { - \\ frac { 1 } { 5 } x }   dx   =   1   -   e   ^   { - 2 } \\ )   \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( Y ^ ` \\ )   \u670d\u4ece \u300c \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03 \u300d \uff0c \u5373   \\ ( B ( 5 ,   1   -   e   ^   { - 2 } ) \\ )   \uff0c \u6240\u4ee5 \uff1a   \\ ( P ( Y ^ `   =   k )   =   \\ frac { 5 ! } { k ! ( 5   -   k ) ! } ( 1   -   e ^ { - 2 } ) ^ k ( e   ^   { - 2 } )   ^   { ( 5   -   k ) } \\ )   \u5bb9\u6613 \u6c42\u5f97   \\ ( P \\ { 0 \\ }   =   e   ^   { - 10 } \\ )   \uff0c \u6240\u4ee5 \uff1a   \u4e00\u4e2a \u4e00\u4e2a\u6708 \u5185 \u7b49\u5230 \u4e0d \u4f4e\u4e8e   1   \u6b21 \u670d\u52a1 \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( P \\ { Y ^ `   \\ geq   1 \\ }   =   1   -   e   ^   { - 10 } \\ )   \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( Y \\ )   \u670d\u4ece   \u300c \u4e8c\u9879 \u5206\u5e03 \u4e8c\u9879\u5206\u5e03 \u300d \uff0c \u5373   \\ ( B ( 5 ,   e   ^   { - 2 } ) \\ )   \uff0c \u6240\u4ee5 \uff1a   \\ ( P \\ { Y   =   k \\ }   =   \\ frac { 5 ! } { k ! ( 5   -   k ) ! } ( e ^ { - 2 } ) ^ k ( 1   -   e ^ { - 2 } )   ^   { ( 5   -   k ) } \\ )   \u5bb9\u6613 \u6c42\u5f97   \\ ( P \\ { 0 \\ }   =   ( 1   -   e   ^   { - 2 } )   ^   5 \\ )   \uff0c \u6240\u4ee5 \uff1a   \u4e00\u4e2a \u4e00\u4e2a\u6708 \u5185 \u6ca1 \u7b49\u5230 \u4e0d \u4f4e\u4e8e   1   \u6b21 \u670d\u52a1 \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( P \\ { Y   \\ geq   1 \\ }   =   1   -   ( 1   -   e   ^   { - 2 } )   ^   5 \\ )","title":"\u6307\u6570\u5206\u5e03 \u7b80\u5355 \u4f8b\u9898"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E6%9C%BA%E5%99%A8%E6%A3%80%E9%AA%8C%E9%98%B3%E6%80%A7/","text":"\u673a\u5668 \u68c0\u9a8c \u9633\u6027   \u9898\u76ee   \u8bbe \u67d0\u79cd \u75c5\u83cc \u5728 \u4eba\u53e3 \u4e2d \u7684 \u5e26\u83cc \u7387\u4e3a   \\ ( 0.03 \\ )   \uff0c \u5f53 \u68c0\u67e5 \u65f6 \uff0c \u7531\u4e8e \u6280\u672f \u53ca\u5176 \u64cd\u4f5c \u7b49 \u79cd\u79cd \u539f\u56e0 \u79cd\u79cd\u539f\u56e0 \uff0c \u4f7f \u5e26\u83cc \u5e26\u83cc\u8005 \u672a\u5fc5 \u68c0\u9a8c \u51fa \u9633\u6027 \u53cd\u5e94 \u6027\u53cd\u5e94 \u9633\u6027\u53cd\u5e94 \uff0c \u800c \u4e0d \u5e26\u83cc \u5e26\u83cc\u8005 \u4e5f \u53ef\u80fd \u51fa\u73b0 \u9633\u6027 \u53cd\u5e94 \u6027\u53cd\u5e94 \u9633\u6027\u53cd\u5e94 \u3002   \u5047\u5b9a \uff1a   P ( \u9633\u6027   |   \u5e26\u83cc )   =   0.99   \uff0c \u5728 \u5e26\u83cc \u7684 \u57fa\u7840 \u4e0a \u68c0\u67e5 \u51fa \u9633\u6027 \u7684 \u6982\u7387   P ( \u9634\u6027   |   \u5e26\u83cc )   =   0.01   \uff0c \u5728 \u5e26\u83cc \u7684 \u57fa\u7840 \u4e0a \u68c0\u67e5 \u51fa \u9634\u6027 \u7684 \u6982\u7387   P ( \u9633\u6027   |   \u4e0d \u5e26\u83cc )   =   0.05   \uff0c \u5728 \u4e0d \u5e26\u83cc \u7684 \u57fa\u7840 \u4e0a \u68c0\u67e5 \u51fa \u9633\u6027 \u7684 \u6982\u7387   P ( \u9634\u6027   |   \u4e0d \u5e26\u83cc )   =   0.95   \uff0c \u5728 \u4e0d \u5e26\u83cc \u7684 \u57fa\u7840 \u4e0a \u68c0\u67e5 \u51fa \u9634\u6027 \u7684 \u6982\u7387   \u73b0\u5728 \u67d0\u4eba \u5df2\u7ecf \u68c0\u67e5 \u51fa \u9633\u6027 \u4e86 \uff0c \u95ee \u300c \u4ed6 \u5e26\u83cc \u300d \u7684 \u6982\u7387 \u662f \u591a\u5c11 \uff1f   \u7531 \u9898\u610f \u77e5 \uff1a   \\ ( P ( \u4e0d \u5e26\u83cc )   =   1   -   0.03   =   0.97 \\ )   \uff0c   \\ ( P ( \u5e26\u83cc )   =   0.03 \\ )   \u6240\u4ee5 \u6839\u636e \u516c\u5f0f   \\ ( P ( A | B )   =   \\ frac { P ( AB ) } { P ( B ) } \\ )   \uff0c \u6709 \uff1a   \\ ( P ( \u5e26\u83cc   \\ cdot   \u9633\u6027 )   =   0.03   \\ times   0.99   =   0.0297 \\ )   \uff0c   \\ ( P ( \u4e0d \u5e26\u83cc   \\ cdot   \u9633\u6027 )   =   0.97   \\ times   0.05   =   0.0485 \\ )   \u6240\u4ee5 \u5df2\u77e5 \u662f \u9633\u6027 \u7684 \u57fa\u7840 \u4e0a \u5e26\u83cc \u7684 \u6761\u4ef6 \u6982\u7387 \u4e3a \uff1a   \\ ( P ( \u5e26\u83cc   |   \u9633\u6027 )   =   \\ frac { P ( \u5e26\u83cc   \\ cdot   \u9633\u6027 ) } { P ( \u5e26\u83cc   \\ cdot   \u9633\u6027 )   +   P ( \u4e0d \u5e26\u83cc   \\ cdot   \u9633\u6027 ) }   =   \\ frac { 0.0297 } { 0.0297   +   0.0485 }   \\ approx   0.38 \\ )   \u6240\u4ee5 \u5373\u4f7f \u4f60 \u68c0\u67e5 \u51fa \u4e86 \u9633\u6027 \uff0c \u4f60 \u5e26\u83cc \u7684 \u6982\u7387 \u4e5f \u4e0d\u5230   \\ ( 40% \\ )   \u3002","title":"\u673a\u5668 \u68c0\u9a8c \u9633\u6027"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E6%9C%BA%E5%99%A8%E6%A3%80%E9%AA%8C%E9%98%B3%E6%80%A7/#_1","text":"\u9898\u76ee   \u8bbe \u67d0\u79cd \u75c5\u83cc \u5728 \u4eba\u53e3 \u4e2d \u7684 \u5e26\u83cc \u7387\u4e3a   \\ ( 0.03 \\ )   \uff0c \u5f53 \u68c0\u67e5 \u65f6 \uff0c \u7531\u4e8e \u6280\u672f \u53ca\u5176 \u64cd\u4f5c \u7b49 \u79cd\u79cd \u539f\u56e0 \u79cd\u79cd\u539f\u56e0 \uff0c \u4f7f \u5e26\u83cc \u5e26\u83cc\u8005 \u672a\u5fc5 \u68c0\u9a8c \u51fa \u9633\u6027 \u53cd\u5e94 \u6027\u53cd\u5e94 \u9633\u6027\u53cd\u5e94 \uff0c \u800c \u4e0d \u5e26\u83cc \u5e26\u83cc\u8005 \u4e5f \u53ef\u80fd \u51fa\u73b0 \u9633\u6027 \u53cd\u5e94 \u6027\u53cd\u5e94 \u9633\u6027\u53cd\u5e94 \u3002   \u5047\u5b9a \uff1a   P ( \u9633\u6027   |   \u5e26\u83cc )   =   0.99   \uff0c \u5728 \u5e26\u83cc \u7684 \u57fa\u7840 \u4e0a \u68c0\u67e5 \u51fa \u9633\u6027 \u7684 \u6982\u7387   P ( \u9634\u6027   |   \u5e26\u83cc )   =   0.01   \uff0c \u5728 \u5e26\u83cc \u7684 \u57fa\u7840 \u4e0a \u68c0\u67e5 \u51fa \u9634\u6027 \u7684 \u6982\u7387   P ( \u9633\u6027   |   \u4e0d \u5e26\u83cc )   =   0.05   \uff0c \u5728 \u4e0d \u5e26\u83cc \u7684 \u57fa\u7840 \u4e0a \u68c0\u67e5 \u51fa \u9633\u6027 \u7684 \u6982\u7387   P ( \u9634\u6027   |   \u4e0d \u5e26\u83cc )   =   0.95   \uff0c \u5728 \u4e0d \u5e26\u83cc \u7684 \u57fa\u7840 \u4e0a \u68c0\u67e5 \u51fa \u9634\u6027 \u7684 \u6982\u7387   \u73b0\u5728 \u67d0\u4eba \u5df2\u7ecf \u68c0\u67e5 \u51fa \u9633\u6027 \u4e86 \uff0c \u95ee \u300c \u4ed6 \u5e26\u83cc \u300d \u7684 \u6982\u7387 \u662f \u591a\u5c11 \uff1f   \u7531 \u9898\u610f \u77e5 \uff1a   \\ ( P ( \u4e0d \u5e26\u83cc )   =   1   -   0.03   =   0.97 \\ )   \uff0c   \\ ( P ( \u5e26\u83cc )   =   0.03 \\ )   \u6240\u4ee5 \u6839\u636e \u516c\u5f0f   \\ ( P ( A | B )   =   \\ frac { P ( AB ) } { P ( B ) } \\ )   \uff0c \u6709 \uff1a   \\ ( P ( \u5e26\u83cc   \\ cdot   \u9633\u6027 )   =   0.03   \\ times   0.99   =   0.0297 \\ )   \uff0c   \\ ( P ( \u4e0d \u5e26\u83cc   \\ cdot   \u9633\u6027 )   =   0.97   \\ times   0.05   =   0.0485 \\ )   \u6240\u4ee5 \u5df2\u77e5 \u662f \u9633\u6027 \u7684 \u57fa\u7840 \u4e0a \u5e26\u83cc \u7684 \u6761\u4ef6 \u6982\u7387 \u4e3a \uff1a   \\ ( P ( \u5e26\u83cc   |   \u9633\u6027 )   =   \\ frac { P ( \u5e26\u83cc   \\ cdot   \u9633\u6027 ) } { P ( \u5e26\u83cc   \\ cdot   \u9633\u6027 )   +   P ( \u4e0d \u5e26\u83cc   \\ cdot   \u9633\u6027 ) }   =   \\ frac { 0.0297 } { 0.0297   +   0.0485 }   \\ approx   0.38 \\ )   \u6240\u4ee5 \u5373\u4f7f \u4f60 \u68c0\u67e5 \u51fa \u4e86 \u9633\u6027 \uff0c \u4f60 \u5e26\u83cc \u7684 \u6982\u7387 \u4e5f \u4e0d\u5230   \\ ( 40% \\ )   \u3002","title":"\u673a\u5668 \u68c0\u9a8c \u9633\u6027"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E6%A6%82%E7%8E%87%E5%AF%86%E5%BA%A6%E5%87%BD%E6%95%B0/","text":"\u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570   Question   \u5df2\u77e5 \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u7684 \u5bc6\u5ea6 \u51fd\u6570 \u4e3a \uff1a   \\ ( f ( x )   =   Ae ^ { - | x | } \uff0c - \\ infty   <   x   <   +   \\ infty \\ )   \u6c42 \uff1a   \\ ( A \\ )   \u503c \uff1b   \\ ( P \\ { 0   <   X   <   1 \\ } \\ )   \\ ( F ( x ) \\ )   \u7531\u5168 \u6982\u7387 \u548c \u4e3a   \\ ( 1 \\ )   \u53ef \u5f97 \uff1a   \\ ( \\ int _ { - \\ infty } ^ { + \\ infty } f ( x )   =   1 \\ )   \u89e3\u5f97   \\ ( A   =   \\ frac { 1 } { 2 } \\ )   \u3002   \\ ( P \\ { 0   <   X   <   1 \\ }   =   \\ int _ { 0 } ^ { 1 } f ( x ) dx   =   \\ int _ { 0 } ^ { 1 } \\ frac { 1 } { 2 } e ^ { - x } dx   =   A   -   Ae ^ { - 1 } \\ )   \u5f53   \\ ( x   <   0 \\ )   \u65f6 :   \\ ( F ( x )   =   \\ int _ { - \\ infty } ^ { x } \\ frac { 1 } { 2 } e ^ { x } dx   =   \\ frac { 1 } { 2 } e ^ { x } \\ )   \u5f53   \\ ( x   \\ geq   0 \\ )   \u65f6 :   \\ ( F ( x )   =   \\ int _ { - \\ infty } ^ { 0 } \\ frac { 1 } { 2 } e ^ xdx   +   \\ int _ { 0 } ^ { x } \\ frac { 1 } { 2 } e ^ { - x } dx   =   1   -   \\ frac { 1 } { 2 } e ^ { - x } \\ )","title":"\u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u7b80\u5355 \u4f8b\u9898"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E6%A6%82%E7%8E%87%E5%AF%86%E5%BA%A6%E5%87%BD%E6%95%B0/#_1","text":"Question   \u5df2\u77e5 \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u7684 \u5bc6\u5ea6 \u51fd\u6570 \u4e3a \uff1a   \\ ( f ( x )   =   Ae ^ { - | x | } \uff0c - \\ infty   <   x   <   +   \\ infty \\ )   \u6c42 \uff1a   \\ ( A \\ )   \u503c \uff1b   \\ ( P \\ { 0   <   X   <   1 \\ } \\ )   \\ ( F ( x ) \\ )   \u7531\u5168 \u6982\u7387 \u548c \u4e3a   \\ ( 1 \\ )   \u53ef \u5f97 \uff1a   \\ ( \\ int _ { - \\ infty } ^ { + \\ infty } f ( x )   =   1 \\ )   \u89e3\u5f97   \\ ( A   =   \\ frac { 1 } { 2 } \\ )   \u3002   \\ ( P \\ { 0   <   X   <   1 \\ }   =   \\ int _ { 0 } ^ { 1 } f ( x ) dx   =   \\ int _ { 0 } ^ { 1 } \\ frac { 1 } { 2 } e ^ { - x } dx   =   A   -   Ae ^ { - 1 } \\ )   \u5f53   \\ ( x   <   0 \\ )   \u65f6 :   \\ ( F ( x )   =   \\ int _ { - \\ infty } ^ { x } \\ frac { 1 } { 2 } e ^ { x } dx   =   \\ frac { 1 } { 2 } e ^ { x } \\ )   \u5f53   \\ ( x   \\ geq   0 \\ )   \u65f6 :   \\ ( F ( x )   =   \\ int _ { - \\ infty } ^ { 0 } \\ frac { 1 } { 2 } e ^ xdx   +   \\ int _ { 0 } ^ { x } \\ frac { 1 } { 2 } e ^ { - x } dx   =   1   -   \\ frac { 1 } { 2 } e ^ { - x } \\ )","title":"\u6982\u7387\u5bc6\u5ea6\u51fd\u6570"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E6%A6%82%E7%8E%87%E5%AF%86%E5%BA%A6%E5%87%BD%E6%95%B0%E7%AE%80%E5%8D%95%E4%BE%8B%E9%A2%98/","text":"\u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u7b80\u5355 \u4f8b\u9898   Question   \u8bbe \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u7684 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u4e3a \uff1a   \\ ( 0   \\ leq   x   <   1   \u65f6 \uff0c f ( x )   =   x \\ )   \\ ( 1   \\ leq   x   <   2   \u65f6 \uff0c f ( x )   =   2   -   x \\ )   \u5176\u4ed6   \\ ( f ( x )   =   0 \\ )   \u6c42   \\ ( X \\ )   \u7684 \u5206\u5e03 \u51fd\u6570 \u3002   \u5206\u5e03 \u51fd\u6570 \u4e0e \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u7684 \u5173\u7cfb \uff1a   \\ ( f ( x )   =   { F } ' ( x ) \\ )   \u6240\u4ee5   \\ ( F ( x )   =   \\ int _ { - \\ infty } ^ xf ( x ) dx \\ )   \u5f53   \\ ( x   <   0 \\ )   \u65f6 \uff1a   \\ ( F ( x )   =   0 \\ )   \u5f53   \\ ( 0   \\ leq   x   <   1 \\ )   \u65f6 \uff1a   \\ ( F ( x )   =   \\ int _ { 0 } ^ { x } xdx   =   \\ frac { 1 } { 2 } x ^ 2 \\ )   \u5f53   \\ ( 1   \\ leq   x   <   2 \\ )   \u65f6 \uff1a   \\ ( F ( x )   =   \\ int _ { 0 } ^ { 1 }   x   dx   +   \\ int   _   { 1 } ^ { x }   2   -   x   dx   =   - \\ frac { 1 } { 2 } x   ^   2   +   2x   -   1 \\ )   \u5f53   \\ ( x   \\ geq   2 \\ )   \u65f6 \uff1a   \\ ( F ( x )   =   1 \\ )","title":"\u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u7b80\u5355 \u4f8b\u9898"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E6%A6%82%E7%8E%87%E5%AF%86%E5%BA%A6%E5%87%BD%E6%95%B0%E7%AE%80%E5%8D%95%E4%BE%8B%E9%A2%98/#_1","text":"Question   \u8bbe \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u7684 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u4e3a \uff1a   \\ ( 0   \\ leq   x   <   1   \u65f6 \uff0c f ( x )   =   x \\ )   \\ ( 1   \\ leq   x   <   2   \u65f6 \uff0c f ( x )   =   2   -   x \\ )   \u5176\u4ed6   \\ ( f ( x )   =   0 \\ )   \u6c42   \\ ( X \\ )   \u7684 \u5206\u5e03 \u51fd\u6570 \u3002   \u5206\u5e03 \u51fd\u6570 \u4e0e \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u7684 \u5173\u7cfb \uff1a   \\ ( f ( x )   =   { F } ' ( x ) \\ )   \u6240\u4ee5   \\ ( F ( x )   =   \\ int _ { - \\ infty } ^ xf ( x ) dx \\ )   \u5f53   \\ ( x   <   0 \\ )   \u65f6 \uff1a   \\ ( F ( x )   =   0 \\ )   \u5f53   \\ ( 0   \\ leq   x   <   1 \\ )   \u65f6 \uff1a   \\ ( F ( x )   =   \\ int _ { 0 } ^ { x } xdx   =   \\ frac { 1 } { 2 } x ^ 2 \\ )   \u5f53   \\ ( 1   \\ leq   x   <   2 \\ )   \u65f6 \uff1a   \\ ( F ( x )   =   \\ int _ { 0 } ^ { 1 }   x   dx   +   \\ int   _   { 1 } ^ { x }   2   -   x   dx   =   - \\ frac { 1 } { 2 } x   ^   2   +   2x   -   1 \\ )   \u5f53   \\ ( x   \\ geq   2 \\ )   \u65f6 \uff1a   \\ ( F ( x )   =   1 \\ )","title":"\u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u7b80\u5355 \u4f8b\u9898"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E6%AD%A3%E5%A4%AA%E5%88%86%E5%B8%83/","text":"\u6b63\u592a \u5206\u5e03   \u5982\u679c \u4e00\u4e2a \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf \u5177\u6709 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \uff1a   \\ [   f ( x )   =   ( \\ sqrt { 2 \\ pi } \\ sigma ) ^ { - 1 } e ^ { - \\ frac { ( x   -   \\ mu )   ^   2 } { 2   \\ sigma   ^   2 } }   \\ ]   \u5219   \\ ( X \\ )   \u4e3a \u6b63\u592a \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf \uff0c \u5e76 \u8bb0\u4e3a   \\ ( X   \\ sim   N ( \\ mu ,   \\ sigma   ^   2 ) \\ )   \uff0c \u8fd9\u91cc \u7684   \\ ( N \\ )   \u662f   normal   \u7684 \u610f\u601d \uff0c \u6b63\u592a \u5206\u5e03 \u4e5f \u53eb \u5e38\u6001 \u5206\u5e03 \uff0c \u6bd4\u8f83 \u5e38\u89c1 \u5230 \u3002   \u67e5\u8868 \uff1a   \\ ( \\ Phi ( \\ frac { X   -   \\ mu } { \\ sigma } ) \\ )   \u4ee3\u8868 \u7684 \u662f \u5206\u5e03 \u51fd\u6570   \\ ( F ( X ) \\ )   \u7684 \u6982\u7387 \uff1b   \u5982\u679c   \\ ( \\ Phi ( \\ frac { X   -   \\ mu } { \\ sigma } )   <   0 \\ )   \u662f \u4e0d\u5230 \u67e5\u4e0d\u5230 \u7684 \uff0c \u8fd9\u65f6   \\ ( \\ Phi ( \\ frac { X   -   \\ mu } { \\ sigma } )   =   1   -   | \\ Phi ( \\ frac { X   -   \\ mu } { \\ sigma } ) | \\ )   \u3002","title":"\u6b63\u592a \u5206\u5e03"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E6%AD%A3%E5%A4%AA%E5%88%86%E5%B8%83/#_1","text":"\u5982\u679c \u4e00\u4e2a \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf \u5177\u6709 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \uff1a   \\ [   f ( x )   =   ( \\ sqrt { 2 \\ pi } \\ sigma ) ^ { - 1 } e ^ { - \\ frac { ( x   -   \\ mu )   ^   2 } { 2   \\ sigma   ^   2 } }   \\ ]   \u5219   \\ ( X \\ )   \u4e3a \u6b63\u592a \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf \uff0c \u5e76 \u8bb0\u4e3a   \\ ( X   \\ sim   N ( \\ mu ,   \\ sigma   ^   2 ) \\ )   \uff0c \u8fd9\u91cc \u7684   \\ ( N \\ )   \u662f   normal   \u7684 \u610f\u601d \uff0c \u6b63\u592a \u5206\u5e03 \u4e5f \u53eb \u5e38\u6001 \u5206\u5e03 \uff0c \u6bd4\u8f83 \u5e38\u89c1 \u5230 \u3002   \u67e5\u8868 \uff1a   \\ ( \\ Phi ( \\ frac { X   -   \\ mu } { \\ sigma } ) \\ )   \u4ee3\u8868 \u7684 \u662f \u5206\u5e03 \u51fd\u6570   \\ ( F ( X ) \\ )   \u7684 \u6982\u7387 \uff1b   \u5982\u679c   \\ ( \\ Phi ( \\ frac { X   -   \\ mu } { \\ sigma } )   <   0 \\ )   \u662f \u4e0d\u5230 \u67e5\u4e0d\u5230 \u7684 \uff0c \u8fd9\u65f6   \\ ( \\ Phi ( \\ frac { X   -   \\ mu } { \\ sigma } )   =   1   -   | \\ Phi ( \\ frac { X   -   \\ mu } { \\ sigma } ) | \\ )   \u3002","title":"\u6b63\u592a \u5206\u5e03"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E6%AD%A3%E5%A4%AA%E5%88%86%E5%B8%83%E7%AE%80%E5%8D%95%E4%BE%8B%E9%A2%98/","text":"\u6b63\u592a \u5206\u5e03 \u7b80\u5355 \u4f8b\u9898   Question   \u8bbe   \\ ( X   \\ sim   N ( 3 ,   2   ^   2 ) \\ )   \u6c42   \\ ( P \\ { - 4   <   X   \\ leq   10 \\ } \\ )   \u7684 \u6982\u7387 \uff1b   \u786e\u5b9a   \\ ( c \\ )   \u4f7f\u5f97   \\ ( P \\ { X   >   c \\ }   =   P \\ { X   \\ leq   c \\ } \\ )   \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u7684 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u82e5 \u6ee1\u8db3 \uff1a   \\ ( f ( x )   =   ( \\ sqrt { 2 \\ pi } \\ sigma ) ^ { - 1 } e ^ { - \\ frac { ( x   -   \\ mu )   ^   2 } { 2   \\ sigma   ^   2 } } \\ )   \u5c31 \u79f0 \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u6ee1\u8db3 \u6b63\u592a \u5206\u5e03 \uff0c \u8bb0 \u4f5c \uff1a   \\ ( X   \\ sim   N ( \\ mu ,   \\ sigma   ^   2 ) \\ )   mu \u3001 sigma   \u7684 \u5e73\u65b9 \u3002   \u5bf9\u4e8e   \\ ( X   \\ sim   N ( \\ mu ,   \\ sigma   ^   2 ) \\ )   \u5316\u4e3a \u6807\u51c6 \u6b63\u592a \u5206\u5e03   \\ ( X   \\ sim   N ( 0 ,   1 ) \\ )   \uff0c \u53ea \u9700 \u8ba9   \\ ( X   =   \\ frac { X   -   \\ mu } { \\ sigma } \\ )   \uff0c \u67e5\u8868 \u7684 \u65f6\u5019 \u4e5f \u662f \u5316\u4e3a \u6807\u51c6 \u6b63\u592a \u5206\u5e03 \uff1a   \u67e5   \\ ( \\ Phi ( \\ frac { X   -   \\ mu } { \\ sigma } ) \\ )   \u82e5   \\ ( \\ frac { X   -   \\ mu } { \\ sigma }   <   0 \\ )   \u6211\u4eec \u662f \u4e0d\u5230 \u67e5\u4e0d\u5230 \u7684 \uff0c \u5f53\u65f6 \u7531\u4e8e \u6b63\u592a \u5206\u5e03 \u7684 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u5173\u4e8e   \\ ( x   =   0 \\ )   \u5bf9\u79f0 \u8f74\u5bf9\u79f0 \uff0c \u6240\u4ee5 :   \\ ( \\ Phi ( \\ frac { X   -   \\ mu } { \\ sigma } )   =   1   -   \\ Phi ( | \\ frac { X   -   \\ mu } { \\ sigma } | ) \\ )   \u6211\u4eec \u4e00\u822c \u4e0d\u7528 \u5199\u51fa \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \uff0c \u600e\u4e48 \u6c42   \\ ( P \\ { - 4   <   X   \\ leq   10 \\ } \\ )   \u7684 \u6982\u7387 \u5462 \uff1f   \u7531\u4e8e \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X   \\ sim   N ( 3 ,   2   ^   2 ) \\ )   \uff0c \u6240\u4ee5 \u67e5\u8868 \uff1a   \\ ( \\ Phi ( \\ frac { - 4   -   3 } { 2 }   =   - 3.5 )   =   1   -   \\ Phi ( 3.5 ) \\ )   \uff0c   \\ ( \\ Phi ( \\ frac { 10   -   3 } { 2 }   =   3.5 ) \\ )   \u6240\u4ee5   \\ ( P \\ { - 4   <   X   \\ leq   10 \\ }   =   \\ Phi ( 3.5 )   -   ( 1   -   \\ Phi ( 3.5 ) )   =   2   \\ Phi ( 3.5 )   -   1 \\ )   \u67e5\u8868 \u5f97 \uff1a   \\ ( \\ Phi ( 3.5 )   =   0.9998 \\ )   \uff0c \u6240\u4ee5 \uff1a   \\ ( 2   \\ Phi ( 3.5 )   -   1   =   0.9996 \\ )   \u82e5   \\ ( P \\ { X   >   c \\ }   =   P \\ { X   \\ leq   c \\ } \\ )   \u5219   \\ ( c \\ )   \u5c06\u4f1a \u662f \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570   \\ ( f ( x ) \\ )   \u7684 \u4e2d\u95f4 \u5e73\u5206 \u5206\u7ebf \u5e73\u5206\u7ebf \uff0c \u5373 :   \\ ( x   =   \\ mu \\ )   \uff0c \u6240\u4ee5   \\ ( c   =   \\ mu \\ )   \u3002","title":"\u6b63\u592a \u5206\u5e03 \u7b80\u5355 \u4f8b\u9898"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E6%AD%A3%E5%A4%AA%E5%88%86%E5%B8%83%E7%AE%80%E5%8D%95%E4%BE%8B%E9%A2%98/#_1","text":"Question   \u8bbe   \\ ( X   \\ sim   N ( 3 ,   2   ^   2 ) \\ )   \u6c42   \\ ( P \\ { - 4   <   X   \\ leq   10 \\ } \\ )   \u7684 \u6982\u7387 \uff1b   \u786e\u5b9a   \\ ( c \\ )   \u4f7f\u5f97   \\ ( P \\ { X   >   c \\ }   =   P \\ { X   \\ leq   c \\ } \\ )   \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u7684 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u82e5 \u6ee1\u8db3 \uff1a   \\ ( f ( x )   =   ( \\ sqrt { 2 \\ pi } \\ sigma ) ^ { - 1 } e ^ { - \\ frac { ( x   -   \\ mu )   ^   2 } { 2   \\ sigma   ^   2 } } \\ )   \u5c31 \u79f0 \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X \\ )   \u6ee1\u8db3 \u6b63\u592a \u5206\u5e03 \uff0c \u8bb0 \u4f5c \uff1a   \\ ( X   \\ sim   N ( \\ mu ,   \\ sigma   ^   2 ) \\ )   mu \u3001 sigma   \u7684 \u5e73\u65b9 \u3002   \u5bf9\u4e8e   \\ ( X   \\ sim   N ( \\ mu ,   \\ sigma   ^   2 ) \\ )   \u5316\u4e3a \u6807\u51c6 \u6b63\u592a \u5206\u5e03   \\ ( X   \\ sim   N ( 0 ,   1 ) \\ )   \uff0c \u53ea \u9700 \u8ba9   \\ ( X   =   \\ frac { X   -   \\ mu } { \\ sigma } \\ )   \uff0c \u67e5\u8868 \u7684 \u65f6\u5019 \u4e5f \u662f \u5316\u4e3a \u6807\u51c6 \u6b63\u592a \u5206\u5e03 \uff1a   \u67e5   \\ ( \\ Phi ( \\ frac { X   -   \\ mu } { \\ sigma } ) \\ )   \u82e5   \\ ( \\ frac { X   -   \\ mu } { \\ sigma }   <   0 \\ )   \u6211\u4eec \u662f \u4e0d\u5230 \u67e5\u4e0d\u5230 \u7684 \uff0c \u5f53\u65f6 \u7531\u4e8e \u6b63\u592a \u5206\u5e03 \u7684 \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u5173\u4e8e   \\ ( x   =   0 \\ )   \u5bf9\u79f0 \u8f74\u5bf9\u79f0 \uff0c \u6240\u4ee5 :   \\ ( \\ Phi ( \\ frac { X   -   \\ mu } { \\ sigma } )   =   1   -   \\ Phi ( | \\ frac { X   -   \\ mu } { \\ sigma } | ) \\ )   \u6211\u4eec \u4e00\u822c \u4e0d\u7528 \u5199\u51fa \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \uff0c \u600e\u4e48 \u6c42   \\ ( P \\ { - 4   <   X   \\ leq   10 \\ } \\ )   \u7684 \u6982\u7387 \u5462 \uff1f   \u7531\u4e8e \u968f\u673a \u673a\u53d8 \u53d8\u91cf \u968f\u673a\u53d8\u91cf   \\ ( X   \\ sim   N ( 3 ,   2   ^   2 ) \\ )   \uff0c \u6240\u4ee5 \u67e5\u8868 \uff1a   \\ ( \\ Phi ( \\ frac { - 4   -   3 } { 2 }   =   - 3.5 )   =   1   -   \\ Phi ( 3.5 ) \\ )   \uff0c   \\ ( \\ Phi ( \\ frac { 10   -   3 } { 2 }   =   3.5 ) \\ )   \u6240\u4ee5   \\ ( P \\ { - 4   <   X   \\ leq   10 \\ }   =   \\ Phi ( 3.5 )   -   ( 1   -   \\ Phi ( 3.5 ) )   =   2   \\ Phi ( 3.5 )   -   1 \\ )   \u67e5\u8868 \u5f97 \uff1a   \\ ( \\ Phi ( 3.5 )   =   0.9998 \\ )   \uff0c \u6240\u4ee5 \uff1a   \\ ( 2   \\ Phi ( 3.5 )   -   1   =   0.9996 \\ )   \u82e5   \\ ( P \\ { X   >   c \\ }   =   P \\ { X   \\ leq   c \\ } \\ )   \u5219   \\ ( c \\ )   \u5c06\u4f1a \u662f \u6982\u7387 \u5bc6\u5ea6 \u51fd\u6570 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570   \\ ( f ( x ) \\ )   \u7684 \u4e2d\u95f4 \u5e73\u5206 \u5206\u7ebf \u5e73\u5206\u7ebf \uff0c \u5373 :   \\ ( x   =   \\ mu \\ )   \uff0c \u6240\u4ee5   \\ ( c   =   \\ mu \\ )   \u3002","title":"\u6b63\u592a \u5206\u5e03 \u7b80\u5355 \u4f8b\u9898"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E6%B3%8A%E6%9D%BE%E5%88%86%E5%B8%83/","text":"\u6cca\u677e \u5206\u5e03   \u82e5 \u968f\u673a \u5411\u91cf   \\ ( X \\ )   \u7684 \u53ef\u80fd \u53d6\u503c \u4e3a   \\ ( 0 \u3001 1 \u3001 2 \u3001 \\ cdots \\ )   \u4e14 \u6982\u7387 \u5206\u5e03 \u6982\u7387\u5206\u5e03 \u4e3a   \\ ( P ( X   =   i )   =   \\ frac { e ^ { -   \\ lambda } \\ lambda   ^ i } { i ! } \\ )   \uff0c \u5219 \u79f0   \\ ( X \\ )   \u670d\u4ece \u6cca\u677e \u5206\u5e03 \uff0c \u5e38\u8bb0 \u4e3a   \\ ( X   \\ sim   P ( \\ lambda ) \\ )   \u3002 \u6b64\u5904   \\ ( \\ lambda   =   np \\ )   \u662f \u4e2a \u5e38\u6570 \u3002 \u901a\u5e38 \u5f53   \\ ( n   \\ geq   20 \uff0c p   \\ leq   0.05 \\ )   \u65f6 \uff0c \u5c31 \u53ef\u4ee5 \u4f7f\u7528 \u6cca\u677e \u5206\u5e03 \u6765 \u8fd1\u89c6 \u6c42\u503c \u3002   \u4ea4\u901a \u901a\u4e8b \u4e8b\u6545 \u4ea4\u901a\u4e8b\u6545   \u67d0 \u5341\u5b57 \u8def\u53e3 \u5341\u5b57\u8def \u5341\u5b57\u8def\u53e3 \u6709 \u5927\u91cf \u6c7d\u8f66 \u901a\u8fc7 \uff0c \u5047\u8bbe \u6bcf\u8f86 \u6c7d\u8f66 \u5728 \u8fd9\u91cc \u53d1\u751f \u4ea4\u901a \u901a\u4e8b \u4e8b\u6545 \u4ea4\u901a\u4e8b\u6545 \u7684 \u6982\u7387 \u4e3a   \\ ( 0.001 \\ )   \uff0c \u5982\u679c \u6bcf\u5929 \u6709   \\ ( 5000 \\ )   \u8f86 \u6c7d\u8f66 \u901a\u8fc7 \u5341\u5b57 \u8def\u53e3 \u5341\u5b57\u8def \u5341\u5b57\u8def\u53e3 \uff0c \u6c42 \u53d1\u751f \u4ea4\u901a \u901a\u4e8b \u4e8b\u6545 \u4ea4\u901a\u4e8b\u6545 \u7684 \u6c7d\u8f66 \u6570 \u4e0d\u5c11 \u4e8e   \\ ( 2 \\ )   \u7684 \u6982\u7387 \u3002   \u7531\u4e8e \u8fd9\u91cc \u7684   \\ ( p   \\ leq   0.001 \uff0c n   \\ geq   5000 \\ )   \uff0c \u53ef\u4ee5 \u8fd1\u4f3c \u4f7f\u7528 \u6cca\u677e \u5206\u5e03 \u6c42\u503c \uff0c \u4e14   \\ ( \\ lambda   =   np   =   5 \\ )   \u3002   \u6839\u636e \u6cca\u677e \u5206\u5e03 \u6709 \uff1a   \\ ( P ( X   =   i )   =   \\ frac { e ^ { - \\ lambda }   \\ lambda   ^   i } { i ! } \\ )   \uff0c \u4e14 \u5168 \u6982\u7387 \u548c \u4e3a   \\ ( 1 \\ )   \uff0c \u5373 \uff1a   \\ ( \\ sum _ { i   =   0 } ^ { n } \\ frac { e ^ { - \\ lambda }   \\ lambda   ^   i } { i ! }   =   1 \\ )   \u3002   \u6211\u4eec \u8981\u6c42   \\ ( P ( X   \\ leq   1 ) \\ )   \u7684 \u6982\u7387 \uff0c \u6240\u4ee5 \u6709 \uff1a   \\ ( P ( X   \\ leq   1 )   =   \\ sum _ { i   =   0 } ^ { 1 } \\ frac { e ^ { - \\ lambda }   \\ lambda   ^   i } { i ! }   =   \\ sum _ { i   =   0 } ^ { 1 } \\ frac { e ^ { - 5 } 5 ^ i } { i ! }   =   6e ^ { - 5 }   \\ approx   0.04044 \\ )   \uff0c \u6240\u4ee5 \u8f66\u7978 \u6570\u91cf \u4e0d\u5c11 \u4e8e   \\ ( 2 \\ )   \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( 1   -   0.04044   \\ approx   0.96 \\ )   \u3002","title":"\u6cca\u677e \u5206\u5e03"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E6%B3%8A%E6%9D%BE%E5%88%86%E5%B8%83/#_1","text":"\u82e5 \u968f\u673a \u5411\u91cf   \\ ( X \\ )   \u7684 \u53ef\u80fd \u53d6\u503c \u4e3a   \\ ( 0 \u3001 1 \u3001 2 \u3001 \\ cdots \\ )   \u4e14 \u6982\u7387 \u5206\u5e03 \u6982\u7387\u5206\u5e03 \u4e3a   \\ ( P ( X   =   i )   =   \\ frac { e ^ { -   \\ lambda } \\ lambda   ^ i } { i ! } \\ )   \uff0c \u5219 \u79f0   \\ ( X \\ )   \u670d\u4ece \u6cca\u677e \u5206\u5e03 \uff0c \u5e38\u8bb0 \u4e3a   \\ ( X   \\ sim   P ( \\ lambda ) \\ )   \u3002 \u6b64\u5904   \\ ( \\ lambda   =   np \\ )   \u662f \u4e2a \u5e38\u6570 \u3002 \u901a\u5e38 \u5f53   \\ ( n   \\ geq   20 \uff0c p   \\ leq   0.05 \\ )   \u65f6 \uff0c \u5c31 \u53ef\u4ee5 \u4f7f\u7528 \u6cca\u677e \u5206\u5e03 \u6765 \u8fd1\u89c6 \u6c42\u503c \u3002   \u4ea4\u901a \u901a\u4e8b \u4e8b\u6545 \u4ea4\u901a\u4e8b\u6545   \u67d0 \u5341\u5b57 \u8def\u53e3 \u5341\u5b57\u8def \u5341\u5b57\u8def\u53e3 \u6709 \u5927\u91cf \u6c7d\u8f66 \u901a\u8fc7 \uff0c \u5047\u8bbe \u6bcf\u8f86 \u6c7d\u8f66 \u5728 \u8fd9\u91cc \u53d1\u751f \u4ea4\u901a \u901a\u4e8b \u4e8b\u6545 \u4ea4\u901a\u4e8b\u6545 \u7684 \u6982\u7387 \u4e3a   \\ ( 0.001 \\ )   \uff0c \u5982\u679c \u6bcf\u5929 \u6709   \\ ( 5000 \\ )   \u8f86 \u6c7d\u8f66 \u901a\u8fc7 \u5341\u5b57 \u8def\u53e3 \u5341\u5b57\u8def \u5341\u5b57\u8def\u53e3 \uff0c \u6c42 \u53d1\u751f \u4ea4\u901a \u901a\u4e8b \u4e8b\u6545 \u4ea4\u901a\u4e8b\u6545 \u7684 \u6c7d\u8f66 \u6570 \u4e0d\u5c11 \u4e8e   \\ ( 2 \\ )   \u7684 \u6982\u7387 \u3002   \u7531\u4e8e \u8fd9\u91cc \u7684   \\ ( p   \\ leq   0.001 \uff0c n   \\ geq   5000 \\ )   \uff0c \u53ef\u4ee5 \u8fd1\u4f3c \u4f7f\u7528 \u6cca\u677e \u5206\u5e03 \u6c42\u503c \uff0c \u4e14   \\ ( \\ lambda   =   np   =   5 \\ )   \u3002   \u6839\u636e \u6cca\u677e \u5206\u5e03 \u6709 \uff1a   \\ ( P ( X   =   i )   =   \\ frac { e ^ { - \\ lambda }   \\ lambda   ^   i } { i ! } \\ )   \uff0c \u4e14 \u5168 \u6982\u7387 \u548c \u4e3a   \\ ( 1 \\ )   \uff0c \u5373 \uff1a   \\ ( \\ sum _ { i   =   0 } ^ { n } \\ frac { e ^ { - \\ lambda }   \\ lambda   ^   i } { i ! }   =   1 \\ )   \u3002   \u6211\u4eec \u8981\u6c42   \\ ( P ( X   \\ leq   1 ) \\ )   \u7684 \u6982\u7387 \uff0c \u6240\u4ee5 \u6709 \uff1a   \\ ( P ( X   \\ leq   1 )   =   \\ sum _ { i   =   0 } ^ { 1 } \\ frac { e ^ { - \\ lambda }   \\ lambda   ^   i } { i ! }   =   \\ sum _ { i   =   0 } ^ { 1 } \\ frac { e ^ { - 5 } 5 ^ i } { i ! }   =   6e ^ { - 5 }   \\ approx   0.04044 \\ )   \uff0c \u6240\u4ee5 \u8f66\u7978 \u6570\u91cf \u4e0d\u5c11 \u4e8e   \\ ( 2 \\ )   \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( 1   -   0.04044   \\ approx   0.96 \\ )   \u3002","title":"\u6cca\u677e \u5206\u5e03"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E7%BA%A6%E5%AE%9A%E7%9B%B8%E9%81%87/","text":"\u7ea6\u5b9a \u76f8\u9047   \u9898\u76ee   \u7532 \u3001 \u4e59 \u4e8c\u4eba \u7ea6\u5b9a   \\ ( 1 \\ )   \u70b9\u5230   \\ ( 2 \\ )   \u70b9 \u4e4b\u95f4 \u5728 \u67d0\u5904 \u78b0\u9762 \uff0c \u7ea6\u5b9a \u5148\u5230 \u8005 \u8981 \u7b49\u5019   \\ ( 10 \\ )   \u5206\u949f \u624d\u80fd \u79bb\u53bb \u3002   \u8bbe\u60f3 \u7532 \u3001 \u4e59 \u4e8c\u4eba \u5404\u81ea \u968f\u610f \u5730 \u5728   \\ ( 1   \\ sim   2 \\ )   \u70b9 \u4e4b\u95f4 \u9009 \u4e00\u4e2a \u65f6\u523b \u5230\u8fbe \u8be5\u5904 \u3002   \u95ee   \u300c \u7532 \u3001 \u4e59 \u4e8c\u4eba \u80fd \u78b0\u4e0a \u300d \u8fd9\u4e2a \u4e8b\u4ef6   \\ ( E \\ )   \u53d1\u751f \u7684 \u6982\u7387 \u662f \u591a\u5c11 \uff1f   \u82e5\u8bbe \u7532 \u5230\u8fbe \u7684 \u65f6\u95f4 \u4e3a   \\ ( x \\ )   \uff0c \u4e59 \u5230\u8fbe \u7684 \u65f6\u95f4 \u4e3a   \\ ( y \\ )   \uff0c \u5219   \\ ( x \u3001 y \\ )   \u53ef\u4ee5 \u4efb\u610f \u51fa\u73b0 \u5728   \\ ( 1   \\ sim   2 \\ )   \u7684 \u65f6\u95f4 \u70b9\u4e2d   \u82e5\u7532 \u3001 \u4e59 \u76f8\u9047 \uff0c \u9700\u8981 \u6ee1\u8db3 \uff1a   \\ ( | x   -   y |   \\ leq   10 \\ )   \u7528 \u5750\u6807 \u56fe\u6765 \u8868\u793a \uff1a   \u53ea\u6709 \u88ab \u4e24\u6761 \u76f4\u7ebf \uff1a   \\ ( y   =   x   -   10 \\ )   \u3001   \\ ( y   =   x   +   10 \\ )   \u6240 \u5939\u4f4f \u7684 \u767d\u8272 \u533a\u57df \u9762\u79ef \u624d \u662f \u53ef\u4ee5 \u76f8\u9047 \u7684 \u70b9   \\ ( ( x ,   y ) \\ )   \u7684 \u5206\u5e03 \u533a\u57df \uff0c \u8be5 \u9762\u79ef \u4e0e \u9762\u79ef \u603b\u9762\u79ef \u7684 \u6bd4\u503c \u5c31\u662f \u53ef\u80fd \u76f8\u9047 \u7684 \u6982\u7387 \u3002","title":"\u7ea6\u5b9a \u76f8\u9047"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E7%BA%A6%E5%AE%9A%E7%9B%B8%E9%81%87/#_1","text":"\u9898\u76ee   \u7532 \u3001 \u4e59 \u4e8c\u4eba \u7ea6\u5b9a   \\ ( 1 \\ )   \u70b9\u5230   \\ ( 2 \\ )   \u70b9 \u4e4b\u95f4 \u5728 \u67d0\u5904 \u78b0\u9762 \uff0c \u7ea6\u5b9a \u5148\u5230 \u8005 \u8981 \u7b49\u5019   \\ ( 10 \\ )   \u5206\u949f \u624d\u80fd \u79bb\u53bb \u3002   \u8bbe\u60f3 \u7532 \u3001 \u4e59 \u4e8c\u4eba \u5404\u81ea \u968f\u610f \u5730 \u5728   \\ ( 1   \\ sim   2 \\ )   \u70b9 \u4e4b\u95f4 \u9009 \u4e00\u4e2a \u65f6\u523b \u5230\u8fbe \u8be5\u5904 \u3002   \u95ee   \u300c \u7532 \u3001 \u4e59 \u4e8c\u4eba \u80fd \u78b0\u4e0a \u300d \u8fd9\u4e2a \u4e8b\u4ef6   \\ ( E \\ )   \u53d1\u751f \u7684 \u6982\u7387 \u662f \u591a\u5c11 \uff1f   \u82e5\u8bbe \u7532 \u5230\u8fbe \u7684 \u65f6\u95f4 \u4e3a   \\ ( x \\ )   \uff0c \u4e59 \u5230\u8fbe \u7684 \u65f6\u95f4 \u4e3a   \\ ( y \\ )   \uff0c \u5219   \\ ( x \u3001 y \\ )   \u53ef\u4ee5 \u4efb\u610f \u51fa\u73b0 \u5728   \\ ( 1   \\ sim   2 \\ )   \u7684 \u65f6\u95f4 \u70b9\u4e2d   \u82e5\u7532 \u3001 \u4e59 \u76f8\u9047 \uff0c \u9700\u8981 \u6ee1\u8db3 \uff1a   \\ ( | x   -   y |   \\ leq   10 \\ )   \u7528 \u5750\u6807 \u56fe\u6765 \u8868\u793a \uff1a   \u53ea\u6709 \u88ab \u4e24\u6761 \u76f4\u7ebf \uff1a   \\ ( y   =   x   -   10 \\ )   \u3001   \\ ( y   =   x   +   10 \\ )   \u6240 \u5939\u4f4f \u7684 \u767d\u8272 \u533a\u57df \u9762\u79ef \u624d \u662f \u53ef\u4ee5 \u76f8\u9047 \u7684 \u70b9   \\ ( ( x ,   y ) \\ )   \u7684 \u5206\u5e03 \u533a\u57df \uff0c \u8be5 \u9762\u79ef \u4e0e \u9762\u79ef \u603b\u9762\u79ef \u7684 \u6bd4\u503c \u5c31\u662f \u53ef\u80fd \u76f8\u9047 \u7684 \u6982\u7387 \u3002","title":"\u7ea6\u5b9a \u76f8\u9047"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E8%AF%BB%E6%88%91/","text":"readme   \u8be5 \u7ae0\u8282 \u4e3b\u8981 \u5206\u4eab \u6211 \u5927\u5b66 \u9636\u6bb5 \u6240 \u505a\u5230 \u7684 \u7ecf\u5178 \u4f8b\u9898 \uff0c \u4ee5 \u300c \u600e\u4e48 \u89e3\u9898 \u300d \u7684 \u5f62\u5f0f \u5f15\u5165 \u6240\u5b66 \u7684 \u77e5\u8bc6 \uff0c \u4e5f \u65b9\u4fbf \u672a\u6765 \u8003\u8bd5 \u65f6 \u53ef\u4ee5 \u901a\u8fc7 \u770b \u4f8b\u9898 \u56de\u5fc6 \u4e4b\u524d \u6240\u5b66 \u7684 \u77e5\u8bc6 \u77e5\u8bc6\u70b9 \u3002","title":"\u8bfb \u6211"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E8%AF%BB%E6%88%91/#readme","text":"\u8be5 \u7ae0\u8282 \u4e3b\u8981 \u5206\u4eab \u6211 \u5927\u5b66 \u9636\u6bb5 \u6240 \u505a\u5230 \u7684 \u7ecf\u5178 \u4f8b\u9898 \uff0c \u4ee5 \u300c \u600e\u4e48 \u89e3\u9898 \u300d \u7684 \u5f62\u5f0f \u5f15\u5165 \u6240\u5b66 \u7684 \u77e5\u8bc6 \uff0c \u4e5f \u65b9\u4fbf \u672a\u6765 \u8003\u8bd5 \u65f6 \u53ef\u4ee5 \u901a\u8fc7 \u770b \u4f8b\u9898 \u56de\u5fc6 \u4e4b\u524d \u6240\u5b66 \u7684 \u77e5\u8bc6 \u77e5\u8bc6\u70b9 \u3002","title":"readme"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E8%B5%8C%E5%8D%9A%E8%A7%84%E5%88%99/","text":"\u8d4c\u535a \u89c4\u5219   \u9898\u76ee \u4e00   \u7532 \u3001 \u4e59\u4e24\u4eba \u7ea6\u5b9a \u4e86 \u4e00\u4e2a \u8d4c\u535a \u89c4\u5219 \uff1a \u6709 \u65e0\u7a77 \u591a\u4e2a \u76d2\u5b50 \uff0c \u7f16\u53f7 \u4e3a   \\ ( n \\ )   \u7684 \u76d2\u5b50 \u4e2d \uff0c \u6709   \\ ( n \\ )   \u4e2a \u7ea2\u7403 \u548c   \\ ( 1 \\ )   \u4e2a \u767d\u7403 \uff08   \\ ( n   =   1 \u3001 2 \u3001 3 \u3001 \\ cdots   \u3001 \\ infty \\ )   \uff09 \u3002   \u8ba9 \u7532 \u62ff \u4e00\u4e2a \u5747\u5300 \u7684 \u94dc\u677f \u63b7 \u5230 \u51fa\u73b0 \u6b63\u9762 \u4e3a\u6b62 \uff0c \u82e5\u5230 \u6b64\u65f6 \u7532 \u63b7 \u4e86   \\ ( n \\ )   \u6b21 \uff0c \u5219 \u7532 \u5728 \u7f16\u53f7 \u4e3a   \\ ( n \\ )   \u7684 \u76d2\u5b50 \u4e2d \u62bd\u51fa \u4e00\u4e2a \u7403 \uff0c \u5982 \u62bd\u5230   \u7ea2\u7403   \u7b97\u7532\u80dc \uff0c \u5426\u5219 \u4e59\u80dc \u3002   \u4f60 \u8ba4\u4e3a \u8fd9\u4e2a \u89c4\u5219 \u5bf9\u4e8e \u8c01 \u66f4 \u6709\u5229 \u5462 \uff1f   \u6211 \u4e2a\u4eba \u611f\u89c9 \u4e2a\u4eba\u611f\u89c9 \u7532 \u8d62 \u7684 \u6982\u7387 \u66f4\u9ad8 \uff0c \u53c2\u8003 \u9a8f \u54e5\u54e5 \u7684 \u60f3\u6cd5 \u5c31\u662f \u4e00 \u5f00\u59cb   \\ ( n   =   1 \\ )   \u7684 \u65f6\u5019 \uff0c \u7532 \u548c \u4e59 \u8d62 \u7684 \u6982\u7387 \u662f \u4e94\u4e94 \u4e94\u4e94\u5f00 \u7684 \uff0c \u4f46 \u968f\u7740   \\ ( n \\ )   \u7684 \u8d8a\u6765 \u8d8a\u6765\u8d8a \u5927 \uff0c \u4e59 \u8d8a\u6765 \u8d8a\u6765\u8d8a \u4e0d \u5360\u4f18 \u4f18\u52bf \u5360\u4f18\u52bf \uff0c \u6240\u4ee5 \u5168 \u6982\u7387 \u7532 \u8d62 \u7684 \u6982\u7387 \u6bd4\u4e59\u8d62 \u7684 \u6982\u7387 \u8fd8\u8981 \u5927 \u3002   \u8bbe \u4e8b\u4ef6   \\ ( A _ n   =   \\ { \u6295\u63b7 \u4e86   n   \u6b21\u540e \u624d \u51fa\u73b0 \u6b63\u9762 \\ } \\ )   \uff0c \u5219   \\ ( A _ 1 \u3001 A _ 2 \u3001 \\ cdots   \u3001 A _ { \\ infty } \\ )   \u6784\u6210 \u5b8c\u6574 \u7684 \u4e8b\u4ef6 \u7fa4 \u3002   \u5728   \\ ( A _ n \\ )   \u53d1\u751f \u7684 \u60c5\u51b5 \u4e0b \uff0c \u62bd\u5230 \u7ea2\u7403 \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( \\ frac { n } { 1   +   n } \\ )   \uff1b \u62bd\u5230 \u767d\u7403 \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( \\ frac { 1 } { 1   +   n } \\ )   \u3002   \u6240\u4ee5 \u6295\u63b7   \\ ( n \\ )   \u6b21 \u624d \u51fa\u73b0 \u6b63\u9762 \uff0c \u5e76\u4e14 \u8fd8 \u62bd\u5230 \u7ea2\u7403 \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( ( \\ frac { 1 } { 2 } ) ^ n   \\ times   \\ frac { n } { 1   +   n } \\ )   \u3002   \u53c8 \u7531\u4e8e   \\ ( n \\ )   \u7684 \u53ef\u80fd \u53d6\u503c \u4e3a \uff1a   \\ ( 1 \u3001 2 \u3001 \\ cdots   \u3001 \\ infty \\ )   \uff0c \u6240\u4ee5 \u7532 \u8d62 \u7684 \u5168 \u6982\u7387 \u4e3a \uff1a   \\ ( \\ sum _ { n   =   1 } ^ { \\ infty } ( \\ frac { 1 } { 2 } ) ^ n   \\ times   \\ frac { n } { 1   +   n } \\ )   \u5982\u679c \u4f60 \u89c9\u5f97 \u7532 \u8d62 \u7684 \u6982\u7387 \u6bd4\u8f83 \u96be\u7b97 \uff0c \u90a3 \u6211\u4eec \u5148 \u5c1d\u8bd5 \u6c42\u51fa \u4e59 \u8d62 \u7684 \u6982\u7387 \uff0c \u5219 \u300c \u7532 \u8d62 \u7684 \u6982\u7387   =   1   -   \u4e59\u8d62 \u7684 \u6982\u7387 \u300d \uff1a   \\ ( \\ sum _ { n   =   1 } ^ { \\ infty } \\ frac { 1 } { 2 ^ n ( n   +   1 ) } \\ )   \u53c8 \u56e0\u4e3a   \\ ( \\ frac { 1 } { 2 ^ n ( n   +   1 ) }   \\ leq   \\ frac { 1 } { 2 ^ n   \\ times   2 } \\ )   \u6240\u4ee5   \\ ( \\ sum _ { n   =   1 } ^ { \\ infty } \\ frac { 1 } { 2 ^ n ( n   +   1 ) }   \\ leq   \\ sum _ { n   =   1 } ^ { \\ infty } \\ frac { 1 } { 2 ^ n   \\ times   2 } \\ )   \u6839\u636e \u7b49 \u6bd4 \u516c\u5f0f   \\ ( a _ 1 \\ frac { 1   -   q ^ n } { 1   -   q } \\ )   \u53ef \u6c42\u5f97 \uff1a   \\ ( \\ sum _ { n   =   1 } ^ { \\ infty } \\ frac { 1 } { 2 ^ n   \\ times   2 }   \\ rightarrow   \\ frac { 1 } { 2 } \\ )   \u6240\u4ee5 \uff1a   \\ ( \\ sum _ { n   =   1 } ^ { \\ infty } \\ frac { 1 } { 2 ^ n ( n   +   1 ) }   \\ leq   \\ frac { 1 } { 2 } \\ )   \u6211\u4eec \u6c42\u5f97 \u4e59\u8d62 \u7684 \u6982\u7387 \u786e\u5b9e \u5c0f\u4e8e   \\ ( \\ frac { 1 } { 2 } \\ )   \uff0c \u6240\u4ee5 \u7532 \u66f4 \u6709 \u53ef\u80fd \u8d62\u5f97 \u8be5 \u6bd4\u8d5b \u3002   \u7a0d\u5fae \u6539 \u4e00\u4e0b \u4e0a\u9898 \uff1a   \u9898\u76ee \u4e00   \u7532 \u3001 \u4e59\u4e24\u4eba \u7ea6\u5b9a \u4e86 \u4e00\u4e2a \u8d4c\u535a \u89c4\u5219 \uff1a \u6709 \u65e0\u7a77 \u591a\u4e2a \u76d2\u5b50 \uff0c \u7f16\u53f7 \u4e3a   \\ ( n \\ )   \u7684 \u76d2\u5b50 \u4e2d \uff0c \u6709   \\ ( n \\ )   \u4e2a \u7ea2\u7403 \u548c   \\ ( 1 \\ )   \u4e2a \u767d\u7403 \uff08   \\ ( n   =   1 \u3001 2 \u3001 3 \u3001 \\ cdots   \u3001 \\ infty \\ )   \uff09 \u3002   \u8ba9 \u7532 \u62ff \u4e00\u4e2a \u5747\u5300 \u7684 \u94dc\u677f \u63b7 \u5230 \u51fa\u73b0 \u6b63\u9762 \u4e3a\u6b62 \uff0c \u82e5\u5230 \u6b64\u65f6 \u7532 \u63b7 \u4e86   \\ ( n \\ )   \u6b21 \uff0c \u5219 \u7532 \u5728 \u7f16\u53f7 \u4e3a   \\ ( n \\ )   \u7684 \u76d2\u5b50 \u4e2d \u62bd\u51fa \u4e00\u4e2a \u7403 \uff0c \u5982 \u62bd\u5230   \u767d\u7403   \u7b97\u7532\u80dc \uff0c \u5426\u5219 \u4e59\u80dc \u3002   \u4f60 \u8ba4\u4e3a \u8fd9\u4e2a \u89c4\u5219 \u5bf9\u4e8e \u8c01 \u66f4 \u6709\u5229 \u5462 \uff1f   \u4e59\u8d62 \u7684 \u6982\u7387 \u66f4\u5927 \uff0c \u4f8b\u5982 \u5728   \\ ( n   =   1 \\ )   \u7684 \u6761\u4ef6 \u4e0b \uff0c \u7532 \u8d62 \u7684 \u6982\u7387 \u548c \u4e59 \u8d62 \u7684 \u6982\u7387 \u90fd \u662f   \\ ( \\ frac { 1 } { 2 } \\ )   \uff0c \u4f46\u662f \u82e5   \\ ( n   >   1 \\ )   \uff0c \u5728 \u5df2\u77e5 \u6295\u63b7 \u51fa   \\ ( n \\ )   \u4e2a \u7684 \u60c5\u51b5 \u4e0b \uff0c \u7532 \u8d62 \u7684 \u673a\u4f1a \u8d8a\u6765 \u8d8a\u6765\u8d8a \u5c0f \uff0c \u90fd \u4f1a \u5c0f\u4e8e   \\ ( \\ frac { 1 } { 2 } \\ )   \uff0c \u5219 \u5168 \u6982\u7387 \u7532 \u8d62 \u7684 \u6982\u7387 \u4f1a \u5c0f\u4e8e \u4e59\u8d62 \u7684 \u6982\u7387 \u3002   \u5728 \u6295\u63b7   \\ ( n \\ )   \u6b21 \u624d \u51fa\u73b0 \u6b63\u9762 \u7684 \u57fa\u7840 \u4e0a \uff0c \u7532 \u8d62 \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( \\ frac { 1 } { n   +   1 } \\ )   \uff0c \u4e59\u8d62 \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( \\ frac { n } { n   +   1 } \\ )   \uff1b   \u6295\u63b7 \u51fa   \\ ( n \\ )   \u6b21 \u624d \u51fa\u73b0 \u6b63\u9762 \u4e14 \u7532 \u8d62 \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( \\ frac { 1 } { 2 ^ n ( n   +   1 ) } \\ )   \uff0c \u7b49\u7b49 \uff0c \u5367\u69fd \u8fd9 \u548c \u4e0a\u9762 \u90a3\u9898 \u4e00\u6837 \u7684 \u57fa\u672c \u57fa\u672c\u4e0a \uff0c \u4e22 \uff01 \u6309\u7167 \u4e0a\u9762 \u90a3\u6761 \u7684 \u5206\u6790 \u601d\u8def \u53d6 \u505a \u5c31\u884c\u4e86 \uff0c \u4e0d\u8fc7 \u53ea\u4e0d\u8fc7 \u7532\u4e59 \u8d62 \u7684 \u89c4\u5219 \u6b63\u597d \u98a0\u5012 \u3002","title":"\u8d4c\u535a \u89c4\u5219"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E8%B5%8C%E5%8D%9A%E8%A7%84%E5%88%99/#_1","text":"\u9898\u76ee \u4e00   \u7532 \u3001 \u4e59\u4e24\u4eba \u7ea6\u5b9a \u4e86 \u4e00\u4e2a \u8d4c\u535a \u89c4\u5219 \uff1a \u6709 \u65e0\u7a77 \u591a\u4e2a \u76d2\u5b50 \uff0c \u7f16\u53f7 \u4e3a   \\ ( n \\ )   \u7684 \u76d2\u5b50 \u4e2d \uff0c \u6709   \\ ( n \\ )   \u4e2a \u7ea2\u7403 \u548c   \\ ( 1 \\ )   \u4e2a \u767d\u7403 \uff08   \\ ( n   =   1 \u3001 2 \u3001 3 \u3001 \\ cdots   \u3001 \\ infty \\ )   \uff09 \u3002   \u8ba9 \u7532 \u62ff \u4e00\u4e2a \u5747\u5300 \u7684 \u94dc\u677f \u63b7 \u5230 \u51fa\u73b0 \u6b63\u9762 \u4e3a\u6b62 \uff0c \u82e5\u5230 \u6b64\u65f6 \u7532 \u63b7 \u4e86   \\ ( n \\ )   \u6b21 \uff0c \u5219 \u7532 \u5728 \u7f16\u53f7 \u4e3a   \\ ( n \\ )   \u7684 \u76d2\u5b50 \u4e2d \u62bd\u51fa \u4e00\u4e2a \u7403 \uff0c \u5982 \u62bd\u5230   \u7ea2\u7403   \u7b97\u7532\u80dc \uff0c \u5426\u5219 \u4e59\u80dc \u3002   \u4f60 \u8ba4\u4e3a \u8fd9\u4e2a \u89c4\u5219 \u5bf9\u4e8e \u8c01 \u66f4 \u6709\u5229 \u5462 \uff1f   \u6211 \u4e2a\u4eba \u611f\u89c9 \u4e2a\u4eba\u611f\u89c9 \u7532 \u8d62 \u7684 \u6982\u7387 \u66f4\u9ad8 \uff0c \u53c2\u8003 \u9a8f \u54e5\u54e5 \u7684 \u60f3\u6cd5 \u5c31\u662f \u4e00 \u5f00\u59cb   \\ ( n   =   1 \\ )   \u7684 \u65f6\u5019 \uff0c \u7532 \u548c \u4e59 \u8d62 \u7684 \u6982\u7387 \u662f \u4e94\u4e94 \u4e94\u4e94\u5f00 \u7684 \uff0c \u4f46 \u968f\u7740   \\ ( n \\ )   \u7684 \u8d8a\u6765 \u8d8a\u6765\u8d8a \u5927 \uff0c \u4e59 \u8d8a\u6765 \u8d8a\u6765\u8d8a \u4e0d \u5360\u4f18 \u4f18\u52bf \u5360\u4f18\u52bf \uff0c \u6240\u4ee5 \u5168 \u6982\u7387 \u7532 \u8d62 \u7684 \u6982\u7387 \u6bd4\u4e59\u8d62 \u7684 \u6982\u7387 \u8fd8\u8981 \u5927 \u3002   \u8bbe \u4e8b\u4ef6   \\ ( A _ n   =   \\ { \u6295\u63b7 \u4e86   n   \u6b21\u540e \u624d \u51fa\u73b0 \u6b63\u9762 \\ } \\ )   \uff0c \u5219   \\ ( A _ 1 \u3001 A _ 2 \u3001 \\ cdots   \u3001 A _ { \\ infty } \\ )   \u6784\u6210 \u5b8c\u6574 \u7684 \u4e8b\u4ef6 \u7fa4 \u3002   \u5728   \\ ( A _ n \\ )   \u53d1\u751f \u7684 \u60c5\u51b5 \u4e0b \uff0c \u62bd\u5230 \u7ea2\u7403 \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( \\ frac { n } { 1   +   n } \\ )   \uff1b \u62bd\u5230 \u767d\u7403 \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( \\ frac { 1 } { 1   +   n } \\ )   \u3002   \u6240\u4ee5 \u6295\u63b7   \\ ( n \\ )   \u6b21 \u624d \u51fa\u73b0 \u6b63\u9762 \uff0c \u5e76\u4e14 \u8fd8 \u62bd\u5230 \u7ea2\u7403 \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( ( \\ frac { 1 } { 2 } ) ^ n   \\ times   \\ frac { n } { 1   +   n } \\ )   \u3002   \u53c8 \u7531\u4e8e   \\ ( n \\ )   \u7684 \u53ef\u80fd \u53d6\u503c \u4e3a \uff1a   \\ ( 1 \u3001 2 \u3001 \\ cdots   \u3001 \\ infty \\ )   \uff0c \u6240\u4ee5 \u7532 \u8d62 \u7684 \u5168 \u6982\u7387 \u4e3a \uff1a   \\ ( \\ sum _ { n   =   1 } ^ { \\ infty } ( \\ frac { 1 } { 2 } ) ^ n   \\ times   \\ frac { n } { 1   +   n } \\ )   \u5982\u679c \u4f60 \u89c9\u5f97 \u7532 \u8d62 \u7684 \u6982\u7387 \u6bd4\u8f83 \u96be\u7b97 \uff0c \u90a3 \u6211\u4eec \u5148 \u5c1d\u8bd5 \u6c42\u51fa \u4e59 \u8d62 \u7684 \u6982\u7387 \uff0c \u5219 \u300c \u7532 \u8d62 \u7684 \u6982\u7387   =   1   -   \u4e59\u8d62 \u7684 \u6982\u7387 \u300d \uff1a   \\ ( \\ sum _ { n   =   1 } ^ { \\ infty } \\ frac { 1 } { 2 ^ n ( n   +   1 ) } \\ )   \u53c8 \u56e0\u4e3a   \\ ( \\ frac { 1 } { 2 ^ n ( n   +   1 ) }   \\ leq   \\ frac { 1 } { 2 ^ n   \\ times   2 } \\ )   \u6240\u4ee5   \\ ( \\ sum _ { n   =   1 } ^ { \\ infty } \\ frac { 1 } { 2 ^ n ( n   +   1 ) }   \\ leq   \\ sum _ { n   =   1 } ^ { \\ infty } \\ frac { 1 } { 2 ^ n   \\ times   2 } \\ )   \u6839\u636e \u7b49 \u6bd4 \u516c\u5f0f   \\ ( a _ 1 \\ frac { 1   -   q ^ n } { 1   -   q } \\ )   \u53ef \u6c42\u5f97 \uff1a   \\ ( \\ sum _ { n   =   1 } ^ { \\ infty } \\ frac { 1 } { 2 ^ n   \\ times   2 }   \\ rightarrow   \\ frac { 1 } { 2 } \\ )   \u6240\u4ee5 \uff1a   \\ ( \\ sum _ { n   =   1 } ^ { \\ infty } \\ frac { 1 } { 2 ^ n ( n   +   1 ) }   \\ leq   \\ frac { 1 } { 2 } \\ )   \u6211\u4eec \u6c42\u5f97 \u4e59\u8d62 \u7684 \u6982\u7387 \u786e\u5b9e \u5c0f\u4e8e   \\ ( \\ frac { 1 } { 2 } \\ )   \uff0c \u6240\u4ee5 \u7532 \u66f4 \u6709 \u53ef\u80fd \u8d62\u5f97 \u8be5 \u6bd4\u8d5b \u3002   \u7a0d\u5fae \u6539 \u4e00\u4e0b \u4e0a\u9898 \uff1a   \u9898\u76ee \u4e00   \u7532 \u3001 \u4e59\u4e24\u4eba \u7ea6\u5b9a \u4e86 \u4e00\u4e2a \u8d4c\u535a \u89c4\u5219 \uff1a \u6709 \u65e0\u7a77 \u591a\u4e2a \u76d2\u5b50 \uff0c \u7f16\u53f7 \u4e3a   \\ ( n \\ )   \u7684 \u76d2\u5b50 \u4e2d \uff0c \u6709   \\ ( n \\ )   \u4e2a \u7ea2\u7403 \u548c   \\ ( 1 \\ )   \u4e2a \u767d\u7403 \uff08   \\ ( n   =   1 \u3001 2 \u3001 3 \u3001 \\ cdots   \u3001 \\ infty \\ )   \uff09 \u3002   \u8ba9 \u7532 \u62ff \u4e00\u4e2a \u5747\u5300 \u7684 \u94dc\u677f \u63b7 \u5230 \u51fa\u73b0 \u6b63\u9762 \u4e3a\u6b62 \uff0c \u82e5\u5230 \u6b64\u65f6 \u7532 \u63b7 \u4e86   \\ ( n \\ )   \u6b21 \uff0c \u5219 \u7532 \u5728 \u7f16\u53f7 \u4e3a   \\ ( n \\ )   \u7684 \u76d2\u5b50 \u4e2d \u62bd\u51fa \u4e00\u4e2a \u7403 \uff0c \u5982 \u62bd\u5230   \u767d\u7403   \u7b97\u7532\u80dc \uff0c \u5426\u5219 \u4e59\u80dc \u3002   \u4f60 \u8ba4\u4e3a \u8fd9\u4e2a \u89c4\u5219 \u5bf9\u4e8e \u8c01 \u66f4 \u6709\u5229 \u5462 \uff1f   \u4e59\u8d62 \u7684 \u6982\u7387 \u66f4\u5927 \uff0c \u4f8b\u5982 \u5728   \\ ( n   =   1 \\ )   \u7684 \u6761\u4ef6 \u4e0b \uff0c \u7532 \u8d62 \u7684 \u6982\u7387 \u548c \u4e59 \u8d62 \u7684 \u6982\u7387 \u90fd \u662f   \\ ( \\ frac { 1 } { 2 } \\ )   \uff0c \u4f46\u662f \u82e5   \\ ( n   >   1 \\ )   \uff0c \u5728 \u5df2\u77e5 \u6295\u63b7 \u51fa   \\ ( n \\ )   \u4e2a \u7684 \u60c5\u51b5 \u4e0b \uff0c \u7532 \u8d62 \u7684 \u673a\u4f1a \u8d8a\u6765 \u8d8a\u6765\u8d8a \u5c0f \uff0c \u90fd \u4f1a \u5c0f\u4e8e   \\ ( \\ frac { 1 } { 2 } \\ )   \uff0c \u5219 \u5168 \u6982\u7387 \u7532 \u8d62 \u7684 \u6982\u7387 \u4f1a \u5c0f\u4e8e \u4e59\u8d62 \u7684 \u6982\u7387 \u3002   \u5728 \u6295\u63b7   \\ ( n \\ )   \u6b21 \u624d \u51fa\u73b0 \u6b63\u9762 \u7684 \u57fa\u7840 \u4e0a \uff0c \u7532 \u8d62 \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( \\ frac { 1 } { n   +   1 } \\ )   \uff0c \u4e59\u8d62 \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( \\ frac { n } { n   +   1 } \\ )   \uff1b   \u6295\u63b7 \u51fa   \\ ( n \\ )   \u6b21 \u624d \u51fa\u73b0 \u6b63\u9762 \u4e14 \u7532 \u8d62 \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( \\ frac { 1 } { 2 ^ n ( n   +   1 ) } \\ )   \uff0c \u7b49\u7b49 \uff0c \u5367\u69fd \u8fd9 \u548c \u4e0a\u9762 \u90a3\u9898 \u4e00\u6837 \u7684 \u57fa\u672c \u57fa\u672c\u4e0a \uff0c \u4e22 \uff01 \u6309\u7167 \u4e0a\u9762 \u90a3\u6761 \u7684 \u5206\u6790 \u601d\u8def \u53d6 \u505a \u5c31\u884c\u4e86 \uff0c \u4e0d\u8fc7 \u53ea\u4e0d\u8fc7 \u7532\u4e59 \u8d62 \u7684 \u89c4\u5219 \u6b63\u597d \u98a0\u5012 \u3002","title":"\u8d4c\u535a \u89c4\u5219"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E8%B5%8C%E5%B1%80%E4%B8%AD%E6%96%AD/","text":"\u8d4c\u5c40 \u4e2d\u65ad   \u9898\u76ee   \u7532 \u3001 \u4e59\u4e24\u4eba \u8d4c\u6280 \u76f8\u540c \uff0c \u5404\u51fa \u8d4c\u6ce8   \\ ( 500 \\ )   \u5143 \u3002   \u7ea6\u5b9a \uff1a \u8c01 \u5148\u80dc \u4e09\u5c40 \uff0c \u8c01 \u5c31 \u62ff\u8d70 \u5168\u90e8 \u7684   \\ ( 1000 \\ )   \u5143 \u3002   \u73b0\u5df2 \u8d4c \u4e86   \\ ( 3 \\ )   \u5c40 \uff0c \u7532\u4e8c\u80dc \u4e00\u8d1f \uff0c \u56e0\u6545 \u8981 \u4e2d\u6b62 \u8d4c\u535a \uff0c \u95ee \u8fd9   \\ ( 1000 \\ )   \u5143\u8981 \u5982\u4f55 \u5206 \uff0c \u624d \u7b97 \u516c\u5e73 \uff1f   \u5047\u8bbe \u6211\u4eec   \\ ( 1 : 1 \\ )   \u5e73\u5206 \uff0c \u7532\u4e59 \u5404 \u62ff   \\ ( 500 \\ )   \u5143 \uff0c \u90a3\u7532 \u8d62 \u4e86   \\ ( 2 \\ )   \u5c40 \u8fd8\u6709 \u4ec0\u4e48 \u4f18\u52bf \u53ef\u8a00 \uff1f \u4f46\u662f \u4e59 \u80af\u5b9a   \" \u6cbe\u6cbe\u81ea\u559c \" \u3002   \u82e5 \u6211\u4eec \u6309\u7167 \u6bd4\u5206   \\ ( 2   :   1 \\ )   \u5206 \uff0c \u7532 \u62ff   \\ ( \\ frac { 1000   \\ times   2 } { 3 } \\ )   \uff0c \u4e59 \u62ff   \\ ( \\ frac { 1000   \\ times   1 } { 3 } \\ )   \uff0c \u4f60 \u89c9\u5f97 \u516c\u5e73 \u5417 \uff1f \u770b\u4f3c \u516c\u5e73   \u6211\u4eec \u4e0d\u59a8 \u6a21\u62df \u4e00\u4e0b \u5982\u679c \u7ee7\u7eed \u8d4c \u4e0b\u53bb \uff0c \u7532 \u6700\u7ec8 \u8d62 \u7684 \u6982\u7387 \u6709 \u591a\u5c11 \uff1a   \u7b2c   \\ ( 4 \\ )   \u5c40\u7532 \u8d62 \uff0c \u6bd4\u8d5b \u7ed3\u675f   ( 1 )   \u7b2c   \\ ( 4 \\ )   \u5c40\u4e59\u8d62 :   \u7b2c   \\ ( 5 \\ )   \u5c40\u7532 \u8d62 \uff0c \u6bd4\u8d5b \u7ed3\u675f   ( 2 )   \u7b2c   \\ ( 5 \\ )   \u5c40\u4e59\u8d62 \uff0c \u6bd4\u8d5b \u7ed3\u675f   ( 3 )   \u4e8b\u4ef6   \\ ( 1 \\ )   \u53d1\u751f \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( \\ frac { 1 } { 2 } \\ )   \uff0c \u4e8b\u4ef6   \\ ( 2 \\ )   \u3001 \u4e8b\u4ef6   \\ ( 3 \\ )   \u53d1\u751f \u7684 \u6982\u7387 \u5747 \u4e3a \uff1a   \\ ( \\ frac { 1 } { 4 } \\ )   \u3002   \u6240\u4ee5 \u7532 \u6700\u7ec8 \u8d62 \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( p _ \u7532   =   p _ 1   +   p _ 2   =   \\ frac { 3 } { 4 } \\ )   \uff1b \u4e59 \u6700\u7ec8 \u8d62 \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( p _ \u4e59   =   p _ 3   =   \\ frac { 1 } { 4 } \\ )   \u3002   \u770b\u5230 \u8fd9 \u4e86 \u4e4b\u540e \uff0c \u5982\u679c \u4f60 \u662f \u7532 \uff0c \u4f60 \u5c31 \u4e0d\u4e50 \u4e50\u610f \u4e0d\u4e50\u610f \u4e86 \uff0c \u4ec0\u4e48 \u4e3a\u4ec0\u4e48 \u6211 \u53ea\u80fd \u62ff   \\ ( \\ frac { 2 } { 3 } \\ )   \uff0c \u6709\u79cd \u7ee7\u7eed \u6bd4 \u4e0b\u53bb \u554a \uff0c \u6211\u80fd \u8d62 \u7684 \u6982\u7387 \u9ad8 \u8fbe   \\ ( \\ frac { 3 } { 4 } \\ )   \u5462 \uff01   \u4e5f \u786e\u5b9e \uff0c \u5408\u7406 \u7684 \u5206\u914d \u65b9\u6848 \u5e94\u8be5 \uff1a \u7532 \u62ff   \\ ( \\ frac { 3 } { 4 } \\ )   \uff0c \u4e59 \u62ff   \\ ( \\ frac { 1 } { 4 } \\ )   \u3002","title":"\u8d4c\u5c40 \u4e2d\u65ad"},{"location":"label/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/%E8%B5%8C%E5%B1%80%E4%B8%AD%E6%96%AD/#_1","text":"\u9898\u76ee   \u7532 \u3001 \u4e59\u4e24\u4eba \u8d4c\u6280 \u76f8\u540c \uff0c \u5404\u51fa \u8d4c\u6ce8   \\ ( 500 \\ )   \u5143 \u3002   \u7ea6\u5b9a \uff1a \u8c01 \u5148\u80dc \u4e09\u5c40 \uff0c \u8c01 \u5c31 \u62ff\u8d70 \u5168\u90e8 \u7684   \\ ( 1000 \\ )   \u5143 \u3002   \u73b0\u5df2 \u8d4c \u4e86   \\ ( 3 \\ )   \u5c40 \uff0c \u7532\u4e8c\u80dc \u4e00\u8d1f \uff0c \u56e0\u6545 \u8981 \u4e2d\u6b62 \u8d4c\u535a \uff0c \u95ee \u8fd9   \\ ( 1000 \\ )   \u5143\u8981 \u5982\u4f55 \u5206 \uff0c \u624d \u7b97 \u516c\u5e73 \uff1f   \u5047\u8bbe \u6211\u4eec   \\ ( 1 : 1 \\ )   \u5e73\u5206 \uff0c \u7532\u4e59 \u5404 \u62ff   \\ ( 500 \\ )   \u5143 \uff0c \u90a3\u7532 \u8d62 \u4e86   \\ ( 2 \\ )   \u5c40 \u8fd8\u6709 \u4ec0\u4e48 \u4f18\u52bf \u53ef\u8a00 \uff1f \u4f46\u662f \u4e59 \u80af\u5b9a   \" \u6cbe\u6cbe\u81ea\u559c \" \u3002   \u82e5 \u6211\u4eec \u6309\u7167 \u6bd4\u5206   \\ ( 2   :   1 \\ )   \u5206 \uff0c \u7532 \u62ff   \\ ( \\ frac { 1000   \\ times   2 } { 3 } \\ )   \uff0c \u4e59 \u62ff   \\ ( \\ frac { 1000   \\ times   1 } { 3 } \\ )   \uff0c \u4f60 \u89c9\u5f97 \u516c\u5e73 \u5417 \uff1f \u770b\u4f3c \u516c\u5e73   \u6211\u4eec \u4e0d\u59a8 \u6a21\u62df \u4e00\u4e0b \u5982\u679c \u7ee7\u7eed \u8d4c \u4e0b\u53bb \uff0c \u7532 \u6700\u7ec8 \u8d62 \u7684 \u6982\u7387 \u6709 \u591a\u5c11 \uff1a   \u7b2c   \\ ( 4 \\ )   \u5c40\u7532 \u8d62 \uff0c \u6bd4\u8d5b \u7ed3\u675f   ( 1 )   \u7b2c   \\ ( 4 \\ )   \u5c40\u4e59\u8d62 :   \u7b2c   \\ ( 5 \\ )   \u5c40\u7532 \u8d62 \uff0c \u6bd4\u8d5b \u7ed3\u675f   ( 2 )   \u7b2c   \\ ( 5 \\ )   \u5c40\u4e59\u8d62 \uff0c \u6bd4\u8d5b \u7ed3\u675f   ( 3 )   \u4e8b\u4ef6   \\ ( 1 \\ )   \u53d1\u751f \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( \\ frac { 1 } { 2 } \\ )   \uff0c \u4e8b\u4ef6   \\ ( 2 \\ )   \u3001 \u4e8b\u4ef6   \\ ( 3 \\ )   \u53d1\u751f \u7684 \u6982\u7387 \u5747 \u4e3a \uff1a   \\ ( \\ frac { 1 } { 4 } \\ )   \u3002   \u6240\u4ee5 \u7532 \u6700\u7ec8 \u8d62 \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( p _ \u7532   =   p _ 1   +   p _ 2   =   \\ frac { 3 } { 4 } \\ )   \uff1b \u4e59 \u6700\u7ec8 \u8d62 \u7684 \u6982\u7387 \u4e3a \uff1a   \\ ( p _ \u4e59   =   p _ 3   =   \\ frac { 1 } { 4 } \\ )   \u3002   \u770b\u5230 \u8fd9 \u4e86 \u4e4b\u540e \uff0c \u5982\u679c \u4f60 \u662f \u7532 \uff0c \u4f60 \u5c31 \u4e0d\u4e50 \u4e50\u610f \u4e0d\u4e50\u610f \u4e86 \uff0c \u4ec0\u4e48 \u4e3a\u4ec0\u4e48 \u6211 \u53ea\u80fd \u62ff   \\ ( \\ frac { 2 } { 3 } \\ )   \uff0c \u6709\u79cd \u7ee7\u7eed \u6bd4 \u4e0b\u53bb \u554a \uff0c \u6211\u80fd \u8d62 \u7684 \u6982\u7387 \u9ad8 \u8fbe   \\ ( \\ frac { 3 } { 4 } \\ )   \u5462 \uff01   \u4e5f \u786e\u5b9e \uff0c \u5408\u7406 \u7684 \u5206\u914d \u65b9\u6848 \u5e94\u8be5 \uff1a \u7532 \u62ff   \\ ( \\ frac { 3 } { 4 } \\ )   \uff0c \u4e59 \u62ff   \\ ( \\ frac { 1 } { 4 } \\ )   \u3002","title":"\u8d4c\u5c40 \u4e2d\u65ad"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E5%9B%BE%E8%AE%BA/","text":"","title":"Index"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E5%9B%BE%E8%AE%BA/dijkstra%E7%AE%97%E6%B3%95%E6%AD%A3%E6%9D%83%E8%B7%AF%E5%BE%84%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF/","text":"dijkstra   \u7b97\u6cd5 \u6b63\u6743 \u8def\u5f84 \u6c42 \u6700 \u77ed\u8def   Question   \u7ed9\u5b9a \u4e00\u4e2a \u65e0\u5411 \u56fe \uff0c \u9876\u70b9 \u6570\u4e3a   \\ ( n \\ )   \uff0c \u8fb9\u6570 \u4e3a   \\ ( m \\ )   \uff0c \u5e76\u4e14 \u9876\u70b9 \u7f16\u53f7 \u4e3a   \\ ( 1   \\ sim   n \\ )   \u3002   \u8be5 \u65e0 \u5411 \u56fe \u53ef\u80fd \u6709\u73af \u3001 \u91cd\u8fb9 \u3001 \u81ea\u73af \u3002   \u8f93\u5165 \u683c\u5f0f   \u7b2c\u4e00 \u4e00\u884c \u7b2c\u4e00\u884c \u8f93\u5165 \u4e24\u4e2a \u6574\u6570   \\ ( n ,   m \\ )   \u5206\u522b \u4ee3\u8868 \u56fe \u7684 \u9876\u70b9 \u6570\u548c\u8fb9 \u6570 \u3002   \u63a5\u4e0b \u4e0b\u6765 \u63a5\u4e0b\u6765 \u7684   \\ ( m \\ )   \u884c \uff0c \u6bcf\u884c   \\ ( 3 \\ )   \u4e2a \u6574\u6570   \\ ( a ,   b ,   dis \\ )   \uff0c \u5206\u522b \u4ee3\u8868 \u4ece \u7f16\u53f7 \u4e3a   \\ ( a \\ )   \u7684 \u9876\u70b9 \u8ddd\u79bb \u7f16\u53f7 \u4e3a   \\ ( b \\ )   \u7684 \u9876\u70b9 \u7684 \u8ddd\u79bb \u3002   \u8f93\u51fa \u683c\u5f0f   \u8f93\u51fa \u4e00\u4e2a \u6574\u6570 \u4ee3\u8868 \u4ece \u8d77\u70b9   \\ ( 1 \\ )   \u5230\u8fbe \u7ec8\u70b9   \\ ( n \\ )   \u7684 \u6700 \u77ed \u8def\u5f84 \uff0c \u5982\u679c \u65e0\u6cd5 \u5230\u8fbe \u7ec8\u70b9   \\ ( n \\ )   \uff0c \u5c31 \u8f93\u51fa   \\ ( - 1 \\ )   \u3002   \u4ee3\u7801 \u8bbe\u8ba1 \u601d\u8def   \u4ece \u8d77\u70b9   \\ ( s \\ )   \u51fa\u53d1 \uff0c \u5c06 \u8d77\u70b9   \\ ( s \\ )   \u7684 \u6240\u6709 \u90bb\u63a5 \u70b9 \u90fd \u4e22\u5165 \u96c6\u5408   \\ ( A \\ )   \u4e2d \uff1b   \u7136\u540e \u83b7\u53d6 \u96c6\u5408   \\ ( A \\ )   \u8ddd\u79bb \u4e2d\u8ddd\u79bb \u8d77\u70b9   \\ ( s \\ )   \u6700\u8fd1 \u7684 \u70b9   \\ ( v \\ )   \uff0c \u5e76 \u5c06   \\ ( v \\ )   \u7684 \u6240\u6709 \u90bb\u63a5 \u70b9 \u4e5f \u4e22\u5165 \u96c6\u5408   \\ ( A \\ )   \u4e2d \uff0c \u7136\u540e \u5c06   \\ ( v \\ )   \u4ece \u96c6\u5408   \\ ( A \\ )   \u4e2d \u629b\u5f03 \u5e76\u4e14 \u4e4b\u540e \u7684 \u6240\u6709 \u6b65\u9aa4 \u90fd \u4e0d\u80fd \u518d \u4f7f\u7528 \u9876\u70b9   \\ ( v \\ )   \uff1b   \u91cd\u590d \u4e0a\u8ff0 \u7b2c\u4e8c \u4e8c\u6b65 \u7b2c\u4e8c\u6b65 \u64cd\u4f5c \uff0c \u76f4\u5230 \u96c6\u5408   \\ ( A \\ )   \u4e3a\u7a7a \u3002   \u5728 \u4e0d\u65ad \u5c06 \u65b0 \u7684 \u9876\u70b9 \u653e\u5165 \u96c6\u5408   \\ ( A \\ )   \u7684 \u8fc7\u7a0b \u4e2d \uff0c \u8981 \u4e0d\u65ad \u7684 \u8bb0\u5f55 \u4e0b \u5f53\u524d \u9876\u70b9 \u8ddd\u79bb \u8d77\u70b9   \\ ( s \\ )   \u7684 \u6700\u5c0f \u6700\u5c0f\u503c   \\ ( dijkstra \\ )   \u7b97\u6cd5 \u6c42 \u7684 \u662f \u4e00\u4e2a \u8fde\u901a \u5206\u91cf \u5185 \u6240\u6709 \u7684 \u9876\u70b9 \u8ddd\u79bb \u8d77\u70b9   \\ ( s \\ )   \u7684 \u6700 \u77ed \u8def\u5f84 \uff0c \u672c\u8d28 \u4e0a\u8981 \u5c06 \u5176 \u60f3\u8c61 \u6210\u662f \u4e00\u4e2a   \u6269\u6563   \u7684 \u8fc7\u7a0b \uff0c \u4e5f \u53ef\u4ee5 \u73b0\u8c61 \u6210\u662f \u4e00\u4e2a \u7279\u6b8a \u7248\u672c \u7684 \u57fa\u4e8e \u300c \u4f18\u5148 \u961f\u5217 \u300d \u5b9e\u73b0 \u7684   BFS   \u3002   \\ ( dijkstra \\ )   \u6bcf \u6269\u6563 \u4e00\u6b21 \uff0c \u5c31 \u80fd\u6c42 \u51fa \u4e00\u4e2a \u4e00\u4e2a\u70b9 \u5230\u8fbe \u8d77\u70b9 \u7684 \u6700 \u77ed \u8def\u5f84 \uff0c \u662f \u4e00\u4e2a \u8d2a\u5fc3 \u7b56\u7565 \uff0c \u4f8b\u5982 \u4e0b\u56fe \uff1a   \u4ece \u8d77\u70b9   \\ ( 1 \\ )   \u51fa\u53d1 \u80fd \u6269\u6563 \u7684 \u8def\u5f84 \u6709 \uff1a   [ 1 ,   2 ,   11 ] \u3001 [ 1 ,   3 ,   10 ] \u3001 [ 1 ,   4 ,   19 ]   \u6211\u4eec \u80fd \u786e\u5b9a \u7684 \u51fa \u6700 \u77ed \u8def\u5f84 \u7684 \u70b9 \u662f   \\ ( 3 \\ )   \uff0c \u4ece \u8d77\u70b9 \u5230\u8fbe   \\ ( 3 \\ )   \u53f7\u70b9 \u7684 \u6700 \u77ed \u8def\u5f84 \u662f   \\ ( 10 \\ )   \uff1b \u4f60 \u53ef\u4ee5 \u7528 \u53cd\u8bc1 \u8bc1\u6cd5 \u53cd\u8bc1\u6cd5 \uff0c \u5047\u8bbe \u8fd8\u6709 \u4e00\u6761 \u8def\u5f84 \u4ece \u8d77\u70b9 \u51fa\u53d1 \u5230\u8fbe   \\ ( 3 \\ )   \u7684 \u8def\u5f84 \u957f\u5ea6 \u662f \u5c0f\u4e8e   \\ ( 10 \\ )   \u7684 \uff0c \u4e8b\u5b9e \u4e8b\u5b9e\u4e0a \uff0c \u4ece   \\ ( 1 \\ )   \u51fa\u53d1 \u7684\u8bdd \u80af\u5b9a \u5f97 \u7ed5\u8fc7 \u8fb9   [ 1 ,   2 ,   11 ] \u3001 [ 1 ,   4 ,   19 ] \uff0c \u5e76\u4e14 \u7531\u4e8e \u8def\u5f84 \u90fd \u662f \u6b63\u6570 \uff0c \u6240\u4ee5 \u4e00\u5b9a \u4f1a \u6bd4 \u8def\u5f84   [ 1 ,   3 ,   10 ]   \u66f4\u957f \uff0c \u56e0\u6b64   [ 1 ,   3 ,   10 ]   \u662f\u4ece   \\ ( 1 \\ )   \u51fa\u53d1 \u5230\u8fbe   \\ ( 3 \\ )   \u7684 \u6700 \u77ed \u8def\u5f84 \u3002   \u8d2a\u5fc3 \u7b56\u7565 \u5c31\u662f \u6309\u7167 \u8fd9\u79cd \u5c0f \u60f3\u6cd5 \u4e0d\u65ad \u5ef6\u4f38 \u7684 \uff0c \u6211\u4eec \u518d \u8003\u8651 \u4e0b \u4e00\u4e2a \u53ef \u786e\u5b9a \u6700\u77ed \u8def\u5f84 \u7684 \u70b9 \u662f \u54ea\u4e2a \uff1f   \u5148 \u5217\u51fa \u53ef \u6269\u6563 \u7684 \u8def\u5f84 \u6709 \u54ea\u4e9b :   [ 1 ,   2 ,   11 ] \u3001 [ 1 ,   4 ,   19 ] \u3001 [ 1 ,   3 ,   2 ,   19 ] \u3001 [ 1 ,   3 ,   5 ,   18 ] \u3001 [ 1 ,   3 ,   6 ,   27 ] \u3001 [ 1 ,   3 ,   4 ,   25 ]   \u6211\u4eec \u6392\u4e2a\u5e8f \u5427 \uff0c \u6709\u70b9 \u4e71\u8e4b \u8e4b \u7684   [ 1 ,   2 ,   11 ] \u3001 [ 1 ,   3 ,   5 ,   18 ] \u3001 [ 1 ,   4 ,   19 ] \u3001 [ 1 ,   3 ,   2 ,   19 ] \u3001 [ 1 ,   3 ,   4 ,   25 ] \u3001 [ 1 ,   3 ,   6 ,   27 ]   \u6211\u4eec \u80fd \u786e\u5b9a \u7684 \u4e0b \u4e00\u4e2a \u4e00\u4e2a\u70b9 \u662f   \\ ( 2 \\ )   \u5230\u8fbe \u8d77\u70b9 \u7684 \u8ddd\u79bb \u662f   \\ ( 11 \\ )   \uff0c \u4f60 \u53ef\u4ee5 \u5047\u8bbe \uff1a \u5982\u82e5 \u4e0d\u7136 \u82e5\u4e0d\u7136 \u5982\u82e5\u4e0d\u7136 \uff0c \u5fc5\u5b9a \u8981 \u7ed5\u8fc7 \u5269\u4e0b \u7684 \u5176\u4e2d \u67d0\u6761 \u8def\u5f84   [ 1 ,   3 ,   5 ,   18 ] \u3001 [ 1 ,   4 ,   19 ] \u3001 [ 1 ,   3 ,   2 ,   19 ] \u3001 [ 1 ,   3 ,   4 ,   25 ] \u3001 [ 1 ,   3 ,   6 ,   27 ]   \u624d\u80fd \u518d\u6b21 \u518d\u6b21 \u56de\u5230 \u70b9   \\ ( 2 \\ )   \uff0c \u7531\u4e8e \u8def\u5f84 \u90fd \u4e3a \u6b63\u6570 \uff0c \u6240\u4ee5 \u76f8\u52a0 \u4e4b\u540e \u4e00\u5b9a \u66f4\u5927 \u4e86 \uff0c \u4e0d \u52a0 \u4e4b\u524d \u5355\u5355 \u5355\u5355\u662f \u7ed5\u8fc7 \u8fd9\u4e9b \u5269\u4e0b \u7684 \u8def\u5f84 \u90fd \u5df2\u7ecf \u6bd4   [ 1 ,   2 ,   11 ]   \u5927 \u4e86 \uff0c \u518d \u52a0\u4e0a \u4e00\u4e9b \u6b63\u6570 \uff0c \u5c82 \u4e0d\u662f \u66f4\u5927 \uff1f \u5bf9 \u5427 \u3002   \u8d2a\u5fc3 \u7684 \u7b56\u7565 \u5c31\u662f \u8fd9\u6837 \uff0c \u7b80\u5355 \u7528 \u4f8b\u5b50 \u63cf\u8ff0 \u4e00\u4e0b \u3002   dijstra   \u6c42 \u6700 \u77ed\u8def \u662f \u9002\u7528 \u4e8e \u6709 \u73af\u56fe \u7684 \u3002   \u501f\u52a9 \u4f18\u5148 \u961f\u5217 \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u662f   \\ ( mlogm \\ )   \uff0c   \\ ( m \\ )   \u662f \u8fb9 \u7684 \u6570\u91cf \uff0c \u4e00\u822c \u90fd \u5927\u4e8e \u9876\u70b9 \u6570   \\ ( n \\ )   \u3002   \u4ee3\u7801 \u53c2\u8003   int   n   ,   m   ;   int   g   [   N   ] ,   e   [   N   ] ,   d   [   N   ] ,   ne   [   N   ] ,   cnt   ;   int   dis   [   N   ] ,   vis   [   N   ] ;   void   add   (   int   a   ,   int   b   ,   int   c   )   {   cnt   ++   ;   e   [   cnt   ]   =   b   ;   d   [   cnt   ]   =   c   ;   ne   [   cnt   ]   =   g   [   a   ] ;   g   [   a   ]   =   cnt   ;   }   struct   Node   {   int   u   ,   w   ;   Node   (   int   a   =   0   ,   int   b   =   0   )   :   u   (   a   ) ,   w   (   b   )   { }   bool   operator   <   (   const   Node   &   t   )   const   {   return   w   >   t   .   w   ;   }   } ;   typedef   priority _ queue   <   Node   >   pqn   ;   / /   \u6c42   u   \u5230   v   \u7684 \u6700 \u77ed \u8def\u5f84 \u957f\u5ea6   int   dijkstra   (   int   u   ,   int   v   )   {   pqn   qu   ;   memset   (   dis   ,   0b01111111   ,   sizeof   dis   ) ;   qu   .   push   ( {   u   ,   dis   [   u   ]   =   0   } ) ;   while   (   qu   .   size   ( ) )   {   Node   t   =   qu   .   top   ( ) ;   qu   .   pop   ( ) ;   if   (   vis   [   t   .   u   ] )   continue   ;   vis   [   t   .   u   ]   =   1   ;   for   (   int   x   =   g   [   t   .   u   ] ;   x   ;   x   =   ne   [   x   ] )   if   (   dis   [   e   [   x   ] ]   >   t   .   w   +   d   [   x   ] )   qu   .   push   ( {   e   [   x   ] ,   dis   [   e   [   x   ] ]   =   t   .   w   +   d   [   x   ] } ) ;   }   / /   0b01111111   =   0x7f   return   dis   [   v   ]   = =   0x7f7f7f7f   ?   - 1   :   dis   [   v   ] ;   }   void   solve   ( )   {   oier   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   cin   > >   n   > >   m   ;   for   (   int   i   =   1   ;   i   < =   m   ;   i   ++   )   {   int   a   ,   b   ,   c   ;   cin   > >   a   > >   b   > >   c   ;   add   (   a   ,   b   ,   c   ) ;   }   cout   < <   dijkstra   (   1   ,   n   )   < <   endl   ;   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   }   Code   # include   < iostream >   # include   < iomanip >   # include   < algorithm >   # include   < cstdio >   # include   < cstdlib >   # include   < cstring >   # include   < string >   # include   < vector >   # include   < queue >   # include   < deque >   # include   < stack >   # include   < map >   # include   < set >   # include   < unordered _ map >   # include   < unordered _ set >   using   namespace   std   ;   # define   endl   ' \\ n '   # define   pique   priority _ queue   # define   oier   \\   ios _ base : : sync _ with _ stdio ( false ) ; \\   cin . tie ( nullptr ) ;   cout . tie ( nullptr ) ;   # define   cf   int   t ;   cin   > >   t ;   while   ( t   -- )   # define   upfor ( i ,   l ,   r )   for   ( i   =   ( l ) ;   i   < =   ( r ) ;   i   ++ )   # define   downfor ( i ,   l ,   r )   for   ( i   =   ( r ) ;   i   > =   ( l ) ;   i   -- )   / /   # define   int   long   long   typedef   long   long   LL   ;   typedef   long   double   LD   ;   / / typedef   __ int128 _ t   int128 ;   const   int   inf   =   ~   (   1   < <   31   ) ;   / /   \u6b63 \u65e0\u7a77   const   int   ninf   =   (   1   < <   31   ) ;   / /   \u8d1f \u65e0\u7a77   const   LL   infll   =   ~   (   1l   l   < <   63   ) ;   / /   \u6b63 \u65e0\u7a77   const   LL   ninfll   =   (   1l   l   < <   63   ) ;   / /   \u8d1f \u65e0\u7a77   inline   LL   rll   ( )   {   oier   LL   x   ;   cin   > >   x   ;   return   x   ;   }   inline   int   rint   ( )   {   oier   int   x   ;   cin   > >   x   ;   return   x   ;   }   / *   0b00111111   =   0x3f   0b01111111   =   0x7f   0b11111111   =   - 1   * /   const   int   N   =   int   (   1e7   +   10   ) ;   / /   \u7531\u4e8e \u60c5\u62a5 \u4e0d\u8db3 \uff0c \u53ea\u80fd \u900f\u8fc7 \u300c \u8bd5\u884c \u9519\u8bef \u300d \u6765 \u83b7\u53d6 \u3002   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   int   n   ,   m   ;   int   g   [   N   ] ,   e   [   N   ] ,   ne   [   N   ] ,   d   [   N   ] ,   cnt   ;   int   dis   [   N   ] ,   vis   [   N   ] ;   void   add   (   int   a   ,   int   b   ,   int   c   )   {   cnt   ++   ;   e   [   cnt   ]   =   b   ;   d   [   cnt   ]   =   c   ;   ne   [   cnt   ]   =   g   [   a   ] ;   g   [   a   ]   =   cnt   ;   }   struct   Node   {   int   u   ,   w   ;   Node   (   int   a   =   0   ,   int   b   =   0   )   {   u   =   a   ,   w   =   b   ;   }   / /   \u5934 \u8282\u70b9 \u4e0e \u5176\u4ed6 \u6bd4\u8f83 \u5c0f\u4e8e \u5c0f\u4e8e\u53f7 \u7684 \u5185\u5bb9   bool   operator   <   (   const   Node   &   point   )   const   {   return   w   >   point   .   w   ;   }   } ;   / /   \u67e5\u627e   u   \u5230   v   \u7684 \u6700 \u77ed \u8def\u5f84   int   dijkstra   (   int   u   ,   int   v   )   {   priority _ queue   <   Node   >   qu   ;   memset   (   dis   ,   0x7f   ,   sizeof   dis   ) ;   qu   .   push   ( {   u   ,   0   } ) ;   dis   [   u   ]   =   0   ;   while   (   qu   .   size   ( ) )   {   Node   t   =   qu   .   top   ( ) ;   qu   .   pop   ( ) ;   if   (   vis   [   t   .   u   ] )   continue   ;   vis   [   t   .   u   ]   =   1   ;   for   (   int   x   =   g   [   t   .   u   ] ;   x   ;   x   =   ne   [   x   ] )   if   (   dis   [   e   [   x   ] ]   >   t   .   w   +   d   [   x   ] )   qu   .   push   ( {   e   [   x   ] ,   dis   [   e   [   x   ] ]   =   t   .   w   +   d   [   x   ] } ) ;   }   return   dis   [   v   ]   = =   0x7f7f7f7f   ?   - 1   :   dis   [   v   ] ;   }   void   solve   ( )   {   oier   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   cin   > >   n   > >   m   ;   for   (   int   i   =   1   ;   i   < =   m   ;   i   ++   )   {   int   a   ,   b   ,   c   ;   cin   > >   a   > >   b   > >   c   ;   add   (   a   ,   b   ,   c   ) ;   add   (   a   ,   b   ,   c   ) ;   }   cout   < <   dijkstra   (   1   ,   n   )   < <   endl   ;   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   }   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   / * *   *   _ ooOoo _   *   o8888888o   *   88 \"   .   \" 88   *   ( |   -_-   | )   *   O \\   =   / O   *   ____ / ` --- ' \\ ____   *   . '   \\ \\ |   | / /   ` .   *   /   \\ \\ | | |   :   | | | / /   \\   *   /   _ | | | | |   - : -   | | | | | -   \\   *   |   |   \\ \\ \\   -   / / /   |   |   *   |   \\ _ |   ' ' \\ --- / ' '   |   |   *   \\   .- \\ __   ` - `   ___ / -.   /   *   ___ ` .   . '   / --.-- \\   ` .   .   __   *   . \" \"   ' <   ` .___ \\ _ < | > _ / ___. '   > ' \" \" .   *   |   |   :   ` -   \\ ` . ; ` \\   _   / ` ; . ` /   -   `   :   |   |   *   \\   \\   ` -.   \\ _   __ \\   / __   _ /   .- `   /   /   *   = = = = = = ` -.____ ` -.___ \\ _____ / ___.- ` ____.- ' = = = = = =   *   ` = --- = '   *   ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^   *   \u4f5b\u7956 \u4fdd\u4f51   \u6c38\u65e0 BUG   *   \u4f5b \u66f0 :   *   \u5199\u5b57 \u5199\u5b57\u697c \u91cc \u5199\u5b57 \u5199\u5b57\u95f4 \uff0c \u5199\u5b57 \u5199\u5b57\u95f4 \u91cc \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1b   *   \u7a0b\u5e8f \u4eba\u5458 \u5199 \u7a0b\u5e8f \uff0c \u53c8 \u62ff \u7a0b\u5e8f \u6362 \u9152\u94b1 \u3002   *   \u9152\u9192 \u53ea \u5728 \u7f51\u4e0a \u5750 \uff0c \u9152\u9189 \u8fd8\u6765 \u7f51\u4e0b \u7f51\u4e0b\u7720 \uff1b   *   \u9152\u9189 \u9152\u9192 \u65e5\u590d \u65e5 \uff0c \u7f51\u4e0a \u4e0a\u7f51 \u7f51\u4e0a\u7f51 \u4e0b\u5e74 \u590d\u5e74 \u3002   *   \u4f46\u613f \u8001\u6b7b \u7535\u8111 \u95f4 \uff0c \u4e0d\u613f \u97a0\u8eac \u8001\u677f \u524d \uff1b   *   \u5954\u9a70 \u5b9d\u9a6c \u8d35\u8005\u8da3 \uff0c \u516c\u4ea4 \u81ea\u884c \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \u3002   *   \u522b\u4eba \u7b11 \u6211 \u5fd2 \u75af\u766b \uff0c \u6211 \u7b11 \u81ea\u5df1 \u547d\u592a\u8d31 \uff1b   *   \u4e0d\u89c1 \u6ee1\u8857 \u6f02\u4eae \u59b9 \uff0c \u54ea\u4e2a \u5f52\u5f97 \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1f   * * /   / *   = = = = = = = = = = = = = = = = = = = = = = = = \u4f5b\u7956 \u4fdd\u4f51 ,   \u6c38\u65e0 bug = = = = = = = = = = = = = = = = = = = = = = = =   * /   int   main   ( )   {   / /   oier   cf   solve ( ) ;   return   0 ;   oier   solve   ( ) ;   return   0   ;   }","title":"dijkstra   \u7b97\u6cd5 \u6b63\u6743 \u8def\u5f84 \u6c42 \u6700 \u77ed\u8def"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E5%9B%BE%E8%AE%BA/dijkstra%E7%AE%97%E6%B3%95%E6%AD%A3%E6%9D%83%E8%B7%AF%E5%BE%84%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF/#dijkstra","text":"Question   \u7ed9\u5b9a \u4e00\u4e2a \u65e0\u5411 \u56fe \uff0c \u9876\u70b9 \u6570\u4e3a   \\ ( n \\ )   \uff0c \u8fb9\u6570 \u4e3a   \\ ( m \\ )   \uff0c \u5e76\u4e14 \u9876\u70b9 \u7f16\u53f7 \u4e3a   \\ ( 1   \\ sim   n \\ )   \u3002   \u8be5 \u65e0 \u5411 \u56fe \u53ef\u80fd \u6709\u73af \u3001 \u91cd\u8fb9 \u3001 \u81ea\u73af \u3002   \u8f93\u5165 \u683c\u5f0f   \u7b2c\u4e00 \u4e00\u884c \u7b2c\u4e00\u884c \u8f93\u5165 \u4e24\u4e2a \u6574\u6570   \\ ( n ,   m \\ )   \u5206\u522b \u4ee3\u8868 \u56fe \u7684 \u9876\u70b9 \u6570\u548c\u8fb9 \u6570 \u3002   \u63a5\u4e0b \u4e0b\u6765 \u63a5\u4e0b\u6765 \u7684   \\ ( m \\ )   \u884c \uff0c \u6bcf\u884c   \\ ( 3 \\ )   \u4e2a \u6574\u6570   \\ ( a ,   b ,   dis \\ )   \uff0c \u5206\u522b \u4ee3\u8868 \u4ece \u7f16\u53f7 \u4e3a   \\ ( a \\ )   \u7684 \u9876\u70b9 \u8ddd\u79bb \u7f16\u53f7 \u4e3a   \\ ( b \\ )   \u7684 \u9876\u70b9 \u7684 \u8ddd\u79bb \u3002   \u8f93\u51fa \u683c\u5f0f   \u8f93\u51fa \u4e00\u4e2a \u6574\u6570 \u4ee3\u8868 \u4ece \u8d77\u70b9   \\ ( 1 \\ )   \u5230\u8fbe \u7ec8\u70b9   \\ ( n \\ )   \u7684 \u6700 \u77ed \u8def\u5f84 \uff0c \u5982\u679c \u65e0\u6cd5 \u5230\u8fbe \u7ec8\u70b9   \\ ( n \\ )   \uff0c \u5c31 \u8f93\u51fa   \\ ( - 1 \\ )   \u3002","title":"dijkstra   \u7b97\u6cd5 \u6b63\u6743 \u8def\u5f84 \u6c42 \u6700 \u77ed\u8def"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E5%9B%BE%E8%AE%BA/dijkstra%E7%AE%97%E6%B3%95%E6%AD%A3%E6%9D%83%E8%B7%AF%E5%BE%84%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF/#_1","text":"\u4ece \u8d77\u70b9   \\ ( s \\ )   \u51fa\u53d1 \uff0c \u5c06 \u8d77\u70b9   \\ ( s \\ )   \u7684 \u6240\u6709 \u90bb\u63a5 \u70b9 \u90fd \u4e22\u5165 \u96c6\u5408   \\ ( A \\ )   \u4e2d \uff1b   \u7136\u540e \u83b7\u53d6 \u96c6\u5408   \\ ( A \\ )   \u8ddd\u79bb \u4e2d\u8ddd\u79bb \u8d77\u70b9   \\ ( s \\ )   \u6700\u8fd1 \u7684 \u70b9   \\ ( v \\ )   \uff0c \u5e76 \u5c06   \\ ( v \\ )   \u7684 \u6240\u6709 \u90bb\u63a5 \u70b9 \u4e5f \u4e22\u5165 \u96c6\u5408   \\ ( A \\ )   \u4e2d \uff0c \u7136\u540e \u5c06   \\ ( v \\ )   \u4ece \u96c6\u5408   \\ ( A \\ )   \u4e2d \u629b\u5f03 \u5e76\u4e14 \u4e4b\u540e \u7684 \u6240\u6709 \u6b65\u9aa4 \u90fd \u4e0d\u80fd \u518d \u4f7f\u7528 \u9876\u70b9   \\ ( v \\ )   \uff1b   \u91cd\u590d \u4e0a\u8ff0 \u7b2c\u4e8c \u4e8c\u6b65 \u7b2c\u4e8c\u6b65 \u64cd\u4f5c \uff0c \u76f4\u5230 \u96c6\u5408   \\ ( A \\ )   \u4e3a\u7a7a \u3002   \u5728 \u4e0d\u65ad \u5c06 \u65b0 \u7684 \u9876\u70b9 \u653e\u5165 \u96c6\u5408   \\ ( A \\ )   \u7684 \u8fc7\u7a0b \u4e2d \uff0c \u8981 \u4e0d\u65ad \u7684 \u8bb0\u5f55 \u4e0b \u5f53\u524d \u9876\u70b9 \u8ddd\u79bb \u8d77\u70b9   \\ ( s \\ )   \u7684 \u6700\u5c0f \u6700\u5c0f\u503c   \\ ( dijkstra \\ )   \u7b97\u6cd5 \u6c42 \u7684 \u662f \u4e00\u4e2a \u8fde\u901a \u5206\u91cf \u5185 \u6240\u6709 \u7684 \u9876\u70b9 \u8ddd\u79bb \u8d77\u70b9   \\ ( s \\ )   \u7684 \u6700 \u77ed \u8def\u5f84 \uff0c \u672c\u8d28 \u4e0a\u8981 \u5c06 \u5176 \u60f3\u8c61 \u6210\u662f \u4e00\u4e2a   \u6269\u6563   \u7684 \u8fc7\u7a0b \uff0c \u4e5f \u53ef\u4ee5 \u73b0\u8c61 \u6210\u662f \u4e00\u4e2a \u7279\u6b8a \u7248\u672c \u7684 \u57fa\u4e8e \u300c \u4f18\u5148 \u961f\u5217 \u300d \u5b9e\u73b0 \u7684   BFS   \u3002   \\ ( dijkstra \\ )   \u6bcf \u6269\u6563 \u4e00\u6b21 \uff0c \u5c31 \u80fd\u6c42 \u51fa \u4e00\u4e2a \u4e00\u4e2a\u70b9 \u5230\u8fbe \u8d77\u70b9 \u7684 \u6700 \u77ed \u8def\u5f84 \uff0c \u662f \u4e00\u4e2a \u8d2a\u5fc3 \u7b56\u7565 \uff0c \u4f8b\u5982 \u4e0b\u56fe \uff1a   \u4ece \u8d77\u70b9   \\ ( 1 \\ )   \u51fa\u53d1 \u80fd \u6269\u6563 \u7684 \u8def\u5f84 \u6709 \uff1a   [ 1 ,   2 ,   11 ] \u3001 [ 1 ,   3 ,   10 ] \u3001 [ 1 ,   4 ,   19 ]   \u6211\u4eec \u80fd \u786e\u5b9a \u7684 \u51fa \u6700 \u77ed \u8def\u5f84 \u7684 \u70b9 \u662f   \\ ( 3 \\ )   \uff0c \u4ece \u8d77\u70b9 \u5230\u8fbe   \\ ( 3 \\ )   \u53f7\u70b9 \u7684 \u6700 \u77ed \u8def\u5f84 \u662f   \\ ( 10 \\ )   \uff1b \u4f60 \u53ef\u4ee5 \u7528 \u53cd\u8bc1 \u8bc1\u6cd5 \u53cd\u8bc1\u6cd5 \uff0c \u5047\u8bbe \u8fd8\u6709 \u4e00\u6761 \u8def\u5f84 \u4ece \u8d77\u70b9 \u51fa\u53d1 \u5230\u8fbe   \\ ( 3 \\ )   \u7684 \u8def\u5f84 \u957f\u5ea6 \u662f \u5c0f\u4e8e   \\ ( 10 \\ )   \u7684 \uff0c \u4e8b\u5b9e \u4e8b\u5b9e\u4e0a \uff0c \u4ece   \\ ( 1 \\ )   \u51fa\u53d1 \u7684\u8bdd \u80af\u5b9a \u5f97 \u7ed5\u8fc7 \u8fb9   [ 1 ,   2 ,   11 ] \u3001 [ 1 ,   4 ,   19 ] \uff0c \u5e76\u4e14 \u7531\u4e8e \u8def\u5f84 \u90fd \u662f \u6b63\u6570 \uff0c \u6240\u4ee5 \u4e00\u5b9a \u4f1a \u6bd4 \u8def\u5f84   [ 1 ,   3 ,   10 ]   \u66f4\u957f \uff0c \u56e0\u6b64   [ 1 ,   3 ,   10 ]   \u662f\u4ece   \\ ( 1 \\ )   \u51fa\u53d1 \u5230\u8fbe   \\ ( 3 \\ )   \u7684 \u6700 \u77ed \u8def\u5f84 \u3002   \u8d2a\u5fc3 \u7b56\u7565 \u5c31\u662f \u6309\u7167 \u8fd9\u79cd \u5c0f \u60f3\u6cd5 \u4e0d\u65ad \u5ef6\u4f38 \u7684 \uff0c \u6211\u4eec \u518d \u8003\u8651 \u4e0b \u4e00\u4e2a \u53ef \u786e\u5b9a \u6700\u77ed \u8def\u5f84 \u7684 \u70b9 \u662f \u54ea\u4e2a \uff1f   \u5148 \u5217\u51fa \u53ef \u6269\u6563 \u7684 \u8def\u5f84 \u6709 \u54ea\u4e9b :   [ 1 ,   2 ,   11 ] \u3001 [ 1 ,   4 ,   19 ] \u3001 [ 1 ,   3 ,   2 ,   19 ] \u3001 [ 1 ,   3 ,   5 ,   18 ] \u3001 [ 1 ,   3 ,   6 ,   27 ] \u3001 [ 1 ,   3 ,   4 ,   25 ]   \u6211\u4eec \u6392\u4e2a\u5e8f \u5427 \uff0c \u6709\u70b9 \u4e71\u8e4b \u8e4b \u7684   [ 1 ,   2 ,   11 ] \u3001 [ 1 ,   3 ,   5 ,   18 ] \u3001 [ 1 ,   4 ,   19 ] \u3001 [ 1 ,   3 ,   2 ,   19 ] \u3001 [ 1 ,   3 ,   4 ,   25 ] \u3001 [ 1 ,   3 ,   6 ,   27 ]   \u6211\u4eec \u80fd \u786e\u5b9a \u7684 \u4e0b \u4e00\u4e2a \u4e00\u4e2a\u70b9 \u662f   \\ ( 2 \\ )   \u5230\u8fbe \u8d77\u70b9 \u7684 \u8ddd\u79bb \u662f   \\ ( 11 \\ )   \uff0c \u4f60 \u53ef\u4ee5 \u5047\u8bbe \uff1a \u5982\u82e5 \u4e0d\u7136 \u82e5\u4e0d\u7136 \u5982\u82e5\u4e0d\u7136 \uff0c \u5fc5\u5b9a \u8981 \u7ed5\u8fc7 \u5269\u4e0b \u7684 \u5176\u4e2d \u67d0\u6761 \u8def\u5f84   [ 1 ,   3 ,   5 ,   18 ] \u3001 [ 1 ,   4 ,   19 ] \u3001 [ 1 ,   3 ,   2 ,   19 ] \u3001 [ 1 ,   3 ,   4 ,   25 ] \u3001 [ 1 ,   3 ,   6 ,   27 ]   \u624d\u80fd \u518d\u6b21 \u518d\u6b21 \u56de\u5230 \u70b9   \\ ( 2 \\ )   \uff0c \u7531\u4e8e \u8def\u5f84 \u90fd \u4e3a \u6b63\u6570 \uff0c \u6240\u4ee5 \u76f8\u52a0 \u4e4b\u540e \u4e00\u5b9a \u66f4\u5927 \u4e86 \uff0c \u4e0d \u52a0 \u4e4b\u524d \u5355\u5355 \u5355\u5355\u662f \u7ed5\u8fc7 \u8fd9\u4e9b \u5269\u4e0b \u7684 \u8def\u5f84 \u90fd \u5df2\u7ecf \u6bd4   [ 1 ,   2 ,   11 ]   \u5927 \u4e86 \uff0c \u518d \u52a0\u4e0a \u4e00\u4e9b \u6b63\u6570 \uff0c \u5c82 \u4e0d\u662f \u66f4\u5927 \uff1f \u5bf9 \u5427 \u3002   \u8d2a\u5fc3 \u7684 \u7b56\u7565 \u5c31\u662f \u8fd9\u6837 \uff0c \u7b80\u5355 \u7528 \u4f8b\u5b50 \u63cf\u8ff0 \u4e00\u4e0b \u3002   dijstra   \u6c42 \u6700 \u77ed\u8def \u662f \u9002\u7528 \u4e8e \u6709 \u73af\u56fe \u7684 \u3002   \u501f\u52a9 \u4f18\u5148 \u961f\u5217 \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u662f   \\ ( mlogm \\ )   \uff0c   \\ ( m \\ )   \u662f \u8fb9 \u7684 \u6570\u91cf \uff0c \u4e00\u822c \u90fd \u5927\u4e8e \u9876\u70b9 \u6570   \\ ( n \\ )   \u3002   \u4ee3\u7801 \u53c2\u8003   int   n   ,   m   ;   int   g   [   N   ] ,   e   [   N   ] ,   d   [   N   ] ,   ne   [   N   ] ,   cnt   ;   int   dis   [   N   ] ,   vis   [   N   ] ;   void   add   (   int   a   ,   int   b   ,   int   c   )   {   cnt   ++   ;   e   [   cnt   ]   =   b   ;   d   [   cnt   ]   =   c   ;   ne   [   cnt   ]   =   g   [   a   ] ;   g   [   a   ]   =   cnt   ;   }   struct   Node   {   int   u   ,   w   ;   Node   (   int   a   =   0   ,   int   b   =   0   )   :   u   (   a   ) ,   w   (   b   )   { }   bool   operator   <   (   const   Node   &   t   )   const   {   return   w   >   t   .   w   ;   }   } ;   typedef   priority _ queue   <   Node   >   pqn   ;   / /   \u6c42   u   \u5230   v   \u7684 \u6700 \u77ed \u8def\u5f84 \u957f\u5ea6   int   dijkstra   (   int   u   ,   int   v   )   {   pqn   qu   ;   memset   (   dis   ,   0b01111111   ,   sizeof   dis   ) ;   qu   .   push   ( {   u   ,   dis   [   u   ]   =   0   } ) ;   while   (   qu   .   size   ( ) )   {   Node   t   =   qu   .   top   ( ) ;   qu   .   pop   ( ) ;   if   (   vis   [   t   .   u   ] )   continue   ;   vis   [   t   .   u   ]   =   1   ;   for   (   int   x   =   g   [   t   .   u   ] ;   x   ;   x   =   ne   [   x   ] )   if   (   dis   [   e   [   x   ] ]   >   t   .   w   +   d   [   x   ] )   qu   .   push   ( {   e   [   x   ] ,   dis   [   e   [   x   ] ]   =   t   .   w   +   d   [   x   ] } ) ;   }   / /   0b01111111   =   0x7f   return   dis   [   v   ]   = =   0x7f7f7f7f   ?   - 1   :   dis   [   v   ] ;   }   void   solve   ( )   {   oier   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   cin   > >   n   > >   m   ;   for   (   int   i   =   1   ;   i   < =   m   ;   i   ++   )   {   int   a   ,   b   ,   c   ;   cin   > >   a   > >   b   > >   c   ;   add   (   a   ,   b   ,   c   ) ;   }   cout   < <   dijkstra   (   1   ,   n   )   < <   endl   ;   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   }   Code   # include   < iostream >   # include   < iomanip >   # include   < algorithm >   # include   < cstdio >   # include   < cstdlib >   # include   < cstring >   # include   < string >   # include   < vector >   # include   < queue >   # include   < deque >   # include   < stack >   # include   < map >   # include   < set >   # include   < unordered _ map >   # include   < unordered _ set >   using   namespace   std   ;   # define   endl   ' \\ n '   # define   pique   priority _ queue   # define   oier   \\   ios _ base : : sync _ with _ stdio ( false ) ; \\   cin . tie ( nullptr ) ;   cout . tie ( nullptr ) ;   # define   cf   int   t ;   cin   > >   t ;   while   ( t   -- )   # define   upfor ( i ,   l ,   r )   for   ( i   =   ( l ) ;   i   < =   ( r ) ;   i   ++ )   # define   downfor ( i ,   l ,   r )   for   ( i   =   ( r ) ;   i   > =   ( l ) ;   i   -- )   / /   # define   int   long   long   typedef   long   long   LL   ;   typedef   long   double   LD   ;   / / typedef   __ int128 _ t   int128 ;   const   int   inf   =   ~   (   1   < <   31   ) ;   / /   \u6b63 \u65e0\u7a77   const   int   ninf   =   (   1   < <   31   ) ;   / /   \u8d1f \u65e0\u7a77   const   LL   infll   =   ~   (   1l   l   < <   63   ) ;   / /   \u6b63 \u65e0\u7a77   const   LL   ninfll   =   (   1l   l   < <   63   ) ;   / /   \u8d1f \u65e0\u7a77   inline   LL   rll   ( )   {   oier   LL   x   ;   cin   > >   x   ;   return   x   ;   }   inline   int   rint   ( )   {   oier   int   x   ;   cin   > >   x   ;   return   x   ;   }   / *   0b00111111   =   0x3f   0b01111111   =   0x7f   0b11111111   =   - 1   * /   const   int   N   =   int   (   1e7   +   10   ) ;   / /   \u7531\u4e8e \u60c5\u62a5 \u4e0d\u8db3 \uff0c \u53ea\u80fd \u900f\u8fc7 \u300c \u8bd5\u884c \u9519\u8bef \u300d \u6765 \u83b7\u53d6 \u3002   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   int   n   ,   m   ;   int   g   [   N   ] ,   e   [   N   ] ,   ne   [   N   ] ,   d   [   N   ] ,   cnt   ;   int   dis   [   N   ] ,   vis   [   N   ] ;   void   add   (   int   a   ,   int   b   ,   int   c   )   {   cnt   ++   ;   e   [   cnt   ]   =   b   ;   d   [   cnt   ]   =   c   ;   ne   [   cnt   ]   =   g   [   a   ] ;   g   [   a   ]   =   cnt   ;   }   struct   Node   {   int   u   ,   w   ;   Node   (   int   a   =   0   ,   int   b   =   0   )   {   u   =   a   ,   w   =   b   ;   }   / /   \u5934 \u8282\u70b9 \u4e0e \u5176\u4ed6 \u6bd4\u8f83 \u5c0f\u4e8e \u5c0f\u4e8e\u53f7 \u7684 \u5185\u5bb9   bool   operator   <   (   const   Node   &   point   )   const   {   return   w   >   point   .   w   ;   }   } ;   / /   \u67e5\u627e   u   \u5230   v   \u7684 \u6700 \u77ed \u8def\u5f84   int   dijkstra   (   int   u   ,   int   v   )   {   priority _ queue   <   Node   >   qu   ;   memset   (   dis   ,   0x7f   ,   sizeof   dis   ) ;   qu   .   push   ( {   u   ,   0   } ) ;   dis   [   u   ]   =   0   ;   while   (   qu   .   size   ( ) )   {   Node   t   =   qu   .   top   ( ) ;   qu   .   pop   ( ) ;   if   (   vis   [   t   .   u   ] )   continue   ;   vis   [   t   .   u   ]   =   1   ;   for   (   int   x   =   g   [   t   .   u   ] ;   x   ;   x   =   ne   [   x   ] )   if   (   dis   [   e   [   x   ] ]   >   t   .   w   +   d   [   x   ] )   qu   .   push   ( {   e   [   x   ] ,   dis   [   e   [   x   ] ]   =   t   .   w   +   d   [   x   ] } ) ;   }   return   dis   [   v   ]   = =   0x7f7f7f7f   ?   - 1   :   dis   [   v   ] ;   }   void   solve   ( )   {   oier   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   cin   > >   n   > >   m   ;   for   (   int   i   =   1   ;   i   < =   m   ;   i   ++   )   {   int   a   ,   b   ,   c   ;   cin   > >   a   > >   b   > >   c   ;   add   (   a   ,   b   ,   c   ) ;   add   (   a   ,   b   ,   c   ) ;   }   cout   < <   dijkstra   (   1   ,   n   )   < <   endl   ;   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   }   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   / * *   *   _ ooOoo _   *   o8888888o   *   88 \"   .   \" 88   *   ( |   -_-   | )   *   O \\   =   / O   *   ____ / ` --- ' \\ ____   *   . '   \\ \\ |   | / /   ` .   *   /   \\ \\ | | |   :   | | | / /   \\   *   /   _ | | | | |   - : -   | | | | | -   \\   *   |   |   \\ \\ \\   -   / / /   |   |   *   |   \\ _ |   ' ' \\ --- / ' '   |   |   *   \\   .- \\ __   ` - `   ___ / -.   /   *   ___ ` .   . '   / --.-- \\   ` .   .   __   *   . \" \"   ' <   ` .___ \\ _ < | > _ / ___. '   > ' \" \" .   *   |   |   :   ` -   \\ ` . ; ` \\   _   / ` ; . ` /   -   `   :   |   |   *   \\   \\   ` -.   \\ _   __ \\   / __   _ /   .- `   /   /   *   = = = = = = ` -.____ ` -.___ \\ _____ / ___.- ` ____.- ' = = = = = =   *   ` = --- = '   *   ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^   *   \u4f5b\u7956 \u4fdd\u4f51   \u6c38\u65e0 BUG   *   \u4f5b \u66f0 :   *   \u5199\u5b57 \u5199\u5b57\u697c \u91cc \u5199\u5b57 \u5199\u5b57\u95f4 \uff0c \u5199\u5b57 \u5199\u5b57\u95f4 \u91cc \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1b   *   \u7a0b\u5e8f \u4eba\u5458 \u5199 \u7a0b\u5e8f \uff0c \u53c8 \u62ff \u7a0b\u5e8f \u6362 \u9152\u94b1 \u3002   *   \u9152\u9192 \u53ea \u5728 \u7f51\u4e0a \u5750 \uff0c \u9152\u9189 \u8fd8\u6765 \u7f51\u4e0b \u7f51\u4e0b\u7720 \uff1b   *   \u9152\u9189 \u9152\u9192 \u65e5\u590d \u65e5 \uff0c \u7f51\u4e0a \u4e0a\u7f51 \u7f51\u4e0a\u7f51 \u4e0b\u5e74 \u590d\u5e74 \u3002   *   \u4f46\u613f \u8001\u6b7b \u7535\u8111 \u95f4 \uff0c \u4e0d\u613f \u97a0\u8eac \u8001\u677f \u524d \uff1b   *   \u5954\u9a70 \u5b9d\u9a6c \u8d35\u8005\u8da3 \uff0c \u516c\u4ea4 \u81ea\u884c \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \u3002   *   \u522b\u4eba \u7b11 \u6211 \u5fd2 \u75af\u766b \uff0c \u6211 \u7b11 \u81ea\u5df1 \u547d\u592a\u8d31 \uff1b   *   \u4e0d\u89c1 \u6ee1\u8857 \u6f02\u4eae \u59b9 \uff0c \u54ea\u4e2a \u5f52\u5f97 \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1f   * * /   / *   = = = = = = = = = = = = = = = = = = = = = = = = \u4f5b\u7956 \u4fdd\u4f51 ,   \u6c38\u65e0 bug = = = = = = = = = = = = = = = = = = = = = = = =   * /   int   main   ( )   {   / /   oier   cf   solve ( ) ;   return   0 ;   oier   solve   ( ) ;   return   0   ;   }","title":"\u4ee3\u7801 \u8bbe\u8ba1 \u601d\u8def"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E5%AD%97%E7%AC%A6%E4%B8%B2/","text":"","title":"Index"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E5%AD%97%E7%AC%A6%E4%B8%B2/kmp/","text":"kmp   Note   int   kmp   (   char   s   [ ] ,   char   c   [ ] )   {   int   n   =   - 1   ,   m   =   - 1   ,   i   ,   j   ;   while   (   s   [   ++   n   ] ) ;   while   (   c   [   ++   m   ] ) ;   vector   <   int   >   ne   (   m   +   1   ,   0   ) ;   i   =   - 1   ,   j   =   0   ,   ne   [   0   ]   =   - 1   ;   while   (   j   <   m   )   {   if   (   i   = =   - 1   | |   c   [   i   ]   = =   c   [   j   ] )   {   i   ++   ,   j   ++   ;   ne   [   j   ]   =   i   ;   }   else   i   =   ne   [   i   ] ;   }   i   =   0   ,   j   =   0   ;   while   (   i   <   n   &&   j   <   m   )   {   if   (   j   = =   - 1   | |   s   [   i   ]   = =   c   [   j   ] )   i   ++   ,   j   ++   ;   else   j   =   ne   [   j   ] ;   }   if   (   j   = =   m   )   return   i   -   j   ;   else   return   - 1   ;   }","title":"kmp"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E5%AD%97%E7%AC%A6%E4%B8%B2/kmp/#kmp","text":"Note   int   kmp   (   char   s   [ ] ,   char   c   [ ] )   {   int   n   =   - 1   ,   m   =   - 1   ,   i   ,   j   ;   while   (   s   [   ++   n   ] ) ;   while   (   c   [   ++   m   ] ) ;   vector   <   int   >   ne   (   m   +   1   ,   0   ) ;   i   =   - 1   ,   j   =   0   ,   ne   [   0   ]   =   - 1   ;   while   (   j   <   m   )   {   if   (   i   = =   - 1   | |   c   [   i   ]   = =   c   [   j   ] )   {   i   ++   ,   j   ++   ;   ne   [   j   ]   =   i   ;   }   else   i   =   ne   [   i   ] ;   }   i   =   0   ,   j   =   0   ;   while   (   i   <   n   &&   j   <   m   )   {   if   (   j   = =   - 1   | |   s   [   i   ]   = =   c   [   j   ] )   i   ++   ,   j   ++   ;   else   j   =   ne   [   j   ] ;   }   if   (   j   = =   m   )   return   i   -   j   ;   else   return   - 1   ;   }","title":"kmp"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%8E%92%E5%BA%8F/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/","text":"\u5f52\u5e76 \u6392\u5e8f   \u5f52\u5e76 \u6392\u5e8f \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u662f   \\ ( O ( nlog ( n ) ) \\ )   \u65f6\u95f4 \u7a33\u5b9a \u3002   \u5f52\u5e76 \u6392\u5e8f \u6a21\u677f   \u5f52\u5e76 \u6392\u5e8f \u6a21\u677f   int   a   [   N   ] ,   b   [   N   ] ,   n   ;   void   merge   (   int   l   ,   int   mid   ,   int   r   )   {   int   i   =   l   ,   j   =   mid   +   1   ,   t   =   0   ;   while   (   i   < =   mid   &&   j   < =   r   )   {   if   (   a   [   i   ]   >   a   [   j   ] )   b   [   t   ++   ]   =   a   [   j   ++   ] ;   else   b   [   t   ++   ]   =   a   [   i   ++   ] ;   }   while   (   i   < =   mid   )   b   [   t   ++   ]   =   a   [   i   ++   ] ;   while   (   j   < =   r   )   b   [   t   ++   ]   =   a   [   j   ++   ] ;   for   (   i   =   0   ;   i   <   t   ;   i   ++   )   a   [   l   +   i   ]   =   b   [   i   ] ;   }   void   msort   (   int   l   ,   int   r   )   {   if   (   l   > =   r   )   return   ;   int   mid   =   (   l   +   r   )   /   2   ;   msort   (   l   ,   mid   ) ;   msort   (   mid   +   1   ,   r   ) ;   merge   (   l   ,   mid   ,   r   ) ;   }   \u5f52\u5e76 \u6392\u5e8f \u6c42 \u9006\u5e8f \u5bf9 \u6a21\u677f   \u5f52\u5e76 \u6392\u5e8f \u6c42 \u9006\u5e8f \u5bf9   LL   a   [   N   ] ,   b   [   N   ] ,   cnt   ;   / /   cnt   \u4ee3\u8868 \u7684 \u662f \u9006\u5e8f \u5bf9 \u7684 \u6570\u91cf   / /   \u5f52\u5e76 \u6392\u5e8f \u7edf\u8ba1 \u9006\u5e8f \u5bf9   void   merge   (   LL   l   ,   LL   mid   ,   LL   r   )   {   LL   i   =   l   ,   j   =   mid   +   1   ,   t   =   0   ;   while   (   i   < =   mid   &&   j   < =   r   )   {   if   (   a   [   i   ]   >   a   [   j   ] )   {   b   [   t   ++   ]   =   a   [   j   ++   ] ;   cnt   + =   mid   -   i   +   1   ;   / /   \u5982\u679c \u5de6 \u533a\u95f4 \u7b2c   i   \u4e2a \u5143\u7d20 \u5927\u4e8e \u53f3 \u533a\u95f4 \u7b2c   j   \u4e2a \u5143\u7d20   / /   \u6309\u7167 \u5f52\u5e76 \u6392\u5e8f \u7684 \u7279\u70b9 \uff0c \u5de6 \u533a\u95f4 \u548c \u53f3 \u533a\u95f4 \u90fd \u5df2\u7ecf \u662f \u5355\u8c03 \u9012\u589e \u4e86 \u7684   / /   \u90a3\u4e48 \u9006\u5e8f \u5bf9 \u7684 \u6570\u91cf \u8981 \u589e\u52a0   mid   -   i   +   1   \u4e2a .   }   else   b   [   t   ++   ]   =   a   [   i   ++   ] ;   }   while   (   i   < =   mid   )   b   [   t   ++   ]   =   a   [   i   ++   ] ;   while   (   j   < =   r   )   b   [   t   ++   ]   =   a   [   j   ++   ] ;   for   (   i   =   0   ;   i   <   t   ;   i   ++   )   a   [   l   +   i   ]   =   b   [   i   ] ;   }   void   msort   (   LL   l   ,   LL   r   )   {   if   (   l   > =   r   )   return   ;   LL   mid   =   (   l   +   r   )   /   2   ;   msort   (   l   ,   mid   ) ;   msort   (   mid   +   1   ,   r   ) ;   merge   (   l   ,   mid   ,   r   ) ;   }   \u5e8f\u5217 \u4e2d \u9006\u5e8f \u5bf9 \u7684 \u6570\u91cf \uff0c \u4f8b\u5982 \u5bf9\u4e8e \u5e8f\u5217   \\ ( 1 ,   2 ,   6 ,   3 ,   4 ,   5 \\ )   \u9006\u5e8f \u5bf9 \u6709   \\ ( < 6 ,   3 > \u3001 < 6 ,   4 > \u3001 < 6 ,   5 > \\ )   \u603b\u5171   \\ ( 3 \\ )   \u4e2a \u3002   \u51cf\u5c11 \u9006\u5e8f \u5bf9   bobo   \u6709 \u4e00\u4e2a \u957f\u5ea6 \u4e3a   \\ ( n \\ )   \u7684 \u975e\u8d1f \u6574\u6570 \u5e8f\u5217   \\ ( a _ 1 ,   a   _   2 ,   a _ 3 ,   \\ cdots   ,   a   _   n \\ )   \uff0c \u4ed6 \u81f3\u591a \u5141\u8bb8 \u4f60 \u4ea4\u6362   \\ ( k \\ )   \u6b21 \u76f8\u90bb \u6570 \u3002   \u9006\u5e8f \u5bf9 \u7684 \u5b9a\u4e49 \uff1a \u5bf9\u4e8e   \\ ( 1   \\ leq   l   \\ leq   r   \\ leq   n \\ )   \uff0c \u82e5   \\ ( a _ i   >   a _ j \\ )   \u5c31 \u4e3a \u4e00\u5bf9 \u9006\u5e8f \u5bf9 \uff0c \u7528 \u8bed\u8a00 \u63cf\u8ff0 \u5c31\u662f \u5927 \u7684 \u6392 \u5728 \u5c0f \u7684 \u5de6\u8fb9 \uff0c \u5c31 \u4e3a \u4e00\u5bf9 \u9006\u5e8f \u5bf9 \u3002   \u8bf7\u6c42 \u51fa \u4ea4\u6362 \u4e4b\u540e \u7684 \u9006\u5e8f \u5bf9 \u6700\u5c11 \u6570\u91cf \u3002   \u8f93\u5165 \u683c\u5f0f   \u5bf9\u4e8e \u6bcf\u4e2a \u6d4b\u8bd5 \u6837\u4f8b \uff0c \u7b2c\u4e00 \u4e00\u884c \u7b2c\u4e00\u884c \u6709 \u4e24\u4e2a \u6574\u6570   \\ ( n \uff0c k \\ )   \uff0c \u7b2c\u4e8c \u4e8c\u884c \u7b2c\u4e8c\u884c \u6709   \\ ( n \\ )   \u4e2a \u6574\u6570 \u3002   3   1   2   2   1   3   0   2   2   1   \u8f93\u51fa \u683c\u5f0f   \u5bf9\u4e8e \u6bcf\u4e2a \u6d4b\u8bd5 \u6837\u4f8b \uff0c \u8f93\u51fa \u4e00\u4e2a \u6574\u6570 \u5e76 \u6362\u884c \u3002   1   2   \u5f52\u5e76 \u6392\u5e8f \u6c42 \u9006\u5e8f \u5bf9 \u601d\u8def   \u82e5   \\ ( k   =   0 \\ )   \uff0c \u90a3\u4e48 \u7b54\u6848 \u5c31\u662f \u9006\u5e8f \u5bf9 \u7684 \u6570\u91cf \uff1b   \u6211\u4eec \u5982\u4f55 \u624d\u80fd \u51cf\u5c11 \u9006\u5e8f \u5bf9 \u7684 \u6570\u91cf \uff1f   \u5bf9\u4e8e \u4f8b\u5b50   \\ ( 1 , 2 , 3 , 6 , 4 , 5 \\ )   \u9006\u5e8f \u5bf9 \u6709   \\ ( 2 \\ )   \u4e2a \uff1b   \u5bf9 \u4e0d\u662f \u9006\u5e8f \u5bf9 \u7684 \u76f8\u90bb \u6570 \u4ea4\u6362 \u4e00\u6b21 \uff0c \u4f8b\u5982 \u4ea4\u6362   \\ ( 1 \u3001 2 \\ )   \uff1a   \\ ( 2 , 1 , 3 , 6 , 4 , 5 \\ )   \uff0c \u9006\u5e8f \u5bf9 \u53d8\u4e3a   \\ ( 3 \\ )   \u4e2a \uff0c \u53cd\u800c \u8fd8 \u53d8\u591a \u4e86 \uff1b   \u82e5 \u4ea4\u6362 \u76f8\u90bb \u6570\u4e14 \u7b26\u5408 \u9006\u5e8f \u5bf9 \u7684 \uff0c \u4f8b\u5982 \u4ea4\u6362   \\ ( 6 \u3001 4 \\ )   \uff1a   \\ ( 1 , 2 , 3 , 4 , 6 , 5 \\ )   \u9006\u5e8f \u5bf9\u6570 \u51cf\u5c11 \u4e3a   \\ ( 1 \\ )   .   \u6211\u4eec \u662f\u5426 \u6709 \u7ed3\u8bba \uff1a \u53ea\u8981 \u4ea4\u6362   \\ ( k \\ )   \u8fde\u7eed \u6b21\u8fde\u7eed \u7684 \u9006\u5e8f \u5bf9 \u662f\u5426 \u5c31 \u53ef\u4ee5 \u5c06 \u9006\u5e8f \u5bf9 \u6570\u91cf \u4ece \u539f\u6765 \u7684   \\ ( x \\ )   \u51cf\u4f4e \u5230   \\ ( x   -   k \\ )   ?   \u82e5\u6709 \u8fde\u7eed \u7684 \u9006\u5e8f \u5bf9 \uff0c \u5e76 \u4f7f \u5176 \u4ea4\u6362 \u4e00\u6b21 \u662f \u4e00\u5b9a \u53ef\u4ee5 \u4f7f\u5f97 \u603b \u9006\u5e8f \u5bf9 \u7684 \u6570\u91cf \u53ea \u964d\u4f4e \u4e00\u6b21   \u90a3 \u4e0d\u662f \u662f\u4e0d\u662f \u4e00\u5b9a \u5b58\u5728 \u8fde\u7eed \u7684 \u9006\u5e8f \u5bf9 \u5462 \uff1f   \u53cd\u8bc1 \u8bc1\u6cd5 \u53cd\u8bc1\u6cd5 \uff1a   \u5047\u8bbe \u539f \u5e8f\u5217 \u5b58\u5728 \u9006\u5e8f \u5bf9 \uff0c \u4f46\u662f \u4e0d \u5b58\u5728 \u8fde\u7eed \u7684 \u9006\u5e8f \u5bf9 \uff0c \u90a3\u4e48 \u8be5 \u5e8f\u5217 \u4efb\u610f \u4e00\u5bf9 \u8fde\u7eed \u7684 \u6570 \u90fd \u662f \u5355\u8c03 \u9012\u589e \u7684 \uff0c \u8fd9\u4f1a \u5bfc\u81f4 \u603b \u5e8f\u5217 \u5355\u8c03 \u9012\u589e \uff0c \u5c31 \u4f1a \u4e0d \u5b58\u5728 \u9006\u5e8f \u5bf9 \uff0c \u4e0e \u539f \u5047\u8bbe \u77db\u76fe \uff0c \u6240\u4ee5 \u4e00\u5b9a \u5b58\u5728 \u8fde\u7eed \u7684 \u9006\u5e8f \u5bf9 \u3002   \u5f52\u5e76 \u6392\u5e8f \u6c42 \u9006\u5e8f \u5bf9   # include   < iostream >   using   namespace   std   ;   const   int   N   =   1e7   +   10   ;   typedef   long   long   LL   ;   LL   a   [   N   ] ,   b   [   N   ] ,   cnt   ;   / /   \u5f52\u5e76 \u6392\u5e8f \u7edf\u8ba1 \u9006\u5e8f \u5bf9   void   merge   (   LL   l   ,   LL   mid   ,   LL   r   )   {   LL   i   =   l   ,   j   =   mid   +   1   ,   t   =   0   ;   while   (   i   < =   mid   &&   j   < =   r   )   {   if   (   a   [   i   ]   >   a   [   j   ] )   {   b   [   t   ++   ]   =   a   [   j   ++   ] ;   cnt   + =   mid   -   i   +   1   ;   / /   \u5982\u679c \u5de6 \u533a\u95f4 \u7b2c   i   \u4e2a \u5143\u7d20 \u5927\u4e8e \u53f3 \u533a\u95f4 \u7b2c   j   \u4e2a \u5143\u7d20   / /   \u6309\u7167 \u5f52\u5e76 \u6392\u5e8f \u7684 \u7279\u70b9 \uff0c \u5de6 \u533a\u95f4 \u548c \u53f3 \u533a\u95f4 \u90fd \u5df2\u7ecf \u662f \u5355\u8c03 \u9012\u589e \u4e86 \u7684   / /   \u90a3\u4e48 \u9006\u5e8f \u5bf9 \u7684 \u6570\u91cf \u8981 \u589e\u52a0   mid   -   i   +   1   \u4e2a .   }   else   b   [   t   ++   ]   =   a   [   i   ++   ] ;   }   while   (   i   < =   mid   )   b   [   t   ++   ]   =   a   [   i   ++   ] ;   while   (   j   < =   r   )   b   [   t   ++   ]   =   a   [   j   ++   ] ;   for   (   i   =   0   ;   i   <   t   ;   i   ++   )   a   [   l   +   i   ]   =   b   [   i   ] ;   }   void   msort   (   LL   l   ,   LL   r   )   {   if   (   l   > =   r   )   return   ;   LL   mid   =   (   l   +   r   )   /   2   ;   msort   (   l   ,   mid   ) ;   msort   (   mid   +   1   ,   r   ) ;   merge   (   l   ,   mid   ,   r   ) ;   }   void   solve   ( )   {   LL   n   ,   k   ;   while   (   cin   > >   n   > >   k   )   {   cnt   =   0   ;   for   (   LL   i   =   1   ;   i   < =   n   ;   i   ++   )   cin   > >   a   [   i   ] ;   msort   (   1   ,   n   ) ;   if   (   cnt   < =   k   )   cout   < <   0   < <   endl   ;   else   cout   < <   cnt   -   k   < <   endl   ;   }   }   int   main   (   void   )   {   solve   ( ) ;   return   0   ;   }","title":"\u5f52\u5e76 \u6392\u5e8f"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%8E%92%E5%BA%8F/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#_1","text":"\u5f52\u5e76 \u6392\u5e8f \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u662f   \\ ( O ( nlog ( n ) ) \\ )   \u65f6\u95f4 \u7a33\u5b9a \u3002   \u5f52\u5e76 \u6392\u5e8f \u6a21\u677f   \u5f52\u5e76 \u6392\u5e8f \u6a21\u677f   int   a   [   N   ] ,   b   [   N   ] ,   n   ;   void   merge   (   int   l   ,   int   mid   ,   int   r   )   {   int   i   =   l   ,   j   =   mid   +   1   ,   t   =   0   ;   while   (   i   < =   mid   &&   j   < =   r   )   {   if   (   a   [   i   ]   >   a   [   j   ] )   b   [   t   ++   ]   =   a   [   j   ++   ] ;   else   b   [   t   ++   ]   =   a   [   i   ++   ] ;   }   while   (   i   < =   mid   )   b   [   t   ++   ]   =   a   [   i   ++   ] ;   while   (   j   < =   r   )   b   [   t   ++   ]   =   a   [   j   ++   ] ;   for   (   i   =   0   ;   i   <   t   ;   i   ++   )   a   [   l   +   i   ]   =   b   [   i   ] ;   }   void   msort   (   int   l   ,   int   r   )   {   if   (   l   > =   r   )   return   ;   int   mid   =   (   l   +   r   )   /   2   ;   msort   (   l   ,   mid   ) ;   msort   (   mid   +   1   ,   r   ) ;   merge   (   l   ,   mid   ,   r   ) ;   }   \u5f52\u5e76 \u6392\u5e8f \u6c42 \u9006\u5e8f \u5bf9 \u6a21\u677f   \u5f52\u5e76 \u6392\u5e8f \u6c42 \u9006\u5e8f \u5bf9   LL   a   [   N   ] ,   b   [   N   ] ,   cnt   ;   / /   cnt   \u4ee3\u8868 \u7684 \u662f \u9006\u5e8f \u5bf9 \u7684 \u6570\u91cf   / /   \u5f52\u5e76 \u6392\u5e8f \u7edf\u8ba1 \u9006\u5e8f \u5bf9   void   merge   (   LL   l   ,   LL   mid   ,   LL   r   )   {   LL   i   =   l   ,   j   =   mid   +   1   ,   t   =   0   ;   while   (   i   < =   mid   &&   j   < =   r   )   {   if   (   a   [   i   ]   >   a   [   j   ] )   {   b   [   t   ++   ]   =   a   [   j   ++   ] ;   cnt   + =   mid   -   i   +   1   ;   / /   \u5982\u679c \u5de6 \u533a\u95f4 \u7b2c   i   \u4e2a \u5143\u7d20 \u5927\u4e8e \u53f3 \u533a\u95f4 \u7b2c   j   \u4e2a \u5143\u7d20   / /   \u6309\u7167 \u5f52\u5e76 \u6392\u5e8f \u7684 \u7279\u70b9 \uff0c \u5de6 \u533a\u95f4 \u548c \u53f3 \u533a\u95f4 \u90fd \u5df2\u7ecf \u662f \u5355\u8c03 \u9012\u589e \u4e86 \u7684   / /   \u90a3\u4e48 \u9006\u5e8f \u5bf9 \u7684 \u6570\u91cf \u8981 \u589e\u52a0   mid   -   i   +   1   \u4e2a .   }   else   b   [   t   ++   ]   =   a   [   i   ++   ] ;   }   while   (   i   < =   mid   )   b   [   t   ++   ]   =   a   [   i   ++   ] ;   while   (   j   < =   r   )   b   [   t   ++   ]   =   a   [   j   ++   ] ;   for   (   i   =   0   ;   i   <   t   ;   i   ++   )   a   [   l   +   i   ]   =   b   [   i   ] ;   }   void   msort   (   LL   l   ,   LL   r   )   {   if   (   l   > =   r   )   return   ;   LL   mid   =   (   l   +   r   )   /   2   ;   msort   (   l   ,   mid   ) ;   msort   (   mid   +   1   ,   r   ) ;   merge   (   l   ,   mid   ,   r   ) ;   }   \u5e8f\u5217 \u4e2d \u9006\u5e8f \u5bf9 \u7684 \u6570\u91cf \uff0c \u4f8b\u5982 \u5bf9\u4e8e \u5e8f\u5217   \\ ( 1 ,   2 ,   6 ,   3 ,   4 ,   5 \\ )   \u9006\u5e8f \u5bf9 \u6709   \\ ( < 6 ,   3 > \u3001 < 6 ,   4 > \u3001 < 6 ,   5 > \\ )   \u603b\u5171   \\ ( 3 \\ )   \u4e2a \u3002   \u51cf\u5c11 \u9006\u5e8f \u5bf9   bobo   \u6709 \u4e00\u4e2a \u957f\u5ea6 \u4e3a   \\ ( n \\ )   \u7684 \u975e\u8d1f \u6574\u6570 \u5e8f\u5217   \\ ( a _ 1 ,   a   _   2 ,   a _ 3 ,   \\ cdots   ,   a   _   n \\ )   \uff0c \u4ed6 \u81f3\u591a \u5141\u8bb8 \u4f60 \u4ea4\u6362   \\ ( k \\ )   \u6b21 \u76f8\u90bb \u6570 \u3002   \u9006\u5e8f \u5bf9 \u7684 \u5b9a\u4e49 \uff1a \u5bf9\u4e8e   \\ ( 1   \\ leq   l   \\ leq   r   \\ leq   n \\ )   \uff0c \u82e5   \\ ( a _ i   >   a _ j \\ )   \u5c31 \u4e3a \u4e00\u5bf9 \u9006\u5e8f \u5bf9 \uff0c \u7528 \u8bed\u8a00 \u63cf\u8ff0 \u5c31\u662f \u5927 \u7684 \u6392 \u5728 \u5c0f \u7684 \u5de6\u8fb9 \uff0c \u5c31 \u4e3a \u4e00\u5bf9 \u9006\u5e8f \u5bf9 \u3002   \u8bf7\u6c42 \u51fa \u4ea4\u6362 \u4e4b\u540e \u7684 \u9006\u5e8f \u5bf9 \u6700\u5c11 \u6570\u91cf \u3002   \u8f93\u5165 \u683c\u5f0f   \u5bf9\u4e8e \u6bcf\u4e2a \u6d4b\u8bd5 \u6837\u4f8b \uff0c \u7b2c\u4e00 \u4e00\u884c \u7b2c\u4e00\u884c \u6709 \u4e24\u4e2a \u6574\u6570   \\ ( n \uff0c k \\ )   \uff0c \u7b2c\u4e8c \u4e8c\u884c \u7b2c\u4e8c\u884c \u6709   \\ ( n \\ )   \u4e2a \u6574\u6570 \u3002   3   1   2   2   1   3   0   2   2   1   \u8f93\u51fa \u683c\u5f0f   \u5bf9\u4e8e \u6bcf\u4e2a \u6d4b\u8bd5 \u6837\u4f8b \uff0c \u8f93\u51fa \u4e00\u4e2a \u6574\u6570 \u5e76 \u6362\u884c \u3002   1   2","title":"\u5f52\u5e76 \u6392\u5e8f"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%8E%92%E5%BA%8F/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#_2","text":"\u82e5   \\ ( k   =   0 \\ )   \uff0c \u90a3\u4e48 \u7b54\u6848 \u5c31\u662f \u9006\u5e8f \u5bf9 \u7684 \u6570\u91cf \uff1b   \u6211\u4eec \u5982\u4f55 \u624d\u80fd \u51cf\u5c11 \u9006\u5e8f \u5bf9 \u7684 \u6570\u91cf \uff1f   \u5bf9\u4e8e \u4f8b\u5b50   \\ ( 1 , 2 , 3 , 6 , 4 , 5 \\ )   \u9006\u5e8f \u5bf9 \u6709   \\ ( 2 \\ )   \u4e2a \uff1b   \u5bf9 \u4e0d\u662f \u9006\u5e8f \u5bf9 \u7684 \u76f8\u90bb \u6570 \u4ea4\u6362 \u4e00\u6b21 \uff0c \u4f8b\u5982 \u4ea4\u6362   \\ ( 1 \u3001 2 \\ )   \uff1a   \\ ( 2 , 1 , 3 , 6 , 4 , 5 \\ )   \uff0c \u9006\u5e8f \u5bf9 \u53d8\u4e3a   \\ ( 3 \\ )   \u4e2a \uff0c \u53cd\u800c \u8fd8 \u53d8\u591a \u4e86 \uff1b   \u82e5 \u4ea4\u6362 \u76f8\u90bb \u6570\u4e14 \u7b26\u5408 \u9006\u5e8f \u5bf9 \u7684 \uff0c \u4f8b\u5982 \u4ea4\u6362   \\ ( 6 \u3001 4 \\ )   \uff1a   \\ ( 1 , 2 , 3 , 4 , 6 , 5 \\ )   \u9006\u5e8f \u5bf9\u6570 \u51cf\u5c11 \u4e3a   \\ ( 1 \\ )   .   \u6211\u4eec \u662f\u5426 \u6709 \u7ed3\u8bba \uff1a \u53ea\u8981 \u4ea4\u6362   \\ ( k \\ )   \u8fde\u7eed \u6b21\u8fde\u7eed \u7684 \u9006\u5e8f \u5bf9 \u662f\u5426 \u5c31 \u53ef\u4ee5 \u5c06 \u9006\u5e8f \u5bf9 \u6570\u91cf \u4ece \u539f\u6765 \u7684   \\ ( x \\ )   \u51cf\u4f4e \u5230   \\ ( x   -   k \\ )   ?   \u82e5\u6709 \u8fde\u7eed \u7684 \u9006\u5e8f \u5bf9 \uff0c \u5e76 \u4f7f \u5176 \u4ea4\u6362 \u4e00\u6b21 \u662f \u4e00\u5b9a \u53ef\u4ee5 \u4f7f\u5f97 \u603b \u9006\u5e8f \u5bf9 \u7684 \u6570\u91cf \u53ea \u964d\u4f4e \u4e00\u6b21   \u90a3 \u4e0d\u662f \u662f\u4e0d\u662f \u4e00\u5b9a \u5b58\u5728 \u8fde\u7eed \u7684 \u9006\u5e8f \u5bf9 \u5462 \uff1f   \u53cd\u8bc1 \u8bc1\u6cd5 \u53cd\u8bc1\u6cd5 \uff1a   \u5047\u8bbe \u539f \u5e8f\u5217 \u5b58\u5728 \u9006\u5e8f \u5bf9 \uff0c \u4f46\u662f \u4e0d \u5b58\u5728 \u8fde\u7eed \u7684 \u9006\u5e8f \u5bf9 \uff0c \u90a3\u4e48 \u8be5 \u5e8f\u5217 \u4efb\u610f \u4e00\u5bf9 \u8fde\u7eed \u7684 \u6570 \u90fd \u662f \u5355\u8c03 \u9012\u589e \u7684 \uff0c \u8fd9\u4f1a \u5bfc\u81f4 \u603b \u5e8f\u5217 \u5355\u8c03 \u9012\u589e \uff0c \u5c31 \u4f1a \u4e0d \u5b58\u5728 \u9006\u5e8f \u5bf9 \uff0c \u4e0e \u539f \u5047\u8bbe \u77db\u76fe \uff0c \u6240\u4ee5 \u4e00\u5b9a \u5b58\u5728 \u8fde\u7eed \u7684 \u9006\u5e8f \u5bf9 \u3002   \u5f52\u5e76 \u6392\u5e8f \u6c42 \u9006\u5e8f \u5bf9   # include   < iostream >   using   namespace   std   ;   const   int   N   =   1e7   +   10   ;   typedef   long   long   LL   ;   LL   a   [   N   ] ,   b   [   N   ] ,   cnt   ;   / /   \u5f52\u5e76 \u6392\u5e8f \u7edf\u8ba1 \u9006\u5e8f \u5bf9   void   merge   (   LL   l   ,   LL   mid   ,   LL   r   )   {   LL   i   =   l   ,   j   =   mid   +   1   ,   t   =   0   ;   while   (   i   < =   mid   &&   j   < =   r   )   {   if   (   a   [   i   ]   >   a   [   j   ] )   {   b   [   t   ++   ]   =   a   [   j   ++   ] ;   cnt   + =   mid   -   i   +   1   ;   / /   \u5982\u679c \u5de6 \u533a\u95f4 \u7b2c   i   \u4e2a \u5143\u7d20 \u5927\u4e8e \u53f3 \u533a\u95f4 \u7b2c   j   \u4e2a \u5143\u7d20   / /   \u6309\u7167 \u5f52\u5e76 \u6392\u5e8f \u7684 \u7279\u70b9 \uff0c \u5de6 \u533a\u95f4 \u548c \u53f3 \u533a\u95f4 \u90fd \u5df2\u7ecf \u662f \u5355\u8c03 \u9012\u589e \u4e86 \u7684   / /   \u90a3\u4e48 \u9006\u5e8f \u5bf9 \u7684 \u6570\u91cf \u8981 \u589e\u52a0   mid   -   i   +   1   \u4e2a .   }   else   b   [   t   ++   ]   =   a   [   i   ++   ] ;   }   while   (   i   < =   mid   )   b   [   t   ++   ]   =   a   [   i   ++   ] ;   while   (   j   < =   r   )   b   [   t   ++   ]   =   a   [   j   ++   ] ;   for   (   i   =   0   ;   i   <   t   ;   i   ++   )   a   [   l   +   i   ]   =   b   [   i   ] ;   }   void   msort   (   LL   l   ,   LL   r   )   {   if   (   l   > =   r   )   return   ;   LL   mid   =   (   l   +   r   )   /   2   ;   msort   (   l   ,   mid   ) ;   msort   (   mid   +   1   ,   r   ) ;   merge   (   l   ,   mid   ,   r   ) ;   }   void   solve   ( )   {   LL   n   ,   k   ;   while   (   cin   > >   n   > >   k   )   {   cnt   =   0   ;   for   (   LL   i   =   1   ;   i   < =   n   ;   i   ++   )   cin   > >   a   [   i   ] ;   msort   (   1   ,   n   ) ;   if   (   cnt   < =   k   )   cout   < <   0   < <   endl   ;   else   cout   < <   cnt   -   k   < <   endl   ;   }   }   int   main   (   void   )   {   solve   ( ) ;   return   0   ;   }","title":"\u5f52\u5e76 \u6392\u5e8f \u6c42 \u9006\u5e8f \u5bf9 \u601d\u8def"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%8E%92%E5%BA%8F/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/","text":"\u5feb\u901f \u6392\u5e8f   \u6700\u4f18 \u590d\u6742 \u590d\u6742\u5ea6 \u662f   \\ ( O ( nlog ( n ) ) \\ )   \u4f46\u662f \u6700\u574f \u7684 \u60c5\u51b5 \u4e0b \u662f   \\ ( O ( n ^ 2 ) \\ )   \u7b97\u6cd5 \u4e0d \u7a33\u5b9a \uff0c \u6709\u70b9 \u4f9d\u8d56 \u8d56\u4e8e \u4f9d\u8d56\u4e8e \u54e8\u5175 \u5750\u6807 \u7684 \u9009\u53d6 \u548c \u5e8f\u5217 \u6392\u5217 \u7684 \u7279\u70b9 \u3002   \u4e00\u822c \u6765\u8bf4 \u4e00\u822c\u6765\u8bf4 \uff0c \u5feb\u901f \u6392\u5e8f \u7684 \u54e8\u5175 \u5750\u6807 \u662f \u53ef\u4ee5 \u968f\u4fbf \u9009\u53d6 \u7684 \uff0c \u9009 \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u4e5f \u884c \uff0c \u9009 \u4e2d\u95f4 \u7684 \u4e5f\u8bb8 \uff0c \u751a\u81f3 \u9009 \u968f\u673a \u7684 \u90fd\u884c \u3002   \u8003\u8651 \u9009 \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u4f5c\u4e3a \u54e8\u5175 \u7684 \u60c5\u5f62 \uff1a   \u82e5\u9009 \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u4f5c\u4e3a \u54e8\u5175 \uff0c \u8003\u8651 \u4e00\u4e0b \u8003\u8651\u4e00\u4e0b \u5df2\u7ecf \u6392\u597d \u6392\u597d\u5e8f \u4e86 \u7684 \u5e8f\u5217 \uff1a   \\ ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 \\ )   \u54e8\u5175 \u503c\u4e3a   \\ ( 1 \\ )   \uff0c \u5de6 \u6307\u9488 \u4ece   \\ ( 1 \\ )   \u5f00\u59cb \uff0c \u53f3 \u6307\u9488 \u4ece   \\ ( 8 \\ )   \u5f00\u59cb \uff0c \u6211\u4eec \u4f1a \u53d1\u73b0 \u5de6 \u6307\u9488 \u5f88\u96be \u79fb\u52a8 \uff0c \u53ea\u80fd \u4e00\u4e2a \u4e00\u4e2a \u7684 \u79fb\u52a8 \uff0c \u4f46\u662f \u53f3 \u6307\u9488 \u8fc7\u6389 \u6bd4 \u54e8\u5175   \\ ( 1 \\ )   \u5927 \u7684 \u503c \u5f80 \u5de6 \u9760\u62e2 \u7684 \u8fc7\u7a0b \u4e2d \uff0c \u5f88 \u5bb9\u6613 \u5c31 \u53ef\u4ee5 \u5230\u8fbe \u6700 \u5de6\u8fb9 \uff0c \u5230 \u4e0b \u4e00\u8f6e \u5feb\u901f \u6392\u5e8f \u65f6 \uff0c \u5c31 \u4f1a \u5212\u5206 \u6210 \u4e24 \u90e8\u5206 \uff1a   \\ ( [ 1 ] \u3001 [ 2 , 3 , 4 , 5 , 6 , 7 , 8 ] \\ )   \uff0c \u4e00\u76f4 \u9012\u5f52 \u4e0b\u53bb \u5c31 \u4f1a \u6210\u4e3a \u4e00\u9897 \u659c\u6811 \uff0c \u9ad8\u5ea6 \u4e3a   \\ ( n \\ )   \uff0c \u6bcf\u5c42 \u6267\u884c   \\ ( n \\ )   \u6b21 \uff0c \u6b64\u65f6 \u7684 \u65f6\u95f4 \u590d\u6742 \u7684 \u4e3a   \\ ( O ( n ^ 2 ) \\ )   \u5feb\u901f \u6392\u5e8f \u659c\u6811\u4f8b \u56fe   \u5feb\u901f \u6392\u5e8f \u6a21\u677f   LL   a   [   N   ] ,   n   ;   void   qsort   (   int   l   ,   int   r   )   {   if   (   l   <   r   )   {   int   x   =   a   [ (   l   +   r   )   /   2   ] ;   int   i   =   l   -   1   ,   j   =   r   +   1   ;   while   (   i   <   j   )   {   while   (   a   [   ++   i   ]   <   x   ) ;   while   (   x   <   a   [   --   j   ] ) ;   if   (   i   <   j   )   swap   (   a   [   i   ] ,   a   [   j   ] ) ;   }   qsort   (   l   ,   j   ) ;   qsort   (   j   +   1   ,   r   ) ;   }   }   \u5feb\u901f \u6392\u5e8f \u6c42 \u4ece\u5c0f \u4ece\u5c0f\u5230\u5927 \u7684 \u7b2c   k   \u4e2a\u6570   LL   a   [   N   ] ,   n   ,   k   ,   res   ,   st   ;   void   qsort   (   int   l   ,   int   r   )   {   if   (   l   <   r   &&   !   st   )   {   int   x   =   a   [ (   l   +   r   )   /   2   ] ;   int   i   =   l   -   1   ,   j   =   r   +   1   ;   while   (   i   <   j   )   {   while   (   a   [   ++   i   ]   <   x   ) ;   while   (   x   <   a   [   --   j   ] ) ;   if   (   i   <   j   )   swap   (   a   [   i   ] ,   a   [   j   ] ) ;   }   / /   \u53ea \u9700\u8981 \u9012\u5f52 \u6392\u5e8f \u542b\u6709 \u7b2c   k   \u4e2a\u6570 \u7684 \u90e8\u5206 \u5c31\u884c \uff0c \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6   O ( n )   if   (   k   < =   j   )   qsort   (   l   ,   j   ) ;   else   qsort   (   j   +   1   ,   r   ) ;   }   else   if   (   l   = =   r   &&   l   = =   k   )   res   =   a   [   k   ] ,   st   =   1   ;   }   \u4e2d\u95f4 \u6570   \u7ed9\u51fa   \\ ( N \\ )   \u4e2a\u6570 \uff08   \\ ( N \\ )   \u4e3a \u5947\u6570 \uff09 \u627e\u5230 \u4e2d\u95f4 \u6570 \u5e76 \u8f93\u51fa \u3002   \u8f93\u5165 \u683c\u5f0f   \u7b2c\u4e00 \u4e00\u884c \u7b2c\u4e00\u884c \u8f93\u5165 \u4e00\u4e2a \u6574\u6570   \\ ( n \\ )   \u7b2c\u4e8c \u4e8c\u884c \u7b2c\u4e8c\u884c \u8f93\u5165   \\ ( n \\ )   \u4e2a \u6574\u6570   \u8f93\u51fa \u683c\u5f0f   \u8f93\u51fa \u4e2d\u95f4 \u6570   \u4e2d\u95f4 \u6570 \u4ee3\u7801 \u53c2\u8003   # include   < iostream >   using   namespace   std   ;   typedef   long   long   LL   ;   const   int   N   =   1e7   +   10   ;   LL   a   [   N   ] ,   n   ,   k   ,   res   ,   st   ;   void   qsort   (   int   l   ,   int   r   )   {   if   (   l   <   r   &&   !   st   )   {   int   x   =   a   [ (   l   +   r   )   /   2   ] ;   int   i   =   l   -   1   ,   j   =   r   +   1   ;   while   (   i   <   j   )   {   while   (   a   [   ++   i   ]   <   x   ) ;   while   (   x   <   a   [   --   j   ] ) ;   if   (   i   <   j   )   swap   (   a   [   i   ] ,   a   [   j   ] ) ;   }   if   (   k   < =   j   )   qsort   (   l   ,   j   ) ;   else   qsort   (   j   +   1   ,   r   ) ;   }   else   if   (   l   = =   r   &&   l   = =   k   )   res   =   a   [   k   ] ,   st   =   1   ;   }   void   solve   ( )   {   scanf   (   \" % lld \"   ,   &   n   ) ;   k   =   (   1   +   n   )   /   2   ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   scanf   (   \" % lld \"   ,   a   +   i   ) ;   qsort   (   1   ,   n   ) ;   cout   < <   res   < <   endl   ;   }   int   main   (   void   )   {   solve   ( ) ;   return   0   ;   }","title":"\u5feb\u901f \u6392\u5e8f"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%8E%92%E5%BA%8F/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/#_1","text":"\u6700\u4f18 \u590d\u6742 \u590d\u6742\u5ea6 \u662f   \\ ( O ( nlog ( n ) ) \\ )   \u4f46\u662f \u6700\u574f \u7684 \u60c5\u51b5 \u4e0b \u662f   \\ ( O ( n ^ 2 ) \\ )   \u7b97\u6cd5 \u4e0d \u7a33\u5b9a \uff0c \u6709\u70b9 \u4f9d\u8d56 \u8d56\u4e8e \u4f9d\u8d56\u4e8e \u54e8\u5175 \u5750\u6807 \u7684 \u9009\u53d6 \u548c \u5e8f\u5217 \u6392\u5217 \u7684 \u7279\u70b9 \u3002   \u4e00\u822c \u6765\u8bf4 \u4e00\u822c\u6765\u8bf4 \uff0c \u5feb\u901f \u6392\u5e8f \u7684 \u54e8\u5175 \u5750\u6807 \u662f \u53ef\u4ee5 \u968f\u4fbf \u9009\u53d6 \u7684 \uff0c \u9009 \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u4e5f \u884c \uff0c \u9009 \u4e2d\u95f4 \u7684 \u4e5f\u8bb8 \uff0c \u751a\u81f3 \u9009 \u968f\u673a \u7684 \u90fd\u884c \u3002   \u8003\u8651 \u9009 \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u4f5c\u4e3a \u54e8\u5175 \u7684 \u60c5\u5f62 \uff1a   \u82e5\u9009 \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u4f5c\u4e3a \u54e8\u5175 \uff0c \u8003\u8651 \u4e00\u4e0b \u8003\u8651\u4e00\u4e0b \u5df2\u7ecf \u6392\u597d \u6392\u597d\u5e8f \u4e86 \u7684 \u5e8f\u5217 \uff1a   \\ ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 \\ )   \u54e8\u5175 \u503c\u4e3a   \\ ( 1 \\ )   \uff0c \u5de6 \u6307\u9488 \u4ece   \\ ( 1 \\ )   \u5f00\u59cb \uff0c \u53f3 \u6307\u9488 \u4ece   \\ ( 8 \\ )   \u5f00\u59cb \uff0c \u6211\u4eec \u4f1a \u53d1\u73b0 \u5de6 \u6307\u9488 \u5f88\u96be \u79fb\u52a8 \uff0c \u53ea\u80fd \u4e00\u4e2a \u4e00\u4e2a \u7684 \u79fb\u52a8 \uff0c \u4f46\u662f \u53f3 \u6307\u9488 \u8fc7\u6389 \u6bd4 \u54e8\u5175   \\ ( 1 \\ )   \u5927 \u7684 \u503c \u5f80 \u5de6 \u9760\u62e2 \u7684 \u8fc7\u7a0b \u4e2d \uff0c \u5f88 \u5bb9\u6613 \u5c31 \u53ef\u4ee5 \u5230\u8fbe \u6700 \u5de6\u8fb9 \uff0c \u5230 \u4e0b \u4e00\u8f6e \u5feb\u901f \u6392\u5e8f \u65f6 \uff0c \u5c31 \u4f1a \u5212\u5206 \u6210 \u4e24 \u90e8\u5206 \uff1a   \\ ( [ 1 ] \u3001 [ 2 , 3 , 4 , 5 , 6 , 7 , 8 ] \\ )   \uff0c \u4e00\u76f4 \u9012\u5f52 \u4e0b\u53bb \u5c31 \u4f1a \u6210\u4e3a \u4e00\u9897 \u659c\u6811 \uff0c \u9ad8\u5ea6 \u4e3a   \\ ( n \\ )   \uff0c \u6bcf\u5c42 \u6267\u884c   \\ ( n \\ )   \u6b21 \uff0c \u6b64\u65f6 \u7684 \u65f6\u95f4 \u590d\u6742 \u7684 \u4e3a   \\ ( O ( n ^ 2 ) \\ )   \u5feb\u901f \u6392\u5e8f \u659c\u6811\u4f8b \u56fe   \u5feb\u901f \u6392\u5e8f \u6a21\u677f   LL   a   [   N   ] ,   n   ;   void   qsort   (   int   l   ,   int   r   )   {   if   (   l   <   r   )   {   int   x   =   a   [ (   l   +   r   )   /   2   ] ;   int   i   =   l   -   1   ,   j   =   r   +   1   ;   while   (   i   <   j   )   {   while   (   a   [   ++   i   ]   <   x   ) ;   while   (   x   <   a   [   --   j   ] ) ;   if   (   i   <   j   )   swap   (   a   [   i   ] ,   a   [   j   ] ) ;   }   qsort   (   l   ,   j   ) ;   qsort   (   j   +   1   ,   r   ) ;   }   }   \u5feb\u901f \u6392\u5e8f \u6c42 \u4ece\u5c0f \u4ece\u5c0f\u5230\u5927 \u7684 \u7b2c   k   \u4e2a\u6570   LL   a   [   N   ] ,   n   ,   k   ,   res   ,   st   ;   void   qsort   (   int   l   ,   int   r   )   {   if   (   l   <   r   &&   !   st   )   {   int   x   =   a   [ (   l   +   r   )   /   2   ] ;   int   i   =   l   -   1   ,   j   =   r   +   1   ;   while   (   i   <   j   )   {   while   (   a   [   ++   i   ]   <   x   ) ;   while   (   x   <   a   [   --   j   ] ) ;   if   (   i   <   j   )   swap   (   a   [   i   ] ,   a   [   j   ] ) ;   }   / /   \u53ea \u9700\u8981 \u9012\u5f52 \u6392\u5e8f \u542b\u6709 \u7b2c   k   \u4e2a\u6570 \u7684 \u90e8\u5206 \u5c31\u884c \uff0c \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6   O ( n )   if   (   k   < =   j   )   qsort   (   l   ,   j   ) ;   else   qsort   (   j   +   1   ,   r   ) ;   }   else   if   (   l   = =   r   &&   l   = =   k   )   res   =   a   [   k   ] ,   st   =   1   ;   }   \u4e2d\u95f4 \u6570   \u7ed9\u51fa   \\ ( N \\ )   \u4e2a\u6570 \uff08   \\ ( N \\ )   \u4e3a \u5947\u6570 \uff09 \u627e\u5230 \u4e2d\u95f4 \u6570 \u5e76 \u8f93\u51fa \u3002   \u8f93\u5165 \u683c\u5f0f   \u7b2c\u4e00 \u4e00\u884c \u7b2c\u4e00\u884c \u8f93\u5165 \u4e00\u4e2a \u6574\u6570   \\ ( n \\ )   \u7b2c\u4e8c \u4e8c\u884c \u7b2c\u4e8c\u884c \u8f93\u5165   \\ ( n \\ )   \u4e2a \u6574\u6570   \u8f93\u51fa \u683c\u5f0f   \u8f93\u51fa \u4e2d\u95f4 \u6570   \u4e2d\u95f4 \u6570 \u4ee3\u7801 \u53c2\u8003   # include   < iostream >   using   namespace   std   ;   typedef   long   long   LL   ;   const   int   N   =   1e7   +   10   ;   LL   a   [   N   ] ,   n   ,   k   ,   res   ,   st   ;   void   qsort   (   int   l   ,   int   r   )   {   if   (   l   <   r   &&   !   st   )   {   int   x   =   a   [ (   l   +   r   )   /   2   ] ;   int   i   =   l   -   1   ,   j   =   r   +   1   ;   while   (   i   <   j   )   {   while   (   a   [   ++   i   ]   <   x   ) ;   while   (   x   <   a   [   --   j   ] ) ;   if   (   i   <   j   )   swap   (   a   [   i   ] ,   a   [   j   ] ) ;   }   if   (   k   < =   j   )   qsort   (   l   ,   j   ) ;   else   qsort   (   j   +   1   ,   r   ) ;   }   else   if   (   l   = =   r   &&   l   = =   k   )   res   =   a   [   k   ] ,   st   =   1   ;   }   void   solve   ( )   {   scanf   (   \" % lld \"   ,   &   n   ) ;   k   =   (   1   +   n   )   /   2   ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   scanf   (   \" % lld \"   ,   a   +   i   ) ;   qsort   (   1   ,   n   ) ;   cout   < <   res   < <   endl   ;   }   int   main   (   void   )   {   solve   ( ) ;   return   0   ;   }","title":"\u5feb\u901f \u6392\u5e8f"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ST%20%E8%A1%A8/ST%20%E8%A1%A8/","text":"ST   \u8868   ST   \u8868\u662f \u7528\u4e8e \u89e3\u51b3   \u53ef \u91cd\u590d \u8d21\u732e \u95ee\u9898   \u7684 \u6570\u636e \u7ed3\u6784 \u6570\u636e\u7ed3\u6784 \u3002   \u82e5 \u6ee1\u8db3   \\ ( f [ x ,   x ]   =   q [ x ] \\ )   \uff0c \u4e14 \u82e5   \\ ( [ x ,   y ]   =   [ x ,   a ]   \\ cup   [ b ,   y ] \\ )   \uff0c \u5219   \\ ( f [ x ,   y ]   =   f \\ { f [ x ,   a ] ,   f [ b ,   y ] \\ } \\ )   \uff0c \u90fd \u53ef \u79f0\u4e3a   \u53ef \u91cd\u590d \u8d21\u732e \u95ee\u9898   \u3002   \u4f8b\u5982 \u4e0b\u56fe \u7684 \u300c \u533a\u95f4 \u6700\u503c \u300d \uff0c \u5c31 \u6ee1\u8db3 \u53ef \u91cd\u590d \u8d21\u732e \u95ee\u9898   \u540c\u6837 \u9053\u7406 \uff1a \u300c \u533a\u95f4   RMQ \u300d \u3001 \u300c \u533a\u95f4   GCD \u300d \u90fd \u662f \u53ef \u91cd\u590d \u8d21\u732e \u95ee\u9898 \u3002 RMQ   \u8868\u793a \u8be2\u95ee \u533a\u95f4 \u7684 \u6700\u503c \u3002   \u7c7b\u4f3c \u300c \u52a8\u6001 \u89c4\u5212 \u300d \u7684 \u8bbe\u8ba1 \u8fc7\u7a0b \uff0c \u521d\u59cb \u521d\u59cb\u5316 \u65f6 \uff0c \u5148 \u786e\u5b9a \u957f\u5ea6 \u4e3a   1   \u7684 \u6700\u503c \uff0c \u518d \u786e\u5b9a \u957f\u5ea6 \u4e3a   2   \u7684 \u6700\u503c \uff0c \u518d \u786e\u5b9a \u957f\u5ea6 \u4e3a   4   \u7684 \u6700\u503c \uff0c \u4e24 \u4e24 \u5408\u5e76 \u4f9d\u6b64 \u6b64\u7c7b \u7c7b\u63a8 \u4f9d\u6b64\u7c7b\u63a8 \uff0c \u4e0d\u65ad \u500d\u589e \u5904\u7406 \u9884\u5904\u7406 \u51fa \u5404 \u533a\u95f4 \u6bb5 \u7684 \u6700\u503c \u3002   \u5047\u8bbe \u6211 \u8981\u6c42 \u533a\u95f4   \\ ( [ l ,   r ] \\ )   \u7684 \u6700\u503c \uff0c \u6211\u4eec \u8981 \u5bfb\u627e   \\ ( [ l ,   r ] \\ )   \u7684 \u4e24\u4e2a \u5b50 \u533a\u95f4 \uff1a   \\ ( [ l ,   a ] \u3001 [ b ,   r ] \\ )   \u4f7f\u5f97   \\ ( [ l ,   a ]   \\ cup   [ b ,   r ]   =   [ l ,   r ] \\ )   \uff0c \u4ece\u800c \u6709 \uff1a   \\ ( f [ l ,   r ]   =   f \\ { f [ l ,   a ] ,   f [ b ,   r ] \\ } \\ )   \u3002   \u4e3a\u4e86 \u7b80\u5316 \u4ee3\u7801 \u7684 \u8bbe\u8ba1 \uff0c \u6211\u4eec \u7edf\u4e00 \u7528 \u533a\u95f4 \u7684 \u8d77\u70b9 \u3001 \u533a\u95f4 \u7684 \u957f\u5ea6 \u6765 \u4ee3\u7801 \u8be5 \u533a\u95f4 \uff1a   \\ ( f ( l ,   len ) \\ )   \u4ee3\u8868 \u533a\u95f4   \\ ( [ l ,   l   +   2   ^   { len }   -   1 ] \\ )   \u7684 \u6700\u503c \u3002   \u5219 \u533a\u95f4   \\ ( [ l ,   r ] \\ )   \u7684 \u6700\u503c \u4e3a \uff1a   \\ ( f \\ { f ( l ,   log ( r   -   l   +   1 ) ) ,   f ( r   -   2   ^   { log ( r   -   l   +   1 ) }   +   1 ,   log ( r   -   l   +   1 ) ) \\ } \\ )   P3865   \u3010 \u6a21\u677f \u3011 ST   \u8868   \u7ed9\u5b9a \u4e00\u4e2a \u957f\u5ea6 \u4e3a   \\ ( N \\ )   \u7684 \u6570\u5217 \uff0c \u548c   \\ ( M \\ )   \u6b21 \u8be2\u95ee \uff0c \u6c42\u51fa \u6bcf \u4e00\u6b21 \u300c \u8be2\u95ee \u7684 \u533a\u95f4 \u300d \u5185 \u300c \u6570\u5b57 \u6700\u5927 \u7684 \u503c \u300d \u3002   read   \u5feb\u8bfb   \u501f\u52a9   getchar   \u52a0\u5feb \u6570\u636e \u7684 \u8bfb\u53d6 \u901f\u5ea6 \u3002   inline   int   read   ( )   {   int   x   =   0   ,   f   =   1   ;   char   c   =   getchar   ( ) ;   while   (   c   <   ' 0 '   | |   c   >   ' 9 '   )   {   if   (   c   = =   ' - '   )   f   =   - 1   ;   c   =   getchar   ( ) ;   }   while   (   c   > =   ' 0 '   &&   c   < =   ' 9 '   )   {   x   =   x   *   10   +   c   -   ' 0 '   ;   c   =   getchar   ( ) ;   }   return   x   *   f   ;   }   init   \u521d\u59cb \u521d\u59cb\u5316   ST   \u8868   \u4f7f\u7528 \u7c7b\u4f3c \u52a8\u6001 \u89c4\u5212 \u7684 \u4ee3\u7801 \u5b9e\u73b0 \u65b9\u5f0f \uff0c \u5148 \u679a\u4e3e \u6bcf \u4e00\u4e2a \u533a\u95f4 \u957f\u5ea6 \u4e3a   1   \u7684 \uff0c \u518d \u679a\u4e3e \u6bcf \u4e00\u4e2a \u533a\u95f4 \u957f\u5ea6 \u4e3a   2   \u7684 \uff0c \u63a5\u7740 \u679a\u4e3e \u6bcf \u4e00\u4e2a \u533a\u95f4 \u957f\u5ea6 \u4e3a   4   \u7684 \uff0c \u4f9d\u6b64 \u6b64\u7c7b \u7c7b\u63a8 \u4f9d\u6b64\u7c7b\u63a8 \uff1a   ST   \u8868\u6811   \u8be5\u6811 \u7684 \u6bcf \u4e00\u4e2a \u8282\u70b9 \u90fd \u4f1a \u662f \u4ee5 \u8be5 \u8282\u70b9 \u4e3a \u6811\u6839 \u7684 \u5b50\u6811 \u7684 \u53f6\u5b50 \u8282\u70b9 \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u3002   \u4f8b\u5982 \u53f3\u56fe \u84dd\u8272 \u90e8\u5206 \u7684 \u5b50\u6811 \uff0c \u8be5\u5b50 \u6811 \u7684 \u6839 \u8282\u70b9 \u662f   \\ ( 6 \\ )   \uff0c \u7ba1\u7406 \u7684 \u53f6\u5b50 \u8282\u70b9 \u6709   \\ ( [ 4 ,   6 ,   1 ] \\ )   \uff0c \u5219   \\ ( 6 \\ )   \u5c31\u662f \u7ba1\u7406 \u8be5 \u96c6\u5408   \\ ( [ 4 ,   6 ,   1 ] \\ )   \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u3002   const   int   N   =   int   (   1e6   +   10   ) ;   int   n   ,   m   ;   int   a   [   N   ] ,   f   [   N   ] [   25   ] ,   lg2   [   N   ] ;   / /   a   \u4ee3\u8868 \u6570\u636e \u6570\u7ec4   / /   f [ l ] [ len ]   \u4ee3\u8868 \u533a\u95f4   [ l ,   l   +   1   < <   len   -   1 ]   \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c   / /   lg2 [ i ]   \u4ee3\u8868   log ( i )   \u7684 \u503c   void   init   ( )   {   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   f   [   i   ] [   0   ]   =   a   [   i   ] ;   for   (   int   i   =   1   ;   (   1   < <   i   )   < =   n   ;   i   ++   )   for   (   int   j   =   1   ;   j   +   (   1   < <   i   )   -   1   < =   n   ;   j   ++   )   f   [   j   ] [   i   ]   =   max   (   f   [   j   ] [   i   -   1   ] ,   f   [   j   +   (   1   < <   (   i   -   1   ) ) ] [   i   -   1   ] ) ;   }   prelg2   \u9884\u5148 \u5904\u7406 \u51fa   log2   \u6570\u7ec4   x   lg2 [ x ]   x   lg2 [ x ]   1   0   9   3   2   1   10   3   3   1   11   3   4   2   12   3   5   2   13   3   6   2   14   3   7   2   15   3   8   3   16   4   \u7531 \u9012\u63a8 \u5173\u7cfb \u6709 \uff1a   x   = =   1   ,   lg2   [   1   ]   =   0   x   > =   2   ,   lg2   [   x   ]   =   lg2   [   x   /   2   ]   +   1   \u4ee3\u7801 \u5b9e\u73b0 \uff1a   void   prelg2   (   int   n   )   {   lg2   [   1   ]   =   0   ;   for   (   int   i   =   2   ;   i   < =   n   ;   i   ++   )   lg2   [   i   ]   =   lg2   [   i   /   2   ]   +   1   ;   }   getmax   \u83b7\u53d6 \u533a\u95f4   [ l ,   r ]   \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c   int   getmax   (   int   l   ,   int   r   )   {   int   len   =   lg2   [   r   -   l   +   1   ] ;   / /   \u83b7\u53d6 \u5408\u9002 \u7684 \u5b50 \u533a\u95f4 \u957f\u5ea6   return   max   (   f   [   l   ] [   len   ] ,   f   [   r   -   (   1   < <   len   )   +   1   ] [   len   ] ) ;   }   P3865   \u3010 \u6a21\u677f \u3011 ST   \u8868   \u4ee3\u7801 \u53c2\u8003   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   inline   int   read   ( )   {   int   x   =   0   ,   f   =   1   ;   char   c   =   getchar   ( ) ;   while   (   c   <   ' 0 '   | |   c   >   ' 9 '   )   {   if   (   c   = =   ' - '   )   f   =   - 1   ;   c   =   getchar   ( ) ;   }   while   (   c   > =   ' 0 '   &&   c   < =   ' 9 '   )   {   x   =   x   *   10   +   c   -   ' 0 '   ;   c   =   getchar   ( ) ;   }   return   x   *   f   ;   }   const   int   N   =   int   (   1e6   +   10   ) ;   int   n   ,   m   ;   int   a   [   N   ] ,   f   [   N   ] [   25   ] ,   lg2   [   N   ] ;   / /   a   \u4ee3\u8868 \u6570\u636e \u6570\u7ec4   / /   f [ l ] [ len ]   \u4ee3\u8868 \u533a\u95f4   [ l ,   l   +   1   < <   len   -   1 ]   \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c   / /   lg2 [ i ]   \u4ee3\u8868   log ( i )   \u7684 \u503c   void   prelg2   (   int   n   )   {   lg2   [   1   ]   =   0   ;   for   (   int   i   =   2   ;   i   < =   n   ;   i   ++   )   lg2   [   i   ]   =   lg2   [   i   /   2   ]   +   1   ;   }   void   init   ( )   {   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   f   [   i   ] [   0   ]   =   a   [   i   ] ;   for   (   int   i   =   1   ;   (   1   < <   i   )   < =   n   ;   i   ++   )   for   (   int   j   =   1   ;   j   +   (   1   < <   i   )   -   1   < =   n   ;   j   ++   )   f   [   j   ] [   i   ]   =   max   (   f   [   j   ] [   i   -   1   ] ,   f   [   j   +   (   1   < <   (   i   -   1   ) ) ] [   i   -   1   ] ) ;   }   int   getmax   (   int   l   ,   int   r   )   {   int   len   =   lg2   [   r   -   l   +   1   ] ;   / /   \u83b7\u53d6 \u5408\u9002 \u7684 \u5b50 \u533a\u95f4 \u957f\u5ea6   return   max   (   f   [   l   ] [   len   ] ,   f   [   r   -   (   1   < <   len   )   +   1   ] [   len   ] ) ;   }   void   solve   (   void   )   {   n   =   read   ( ) ;   m   =   read   ( ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   a   [   i   ]   =   read   ( ) ;   prelg2   (   n   ) ;   init   ( ) ;   while   (   m   --   )   {   int   l   ,   r   ;   l   =   read   ( ) ;   r   =   read   ( ) ;   printf   (   \" % d   \\ n   \"   ,   getmax   (   l   ,   r   ) ) ;   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   2   \u7684 \u5e38\u89c1 \u5e42 \u7684 \u53d6\u503c   2   ^   0   =   1   2   ^   1   =   2   2   ^   2   =   4   2   ^   3   =   8   2   ^   4   =   16   2   ^   5   =   32   2   ^   6   =   64   2   ^   7   =   128   2   ^   8   =   256   2   ^   9   =   512   2   ^   10   =   1024   2   ^   20   =   1048576   2   ^   25   =   33554432   2   ^   100   =   1267650600228229401496703205376","title":"ST   \u8868"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ST%20%E8%A1%A8/ST%20%E8%A1%A8/#st","text":"ST   \u8868\u662f \u7528\u4e8e \u89e3\u51b3   \u53ef \u91cd\u590d \u8d21\u732e \u95ee\u9898   \u7684 \u6570\u636e \u7ed3\u6784 \u6570\u636e\u7ed3\u6784 \u3002   \u82e5 \u6ee1\u8db3   \\ ( f [ x ,   x ]   =   q [ x ] \\ )   \uff0c \u4e14 \u82e5   \\ ( [ x ,   y ]   =   [ x ,   a ]   \\ cup   [ b ,   y ] \\ )   \uff0c \u5219   \\ ( f [ x ,   y ]   =   f \\ { f [ x ,   a ] ,   f [ b ,   y ] \\ } \\ )   \uff0c \u90fd \u53ef \u79f0\u4e3a   \u53ef \u91cd\u590d \u8d21\u732e \u95ee\u9898   \u3002   \u4f8b\u5982 \u4e0b\u56fe \u7684 \u300c \u533a\u95f4 \u6700\u503c \u300d \uff0c \u5c31 \u6ee1\u8db3 \u53ef \u91cd\u590d \u8d21\u732e \u95ee\u9898   \u540c\u6837 \u9053\u7406 \uff1a \u300c \u533a\u95f4   RMQ \u300d \u3001 \u300c \u533a\u95f4   GCD \u300d \u90fd \u662f \u53ef \u91cd\u590d \u8d21\u732e \u95ee\u9898 \u3002 RMQ   \u8868\u793a \u8be2\u95ee \u533a\u95f4 \u7684 \u6700\u503c \u3002   \u7c7b\u4f3c \u300c \u52a8\u6001 \u89c4\u5212 \u300d \u7684 \u8bbe\u8ba1 \u8fc7\u7a0b \uff0c \u521d\u59cb \u521d\u59cb\u5316 \u65f6 \uff0c \u5148 \u786e\u5b9a \u957f\u5ea6 \u4e3a   1   \u7684 \u6700\u503c \uff0c \u518d \u786e\u5b9a \u957f\u5ea6 \u4e3a   2   \u7684 \u6700\u503c \uff0c \u518d \u786e\u5b9a \u957f\u5ea6 \u4e3a   4   \u7684 \u6700\u503c \uff0c \u4e24 \u4e24 \u5408\u5e76 \u4f9d\u6b64 \u6b64\u7c7b \u7c7b\u63a8 \u4f9d\u6b64\u7c7b\u63a8 \uff0c \u4e0d\u65ad \u500d\u589e \u5904\u7406 \u9884\u5904\u7406 \u51fa \u5404 \u533a\u95f4 \u6bb5 \u7684 \u6700\u503c \u3002   \u5047\u8bbe \u6211 \u8981\u6c42 \u533a\u95f4   \\ ( [ l ,   r ] \\ )   \u7684 \u6700\u503c \uff0c \u6211\u4eec \u8981 \u5bfb\u627e   \\ ( [ l ,   r ] \\ )   \u7684 \u4e24\u4e2a \u5b50 \u533a\u95f4 \uff1a   \\ ( [ l ,   a ] \u3001 [ b ,   r ] \\ )   \u4f7f\u5f97   \\ ( [ l ,   a ]   \\ cup   [ b ,   r ]   =   [ l ,   r ] \\ )   \uff0c \u4ece\u800c \u6709 \uff1a   \\ ( f [ l ,   r ]   =   f \\ { f [ l ,   a ] ,   f [ b ,   r ] \\ } \\ )   \u3002   \u4e3a\u4e86 \u7b80\u5316 \u4ee3\u7801 \u7684 \u8bbe\u8ba1 \uff0c \u6211\u4eec \u7edf\u4e00 \u7528 \u533a\u95f4 \u7684 \u8d77\u70b9 \u3001 \u533a\u95f4 \u7684 \u957f\u5ea6 \u6765 \u4ee3\u7801 \u8be5 \u533a\u95f4 \uff1a   \\ ( f ( l ,   len ) \\ )   \u4ee3\u8868 \u533a\u95f4   \\ ( [ l ,   l   +   2   ^   { len }   -   1 ] \\ )   \u7684 \u6700\u503c \u3002   \u5219 \u533a\u95f4   \\ ( [ l ,   r ] \\ )   \u7684 \u6700\u503c \u4e3a \uff1a   \\ ( f \\ { f ( l ,   log ( r   -   l   +   1 ) ) ,   f ( r   -   2   ^   { log ( r   -   l   +   1 ) }   +   1 ,   log ( r   -   l   +   1 ) ) \\ } \\ )   P3865   \u3010 \u6a21\u677f \u3011 ST   \u8868   \u7ed9\u5b9a \u4e00\u4e2a \u957f\u5ea6 \u4e3a   \\ ( N \\ )   \u7684 \u6570\u5217 \uff0c \u548c   \\ ( M \\ )   \u6b21 \u8be2\u95ee \uff0c \u6c42\u51fa \u6bcf \u4e00\u6b21 \u300c \u8be2\u95ee \u7684 \u533a\u95f4 \u300d \u5185 \u300c \u6570\u5b57 \u6700\u5927 \u7684 \u503c \u300d \u3002","title":"ST   \u8868"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ST%20%E8%A1%A8/ST%20%E8%A1%A8/#read","text":"\u501f\u52a9   getchar   \u52a0\u5feb \u6570\u636e \u7684 \u8bfb\u53d6 \u901f\u5ea6 \u3002   inline   int   read   ( )   {   int   x   =   0   ,   f   =   1   ;   char   c   =   getchar   ( ) ;   while   (   c   <   ' 0 '   | |   c   >   ' 9 '   )   {   if   (   c   = =   ' - '   )   f   =   - 1   ;   c   =   getchar   ( ) ;   }   while   (   c   > =   ' 0 '   &&   c   < =   ' 9 '   )   {   x   =   x   *   10   +   c   -   ' 0 '   ;   c   =   getchar   ( ) ;   }   return   x   *   f   ;   }","title":"read   \u5feb\u8bfb"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ST%20%E8%A1%A8/ST%20%E8%A1%A8/#init-st","text":"\u4f7f\u7528 \u7c7b\u4f3c \u52a8\u6001 \u89c4\u5212 \u7684 \u4ee3\u7801 \u5b9e\u73b0 \u65b9\u5f0f \uff0c \u5148 \u679a\u4e3e \u6bcf \u4e00\u4e2a \u533a\u95f4 \u957f\u5ea6 \u4e3a   1   \u7684 \uff0c \u518d \u679a\u4e3e \u6bcf \u4e00\u4e2a \u533a\u95f4 \u957f\u5ea6 \u4e3a   2   \u7684 \uff0c \u63a5\u7740 \u679a\u4e3e \u6bcf \u4e00\u4e2a \u533a\u95f4 \u957f\u5ea6 \u4e3a   4   \u7684 \uff0c \u4f9d\u6b64 \u6b64\u7c7b \u7c7b\u63a8 \u4f9d\u6b64\u7c7b\u63a8 \uff1a   ST   \u8868\u6811   \u8be5\u6811 \u7684 \u6bcf \u4e00\u4e2a \u8282\u70b9 \u90fd \u4f1a \u662f \u4ee5 \u8be5 \u8282\u70b9 \u4e3a \u6811\u6839 \u7684 \u5b50\u6811 \u7684 \u53f6\u5b50 \u8282\u70b9 \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u3002   \u4f8b\u5982 \u53f3\u56fe \u84dd\u8272 \u90e8\u5206 \u7684 \u5b50\u6811 \uff0c \u8be5\u5b50 \u6811 \u7684 \u6839 \u8282\u70b9 \u662f   \\ ( 6 \\ )   \uff0c \u7ba1\u7406 \u7684 \u53f6\u5b50 \u8282\u70b9 \u6709   \\ ( [ 4 ,   6 ,   1 ] \\ )   \uff0c \u5219   \\ ( 6 \\ )   \u5c31\u662f \u7ba1\u7406 \u8be5 \u96c6\u5408   \\ ( [ 4 ,   6 ,   1 ] \\ )   \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u3002   const   int   N   =   int   (   1e6   +   10   ) ;   int   n   ,   m   ;   int   a   [   N   ] ,   f   [   N   ] [   25   ] ,   lg2   [   N   ] ;   / /   a   \u4ee3\u8868 \u6570\u636e \u6570\u7ec4   / /   f [ l ] [ len ]   \u4ee3\u8868 \u533a\u95f4   [ l ,   l   +   1   < <   len   -   1 ]   \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c   / /   lg2 [ i ]   \u4ee3\u8868   log ( i )   \u7684 \u503c   void   init   ( )   {   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   f   [   i   ] [   0   ]   =   a   [   i   ] ;   for   (   int   i   =   1   ;   (   1   < <   i   )   < =   n   ;   i   ++   )   for   (   int   j   =   1   ;   j   +   (   1   < <   i   )   -   1   < =   n   ;   j   ++   )   f   [   j   ] [   i   ]   =   max   (   f   [   j   ] [   i   -   1   ] ,   f   [   j   +   (   1   < <   (   i   -   1   ) ) ] [   i   -   1   ] ) ;   }","title":"init   \u521d\u59cb\u5316   ST   \u8868"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ST%20%E8%A1%A8/ST%20%E8%A1%A8/#prelg2-log2","text":"x   lg2 [ x ]   x   lg2 [ x ]   1   0   9   3   2   1   10   3   3   1   11   3   4   2   12   3   5   2   13   3   6   2   14   3   7   2   15   3   8   3   16   4   \u7531 \u9012\u63a8 \u5173\u7cfb \u6709 \uff1a   x   = =   1   ,   lg2   [   1   ]   =   0   x   > =   2   ,   lg2   [   x   ]   =   lg2   [   x   /   2   ]   +   1   \u4ee3\u7801 \u5b9e\u73b0 \uff1a   void   prelg2   (   int   n   )   {   lg2   [   1   ]   =   0   ;   for   (   int   i   =   2   ;   i   < =   n   ;   i   ++   )   lg2   [   i   ]   =   lg2   [   i   /   2   ]   +   1   ;   }","title":"prelg2   \u9884\u5148 \u5904\u7406 \u51fa   log2   \u6570\u7ec4"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ST%20%E8%A1%A8/ST%20%E8%A1%A8/#getmax-l-r","text":"int   getmax   (   int   l   ,   int   r   )   {   int   len   =   lg2   [   r   -   l   +   1   ] ;   / /   \u83b7\u53d6 \u5408\u9002 \u7684 \u5b50 \u533a\u95f4 \u957f\u5ea6   return   max   (   f   [   l   ] [   len   ] ,   f   [   r   -   (   1   < <   len   )   +   1   ] [   len   ] ) ;   }   P3865   \u3010 \u6a21\u677f \u3011 ST   \u8868   \u4ee3\u7801 \u53c2\u8003   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   inline   int   read   ( )   {   int   x   =   0   ,   f   =   1   ;   char   c   =   getchar   ( ) ;   while   (   c   <   ' 0 '   | |   c   >   ' 9 '   )   {   if   (   c   = =   ' - '   )   f   =   - 1   ;   c   =   getchar   ( ) ;   }   while   (   c   > =   ' 0 '   &&   c   < =   ' 9 '   )   {   x   =   x   *   10   +   c   -   ' 0 '   ;   c   =   getchar   ( ) ;   }   return   x   *   f   ;   }   const   int   N   =   int   (   1e6   +   10   ) ;   int   n   ,   m   ;   int   a   [   N   ] ,   f   [   N   ] [   25   ] ,   lg2   [   N   ] ;   / /   a   \u4ee3\u8868 \u6570\u636e \u6570\u7ec4   / /   f [ l ] [ len ]   \u4ee3\u8868 \u533a\u95f4   [ l ,   l   +   1   < <   len   -   1 ]   \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c   / /   lg2 [ i ]   \u4ee3\u8868   log ( i )   \u7684 \u503c   void   prelg2   (   int   n   )   {   lg2   [   1   ]   =   0   ;   for   (   int   i   =   2   ;   i   < =   n   ;   i   ++   )   lg2   [   i   ]   =   lg2   [   i   /   2   ]   +   1   ;   }   void   init   ( )   {   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   f   [   i   ] [   0   ]   =   a   [   i   ] ;   for   (   int   i   =   1   ;   (   1   < <   i   )   < =   n   ;   i   ++   )   for   (   int   j   =   1   ;   j   +   (   1   < <   i   )   -   1   < =   n   ;   j   ++   )   f   [   j   ] [   i   ]   =   max   (   f   [   j   ] [   i   -   1   ] ,   f   [   j   +   (   1   < <   (   i   -   1   ) ) ] [   i   -   1   ] ) ;   }   int   getmax   (   int   l   ,   int   r   )   {   int   len   =   lg2   [   r   -   l   +   1   ] ;   / /   \u83b7\u53d6 \u5408\u9002 \u7684 \u5b50 \u533a\u95f4 \u957f\u5ea6   return   max   (   f   [   l   ] [   len   ] ,   f   [   r   -   (   1   < <   len   )   +   1   ] [   len   ] ) ;   }   void   solve   (   void   )   {   n   =   read   ( ) ;   m   =   read   ( ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   a   [   i   ]   =   read   ( ) ;   prelg2   (   n   ) ;   init   ( ) ;   while   (   m   --   )   {   int   l   ,   r   ;   l   =   read   ( ) ;   r   =   read   ( ) ;   printf   (   \" % d   \\ n   \"   ,   getmax   (   l   ,   r   ) ) ;   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   2   \u7684 \u5e38\u89c1 \u5e42 \u7684 \u53d6\u503c   2   ^   0   =   1   2   ^   1   =   2   2   ^   2   =   4   2   ^   3   =   8   2   ^   4   =   16   2   ^   5   =   32   2   ^   6   =   64   2   ^   7   =   128   2   ^   8   =   256   2   ^   9   =   512   2   ^   10   =   1024   2   ^   20   =   1048576   2   ^   25   =   33554432   2   ^   100   =   1267650600228229401496703205376","title":"getmax   \u83b7\u53d6 \u533a\u95f4   [ l ,   r ]   \u7684 \u6700\u5927\u503c"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/","text":"\u4e8c\u53c9 \u4e8c\u53c9\u6811   \u7ed3\u6784 \u4f53 \u5b9a\u4e49   struct   Node   {   int   v   ;   Node   *   l   ,   *   r   ;   Node   (   int   val   =   0   ,   Node   *   left   =   nullptr   ,   Node   *   right   =   nullptr   )   {   v   =   val   ;   l   =   left   ;   r   =   right   ;   }   } ;   pre   \u524d\u5e8f \u904d\u5386   \u65b9\u6cd5 \u4e00 \uff1a \u300c \u9012\u5f52 \u300d   / /   \u300c \u9012\u5f52 \u7248 \u300d   \u524d\u5e8f \u904d\u5386 \u4e8c\u53c9 \u4e8c\u53c9\u6811   a   void   pre   (   Node   *   a   )   {   if   (   !   a   )   return   ;   printf   (   \" % d   \"   ,   a   - >   v   ) ;   pre   (   a   - >   l   ) ;   pre   (   a   - >   r   ) ;   }   \u65b9\u6cd5 \u4e8c \uff1a \u300c \u5faa\u73af   +   \u6808 \u300d   / /   \u300c \u5faa\u73af   +   \u6808 \u300d   \u524d\u5e8f \u904d\u5386 \u4e8c\u53c9 \u4e8c\u53c9\u6811   a   void   pre   (   Node   *   a   )   {   stack   <   Node   * >   st   ;   st   .   push   (   a   ) ;   while   (   st   .   size   ( ) )   {   a   =   st   .   top   ( ) ;   st   .   pop   ( ) ;   if   (   !   a   )   continue   ;   printf   (   \" % d   \"   ,   a   - >   v   ) ;   st   .   push   (   a   - >   r   ) ;   st   .   push   (   a   - >   l   ) ;   }   }   in   \u4e2d\u5e8f \u904d\u5386   \u65b9\u6cd5 \u4e00 \uff1a \u300c \u9012\u5f52 \u300d   / /   \u300c \u9012\u5f52 \u7248 \u300d   \u4e2d\u5e8f \u904d\u5386 \u4e8c\u53c9 \u4e8c\u53c9\u6811   a   void   in   (   Node   *   a   )   {   if   (   !   a   )   return   ;   in   (   a   - >   l   ) ;   printf   (   \" % d   \"   ,   a   - >   v   ) ;   in   (   a   - >   r   ) ;   }   \u65b9\u6cd5 \u4e8c \uff1a \u300c \u5faa\u73af   +   \u6808 \u300d   / /   \u300c \u5faa\u73af + \u6808 \u300d   \u4e2d\u5e8f \u904d\u5386 \u4e8c\u53c9 \u4e8c\u53c9\u6811   a   void   in   (   Node   *   a   )   {   stack   <   pair   <   Node   *   ,   int   > >   st   ;   st   .   push   ( {   a   ,   0   } ) ;   while   (   st   .   size   ( ) )   {   auto   node   =   st   .   top   ( ) ;   st   .   pop   ( ) ;   if   (   !   node   .   first   )   continue   ;   if   (   node   .   second   = =   1   )   {   printf   (   \" % d   \"   ,   node   .   first   - >   v   ) ;   continue   ;   }   st   .   push   ( {   node   .   first   - >   r   ,   0   } ) ;   st   .   push   ( {   node   .   first   ,   1   } ) ;   st   .   push   ( {   node   .   first   - >   l   ,   0   } ) ;   }   }   post   \u540e\u5e8f \u904d\u5386   \u65b9\u6cd5 \u4e00 \uff1a \u300c \u9012\u5f52 \u300d   / /   \u300c \u9012\u5f52 \u7248 \u300d   \u540e\u5e8f \u904d\u5386 \u4e8c\u53c9 \u4e8c\u53c9\u6811   a   void   post   (   Node   *   a   )   {   if   (   !   a   )   return   ;   post   (   a   - >   l   ) ;   post   (   a   - >   r   ) ;   printf   (   \" % d   \"   ,   a   - >   v   ) ;   }   \u65b9\u6cd5 \u4e8c \uff1a \u300c \u5faa\u73af   +   \u6808 \u300d   / /   \u300c \u5faa\u73af + \u6808 \u300d   \u540e\u5e8f \u904d\u5386 \u4e8c\u53c9 \u4e8c\u53c9\u6811   a   void   post   (   Node   *   a   )   {   stack   <   pair   <   Node   *   ,   int   > >   st   ;   st   .   push   ( {   a   ,   0   } ) ;   while   (   st   .   size   ( ) )   {   auto   node   =   st   .   top   ( ) ;   st   .   pop   ( ) ;   if   (   !   node   .   first   )   continue   ;   if   (   node   .   second   = =   1   )   {   printf   (   \" % d   \"   ,   node   .   first   - >   v   ) ;   continue   ;   }   st   .   push   ( {   node   .   first   ,   1   } ) ;   st   .   push   ( {   node   .   first   - >   r   ,   0   } ) ;   st   .   push   ( {   node   .   first   - >   l   ,   0   } ) ;   }   }   \u5df2\u77e5 \u300c \u524d\u5e8f \u3001 \u4e2d\u5e8f \u300d \u8f6c \u300c \u540e\u5e8f \u300d   \u524d\u5e8f \u904d\u5386 \u4e3a \uff1a   \\ ( [ 1 ,   2 ,   4 ,   5 ,   6 ,   3 ,   7 ,   9 ,   10 ,   11 ,   8 ] \\ )   \u4e2d\u5e8f \u904d\u5386 \u4e3a \uff1a   \\ ( [ 2 ,   5 ,   4 ,   6 ,   1 ,   9 ,   7 ,   11 ,   10 ,   3 ,   8 ] \\ )   \u524d\u5e8f \u904d\u5386 \u7684 \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u8282\u70b9   1   \u4e00\u5b9a \u662f \u6839 \u8282\u70b9 \uff0c \u6211\u4eec \u5728 \u4e2d\u5e8f \u904d\u5386 \u4e2d \u627e\u5230   1   \u6240\u5728 \u7684 \u4f4d\u7f6e \uff1a   \\ ( [ [ 2 ,   5 ,   4 ,   6 ] ,   1 ,   [ 9 ,   7 ,   11 ,   10 ,   3 ,   8 ] ] \\ )   \u5219 \u5728 \u4e2d\u5e8f \u904d\u5386 \u5185   \\ ( [ 2 ,   5 ,   4 ,   6 ] \\ )   \u5c31\u662f   \\ ( 1 \\ )   \u7684 \u5de6\u5b50 \u6811 \uff0c   \\ ( [ 9 ,   7 ,   11 ,   10 ,   3 ,   8 ] \\ )   \u5c31\u662f   \\ ( 1 \\ )   \u7684 \u53f3\u5b50 \u6811 \u3002   \u6211\u4eec \u63a5\u7740 \u5206\u6790 \u524d\u5e8f \u904d\u5386 \u7684 \u7b2c\u4e8c \u4e8c\u4e2a \u7b2c\u4e8c\u4e2a \u8282\u70b9 \uff1a 2 \uff0c 2   \u4e00\u70b9 \u662f   1   \u7684 \u5de6\u5b50 \u6811 \u7684 \u6839 \u8282\u70b9 \uff0c \u6211\u4eec \u6309\u7167 \u4e0a\u9762 \u7684 \u903b\u8f91 \u5728   1   \u7684 \u5de6\u5b50 \u6811\u4e2d\u5e8f \u904d\u5386 \u7684 \u7ed3\u679c   \\ ( [ 2 ,   5 ,   4 ,   6 ] \\ )   \u4e2d \u627e\u5230   2   \u7684 \u4f4d\u7f6e \uff0c \u5e76 \u5212\u5206 \u5de6\u53f3 \u5b50\u6811   \u4e0d\u65ad \u7684 \u901a\u8fc7 \u4e0a\u8ff0 \u903b\u8f91 \u53bb \u63a8\u5bfc \uff0c \u5c31 \u80fd \u628a \u8be5 \u4e8c\u53c9 \u4e8c\u53c9\u6811 \u63a8\u5bfc \u51fa\u6765 \u3002   int   pres   [   N   ] ;   / /   \u524d\u5e8f \u904d\u5386 \u7684 \u7ed3\u679c \uff0c \u6570\u636e \u57df \u4ece   1   \u5f00\u59cb   int   ins   [   N   ] ;   / /   \u4e2d\u5e8f \u904d\u5386 \u7684 \u7ed3\u679c \uff0c \u6570\u636e \u57df \u4ece   1   \u5f00\u59cb   int   posts   [   N   ] ;   / /   \u540e\u5e8f \u904d\u5386 \u7684 \u7ed3\u679c \uff0c \u6570\u636e \u57df \u4ece   1   \u5f00\u59cb   int   cur   =   1   ,   po   =   1   ;   \u524d\u5e8f + \u4e2d\u5e8f   =   \u4e8c\u53c9 \u4e8c\u53c9\u6811 \uff1a   / /   \u524d\u5e8f + \u4e2d\u5e8f   =   \u4e8c\u53c9 \u4e8c\u53c9\u6811   Node   *   prein   (   int   l   ,   int   r   )   {   if   (   l   >   r   )   return   nullptr   ;   int   p   =   l   ;   while   (   ins   [   p   ]   ! =   pres   [   cur   ] )   p   ++   ;   return   new   Node   (   pres   [   cur   ++   ] ,   prein   (   l   ,   p   -   1   ) ,   prein   (   p   +   1   ,   r   ) ) ;   }   \u524d\u5e8f + \u4e2d\u5e8f   =   \u540e\u5e8f \uff1a   / /   \u524d\u5e8f + \u4e2d\u5e8f   =   \u540e\u5e8f   void   prein   (   int   l   ,   int   r   )   {   if   (   l   >   r   )   return   ;   int   p   =   l   ;   while   (   ins   [   p   ]   ! =   pres   [   cur   ] )   p   ++   ;   int   t   =   pres   [   cur   ++   ] ;   prein   (   l   ,   p   -   1   ) ;   prein   (   p   +   1   ,   r   ) ;   posts   [   po   ++   ]   =   t   ;   }   \u5df2\u77e5 \u300c \u540e\u5e8f \u3001 \u4e2d\u5e8f \u300d \u8f6c \u300c \u524d\u5e8f \u300d   \u540e\u5e8f \u904d\u5386 \u4e3a \uff1a   \\ ( [ 5 ,   6 ,   4 ,   2 ,   9 ,   11 ,   10 ,   7 ,   8 ,   3 ,   1 ] \\ )   \u4e2d\u5e8f \u904d\u5386 \u4e3a \uff1a   \\ ( [ 2 ,   5 ,   4 ,   6 ,   1 ,   9 ,   7 ,   11 ,   10 ,   3 ,   8 ] \\ )   \u6211\u4eec \u4ece \u540e\u5e8f \u904d\u5386 \u6570\u7ec4 \u7684 \u540e\u9762 \u5f80\u524d \u524d\u9762 \u5f80\u524d\u9762 \u5206\u6790 \uff1a   \u540e\u5e8f \u904d\u5386 \u7684 \u6700\u540e \u4e00\u4e2a \u8282\u70b9   \\ ( 1 \\ )   \u4e00\u5b9a \u662f \u6811 \u7684 \u6839 \u8282\u70b9 \uff0c \u5728 \u4e2d\u5e8f \u904d\u5386 \u4e2d \u627e\u5230   \\ ( 1 \\ )   \u51fa\u73b0 \u7684 \u4f4d\u7f6e \u5212\u5206 \u5de6\u53f3 \u5b50\u6811 \uff1a   \\ [   [ [ 2 ,   5 ,   4 ,   6 ] ,   1 ,   [ 9 ,   7 ,   11 ,   10 ,   3 ,   8 ] ]   \\ ]   \u6211\u4eec \u518d \u5206\u6790 \u540e\u5e8f \u904d\u5386 \u6570\u7ec4 \u7684 \u5012\u6570 \u7b2c\u4e8c \u4e8c\u4e2a \u7b2c\u4e8c\u4e2a \u8282\u70b9   \\ ( 3 \\ )   \uff0c \u8be5 \u8282\u70b9   \\ ( 3 \\ )   \u4e00\u5b9a \u662f   \\ ( 1 \\ )   \u7684 \u53f3\u5b50 \u6811 \u7684 \u6839 \u8282\u70b9 \uff0c \u5728 \u53f3\u5b50 \u6811 \u7684 \u4e2d\u5e8f \u904d\u5386 \u6570\u7ec4 \u4e2d \u5212\u5206 \u5de6\u53f3 \u5b50\u6811 \uff1a   \\ [   [ [ 9 ,   7 ,   11 ,   10 ] ,   3 ,   [ 8 ] ]   \\ ]   \u6309\u7167 \u4e0a\u9762 \u7684 \u903b\u8f91 \u4e0d\u65ad \u63a8 \u5230 \u4e0b\u53bb \u5c31 \u80fd \u63a8\u51fa \u539f\u6811 \u7684 \u6a21\u6837 \u3002   int   pres   [   N   ] ;   / /   \u524d\u5e8f \u904d\u5386 \u7684 \u7ed3\u679c \uff0c \u6570\u636e \u57df \u4ece   1   \u5f00\u59cb   int   ins   [   N   ] ;   / /   \u4e2d\u5e8f \u904d\u5386 \u7684 \u7ed3\u679c \uff0c \u6570\u636e \u57df \u4ece   1   \u5f00\u59cb   int   posts   [   N   ] ;   / /   \u540e\u5e8f \u904d\u5386 \u7684 \u7ed3\u679c \uff0c \u6570\u636e \u57df \u4ece   1   \u5f00\u59cb   int   cur   =   n   ,   pr   =   1   ;   / /   n   \u662f \u4e8c\u53c9 \u4e8c\u53c9\u6811 \u7684 \u8282\u70b9 \u4e2a\u6570   \u540e\u5e8f   +   \u4e2d\u5e8f   =   \u4e8c\u53c9 \u4e8c\u53c9\u6811 \uff1a   / /   \u540e\u5e8f   +   \u4e2d\u5e8f   =   \u4e8c\u53c9 \u4e8c\u53c9\u6811   Node   *   postin   (   int   l   ,   int   r   )   {   if   (   l   >   r   )   return   nullptr   ;   int   p   =   l   ;   while   (   ins   [   p   ]   ! =   posts   [   cur   ] )   p   ++   ;   return   new   Node   (   posts   [   cur   --   ] ,   postin   (   p   +   1   ,   r   ) ,   postin   (   l   ,   p   -   1   ) ) ;   }   \u540e\u5e8f   +   \u4e2d\u5e8f   =   \u524d\u5e8f \uff1a   / /   \u540e\u5e8f   +   \u4e2d\u5e8f   =   \u524d\u5e8f   void   postin   (   int   l   ,   int   r   )   {   if   (   l   >   r   )   return   ;   int   p   =   l   ;   while   (   ins   [   p   ]   ! =   posts   [   cur   ] )   p   ++   ;   int   t   =   posts   [   cur   --   ] ;   postin   (   p   +   1   ,   r   ) ;   postin   (   l   ,   p   -   1   ) ;   pres   [   pr   ++   ]   =   t   ;   }","title":"\u4e8c\u53c9\u6811"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#_1","text":"","title":"\u4e8c\u53c9\u6811"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#_2","text":"struct   Node   {   int   v   ;   Node   *   l   ,   *   r   ;   Node   (   int   val   =   0   ,   Node   *   left   =   nullptr   ,   Node   *   right   =   nullptr   )   {   v   =   val   ;   l   =   left   ;   r   =   right   ;   }   } ;","title":"\u7ed3\u6784 \u4f53 \u5b9a\u4e49"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#pre","text":"\u65b9\u6cd5 \u4e00 \uff1a \u300c \u9012\u5f52 \u300d   / /   \u300c \u9012\u5f52 \u7248 \u300d   \u524d\u5e8f \u904d\u5386 \u4e8c\u53c9 \u4e8c\u53c9\u6811   a   void   pre   (   Node   *   a   )   {   if   (   !   a   )   return   ;   printf   (   \" % d   \"   ,   a   - >   v   ) ;   pre   (   a   - >   l   ) ;   pre   (   a   - >   r   ) ;   }   \u65b9\u6cd5 \u4e8c \uff1a \u300c \u5faa\u73af   +   \u6808 \u300d   / /   \u300c \u5faa\u73af   +   \u6808 \u300d   \u524d\u5e8f \u904d\u5386 \u4e8c\u53c9 \u4e8c\u53c9\u6811   a   void   pre   (   Node   *   a   )   {   stack   <   Node   * >   st   ;   st   .   push   (   a   ) ;   while   (   st   .   size   ( ) )   {   a   =   st   .   top   ( ) ;   st   .   pop   ( ) ;   if   (   !   a   )   continue   ;   printf   (   \" % d   \"   ,   a   - >   v   ) ;   st   .   push   (   a   - >   r   ) ;   st   .   push   (   a   - >   l   ) ;   }   }","title":"pre   \u524d\u5e8f \u904d\u5386"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#in","text":"\u65b9\u6cd5 \u4e00 \uff1a \u300c \u9012\u5f52 \u300d   / /   \u300c \u9012\u5f52 \u7248 \u300d   \u4e2d\u5e8f \u904d\u5386 \u4e8c\u53c9 \u4e8c\u53c9\u6811   a   void   in   (   Node   *   a   )   {   if   (   !   a   )   return   ;   in   (   a   - >   l   ) ;   printf   (   \" % d   \"   ,   a   - >   v   ) ;   in   (   a   - >   r   ) ;   }   \u65b9\u6cd5 \u4e8c \uff1a \u300c \u5faa\u73af   +   \u6808 \u300d   / /   \u300c \u5faa\u73af + \u6808 \u300d   \u4e2d\u5e8f \u904d\u5386 \u4e8c\u53c9 \u4e8c\u53c9\u6811   a   void   in   (   Node   *   a   )   {   stack   <   pair   <   Node   *   ,   int   > >   st   ;   st   .   push   ( {   a   ,   0   } ) ;   while   (   st   .   size   ( ) )   {   auto   node   =   st   .   top   ( ) ;   st   .   pop   ( ) ;   if   (   !   node   .   first   )   continue   ;   if   (   node   .   second   = =   1   )   {   printf   (   \" % d   \"   ,   node   .   first   - >   v   ) ;   continue   ;   }   st   .   push   ( {   node   .   first   - >   r   ,   0   } ) ;   st   .   push   ( {   node   .   first   ,   1   } ) ;   st   .   push   ( {   node   .   first   - >   l   ,   0   } ) ;   }   }","title":"in   \u4e2d\u5e8f \u904d\u5386"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#post","text":"\u65b9\u6cd5 \u4e00 \uff1a \u300c \u9012\u5f52 \u300d   / /   \u300c \u9012\u5f52 \u7248 \u300d   \u540e\u5e8f \u904d\u5386 \u4e8c\u53c9 \u4e8c\u53c9\u6811   a   void   post   (   Node   *   a   )   {   if   (   !   a   )   return   ;   post   (   a   - >   l   ) ;   post   (   a   - >   r   ) ;   printf   (   \" % d   \"   ,   a   - >   v   ) ;   }   \u65b9\u6cd5 \u4e8c \uff1a \u300c \u5faa\u73af   +   \u6808 \u300d   / /   \u300c \u5faa\u73af + \u6808 \u300d   \u540e\u5e8f \u904d\u5386 \u4e8c\u53c9 \u4e8c\u53c9\u6811   a   void   post   (   Node   *   a   )   {   stack   <   pair   <   Node   *   ,   int   > >   st   ;   st   .   push   ( {   a   ,   0   } ) ;   while   (   st   .   size   ( ) )   {   auto   node   =   st   .   top   ( ) ;   st   .   pop   ( ) ;   if   (   !   node   .   first   )   continue   ;   if   (   node   .   second   = =   1   )   {   printf   (   \" % d   \"   ,   node   .   first   - >   v   ) ;   continue   ;   }   st   .   push   ( {   node   .   first   ,   1   } ) ;   st   .   push   ( {   node   .   first   - >   r   ,   0   } ) ;   st   .   push   ( {   node   .   first   - >   l   ,   0   } ) ;   }   }","title":"post   \u540e\u5e8f \u904d\u5386"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#_3","text":"\u524d\u5e8f \u904d\u5386 \u4e3a \uff1a   \\ ( [ 1 ,   2 ,   4 ,   5 ,   6 ,   3 ,   7 ,   9 ,   10 ,   11 ,   8 ] \\ )   \u4e2d\u5e8f \u904d\u5386 \u4e3a \uff1a   \\ ( [ 2 ,   5 ,   4 ,   6 ,   1 ,   9 ,   7 ,   11 ,   10 ,   3 ,   8 ] \\ )   \u524d\u5e8f \u904d\u5386 \u7684 \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u8282\u70b9   1   \u4e00\u5b9a \u662f \u6839 \u8282\u70b9 \uff0c \u6211\u4eec \u5728 \u4e2d\u5e8f \u904d\u5386 \u4e2d \u627e\u5230   1   \u6240\u5728 \u7684 \u4f4d\u7f6e \uff1a   \\ ( [ [ 2 ,   5 ,   4 ,   6 ] ,   1 ,   [ 9 ,   7 ,   11 ,   10 ,   3 ,   8 ] ] \\ )   \u5219 \u5728 \u4e2d\u5e8f \u904d\u5386 \u5185   \\ ( [ 2 ,   5 ,   4 ,   6 ] \\ )   \u5c31\u662f   \\ ( 1 \\ )   \u7684 \u5de6\u5b50 \u6811 \uff0c   \\ ( [ 9 ,   7 ,   11 ,   10 ,   3 ,   8 ] \\ )   \u5c31\u662f   \\ ( 1 \\ )   \u7684 \u53f3\u5b50 \u6811 \u3002   \u6211\u4eec \u63a5\u7740 \u5206\u6790 \u524d\u5e8f \u904d\u5386 \u7684 \u7b2c\u4e8c \u4e8c\u4e2a \u7b2c\u4e8c\u4e2a \u8282\u70b9 \uff1a 2 \uff0c 2   \u4e00\u70b9 \u662f   1   \u7684 \u5de6\u5b50 \u6811 \u7684 \u6839 \u8282\u70b9 \uff0c \u6211\u4eec \u6309\u7167 \u4e0a\u9762 \u7684 \u903b\u8f91 \u5728   1   \u7684 \u5de6\u5b50 \u6811\u4e2d\u5e8f \u904d\u5386 \u7684 \u7ed3\u679c   \\ ( [ 2 ,   5 ,   4 ,   6 ] \\ )   \u4e2d \u627e\u5230   2   \u7684 \u4f4d\u7f6e \uff0c \u5e76 \u5212\u5206 \u5de6\u53f3 \u5b50\u6811   \u4e0d\u65ad \u7684 \u901a\u8fc7 \u4e0a\u8ff0 \u903b\u8f91 \u53bb \u63a8\u5bfc \uff0c \u5c31 \u80fd \u628a \u8be5 \u4e8c\u53c9 \u4e8c\u53c9\u6811 \u63a8\u5bfc \u51fa\u6765 \u3002   int   pres   [   N   ] ;   / /   \u524d\u5e8f \u904d\u5386 \u7684 \u7ed3\u679c \uff0c \u6570\u636e \u57df \u4ece   1   \u5f00\u59cb   int   ins   [   N   ] ;   / /   \u4e2d\u5e8f \u904d\u5386 \u7684 \u7ed3\u679c \uff0c \u6570\u636e \u57df \u4ece   1   \u5f00\u59cb   int   posts   [   N   ] ;   / /   \u540e\u5e8f \u904d\u5386 \u7684 \u7ed3\u679c \uff0c \u6570\u636e \u57df \u4ece   1   \u5f00\u59cb   int   cur   =   1   ,   po   =   1   ;   \u524d\u5e8f + \u4e2d\u5e8f   =   \u4e8c\u53c9 \u4e8c\u53c9\u6811 \uff1a   / /   \u524d\u5e8f + \u4e2d\u5e8f   =   \u4e8c\u53c9 \u4e8c\u53c9\u6811   Node   *   prein   (   int   l   ,   int   r   )   {   if   (   l   >   r   )   return   nullptr   ;   int   p   =   l   ;   while   (   ins   [   p   ]   ! =   pres   [   cur   ] )   p   ++   ;   return   new   Node   (   pres   [   cur   ++   ] ,   prein   (   l   ,   p   -   1   ) ,   prein   (   p   +   1   ,   r   ) ) ;   }   \u524d\u5e8f + \u4e2d\u5e8f   =   \u540e\u5e8f \uff1a   / /   \u524d\u5e8f + \u4e2d\u5e8f   =   \u540e\u5e8f   void   prein   (   int   l   ,   int   r   )   {   if   (   l   >   r   )   return   ;   int   p   =   l   ;   while   (   ins   [   p   ]   ! =   pres   [   cur   ] )   p   ++   ;   int   t   =   pres   [   cur   ++   ] ;   prein   (   l   ,   p   -   1   ) ;   prein   (   p   +   1   ,   r   ) ;   posts   [   po   ++   ]   =   t   ;   }","title":"\u5df2\u77e5 \u300c \u524d\u5e8f \u3001 \u4e2d\u5e8f \u300d \u8f6c \u300c \u540e\u5e8f \u300d"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#_4","text":"\u540e\u5e8f \u904d\u5386 \u4e3a \uff1a   \\ ( [ 5 ,   6 ,   4 ,   2 ,   9 ,   11 ,   10 ,   7 ,   8 ,   3 ,   1 ] \\ )   \u4e2d\u5e8f \u904d\u5386 \u4e3a \uff1a   \\ ( [ 2 ,   5 ,   4 ,   6 ,   1 ,   9 ,   7 ,   11 ,   10 ,   3 ,   8 ] \\ )   \u6211\u4eec \u4ece \u540e\u5e8f \u904d\u5386 \u6570\u7ec4 \u7684 \u540e\u9762 \u5f80\u524d \u524d\u9762 \u5f80\u524d\u9762 \u5206\u6790 \uff1a   \u540e\u5e8f \u904d\u5386 \u7684 \u6700\u540e \u4e00\u4e2a \u8282\u70b9   \\ ( 1 \\ )   \u4e00\u5b9a \u662f \u6811 \u7684 \u6839 \u8282\u70b9 \uff0c \u5728 \u4e2d\u5e8f \u904d\u5386 \u4e2d \u627e\u5230   \\ ( 1 \\ )   \u51fa\u73b0 \u7684 \u4f4d\u7f6e \u5212\u5206 \u5de6\u53f3 \u5b50\u6811 \uff1a   \\ [   [ [ 2 ,   5 ,   4 ,   6 ] ,   1 ,   [ 9 ,   7 ,   11 ,   10 ,   3 ,   8 ] ]   \\ ]   \u6211\u4eec \u518d \u5206\u6790 \u540e\u5e8f \u904d\u5386 \u6570\u7ec4 \u7684 \u5012\u6570 \u7b2c\u4e8c \u4e8c\u4e2a \u7b2c\u4e8c\u4e2a \u8282\u70b9   \\ ( 3 \\ )   \uff0c \u8be5 \u8282\u70b9   \\ ( 3 \\ )   \u4e00\u5b9a \u662f   \\ ( 1 \\ )   \u7684 \u53f3\u5b50 \u6811 \u7684 \u6839 \u8282\u70b9 \uff0c \u5728 \u53f3\u5b50 \u6811 \u7684 \u4e2d\u5e8f \u904d\u5386 \u6570\u7ec4 \u4e2d \u5212\u5206 \u5de6\u53f3 \u5b50\u6811 \uff1a   \\ [   [ [ 9 ,   7 ,   11 ,   10 ] ,   3 ,   [ 8 ] ]   \\ ]   \u6309\u7167 \u4e0a\u9762 \u7684 \u903b\u8f91 \u4e0d\u65ad \u63a8 \u5230 \u4e0b\u53bb \u5c31 \u80fd \u63a8\u51fa \u539f\u6811 \u7684 \u6a21\u6837 \u3002   int   pres   [   N   ] ;   / /   \u524d\u5e8f \u904d\u5386 \u7684 \u7ed3\u679c \uff0c \u6570\u636e \u57df \u4ece   1   \u5f00\u59cb   int   ins   [   N   ] ;   / /   \u4e2d\u5e8f \u904d\u5386 \u7684 \u7ed3\u679c \uff0c \u6570\u636e \u57df \u4ece   1   \u5f00\u59cb   int   posts   [   N   ] ;   / /   \u540e\u5e8f \u904d\u5386 \u7684 \u7ed3\u679c \uff0c \u6570\u636e \u57df \u4ece   1   \u5f00\u59cb   int   cur   =   n   ,   pr   =   1   ;   / /   n   \u662f \u4e8c\u53c9 \u4e8c\u53c9\u6811 \u7684 \u8282\u70b9 \u4e2a\u6570   \u540e\u5e8f   +   \u4e2d\u5e8f   =   \u4e8c\u53c9 \u4e8c\u53c9\u6811 \uff1a   / /   \u540e\u5e8f   +   \u4e2d\u5e8f   =   \u4e8c\u53c9 \u4e8c\u53c9\u6811   Node   *   postin   (   int   l   ,   int   r   )   {   if   (   l   >   r   )   return   nullptr   ;   int   p   =   l   ;   while   (   ins   [   p   ]   ! =   posts   [   cur   ] )   p   ++   ;   return   new   Node   (   posts   [   cur   --   ] ,   postin   (   p   +   1   ,   r   ) ,   postin   (   l   ,   p   -   1   ) ) ;   }   \u540e\u5e8f   +   \u4e2d\u5e8f   =   \u524d\u5e8f \uff1a   / /   \u540e\u5e8f   +   \u4e2d\u5e8f   =   \u524d\u5e8f   void   postin   (   int   l   ,   int   r   )   {   if   (   l   >   r   )   return   ;   int   p   =   l   ;   while   (   ins   [   p   ]   ! =   posts   [   cur   ] )   p   ++   ;   int   t   =   posts   [   cur   --   ] ;   postin   (   p   +   1   ,   r   ) ;   postin   (   l   ,   p   -   1   ) ;   pres   [   pr   ++   ]   =   t   ;   }","title":"\u5df2\u77e5 \u300c \u540e\u5e8f \u3001 \u4e2d\u5e8f \u300d \u8f6c \u300c \u524d\u5e8f \u300d"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%88%86%E5%9D%97%E6%80%9D%E6%83%B3/%E5%88%86%E5%9D%97%E6%80%9D%E6%83%B3/","text":"\u5206\u5757 \u601d\u60f3   \u7a0d\u6162 \u4f46 \u53c8 \u81f3\u4e8e \u4e0d\u81f3\u4e8e \u592a\u6162 \u7684 \u300c \u533a\u95f4 \u548c \u300d \u5206\u5757 \u505a\u6cd5   \u4f8b\u9898   LibreOJ   6280   \u6570\u5217 \u5206\u5757 \u5165\u95e8   4   \u7ed9\u5b9a \u4e00\u4e2a \u957f\u5ea6 \u4e3a   \\ ( n \\ )   \u7684 \u5e8f\u5217   \\ ( \\ { a _ i \\ } \\ )   \uff0c \u9700\u8981 \u6267\u884c   \\ ( n \\ )   \u6b21 \u64cd\u4f5c \u3002 \u64cd\u4f5c \u5206 \u4e24\u79cd \uff1a   \u7ed9   \\ ( a _ l   \\ sim   a _ r \\ )   \u4e4b\u95f4 \u7684 \u6240\u6709 \u6570 \u52a0\u4e0a   \\ ( x \\ )   ;   \u6c42   \\ ( \\ sum _ { i = l } ^ { r } a _ i \\ )   \u3002   \\ ( 1   \\ leq   n   \\ leq   5   \\ times   10 ^ 4 \\ )   \u505a\u6cd5 :   \u5c06   \\ ( 1   \\ sim   n \\ )   \u6309\u7167   \\ ( sqrt ( n ) \\ )   \u5206\u5272 \u6210   \\ ( sqrt ( n ) \\ )   \u5757 \uff0c \u6bcf \u4e00\u5757 \u90fd \u6709 \u5176 \u7f16\u53f7 \uff0c \u6700\u540e \u4e00\u5757 \u53ef\u80fd \u957f\u5ea6 \u5c0f\u4e8e   \\ ( sqrt ( n ) \\ )   \u4f46 \u6ca1\u6709 \u4ec0\u4e48 \u5f71\u54cd \uff1b   \u5148 \u5904\u7406 \u9884\u5904\u7406 \u51fa \u6bcf \u4e00\u5757 \u7684 \u548c   \u5047\u8bbe \u6211 \u8981\u6c42 \u84dd\u8272 \u7ebf \u7684 \u548c \uff0c \u53ea \u9700\u8981 \u66b4\u529b \u6c42\u5757   \\ ( 1 \u3001 3 \\ )   \uff0c \u7136\u540e \u52a0\u4e0a \u4e4b\u524d \u5904\u7406 \u9884\u5904\u7406 \u597d \u7684 \u5757   \\ ( 2 \\ )   \u5373\u53ef \uff1b \u5047\u8bbe \u6211\u8981 \u5bf9 \u84dd\u8272 \u7ebf \u90fd \u52a0\u4e0a \u67d0\u4e2a \u7279\u5b9a \u503c \uff0c \u53ea \u9700\u8981 \u5bf9\u5757   \\ ( 1 \u3001 3 \\ )   \u66b4\u529b \u52a0 \uff0c \u5bf9 \u533a\u95f4   \\ ( 2 \\ )   \u52a0\u4e0a \u300c \u8be5\u6570   *   \u533a\u95f4 \u957f\u5ea6 \u300d \u5c31\u884c \u3002   init   \u4e0b\u6807 \u4e3a   \\ ( x \\ )   \u7684 \u5143\u7d20 \u6240\u5728 \u7684 \u5757 \u4e3a \uff1a   \\ ( ( x   -   1 )   /   sq   +   1 \\ )   \uff0c \u63a8\u5bfc \u7684 \u65f6\u5019 \u5047\u8bbe   \\ ( x \\ )   \u5728 \u7b2c   \\ ( k \\ )   \u5757 \u4e2d \uff08 \u5757 \u7684 \u7f16\u53f7 \u4ece   1   \u5f00\u59cb \uff09 \uff0c \u5219   \\ ( 1   +   k   \\ cdot   sq   \\ leq   x   <   1   +   ( k   +   1 )   \\ cdot   sq \\ )   \uff0c \u5316\u7b80 \u4e4b\u540e \u53ef \u5f97 \uff1a   \\ [   \\ begin { aligned }   k   \\ leq   \\ cfrac { x   -   1 } { sq }   <   k   +   1   \\ end { aligned }   \\ ]   \u7531\u4e8e \u6267\u884c \u7684 \u662f \u5411\u4e0b \u9664\u6cd5 \uff0c \u6240\u4ee5   \\ ( k   =   \\ cfrac { x   -   1 } { sq } \\ )   ,   \u7531\u4e8e \u7f16\u53f7 \u662f\u4ece   \\ ( 1 \\ )   \u5f00\u59cb \uff0c \u6211 \u8fd9\u6837 \u6c42\u5f97 \u7684 \u7f16\u53f7 \u662f\u4ece   \\ ( 0 \\ )   \u5f00\u59cb \uff0c \u6240\u4ee5 \u8fd8\u8981 \u52a0\u4e0a \u4e2a   \\ ( 1 \\ )   \uff1a   \\ [   \\ begin { aligned }   k   =   \\ cfrac { x   -   1 } { sq }   +   1   \\ end { aligned }   \\ ]   const   int   N   =   int   (   1e6   +   10   ) ;   int   a   [   N   ] ,   n   ;   / /   a   \u8868\u793a \u6570\u636e \u6570\u7ec4 \uff0c n   \u662f \u6570\u636e \u957f\u5ea6 \uff0c \u6570\u636e \u57df \u4ece   1   \u5f00\u59cb   int   id   [   N   ] ,   sq   ;   / /   id   \u8868\u5757 \u7684 \u7f16\u53f7 \uff0c sq   =   sqrt ( n )   int   b   [   N   ] ,   s   [   N   ] ;   / /   b [ i ]   \u8868\u793a \u7f16\u53f7 \u4e3a   i   \u7684 \u5757 \u7684 \u6570\u636e \u589e\u52a0 \u52a0\u503c \u589e\u52a0\u503c \uff0c s [ i ]   \u8868\u793a \u5757   i   \u7684 \u533a\u95f4 \u548c   void   init   ( )   {   sq   =   sqrt   (   n   ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   id   [   i   ]   =   (   i   -   1   )   /   sq   +   1   ;   s   [   id   [   i   ] ]   + =   a   [   i   ] ;   }   }   add   \u533a\u95f4 \u52a0\u6cd5   \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \uff1a   \\ ( sqrt ( n ) \\ )   \u5982\u679c   \\ ( l \\ )   \u548c   \\ ( r \\ )   \u5728 \u540c\u4e00 \u4e00\u4e2a \u540c\u4e00\u4e2a \u5757 \u5185 \uff0c \u76f4\u63a5 \u5bf9   \\ ( [ l ,   r ] \\ )   \u66b4\u529b \u52a0 \uff1b   \u5982\u679c   \\ ( l \\ )   \u548c   \\ ( r \\ )   \u4e0d \u5728 \u540c\u4e00 \u4e00\u4e2a \u540c\u4e00\u4e2a \u5757 \u5185 \uff0c \u5148\u5bf9   \\ ( l \\ )   \u6240\u5728 \u7684 \u5757 \u3001   \\ ( r \\ )   \u6240\u5728 \u7684 \u5757 \u5bf9   \\ ( [ l ,   r ] \\ )   \u7684 \u4ea4\u96c6 \u66b4\u529b \u52a0 \uff0c \u7136\u540e \u5bf9 \u88ab \u8fd9 \u4e24\u4e2a \u5757 \u5939\u4f4f \u7684 \u5176\u4ed6 \u5757\u52a0   k * sq   \uff0c \u5e76 \u8bb0\u5f55 \u4e0b \u6bcf \u4e00\u4e2a \u5143\u7d20 \u52a0 \u4e86 \u4ec0\u4e48 \u503c \u3002   / /   \u5bf9 \u533a\u95f4   l \u3001 r   \u7684 \u5143\u7d20 \u90fd \u52a0\u4e0a   k   void   add   (   int   l   ,   int   r   ,   long   long   k   )   {   int   sid   =   id   [   l   ] ,   eid   =   id   [   r   ] ;   if   (   sid   = =   eid   )   / /   \u8bf4\u660e   l   \u548c   r   \u5728 \u540c\u4e00 \u4e00\u4e2a \u540c\u4e00\u4e2a \u533a\u95f4 \u5185   {   for   (   int   i   =   l   ;   i   < =   r   ;   i   ++   )   a   [   i   ]   + =   k   ,   s   [   sid   ]   + =   k   ;   return   ;   }   for   (   int   i   =   l   ;   id   [   i   ]   = =   sid   ;   i   ++   )   a   [   i   ]   + =   k   ,   s   [   sid   ]   + =   k   ;   for   (   int   i   =   r   ;   id   [   i   ]   = =   eid   ;   i   --   )   a   [   i   ]   + =   k   ,   s   [   eid   ]   + =   k   ;   for   (   int   i   =   sid   +   1   ;   i   <   eid   ;   i   ++   )   s   [   i   ]   + =   k   *   sq   ,   b   [   i   ]   + =   k   ;   }   get _ sum   \u83b7\u53d6 \u533a\u95f4 \u548c \uff0c get _ sum   \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \uff1a   \\ ( sqrt ( n ) \\ )   long   long   get _ sum   (   int   l   ,   int   r   )   {   int   sid   =   id   [   l   ] ,   eid   =   id   [   r   ] ;   long   long   ans   =   0   ;   if   (   sid   = =   eid   )   {   / /   \u5728 \u540c\u4e00 \u4e00\u4e2a \u540c\u4e00\u4e2a \u5757 \u5185 \u76f4\u63a5 \u66b4\u529b \u6c42\u548c   for   (   int   i   =   l   ;   i   < =   r   ;   i   ++   )   ans   + =   a   [   i   ]   +   b   [   sid   ] ;   return   ans   ;   }   for   (   int   i   =   l   ;   id   [   i   ]   = =   sid   ;   i   ++   )   ans   + =   a   [   i   ]   +   b   [   sid   ] ;   / /   \u5bf9   l   \u6240\u5728 \u7684 \u5757 \u4e0e [ l ,   r ] \u7684 \u4ea4\u96c6 \u66b4\u529b \u6c42\u548c   for   (   int   i   =   r   ;   id   [   i   ]   = =   eid   ;   i   --   )   ans   + =   a   [   i   ]   +   b   [   eid   ] ;   / /   \u5bf9   r   \u6240\u5728 \u7684 \u5757 \u4e0e [ l ,   r ] \u7684 \u4ea4\u96c6 \u66b4\u529b \u6c42\u548c   for   (   int   i   =   sid   +   1   ;   i   <   eid   ;   i   ++   )   ans   + =   s   [   i   ] ;   / /   \u5bf9 \u88ab   l   \u6240\u5728 \u7684 \u5757 \u4e0e   r   \u6240\u5728 \u7684 \u5757 \u5939\u4f4f \u7684 \u5757 \u6c42\u548c   return   ans   ;   }   \u533a\u95f4 \u548c \u5206\u5757 -- \u4ee3\u7801 \u53c2\u8003   const   int   N   =   int   (   1e6   +   10   ) ;   long   long   a   [   N   ] ,   n   ;   / /   a   \u8868\u793a \u6570\u636e \u6570\u7ec4 \uff0c n   \u662f \u6570\u636e \u957f\u5ea6 \uff0c \u6570\u636e \u57df \u4ece   1   \u5f00\u59cb   long   long   id   [   N   ] ,   sq   ;   / /   id   \u8868\u5757 \u7684 \u7f16\u53f7 \uff0c sq   =   sqrt ( n )   long   long   b   [   N   ] ,   s   [   N   ] ;   / /   b [ i ]   \u8868\u793a \u7f16\u53f7 \u4e3a   i   \u7684 \u5757 \u7684 \u6570\u636e \u589e\u52a0 \u52a0\u503c \u589e\u52a0\u503c \uff0c s [ i ]   \u8868\u793a \u5757   i   \u7684 \u533a\u95f4 \u548c   void   init   ( )   {   sq   =   sqrt   (   n   ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   id   [   i   ]   =   (   i   -   1   )   /   sq   +   1   ;   s   [   id   [   i   ] ]   + =   a   [   i   ] ;   }   }   / /   \u5bf9 \u533a\u95f4   l \u3001 r   \u7684 \u5143\u7d20 \u90fd \u52a0\u4e0a   k   void   add   (   int   l   ,   int   r   ,   long   long   k   )   {   int   sid   =   id   [   l   ] ,   eid   =   id   [   r   ] ;   if   (   sid   = =   eid   )   / /   \u8bf4\u660e   l   \u548c   r   \u5728 \u540c\u4e00 \u4e00\u4e2a \u540c\u4e00\u4e2a \u533a\u95f4 \u5185   {   for   (   int   i   =   l   ;   i   < =   r   ;   i   ++   )   a   [   i   ]   + =   k   ,   s   [   sid   ]   + =   k   ;   return   ;   }   for   (   int   i   =   l   ;   id   [   i   ]   = =   sid   ;   i   ++   )   a   [   i   ]   + =   k   ,   s   [   sid   ]   + =   k   ;   for   (   int   i   =   r   ;   id   [   i   ]   = =   eid   ;   i   --   )   a   [   i   ]   + =   k   ,   s   [   eid   ]   + =   k   ;   for   (   int   i   =   sid   +   1   ;   i   <   eid   ;   i   ++   )   s   [   i   ]   + =   k   *   sq   ,   b   [   i   ]   + =   k   ;   }   long   long   get _ sum   (   int   l   ,   int   r   )   {   int   sid   =   id   [   l   ] ,   eid   =   id   [   r   ] ;   long   long   ans   =   0   ;   if   (   sid   = =   eid   )   {   for   (   int   i   =   l   ;   i   < =   r   ;   i   ++   )   ans   + =   a   [   i   ]   +   b   [   sid   ] ;   return   ans   ;   }   for   (   int   i   =   l   ;   id   [   i   ]   = =   sid   ;   i   ++   )   ans   + =   a   [   i   ]   +   b   [   sid   ] ;   for   (   int   i   =   r   ;   id   [   i   ]   = =   eid   ;   i   --   )   ans   + =   a   [   i   ]   +   b   [   eid   ] ;   for   (   int   i   =   sid   +   1   ;   i   <   eid   ;   i   ++   )   ans   + =   s   [   i   ] ;   return   ans   ;   }   \u4f8b\u9898   # 6280 .   \u6570\u5217 \u5206\u5757 \u5165\u95e8   4   \u4ee3\u7801 \u53c2\u8003   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   const   int   N   =   int   (   1e6   +   10   ) ;   long   long   a   [   N   ] ,   n   ;   / /   a   \u8868\u793a \u6570\u636e \u6570\u7ec4 \uff0c n   \u662f \u6570\u636e \u957f\u5ea6 \uff0c \u6570\u636e \u57df \u4ece   1   \u5f00\u59cb   long   long   id   [   N   ] ,   sq   ;   / /   id   \u8868\u5757 \u7684 \u7f16\u53f7 \uff0c sq   =   sqrt ( n )   long   long   b   [   N   ] ,   s   [   N   ] ;   / /   b [ i ]   \u8868\u793a \u7f16\u53f7 \u4e3a   i   \u7684 \u5757 \u7684 \u6570\u636e \u589e\u52a0 \u52a0\u503c \u589e\u52a0\u503c \uff0c s [ i ]   \u8868\u793a \u5757   i   \u7684 \u533a\u95f4 \u548c   void   init   ( )   {   sq   =   sqrt   (   n   ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   id   [   i   ]   =   (   i   -   1   )   /   sq   +   1   ;   s   [   id   [   i   ] ]   + =   a   [   i   ] ;   }   }   / /   \u5bf9 \u533a\u95f4   l \u3001 r   \u7684 \u5143\u7d20 \u90fd \u52a0\u4e0a   k   void   add   (   int   l   ,   int   r   ,   long   long   k   )   {   int   sid   =   id   [   l   ] ,   eid   =   id   [   r   ] ;   if   (   sid   = =   eid   )   / /   \u8bf4\u660e   l   \u548c   r   \u5728 \u540c\u4e00 \u4e00\u4e2a \u540c\u4e00\u4e2a \u533a\u95f4 \u5185   {   for   (   int   i   =   l   ;   i   < =   r   ;   i   ++   )   a   [   i   ]   + =   k   ,   s   [   sid   ]   + =   k   ;   return   ;   }   for   (   int   i   =   l   ;   id   [   i   ]   = =   sid   ;   i   ++   )   a   [   i   ]   + =   k   ,   s   [   sid   ]   + =   k   ;   for   (   int   i   =   r   ;   id   [   i   ]   = =   eid   ;   i   --   )   a   [   i   ]   + =   k   ,   s   [   eid   ]   + =   k   ;   for   (   int   i   =   sid   +   1   ;   i   <   eid   ;   i   ++   )   s   [   i   ]   + =   k   *   sq   ,   b   [   i   ]   + =   k   ;   }   long   long   get _ sum   (   int   l   ,   int   r   ,   long   long   p   )   {   int   sid   =   id   [   l   ] ,   eid   =   id   [   r   ] ;   long   long   ans   =   0   ;   if   (   sid   = =   eid   )   {   for   (   int   i   =   l   ;   i   < =   r   ;   i   ++   )   ans   =   (   ans   +   a   [   i   ]   +   b   [   sid   ] )   %   p   ;   return   ans   ;   }   for   (   int   i   =   l   ;   id   [   i   ]   = =   sid   ;   i   ++   )   ans   =   (   ans   +   a   [   i   ]   +   b   [   sid   ] )   %   p   ;   for   (   int   i   =   r   ;   id   [   i   ]   = =   eid   ;   i   --   )   ans   =   (   ans   +   a   [   i   ]   +   b   [   eid   ] )   %   p   ;   for   (   int   i   =   sid   +   1   ;   i   <   eid   ;   i   ++   )   ans   =   (   ans   +   s   [   i   ] )   %   p   ;   return   ans   ;   }   void   solve   (   void   )   {   scanf   (   \" % lld \"   ,   &   n   ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   scanf   (   \" % lld \"   ,   a   +   i   ) ;   init   ( ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   long   long   t   ,   a   ,   b   ,   c   ;   scanf   (   \" % lld% lld% lld% lld \"   ,   &   t   ,   &   a   ,   &   b   ,   &   c   ) ;   if   (   t   = =   0   )   add   (   a   ,   b   ,   c   ) ;   else   printf   (   \" % lld   \\ n   \"   ,   get _ sum   (   a   ,   b   ,   c   +   1   ) ) ;   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002","title":"\u5206\u5757 \u601d\u60f3"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%88%86%E5%9D%97%E6%80%9D%E6%83%B3/%E5%88%86%E5%9D%97%E6%80%9D%E6%83%B3/#_1","text":"\u7a0d\u6162 \u4f46 \u53c8 \u81f3\u4e8e \u4e0d\u81f3\u4e8e \u592a\u6162 \u7684 \u300c \u533a\u95f4 \u548c \u300d \u5206\u5757 \u505a\u6cd5   \u4f8b\u9898   LibreOJ   6280   \u6570\u5217 \u5206\u5757 \u5165\u95e8   4   \u7ed9\u5b9a \u4e00\u4e2a \u957f\u5ea6 \u4e3a   \\ ( n \\ )   \u7684 \u5e8f\u5217   \\ ( \\ { a _ i \\ } \\ )   \uff0c \u9700\u8981 \u6267\u884c   \\ ( n \\ )   \u6b21 \u64cd\u4f5c \u3002 \u64cd\u4f5c \u5206 \u4e24\u79cd \uff1a   \u7ed9   \\ ( a _ l   \\ sim   a _ r \\ )   \u4e4b\u95f4 \u7684 \u6240\u6709 \u6570 \u52a0\u4e0a   \\ ( x \\ )   ;   \u6c42   \\ ( \\ sum _ { i = l } ^ { r } a _ i \\ )   \u3002   \\ ( 1   \\ leq   n   \\ leq   5   \\ times   10 ^ 4 \\ )   \u505a\u6cd5 :   \u5c06   \\ ( 1   \\ sim   n \\ )   \u6309\u7167   \\ ( sqrt ( n ) \\ )   \u5206\u5272 \u6210   \\ ( sqrt ( n ) \\ )   \u5757 \uff0c \u6bcf \u4e00\u5757 \u90fd \u6709 \u5176 \u7f16\u53f7 \uff0c \u6700\u540e \u4e00\u5757 \u53ef\u80fd \u957f\u5ea6 \u5c0f\u4e8e   \\ ( sqrt ( n ) \\ )   \u4f46 \u6ca1\u6709 \u4ec0\u4e48 \u5f71\u54cd \uff1b   \u5148 \u5904\u7406 \u9884\u5904\u7406 \u51fa \u6bcf \u4e00\u5757 \u7684 \u548c   \u5047\u8bbe \u6211 \u8981\u6c42 \u84dd\u8272 \u7ebf \u7684 \u548c \uff0c \u53ea \u9700\u8981 \u66b4\u529b \u6c42\u5757   \\ ( 1 \u3001 3 \\ )   \uff0c \u7136\u540e \u52a0\u4e0a \u4e4b\u524d \u5904\u7406 \u9884\u5904\u7406 \u597d \u7684 \u5757   \\ ( 2 \\ )   \u5373\u53ef \uff1b \u5047\u8bbe \u6211\u8981 \u5bf9 \u84dd\u8272 \u7ebf \u90fd \u52a0\u4e0a \u67d0\u4e2a \u7279\u5b9a \u503c \uff0c \u53ea \u9700\u8981 \u5bf9\u5757   \\ ( 1 \u3001 3 \\ )   \u66b4\u529b \u52a0 \uff0c \u5bf9 \u533a\u95f4   \\ ( 2 \\ )   \u52a0\u4e0a \u300c \u8be5\u6570   *   \u533a\u95f4 \u957f\u5ea6 \u300d \u5c31\u884c \u3002","title":"\u5206\u5757 \u601d\u60f3"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%88%86%E5%9D%97%E6%80%9D%E6%83%B3/%E5%88%86%E5%9D%97%E6%80%9D%E6%83%B3/#init","text":"\u4e0b\u6807 \u4e3a   \\ ( x \\ )   \u7684 \u5143\u7d20 \u6240\u5728 \u7684 \u5757 \u4e3a \uff1a   \\ ( ( x   -   1 )   /   sq   +   1 \\ )   \uff0c \u63a8\u5bfc \u7684 \u65f6\u5019 \u5047\u8bbe   \\ ( x \\ )   \u5728 \u7b2c   \\ ( k \\ )   \u5757 \u4e2d \uff08 \u5757 \u7684 \u7f16\u53f7 \u4ece   1   \u5f00\u59cb \uff09 \uff0c \u5219   \\ ( 1   +   k   \\ cdot   sq   \\ leq   x   <   1   +   ( k   +   1 )   \\ cdot   sq \\ )   \uff0c \u5316\u7b80 \u4e4b\u540e \u53ef \u5f97 \uff1a   \\ [   \\ begin { aligned }   k   \\ leq   \\ cfrac { x   -   1 } { sq }   <   k   +   1   \\ end { aligned }   \\ ]   \u7531\u4e8e \u6267\u884c \u7684 \u662f \u5411\u4e0b \u9664\u6cd5 \uff0c \u6240\u4ee5   \\ ( k   =   \\ cfrac { x   -   1 } { sq } \\ )   ,   \u7531\u4e8e \u7f16\u53f7 \u662f\u4ece   \\ ( 1 \\ )   \u5f00\u59cb \uff0c \u6211 \u8fd9\u6837 \u6c42\u5f97 \u7684 \u7f16\u53f7 \u662f\u4ece   \\ ( 0 \\ )   \u5f00\u59cb \uff0c \u6240\u4ee5 \u8fd8\u8981 \u52a0\u4e0a \u4e2a   \\ ( 1 \\ )   \uff1a   \\ [   \\ begin { aligned }   k   =   \\ cfrac { x   -   1 } { sq }   +   1   \\ end { aligned }   \\ ]   const   int   N   =   int   (   1e6   +   10   ) ;   int   a   [   N   ] ,   n   ;   / /   a   \u8868\u793a \u6570\u636e \u6570\u7ec4 \uff0c n   \u662f \u6570\u636e \u957f\u5ea6 \uff0c \u6570\u636e \u57df \u4ece   1   \u5f00\u59cb   int   id   [   N   ] ,   sq   ;   / /   id   \u8868\u5757 \u7684 \u7f16\u53f7 \uff0c sq   =   sqrt ( n )   int   b   [   N   ] ,   s   [   N   ] ;   / /   b [ i ]   \u8868\u793a \u7f16\u53f7 \u4e3a   i   \u7684 \u5757 \u7684 \u6570\u636e \u589e\u52a0 \u52a0\u503c \u589e\u52a0\u503c \uff0c s [ i ]   \u8868\u793a \u5757   i   \u7684 \u533a\u95f4 \u548c   void   init   ( )   {   sq   =   sqrt   (   n   ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   id   [   i   ]   =   (   i   -   1   )   /   sq   +   1   ;   s   [   id   [   i   ] ]   + =   a   [   i   ] ;   }   }","title":"init"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%88%86%E5%9D%97%E6%80%9D%E6%83%B3/%E5%88%86%E5%9D%97%E6%80%9D%E6%83%B3/#add","text":"\u533a\u95f4 \u52a0\u6cd5   \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \uff1a   \\ ( sqrt ( n ) \\ )   \u5982\u679c   \\ ( l \\ )   \u548c   \\ ( r \\ )   \u5728 \u540c\u4e00 \u4e00\u4e2a \u540c\u4e00\u4e2a \u5757 \u5185 \uff0c \u76f4\u63a5 \u5bf9   \\ ( [ l ,   r ] \\ )   \u66b4\u529b \u52a0 \uff1b   \u5982\u679c   \\ ( l \\ )   \u548c   \\ ( r \\ )   \u4e0d \u5728 \u540c\u4e00 \u4e00\u4e2a \u540c\u4e00\u4e2a \u5757 \u5185 \uff0c \u5148\u5bf9   \\ ( l \\ )   \u6240\u5728 \u7684 \u5757 \u3001   \\ ( r \\ )   \u6240\u5728 \u7684 \u5757 \u5bf9   \\ ( [ l ,   r ] \\ )   \u7684 \u4ea4\u96c6 \u66b4\u529b \u52a0 \uff0c \u7136\u540e \u5bf9 \u88ab \u8fd9 \u4e24\u4e2a \u5757 \u5939\u4f4f \u7684 \u5176\u4ed6 \u5757\u52a0   k * sq   \uff0c \u5e76 \u8bb0\u5f55 \u4e0b \u6bcf \u4e00\u4e2a \u5143\u7d20 \u52a0 \u4e86 \u4ec0\u4e48 \u503c \u3002   / /   \u5bf9 \u533a\u95f4   l \u3001 r   \u7684 \u5143\u7d20 \u90fd \u52a0\u4e0a   k   void   add   (   int   l   ,   int   r   ,   long   long   k   )   {   int   sid   =   id   [   l   ] ,   eid   =   id   [   r   ] ;   if   (   sid   = =   eid   )   / /   \u8bf4\u660e   l   \u548c   r   \u5728 \u540c\u4e00 \u4e00\u4e2a \u540c\u4e00\u4e2a \u533a\u95f4 \u5185   {   for   (   int   i   =   l   ;   i   < =   r   ;   i   ++   )   a   [   i   ]   + =   k   ,   s   [   sid   ]   + =   k   ;   return   ;   }   for   (   int   i   =   l   ;   id   [   i   ]   = =   sid   ;   i   ++   )   a   [   i   ]   + =   k   ,   s   [   sid   ]   + =   k   ;   for   (   int   i   =   r   ;   id   [   i   ]   = =   eid   ;   i   --   )   a   [   i   ]   + =   k   ,   s   [   eid   ]   + =   k   ;   for   (   int   i   =   sid   +   1   ;   i   <   eid   ;   i   ++   )   s   [   i   ]   + =   k   *   sq   ,   b   [   i   ]   + =   k   ;   }","title":"add"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%88%86%E5%9D%97%E6%80%9D%E6%83%B3/%E5%88%86%E5%9D%97%E6%80%9D%E6%83%B3/#get_sum","text":"\u83b7\u53d6 \u533a\u95f4 \u548c \uff0c get _ sum   \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \uff1a   \\ ( sqrt ( n ) \\ )   long   long   get _ sum   (   int   l   ,   int   r   )   {   int   sid   =   id   [   l   ] ,   eid   =   id   [   r   ] ;   long   long   ans   =   0   ;   if   (   sid   = =   eid   )   {   / /   \u5728 \u540c\u4e00 \u4e00\u4e2a \u540c\u4e00\u4e2a \u5757 \u5185 \u76f4\u63a5 \u66b4\u529b \u6c42\u548c   for   (   int   i   =   l   ;   i   < =   r   ;   i   ++   )   ans   + =   a   [   i   ]   +   b   [   sid   ] ;   return   ans   ;   }   for   (   int   i   =   l   ;   id   [   i   ]   = =   sid   ;   i   ++   )   ans   + =   a   [   i   ]   +   b   [   sid   ] ;   / /   \u5bf9   l   \u6240\u5728 \u7684 \u5757 \u4e0e [ l ,   r ] \u7684 \u4ea4\u96c6 \u66b4\u529b \u6c42\u548c   for   (   int   i   =   r   ;   id   [   i   ]   = =   eid   ;   i   --   )   ans   + =   a   [   i   ]   +   b   [   eid   ] ;   / /   \u5bf9   r   \u6240\u5728 \u7684 \u5757 \u4e0e [ l ,   r ] \u7684 \u4ea4\u96c6 \u66b4\u529b \u6c42\u548c   for   (   int   i   =   sid   +   1   ;   i   <   eid   ;   i   ++   )   ans   + =   s   [   i   ] ;   / /   \u5bf9 \u88ab   l   \u6240\u5728 \u7684 \u5757 \u4e0e   r   \u6240\u5728 \u7684 \u5757 \u5939\u4f4f \u7684 \u5757 \u6c42\u548c   return   ans   ;   }   \u533a\u95f4 \u548c \u5206\u5757 -- \u4ee3\u7801 \u53c2\u8003   const   int   N   =   int   (   1e6   +   10   ) ;   long   long   a   [   N   ] ,   n   ;   / /   a   \u8868\u793a \u6570\u636e \u6570\u7ec4 \uff0c n   \u662f \u6570\u636e \u957f\u5ea6 \uff0c \u6570\u636e \u57df \u4ece   1   \u5f00\u59cb   long   long   id   [   N   ] ,   sq   ;   / /   id   \u8868\u5757 \u7684 \u7f16\u53f7 \uff0c sq   =   sqrt ( n )   long   long   b   [   N   ] ,   s   [   N   ] ;   / /   b [ i ]   \u8868\u793a \u7f16\u53f7 \u4e3a   i   \u7684 \u5757 \u7684 \u6570\u636e \u589e\u52a0 \u52a0\u503c \u589e\u52a0\u503c \uff0c s [ i ]   \u8868\u793a \u5757   i   \u7684 \u533a\u95f4 \u548c   void   init   ( )   {   sq   =   sqrt   (   n   ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   id   [   i   ]   =   (   i   -   1   )   /   sq   +   1   ;   s   [   id   [   i   ] ]   + =   a   [   i   ] ;   }   }   / /   \u5bf9 \u533a\u95f4   l \u3001 r   \u7684 \u5143\u7d20 \u90fd \u52a0\u4e0a   k   void   add   (   int   l   ,   int   r   ,   long   long   k   )   {   int   sid   =   id   [   l   ] ,   eid   =   id   [   r   ] ;   if   (   sid   = =   eid   )   / /   \u8bf4\u660e   l   \u548c   r   \u5728 \u540c\u4e00 \u4e00\u4e2a \u540c\u4e00\u4e2a \u533a\u95f4 \u5185   {   for   (   int   i   =   l   ;   i   < =   r   ;   i   ++   )   a   [   i   ]   + =   k   ,   s   [   sid   ]   + =   k   ;   return   ;   }   for   (   int   i   =   l   ;   id   [   i   ]   = =   sid   ;   i   ++   )   a   [   i   ]   + =   k   ,   s   [   sid   ]   + =   k   ;   for   (   int   i   =   r   ;   id   [   i   ]   = =   eid   ;   i   --   )   a   [   i   ]   + =   k   ,   s   [   eid   ]   + =   k   ;   for   (   int   i   =   sid   +   1   ;   i   <   eid   ;   i   ++   )   s   [   i   ]   + =   k   *   sq   ,   b   [   i   ]   + =   k   ;   }   long   long   get _ sum   (   int   l   ,   int   r   )   {   int   sid   =   id   [   l   ] ,   eid   =   id   [   r   ] ;   long   long   ans   =   0   ;   if   (   sid   = =   eid   )   {   for   (   int   i   =   l   ;   i   < =   r   ;   i   ++   )   ans   + =   a   [   i   ]   +   b   [   sid   ] ;   return   ans   ;   }   for   (   int   i   =   l   ;   id   [   i   ]   = =   sid   ;   i   ++   )   ans   + =   a   [   i   ]   +   b   [   sid   ] ;   for   (   int   i   =   r   ;   id   [   i   ]   = =   eid   ;   i   --   )   ans   + =   a   [   i   ]   +   b   [   eid   ] ;   for   (   int   i   =   sid   +   1   ;   i   <   eid   ;   i   ++   )   ans   + =   s   [   i   ] ;   return   ans   ;   }   \u4f8b\u9898   # 6280 .   \u6570\u5217 \u5206\u5757 \u5165\u95e8   4   \u4ee3\u7801 \u53c2\u8003   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   const   int   N   =   int   (   1e6   +   10   ) ;   long   long   a   [   N   ] ,   n   ;   / /   a   \u8868\u793a \u6570\u636e \u6570\u7ec4 \uff0c n   \u662f \u6570\u636e \u957f\u5ea6 \uff0c \u6570\u636e \u57df \u4ece   1   \u5f00\u59cb   long   long   id   [   N   ] ,   sq   ;   / /   id   \u8868\u5757 \u7684 \u7f16\u53f7 \uff0c sq   =   sqrt ( n )   long   long   b   [   N   ] ,   s   [   N   ] ;   / /   b [ i ]   \u8868\u793a \u7f16\u53f7 \u4e3a   i   \u7684 \u5757 \u7684 \u6570\u636e \u589e\u52a0 \u52a0\u503c \u589e\u52a0\u503c \uff0c s [ i ]   \u8868\u793a \u5757   i   \u7684 \u533a\u95f4 \u548c   void   init   ( )   {   sq   =   sqrt   (   n   ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   id   [   i   ]   =   (   i   -   1   )   /   sq   +   1   ;   s   [   id   [   i   ] ]   + =   a   [   i   ] ;   }   }   / /   \u5bf9 \u533a\u95f4   l \u3001 r   \u7684 \u5143\u7d20 \u90fd \u52a0\u4e0a   k   void   add   (   int   l   ,   int   r   ,   long   long   k   )   {   int   sid   =   id   [   l   ] ,   eid   =   id   [   r   ] ;   if   (   sid   = =   eid   )   / /   \u8bf4\u660e   l   \u548c   r   \u5728 \u540c\u4e00 \u4e00\u4e2a \u540c\u4e00\u4e2a \u533a\u95f4 \u5185   {   for   (   int   i   =   l   ;   i   < =   r   ;   i   ++   )   a   [   i   ]   + =   k   ,   s   [   sid   ]   + =   k   ;   return   ;   }   for   (   int   i   =   l   ;   id   [   i   ]   = =   sid   ;   i   ++   )   a   [   i   ]   + =   k   ,   s   [   sid   ]   + =   k   ;   for   (   int   i   =   r   ;   id   [   i   ]   = =   eid   ;   i   --   )   a   [   i   ]   + =   k   ,   s   [   eid   ]   + =   k   ;   for   (   int   i   =   sid   +   1   ;   i   <   eid   ;   i   ++   )   s   [   i   ]   + =   k   *   sq   ,   b   [   i   ]   + =   k   ;   }   long   long   get _ sum   (   int   l   ,   int   r   ,   long   long   p   )   {   int   sid   =   id   [   l   ] ,   eid   =   id   [   r   ] ;   long   long   ans   =   0   ;   if   (   sid   = =   eid   )   {   for   (   int   i   =   l   ;   i   < =   r   ;   i   ++   )   ans   =   (   ans   +   a   [   i   ]   +   b   [   sid   ] )   %   p   ;   return   ans   ;   }   for   (   int   i   =   l   ;   id   [   i   ]   = =   sid   ;   i   ++   )   ans   =   (   ans   +   a   [   i   ]   +   b   [   sid   ] )   %   p   ;   for   (   int   i   =   r   ;   id   [   i   ]   = =   eid   ;   i   --   )   ans   =   (   ans   +   a   [   i   ]   +   b   [   eid   ] )   %   p   ;   for   (   int   i   =   sid   +   1   ;   i   <   eid   ;   i   ++   )   ans   =   (   ans   +   s   [   i   ] )   %   p   ;   return   ans   ;   }   void   solve   (   void   )   {   scanf   (   \" % lld \"   ,   &   n   ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   scanf   (   \" % lld \"   ,   a   +   i   ) ;   init   ( ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   long   long   t   ,   a   ,   b   ,   c   ;   scanf   (   \" % lld% lld% lld% lld \"   ,   &   t   ,   &   a   ,   &   b   ,   &   c   ) ;   if   (   t   = =   0   )   add   (   a   ,   b   ,   c   ) ;   else   printf   (   \" % lld   \\ n   \"   ,   get _ sum   (   a   ,   b   ,   c   +   1   ) ) ;   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002","title":"get _ sum"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E9%93%BE%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8/","text":"\u5355\u94fe \u8868   \u7ed3\u6784 \u4f53\u7248   \u7ed3\u6784 \u4f53 \u5b9a\u4e49   struct   Node   {   int   v   ;   Node   *   ne   ;   Node   (   int   val   =   0   ,   Node   *   next   =   nullptr   )   {   v   =   val   ,   ne   =   next   ;   }   } ;   Node   *   head   =   nullptr   ;   empty   \u5224\u65ad \u94fe\u8868 \u662f\u5426 \u4e3a\u7a7a   bool   empty   (   Node   *   head   )   {   return   !   head   ;   }   size   \u83b7\u53d6 \u94fe\u8868 \u7684 \u957f\u5ea6   \u65b9\u6cd5 \u4e00 \uff1a \u5faa\u73af \u7248   int   size   (   Node   *   head   )   {   int   ans   =   0   ;   while   (   head   )   {   ans   ++   ;   head   =   head   - >   ne   ;   }   return   ans   ;   }   \u65b9\u6cd5 \u4e8c \uff1a \u9012\u5f52 \u7248   int   size   (   Node   *   head   )   {   if   (   !   head   )   return   0   ;   return   1   +   size   (   head   - >   ne   ) ;   }   insert   \u5728 \u4f4d\u7f6e \u300c k \u300d \u63d2\u5165 \u5143\u7d20   \u65b9\u6cd5 \u4e00 \uff1a \u5faa\u73af \u7248   / /   \u5728 \u4f4d\u7f6e   k   \u63d2\u5165 \u6570\u636e   x \uff0c \u8d77\u59cb \u4f4d\u7f6e \u662f   1   Node   *   insert   (   Node   *   head   ,   int   k   ,   int   x   )   {   if   (   k   <   1   )   return   nullptr   ;   if   (   !   head   | |   k   = =   1   )   return   new   Node   (   x   ,   head   ) ;   Node   *   p   =   head   ;   / /   i   =   1 ,   p   =   1   for   (   int   i   =   2   ;   i   <   k   &&   p   - >   ne   ;   i   ++   )   {   p   =   p   - >   ne   ;   / /   i   =   2 ,   p   =   2 ;   / /   i   =   k   -   1 ,   p   =   k   -   1   }   p   - >   ne   =   new   Node   (   x   ,   p   - >   ne   ) ;   return   head   ;   }   \u65b9\u6cd5 \u4e8c \uff1a \u9012\u5f52 \u7248   Node   *   insert   (   Node   *   head   ,   int   k   ,   int   x   )   {   if   (   k   <   1   )   return   nullptr   ;   if   (   !   head   | |   k   = =   1   )   return   new   Node   (   x   ,   head   ) ;   head   - >   ne   =   insert   (   head   - >   ne   ,   k   -   1   ,   x   ) ;   return   head   ;   }   push _ back   \u5c3e \u63d2 \u5143\u7d20   Node   *   push _ back   (   Node   *   head   ,   int   x   )   {   return   insert   (   head   ,   ~   (   1   < <   31   ) ,   x   ) ;   }   push _ front   \u5934 \u63d2 \u5143\u7d20   Node   *   push _ front   (   Node   *   head   ,   int   x   )   {   return   insert   (   head   ,   1   ,   x   ) ;   }   find   \u67e5\u627e \u4f4d\u7f6e \u4e3a   \u300c k \u300d \u7684 \u5143\u7d20   \u65b9\u6cd5 \u4e00 \uff1a \u5faa\u73af \u7248   int   find   (   Node   *   head   ,   int   k   )   {   if   (   k   <   0   )   return   ~   (   1   < <   31   ) ;   Node   *   p   =   head   ;   for   (   int   i   =   2   ;   i   < =   k   &&   p   ;   i   ++   )   {   p   =   p   - >   ne   ;   / /   i   =   2 ,   p   =   2 ;   i   =   k ,   p   =   k   }   / /   i   =   1 ,   p   =   1   if   (   p   )   return   p   - >   v   ;   return   ~   (   1   < <   31   ) ;   }   \u65b9\u6cd5 \u4e8c \uff1a \u9012\u5f52 \u7248   int   find   (   Node   *   head   ,   int   k   )   {   if   (   k   <   0   | |   !   head   )   return   ~   (   1   < <   31   ) ;   if   (   k   = =   1   )   return   head   - >   v   ;   return   find   (   head   - >   ne   ,   k   -   1   ) ;   }   erase   \u5220\u9664 \u4f4d\u7f6e \u4e3a   \u300c k \u300d \u7684 \u5143\u7d20   \u65b9\u6cd5 \u4e00 \uff1a \u5faa\u73af \u7248   Node   *   erase   (   Node   *   head   ,   int   k   )   {   if   (   k   <   0   | |   !   head   )   return   nullptr   ;   if   (   k   = =   1   )   {   Node   *   t   =   head   - >   ne   ;   delete   head   ;   return   t   ;   }   Node   *   p   =   head   ;   / /   i   =   1 ,   p   =   1   for   (   int   i   =   2   ;   i   <   k   &&   p   ;   i   ++   )   {   p   =   p   - >   ne   ;   / /   i   =   2 ,   p   =   2   / /   i   =   k   -   1 ,   p   =   k   -   1   }   if   (   !   p   | |   !   p   - >   ne   )   return   head   ;   Node   *   t   =   p   - >   ne   ;   p   - >   ne   =   t   - >   ne   ;   delete   t   ;   return   head   ;   }   \u65b9\u6cd5 \u4e8c \uff1a \u9012\u5f52 \u7248   Node   *   erase   (   Node   *   head   ,   int   k   )   {   if   (   k   <   0   | |   !   head   )   return   nullptr   ;   if   (   k   = =   1   )   {   Node   *   t   =   head   - >   ne   ;   delete   head   ;   return   t   ;   }   head   - >   ne   =   erase   (   head   - >   ne   ,   k   -   1   ) ;   return   head   ;   }   show   \u8f93\u51fa \u94fe\u8868 \u7684 \u5185\u5bb9   \u65b9\u6cd5 \u4e00 \uff1a \u5faa\u73af \u7248   void   show   (   Node   *   head   )   {   while   (   head   )   {   printf   (   \" % d   \"   ,   head   - >   v   ) ;   head   =   head   - >   ne   ;   }   puts   (   \" \"   ) ;   }   \u65b9\u6cd5 \u4e8c \uff1a \u9012\u5f52 \u7248   void   show   (   Node   *   head   )   {   if   (   !   head   )   {   puts   (   \" \"   ) ;   return   ;   }   printf   (   \" % d   \"   ,   head   - >   v   ) ;   show   (   head   - >   ne   ) ;   }   msort   \u91c7\u7528 \u300c \u5f52\u5e76 \u6392\u5e8f \u300d \u6392\u5e8f \u94fe\u8868   Node   *   merge   (   Node   *   h1   ,   Node   *   h2   )   {   if   (   !   h1   | |   !   h2   )   return   h1   ?   h1   :   h2   ;   / /   \u8ba9   h1   \u6700\u5c0f \uff0c \u7b80\u5316 \u4ee3\u7801   if   (   h1   - >   v   >   h2   - >   v   )   swap   <   Node   * >   (   h1   ,   h2   ) ;   h1   - >   ne   =   merge   (   h1   - >   ne   ,   h2   ) ;   return   h1   ;   }   Node   *   msort   (   Node   *   head   )   {   if   (   !   head   | |   !   head   - >   ne   )   return   head   ;   Node   *   slow   ,   *   fast   ,   *   p   ;   p   =   slow   =   fast   =   head   ;   / /   \u5feb\u6162 \u6307\u9488 \u5bfb\u627e \u94fe\u8868 \u4e2d \u70b9   / /   \u82e5 \u662f \u5947\u6570 \u8282\u70b9 \uff1a 1 \uff0c 2 \uff0c 3 \uff0c 4 \uff0c 5 \uff1b   p   \u4f1a \u6307\u5411   2 \uff0c   slow   \u6307\u5411   3 \uff0c   fast   \u6307\u5411   5   / /   \u82e5 \u662f \u5076\u6570 \u8282\u70b9 \uff1a 1 \uff0c 2 \uff0c 3 \uff0c 4 \uff1b   p   \u4f1a \u6307\u5411   2 \uff0c slow   \u6307\u5411   3 \uff0c fast   \u6307\u5411   nullptr   while   (   fast   &&   fast   - >   ne   )   {   p   =   slow   ;   slow   =   slow   - >   ne   ;   fast   =   fast   - >   ne   - >   ne   ;   }   p   - >   ne   =   nullptr   ;   head   =   msort   (   head   ) ;   slow   =   msort   (   slow   ) ;   return   merge   (   head   ,   slow   ) ;   }   \u7ed3\u6784 \u4f53\u7248 \u4ee3\u7801 \u6c47\u603b   \u5faa\u73af \u7248 \u4ee3\u7801 \u6c47\u603b   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80   81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96   97   98   99   100   101   102   103   104   105   106   107   108   109   110   111   112   113   struct   Node   {   int   v   ;   Node   *   ne   ;   Node   (   int   val   =   0   ,   Node   *   next   =   nullptr   )   {   v   =   val   ,   ne   =   next   ;   }   } ;   Node   *   head   =   nullptr   ;   bool   empty   (   Node   *   head   )   {   return   !   head   ;   }   int   size   (   Node   *   head   )   {   int   ans   =   0   ;   while   (   head   )   {   ans   ++   ;   head   =   head   - >   ne   ;   }   return   ans   ;   }   / /   \u5728 \u4f4d\u7f6e   k   \u63d2\u5165 \u6570\u636e   x \uff0c \u8d77\u59cb \u4f4d\u7f6e \u662f   1   Node   *   insert   (   Node   *   head   ,   int   k   ,   int   x   )   {   if   (   k   <   1   )   return   nullptr   ;   if   (   !   head   | |   k   = =   1   )   return   new   Node   (   x   ,   head   ) ;   Node   *   p   =   head   ;   / /   i   =   1 ,   p   =   1   for   (   int   i   =   2   ;   i   <   k   &&   p   - >   ne   ;   i   ++   )   {   p   =   p   - >   ne   ;   / /   i   =   2 ,   p   =   2 ;   / /   i   =   k   -   1 ,   p   =   k   -   1   }   p   - >   ne   =   new   Node   (   x   ,   p   - >   ne   ) ;   return   head   ;   }   Node   *   push _ back   (   Node   *   head   ,   int   x   )   {   return   insert   (   head   ,   ~   (   1   < <   31   ) ,   x   ) ;   }   Node   *   push _ front   (   Node   *   head   ,   int   x   )   {   return   insert   (   head   ,   1   ,   x   ) ;   }   int   find   (   Node   *   head   ,   int   k   )   {   if   (   k   <   0   )   return   ~   (   1   < <   31   ) ;   Node   *   p   =   head   ;   for   (   int   i   =   2   ;   i   < =   k   &&   p   ;   i   ++   )   {   p   =   p   - >   ne   ;   / /   i   =   2 ,   p   =   2 ;   i   =   k ,   p   =   k   }   / /   i   =   1 ,   p   =   1   if   (   p   )   return   p   - >   v   ;   return   ~   (   1   < <   31   ) ;   }   Node   *   erase   (   Node   *   head   ,   int   k   )   {   if   (   k   <   0   | |   !   head   )   return   nullptr   ;   if   (   k   = =   1   )   {   Node   *   t   =   head   - >   ne   ;   delete   head   ;   return   t   ;   }   Node   *   p   =   head   ;   / /   i   =   1 ,   p   =   1   for   (   int   i   =   2   ;   i   <   k   &&   p   ;   i   ++   )   {   p   =   p   - >   ne   ;   / /   i   =   2 ,   p   =   2   / /   i   =   k   -   1 ,   p   =   k   -   1   }   if   (   !   p   | |   !   p   - >   ne   )   return   head   ;   Node   *   t   =   p   - >   ne   ;   p   - >   ne   =   t   - >   ne   ;   delete   t   ;   return   head   ;   }   void   show   (   Node   *   head   )   {   while   (   head   )   {   printf   (   \" % d   \"   ,   head   - >   v   ) ;   head   =   head   - >   ne   ;   }   puts   (   \" \"   ) ;   }   Node   *   merge   (   Node   *   h1   ,   Node   *   h2   )   {   if   (   !   h1   | |   !   h2   )   return   h1   ?   h1   :   h2   ;   / /   \u8ba9   h1   \u6700\u5c0f \uff0c \u7b80\u5316 \u4ee3\u7801   if   (   h1   - >   v   >   h2   - >   v   )   swap   <   Node   * >   (   h1   ,   h2   ) ;   h1   - >   ne   =   merge   (   h1   - >   ne   ,   h2   ) ;   return   h1   ;   }   Node   *   msort   (   Node   *   head   )   {   if   (   !   head   | |   !   head   - >   ne   )   return   head   ;   Node   *   slow   ,   *   fast   ,   *   p   ;   p   =   slow   =   fast   =   head   ;   / /   \u5feb\u6162 \u6307\u9488 \u5bfb\u627e \u94fe\u8868 \u4e2d \u70b9   / /   \u82e5 \u662f \u5947\u6570 \u8282\u70b9 \uff1a 1 \uff0c 2 \uff0c 3 \uff0c 4 \uff0c 5 \uff1b   p   \u4f1a \u6307\u5411   2 \uff0c   slow   \u6307\u5411   3 \uff0c   fast   \u6307\u5411   5   / /   \u82e5 \u662f \u5076\u6570 \u8282\u70b9 \uff1a 1 \uff0c 2 \uff0c 3 \uff0c 4 \uff1b   p   \u4f1a \u6307\u5411   2 \uff0c slow   \u6307\u5411   3 \uff0c fast   \u6307\u5411   nullptr   while   (   fast   &&   fast   - >   ne   )   {   p   =   slow   ;   slow   =   slow   - >   ne   ;   fast   =   fast   - >   ne   - >   ne   ;   }   p   - >   ne   =   nullptr   ;   head   =   msort   (   head   ) ;   slow   =   msort   (   slow   ) ;   return   merge   (   head   ,   slow   ) ;   }   \u9012\u5f52 \u7248 \u4ee3\u7801 \u6c47\u603b   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80   81   82   83   84   85   86   struct   Node   {   int   v   ;   Node   *   ne   ;   Node   (   int   val   =   0   ,   Node   *   next   =   nullptr   )   {   v   =   val   ,   ne   =   next   ;   }   } ;   Node   *   head   =   nullptr   ;   bool   empty   (   Node   *   head   )   {   return   !   head   ;   }   int   size   (   Node   *   head   )   {   if   (   !   head   )   return   0   ;   return   1   +   size   (   head   - >   ne   ) ;   }   Node   *   insert   (   Node   *   head   ,   int   k   ,   int   x   )   {   if   (   k   <   1   )   return   nullptr   ;   if   (   !   head   | |   k   = =   1   )   return   new   Node   (   x   ,   head   ) ;   head   - >   ne   =   insert   (   head   - >   ne   ,   k   -   1   ,   x   ) ;   return   head   ;   }   Node   *   push _ back   (   Node   *   head   ,   int   x   )   {   return   insert   (   head   ,   ~   (   1   < <   31   ) ,   x   ) ;   }   Node   *   push _ front   (   Node   *   head   ,   int   x   )   {   return   insert   (   head   ,   1   ,   x   ) ;   }   int   find   (   Node   *   head   ,   int   k   )   {   if   (   k   <   0   | |   !   head   )   return   ~   (   1   < <   31   ) ;   if   (   k   = =   1   )   return   head   - >   v   ;   return   find   (   head   - >   ne   ,   k   -   1   ) ;   }   Node   *   erase   (   Node   *   head   ,   int   k   )   {   if   (   k   <   0   | |   !   head   )   return   nullptr   ;   if   (   k   = =   1   )   {   Node   *   t   =   head   - >   ne   ;   delete   head   ;   return   t   ;   }   head   - >   ne   =   erase   (   head   - >   ne   ,   k   -   1   ) ;   return   head   ;   }   void   show   (   Node   *   head   )   {   if   (   !   head   )   {   puts   (   \" \"   ) ;   return   ;   }   printf   (   \" % d   \"   ,   head   - >   v   ) ;   show   (   head   - >   ne   ) ;   }   Node   *   merge   (   Node   *   h1   ,   Node   *   h2   )   {   if   (   !   h1   | |   !   h2   )   return   h1   ?   h1   :   h2   ;   / /   \u8ba9   h1   \u6700\u5c0f \uff0c \u7b80\u5316 \u4ee3\u7801   if   (   h1   - >   v   >   h2   - >   v   )   swap   <   Node   * >   (   h1   ,   h2   ) ;   h1   - >   ne   =   merge   (   h1   - >   ne   ,   h2   ) ;   return   h1   ;   }   Node   *   msort   (   Node   *   head   )   {   if   (   !   head   | |   !   head   - >   ne   )   return   head   ;   Node   *   slow   ,   *   fast   ,   *   p   ;   p   =   slow   =   fast   =   head   ;   / /   \u5feb\u6162 \u6307\u9488 \u5bfb\u627e \u94fe\u8868 \u4e2d \u70b9   / /   \u82e5 \u662f \u5947\u6570 \u8282\u70b9 \uff1a 1 \uff0c 2 \uff0c 3 \uff0c 4 \uff0c 5 \uff1b   p   \u4f1a \u6307\u5411   2 \uff0c   slow   \u6307\u5411   3 \uff0c   fast   \u6307\u5411   5   / /   \u82e5 \u662f \u5076\u6570 \u8282\u70b9 \uff1a 1 \uff0c 2 \uff0c 3 \uff0c 4 \uff1b   p   \u4f1a \u6307\u5411   2 \uff0c slow   \u6307\u5411   3 \uff0c fast   \u6307\u5411   nullptr   while   (   fast   &&   fast   - >   ne   )   {   p   =   slow   ;   slow   =   slow   - >   ne   ;   fast   =   fast   - >   ne   - >   ne   ;   }   p   - >   ne   =   nullptr   ;   head   =   msort   (   head   ) ;   slow   =   msort   (   slow   ) ;   return   merge   (   head   ,   slow   ) ;   }","title":"\u5355\u94fe \u8868"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E9%93%BE%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8/#_1","text":"","title":"\u5355\u94fe \u8868"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E9%93%BE%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8/#_2","text":"","title":"\u7ed3\u6784 \u4f53\u7248"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E9%93%BE%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8/#_3","text":"struct   Node   {   int   v   ;   Node   *   ne   ;   Node   (   int   val   =   0   ,   Node   *   next   =   nullptr   )   {   v   =   val   ,   ne   =   next   ;   }   } ;   Node   *   head   =   nullptr   ;","title":"\u7ed3\u6784 \u4f53 \u5b9a\u4e49"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E9%93%BE%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8/#empty","text":"\u5224\u65ad \u94fe\u8868 \u662f\u5426 \u4e3a\u7a7a   bool   empty   (   Node   *   head   )   {   return   !   head   ;   }","title":"empty"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E9%93%BE%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8/#size","text":"\u83b7\u53d6 \u94fe\u8868 \u7684 \u957f\u5ea6   \u65b9\u6cd5 \u4e00 \uff1a \u5faa\u73af \u7248   int   size   (   Node   *   head   )   {   int   ans   =   0   ;   while   (   head   )   {   ans   ++   ;   head   =   head   - >   ne   ;   }   return   ans   ;   }   \u65b9\u6cd5 \u4e8c \uff1a \u9012\u5f52 \u7248   int   size   (   Node   *   head   )   {   if   (   !   head   )   return   0   ;   return   1   +   size   (   head   - >   ne   ) ;   }","title":"size"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E9%93%BE%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8/#insert","text":"\u5728 \u4f4d\u7f6e \u300c k \u300d \u63d2\u5165 \u5143\u7d20   \u65b9\u6cd5 \u4e00 \uff1a \u5faa\u73af \u7248   / /   \u5728 \u4f4d\u7f6e   k   \u63d2\u5165 \u6570\u636e   x \uff0c \u8d77\u59cb \u4f4d\u7f6e \u662f   1   Node   *   insert   (   Node   *   head   ,   int   k   ,   int   x   )   {   if   (   k   <   1   )   return   nullptr   ;   if   (   !   head   | |   k   = =   1   )   return   new   Node   (   x   ,   head   ) ;   Node   *   p   =   head   ;   / /   i   =   1 ,   p   =   1   for   (   int   i   =   2   ;   i   <   k   &&   p   - >   ne   ;   i   ++   )   {   p   =   p   - >   ne   ;   / /   i   =   2 ,   p   =   2 ;   / /   i   =   k   -   1 ,   p   =   k   -   1   }   p   - >   ne   =   new   Node   (   x   ,   p   - >   ne   ) ;   return   head   ;   }   \u65b9\u6cd5 \u4e8c \uff1a \u9012\u5f52 \u7248   Node   *   insert   (   Node   *   head   ,   int   k   ,   int   x   )   {   if   (   k   <   1   )   return   nullptr   ;   if   (   !   head   | |   k   = =   1   )   return   new   Node   (   x   ,   head   ) ;   head   - >   ne   =   insert   (   head   - >   ne   ,   k   -   1   ,   x   ) ;   return   head   ;   }","title":"insert"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E9%93%BE%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8/#push_back","text":"\u5c3e \u63d2 \u5143\u7d20   Node   *   push _ back   (   Node   *   head   ,   int   x   )   {   return   insert   (   head   ,   ~   (   1   < <   31   ) ,   x   ) ;   }","title":"push _ back"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E9%93%BE%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8/#push_front","text":"\u5934 \u63d2 \u5143\u7d20   Node   *   push _ front   (   Node   *   head   ,   int   x   )   {   return   insert   (   head   ,   1   ,   x   ) ;   }","title":"push _ front"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E9%93%BE%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8/#find","text":"\u67e5\u627e \u4f4d\u7f6e \u4e3a   \u300c k \u300d \u7684 \u5143\u7d20   \u65b9\u6cd5 \u4e00 \uff1a \u5faa\u73af \u7248   int   find   (   Node   *   head   ,   int   k   )   {   if   (   k   <   0   )   return   ~   (   1   < <   31   ) ;   Node   *   p   =   head   ;   for   (   int   i   =   2   ;   i   < =   k   &&   p   ;   i   ++   )   {   p   =   p   - >   ne   ;   / /   i   =   2 ,   p   =   2 ;   i   =   k ,   p   =   k   }   / /   i   =   1 ,   p   =   1   if   (   p   )   return   p   - >   v   ;   return   ~   (   1   < <   31   ) ;   }   \u65b9\u6cd5 \u4e8c \uff1a \u9012\u5f52 \u7248   int   find   (   Node   *   head   ,   int   k   )   {   if   (   k   <   0   | |   !   head   )   return   ~   (   1   < <   31   ) ;   if   (   k   = =   1   )   return   head   - >   v   ;   return   find   (   head   - >   ne   ,   k   -   1   ) ;   }","title":"find"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E9%93%BE%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8/#erase","text":"\u5220\u9664 \u4f4d\u7f6e \u4e3a   \u300c k \u300d \u7684 \u5143\u7d20   \u65b9\u6cd5 \u4e00 \uff1a \u5faa\u73af \u7248   Node   *   erase   (   Node   *   head   ,   int   k   )   {   if   (   k   <   0   | |   !   head   )   return   nullptr   ;   if   (   k   = =   1   )   {   Node   *   t   =   head   - >   ne   ;   delete   head   ;   return   t   ;   }   Node   *   p   =   head   ;   / /   i   =   1 ,   p   =   1   for   (   int   i   =   2   ;   i   <   k   &&   p   ;   i   ++   )   {   p   =   p   - >   ne   ;   / /   i   =   2 ,   p   =   2   / /   i   =   k   -   1 ,   p   =   k   -   1   }   if   (   !   p   | |   !   p   - >   ne   )   return   head   ;   Node   *   t   =   p   - >   ne   ;   p   - >   ne   =   t   - >   ne   ;   delete   t   ;   return   head   ;   }   \u65b9\u6cd5 \u4e8c \uff1a \u9012\u5f52 \u7248   Node   *   erase   (   Node   *   head   ,   int   k   )   {   if   (   k   <   0   | |   !   head   )   return   nullptr   ;   if   (   k   = =   1   )   {   Node   *   t   =   head   - >   ne   ;   delete   head   ;   return   t   ;   }   head   - >   ne   =   erase   (   head   - >   ne   ,   k   -   1   ) ;   return   head   ;   }","title":"erase"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E9%93%BE%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8/#show","text":"\u8f93\u51fa \u94fe\u8868 \u7684 \u5185\u5bb9   \u65b9\u6cd5 \u4e00 \uff1a \u5faa\u73af \u7248   void   show   (   Node   *   head   )   {   while   (   head   )   {   printf   (   \" % d   \"   ,   head   - >   v   ) ;   head   =   head   - >   ne   ;   }   puts   (   \" \"   ) ;   }   \u65b9\u6cd5 \u4e8c \uff1a \u9012\u5f52 \u7248   void   show   (   Node   *   head   )   {   if   (   !   head   )   {   puts   (   \" \"   ) ;   return   ;   }   printf   (   \" % d   \"   ,   head   - >   v   ) ;   show   (   head   - >   ne   ) ;   }","title":"show"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E9%93%BE%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8/#msort","text":"\u91c7\u7528 \u300c \u5f52\u5e76 \u6392\u5e8f \u300d \u6392\u5e8f \u94fe\u8868   Node   *   merge   (   Node   *   h1   ,   Node   *   h2   )   {   if   (   !   h1   | |   !   h2   )   return   h1   ?   h1   :   h2   ;   / /   \u8ba9   h1   \u6700\u5c0f \uff0c \u7b80\u5316 \u4ee3\u7801   if   (   h1   - >   v   >   h2   - >   v   )   swap   <   Node   * >   (   h1   ,   h2   ) ;   h1   - >   ne   =   merge   (   h1   - >   ne   ,   h2   ) ;   return   h1   ;   }   Node   *   msort   (   Node   *   head   )   {   if   (   !   head   | |   !   head   - >   ne   )   return   head   ;   Node   *   slow   ,   *   fast   ,   *   p   ;   p   =   slow   =   fast   =   head   ;   / /   \u5feb\u6162 \u6307\u9488 \u5bfb\u627e \u94fe\u8868 \u4e2d \u70b9   / /   \u82e5 \u662f \u5947\u6570 \u8282\u70b9 \uff1a 1 \uff0c 2 \uff0c 3 \uff0c 4 \uff0c 5 \uff1b   p   \u4f1a \u6307\u5411   2 \uff0c   slow   \u6307\u5411   3 \uff0c   fast   \u6307\u5411   5   / /   \u82e5 \u662f \u5076\u6570 \u8282\u70b9 \uff1a 1 \uff0c 2 \uff0c 3 \uff0c 4 \uff1b   p   \u4f1a \u6307\u5411   2 \uff0c slow   \u6307\u5411   3 \uff0c fast   \u6307\u5411   nullptr   while   (   fast   &&   fast   - >   ne   )   {   p   =   slow   ;   slow   =   slow   - >   ne   ;   fast   =   fast   - >   ne   - >   ne   ;   }   p   - >   ne   =   nullptr   ;   head   =   msort   (   head   ) ;   slow   =   msort   (   slow   ) ;   return   merge   (   head   ,   slow   ) ;   }   \u7ed3\u6784 \u4f53\u7248 \u4ee3\u7801 \u6c47\u603b   \u5faa\u73af \u7248 \u4ee3\u7801 \u6c47\u603b   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80   81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96   97   98   99   100   101   102   103   104   105   106   107   108   109   110   111   112   113   struct   Node   {   int   v   ;   Node   *   ne   ;   Node   (   int   val   =   0   ,   Node   *   next   =   nullptr   )   {   v   =   val   ,   ne   =   next   ;   }   } ;   Node   *   head   =   nullptr   ;   bool   empty   (   Node   *   head   )   {   return   !   head   ;   }   int   size   (   Node   *   head   )   {   int   ans   =   0   ;   while   (   head   )   {   ans   ++   ;   head   =   head   - >   ne   ;   }   return   ans   ;   }   / /   \u5728 \u4f4d\u7f6e   k   \u63d2\u5165 \u6570\u636e   x \uff0c \u8d77\u59cb \u4f4d\u7f6e \u662f   1   Node   *   insert   (   Node   *   head   ,   int   k   ,   int   x   )   {   if   (   k   <   1   )   return   nullptr   ;   if   (   !   head   | |   k   = =   1   )   return   new   Node   (   x   ,   head   ) ;   Node   *   p   =   head   ;   / /   i   =   1 ,   p   =   1   for   (   int   i   =   2   ;   i   <   k   &&   p   - >   ne   ;   i   ++   )   {   p   =   p   - >   ne   ;   / /   i   =   2 ,   p   =   2 ;   / /   i   =   k   -   1 ,   p   =   k   -   1   }   p   - >   ne   =   new   Node   (   x   ,   p   - >   ne   ) ;   return   head   ;   }   Node   *   push _ back   (   Node   *   head   ,   int   x   )   {   return   insert   (   head   ,   ~   (   1   < <   31   ) ,   x   ) ;   }   Node   *   push _ front   (   Node   *   head   ,   int   x   )   {   return   insert   (   head   ,   1   ,   x   ) ;   }   int   find   (   Node   *   head   ,   int   k   )   {   if   (   k   <   0   )   return   ~   (   1   < <   31   ) ;   Node   *   p   =   head   ;   for   (   int   i   =   2   ;   i   < =   k   &&   p   ;   i   ++   )   {   p   =   p   - >   ne   ;   / /   i   =   2 ,   p   =   2 ;   i   =   k ,   p   =   k   }   / /   i   =   1 ,   p   =   1   if   (   p   )   return   p   - >   v   ;   return   ~   (   1   < <   31   ) ;   }   Node   *   erase   (   Node   *   head   ,   int   k   )   {   if   (   k   <   0   | |   !   head   )   return   nullptr   ;   if   (   k   = =   1   )   {   Node   *   t   =   head   - >   ne   ;   delete   head   ;   return   t   ;   }   Node   *   p   =   head   ;   / /   i   =   1 ,   p   =   1   for   (   int   i   =   2   ;   i   <   k   &&   p   ;   i   ++   )   {   p   =   p   - >   ne   ;   / /   i   =   2 ,   p   =   2   / /   i   =   k   -   1 ,   p   =   k   -   1   }   if   (   !   p   | |   !   p   - >   ne   )   return   head   ;   Node   *   t   =   p   - >   ne   ;   p   - >   ne   =   t   - >   ne   ;   delete   t   ;   return   head   ;   }   void   show   (   Node   *   head   )   {   while   (   head   )   {   printf   (   \" % d   \"   ,   head   - >   v   ) ;   head   =   head   - >   ne   ;   }   puts   (   \" \"   ) ;   }   Node   *   merge   (   Node   *   h1   ,   Node   *   h2   )   {   if   (   !   h1   | |   !   h2   )   return   h1   ?   h1   :   h2   ;   / /   \u8ba9   h1   \u6700\u5c0f \uff0c \u7b80\u5316 \u4ee3\u7801   if   (   h1   - >   v   >   h2   - >   v   )   swap   <   Node   * >   (   h1   ,   h2   ) ;   h1   - >   ne   =   merge   (   h1   - >   ne   ,   h2   ) ;   return   h1   ;   }   Node   *   msort   (   Node   *   head   )   {   if   (   !   head   | |   !   head   - >   ne   )   return   head   ;   Node   *   slow   ,   *   fast   ,   *   p   ;   p   =   slow   =   fast   =   head   ;   / /   \u5feb\u6162 \u6307\u9488 \u5bfb\u627e \u94fe\u8868 \u4e2d \u70b9   / /   \u82e5 \u662f \u5947\u6570 \u8282\u70b9 \uff1a 1 \uff0c 2 \uff0c 3 \uff0c 4 \uff0c 5 \uff1b   p   \u4f1a \u6307\u5411   2 \uff0c   slow   \u6307\u5411   3 \uff0c   fast   \u6307\u5411   5   / /   \u82e5 \u662f \u5076\u6570 \u8282\u70b9 \uff1a 1 \uff0c 2 \uff0c 3 \uff0c 4 \uff1b   p   \u4f1a \u6307\u5411   2 \uff0c slow   \u6307\u5411   3 \uff0c fast   \u6307\u5411   nullptr   while   (   fast   &&   fast   - >   ne   )   {   p   =   slow   ;   slow   =   slow   - >   ne   ;   fast   =   fast   - >   ne   - >   ne   ;   }   p   - >   ne   =   nullptr   ;   head   =   msort   (   head   ) ;   slow   =   msort   (   slow   ) ;   return   merge   (   head   ,   slow   ) ;   }   \u9012\u5f52 \u7248 \u4ee3\u7801 \u6c47\u603b   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80   81   82   83   84   85   86   struct   Node   {   int   v   ;   Node   *   ne   ;   Node   (   int   val   =   0   ,   Node   *   next   =   nullptr   )   {   v   =   val   ,   ne   =   next   ;   }   } ;   Node   *   head   =   nullptr   ;   bool   empty   (   Node   *   head   )   {   return   !   head   ;   }   int   size   (   Node   *   head   )   {   if   (   !   head   )   return   0   ;   return   1   +   size   (   head   - >   ne   ) ;   }   Node   *   insert   (   Node   *   head   ,   int   k   ,   int   x   )   {   if   (   k   <   1   )   return   nullptr   ;   if   (   !   head   | |   k   = =   1   )   return   new   Node   (   x   ,   head   ) ;   head   - >   ne   =   insert   (   head   - >   ne   ,   k   -   1   ,   x   ) ;   return   head   ;   }   Node   *   push _ back   (   Node   *   head   ,   int   x   )   {   return   insert   (   head   ,   ~   (   1   < <   31   ) ,   x   ) ;   }   Node   *   push _ front   (   Node   *   head   ,   int   x   )   {   return   insert   (   head   ,   1   ,   x   ) ;   }   int   find   (   Node   *   head   ,   int   k   )   {   if   (   k   <   0   | |   !   head   )   return   ~   (   1   < <   31   ) ;   if   (   k   = =   1   )   return   head   - >   v   ;   return   find   (   head   - >   ne   ,   k   -   1   ) ;   }   Node   *   erase   (   Node   *   head   ,   int   k   )   {   if   (   k   <   0   | |   !   head   )   return   nullptr   ;   if   (   k   = =   1   )   {   Node   *   t   =   head   - >   ne   ;   delete   head   ;   return   t   ;   }   head   - >   ne   =   erase   (   head   - >   ne   ,   k   -   1   ) ;   return   head   ;   }   void   show   (   Node   *   head   )   {   if   (   !   head   )   {   puts   (   \" \"   ) ;   return   ;   }   printf   (   \" % d   \"   ,   head   - >   v   ) ;   show   (   head   - >   ne   ) ;   }   Node   *   merge   (   Node   *   h1   ,   Node   *   h2   )   {   if   (   !   h1   | |   !   h2   )   return   h1   ?   h1   :   h2   ;   / /   \u8ba9   h1   \u6700\u5c0f \uff0c \u7b80\u5316 \u4ee3\u7801   if   (   h1   - >   v   >   h2   - >   v   )   swap   <   Node   * >   (   h1   ,   h2   ) ;   h1   - >   ne   =   merge   (   h1   - >   ne   ,   h2   ) ;   return   h1   ;   }   Node   *   msort   (   Node   *   head   )   {   if   (   !   head   | |   !   head   - >   ne   )   return   head   ;   Node   *   slow   ,   *   fast   ,   *   p   ;   p   =   slow   =   fast   =   head   ;   / /   \u5feb\u6162 \u6307\u9488 \u5bfb\u627e \u94fe\u8868 \u4e2d \u70b9   / /   \u82e5 \u662f \u5947\u6570 \u8282\u70b9 \uff1a 1 \uff0c 2 \uff0c 3 \uff0c 4 \uff0c 5 \uff1b   p   \u4f1a \u6307\u5411   2 \uff0c   slow   \u6307\u5411   3 \uff0c   fast   \u6307\u5411   5   / /   \u82e5 \u662f \u5076\u6570 \u8282\u70b9 \uff1a 1 \uff0c 2 \uff0c 3 \uff0c 4 \uff1b   p   \u4f1a \u6307\u5411   2 \uff0c slow   \u6307\u5411   3 \uff0c fast   \u6307\u5411   nullptr   while   (   fast   &&   fast   - >   ne   )   {   p   =   slow   ;   slow   =   slow   - >   ne   ;   fast   =   fast   - >   ne   - >   ne   ;   }   p   - >   ne   =   nullptr   ;   head   =   msort   (   head   ) ;   slow   =   msort   (   slow   ) ;   return   merge   (   head   ,   slow   ) ;   }","title":"msort"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E6%A0%91/","text":"\u592b\u66fc \u970d\u592b\u66fc \u6811   \u5f15\u4f8b   \u73ed\u4e0a \u6709   5   \u4eba \u4e0d \u5408\u683c \uff0c 15   \u4eba   \u53ca\u683c \uff0c 40   \u4eba \u4e2d\u7b49 \uff0c 30   \u4eba \u826f\u597d \uff0c 10   \u4eba   \u4f18\u79c0 \uff0c \u5e76 \u89c4\u5b9a \u7b49\u7ea7 \u5206\u5e03 \u60c5\u51b5 \u5982\u4e0b \u8868 :   \u7b49\u7ea7   \u4e0d\u53ca \u53ca\u683c \u4e0d\u53ca\u683c   \u53ca\u683c   \u4e2d\u7b49   \u826f\u597d   \u4f18\u79c0   \u5206\u6570   \\ ( 0   \\ sim   59 \\ )   \\ ( 60   \\ sim   69 \\ )   \\ ( 70   \\ sim   79 \\ )   \\ ( 80   \\ sim   89 \\ )   \\ ( 90   \\ sim   100 \\ )   \u4eba\u6570 \u5360 \u6bd4   \\ ( 5 \\ % \\ )   \\ ( 15 \\ % \\ )   \\ ( 40 \\ % \\ )   \\ ( 30 \\ % \\ )   \\ ( 10 \\ % \\ )   \u8001\u5e08 \u8bbe\u8ba1 \u4e86 \u4e00\u4e2a \u51fd\u6570 \u6765 \u5904\u7406 \u5b66\u751f \u7684 \u5206\u6570 \u7b49\u7ea7 \uff1a   void   f   (   int   a   )   {   if   (   a   <   60   )   printf   (   \" \u4e0d\u53ca \u53ca\u683c \u4e0d\u53ca\u683c   \\ n   \"   ) ;   else   if   (   a   <   70   )   printf   (   \" \u53ca\u683c   \\ n   \"   ) ;   else   if   (   a   <   80   )   printf   (   \" \u4e2d\u7b49   \\ n   \"   ) ;   else   if   (   a   <   90   )   printf   (   \" \u826f\u597d   \\ n   \"   ) ;   else   printf   (   \" \u4f18\u79c0   \\ n   \"   ) ;   }   \u8be5 \u7a0b\u5e8f \u7684 \u6267\u884c \u987a\u5e8f \u662f \uff1a   \u8be5 \u7a0b\u5e8f \u7684 \u6267\u884c \u6548\u7387 \u662f \u6709 \u95ee\u9898 \u7684 \uff0c \u56e0\u4e3a \u6211\u4eec \u53d1\u73b0 \u6210\u7ee9 \u4f4e\u4e8e   \\ ( 60 \\ )   \u7684 \u5b66\u751f \u4ec5 \u5360   \\ ( 5 \\ % \\ )   \uff0c \u800c \u9ad8\u4e8e   \\ ( 70 \\ )   \u5206 \u7684 \u5b66\u751f \u5374 \u5360 \u4e86 \u5927\u591a \u591a\u6570 \u5927\u591a\u6570   \\ ( 80 \\ % \\ )   \uff0c \u5047\u8bbe \u8be5 \u8001\u5e08 \u5c31 \u7528 \u6b64 \u7a0b\u5e8f \u6765 \u7ed9 \u5b66\u751f \u5212\u5206 \u7b49\u7ea7 \uff0c \u6211\u4eec \u6765\u7b97 \u4e00\u4e0b \u8be5 \u7a0b\u5e8f \u603b\u5171 \u6267\u884c \u4e86 \u591a\u5c11 \u6b65 \uff1a   \\ [   5   +   15   *   2   +   40   *   3   +   30   *   4   +   10   *   4   =   315   \\ ]   \u5982\u679c \u6211\u4eec \u628a \u5206\u5e03 \u8d8a \u591a \uff0c \u5c31 \u8d8a \u653e\u5f00 \u5934\u4f1a \u662f \u600e\u6837 \u7684 \u60c5\u51b5 \u5462 \uff1f \u8003\u8651 \u4e0b\u65b9 \u7684 \u7a0b\u5e8f \u56fe \uff1a   \u6211\u4eec \u6765\u7b97 \u4e00\u4e0b \u4f7f\u7528 \u8be5 \u7a0b\u5e8f \u6765 \u7ed9 \u5b66\u751f \u5212\u5206 \u7b49\u7ea7 \u9700\u8981 \u6267\u884c \u591a\u5c11 \u6b65 \uff1a   \\ [   5   *   3   +   15   *   3   +   40   *   2   +   30   *   2   +   10   *   2   =   220   \\ ]   \u8be5 \u7a0b\u5e8f \u8f83\u4e4b \u4e0a\u9762 \u7684 \u7a0b\u5e8f \u5dee\u70b9 \u5c31 \u4f18\u5316 \u4e86   \\ ( 1 / 3 \\ )   \u7684 \u6548\u7387 \uff01   \u5b9a\u4e49 \u4e0e \u539f\u7406   \u5e26\u6743 \u8def\u5f84 \u957f\u5ea6   WPL   \uff1a \u4ece \u300c \u6839 \u8282\u70b9 \u300d \u5230 \u5404 \u300c \u53f6 \u8282\u70b9 \u300d \u7684 \u8def\u5f84 \u957f\u5ea6 \u4e0e \u76f8\u5e94 \u53f6 \u8282\u70b9 \u7684 \u6743\u503c \u7684 \u4e58\u79ef \u4e4b \u548c   \u5982\u4e0a \u4e0a\u56fe \u5982\u4e0a\u56fe \u7684   WPL   \u7684 \u8ba1\u7b97 \u65b9\u6cd5 \u8ba1\u7b97\u65b9\u6cd5 \u662f \uff1a   \\ [   WPL \\   : \\   2   *   2   +   3   *   2   +   4   *   2   +   5   *   2   =   28   \\ ]   \u592b\u66fc \u970d\u592b\u66fc \u6811 \u6bcf \u4e00\u4e2a \u8282\u70b9 \u5ea6 \uff0c \u8981\u4e48 \u662f   2   \u8981\u4e48 \u662f   0 \uff0c \u4e0d \u5b58\u5728   1   \u7684 \u60c5\u51b5 \u3002   \u5047\u8bbe \u8981 \u5bf9 \u6743\u503c \u6570\u7ec4   nums   \u5efa\u7acb \u592b\u66fc \u970d\u592b\u66fc \u6811 \uff0c \u5219 \u6bcf \u4e00\u4e2a \u6743\u503c \u90fd \u4f1a \u4f5c\u4e3a \u53f6\u5b50 \u8282\u70b9 \u5b58\u5728 \u592b\u66fc \u970d\u592b\u66fc \u6811\u4e2d \u3002   \u5efa\u6811 \u6b65\u9aa4 \uff1a   \u521d\u59cb \u521d\u59cb\u5316 \uff1a   \u7531 \u7ed9\u5b9a \u7684   \\ ( n \\ )   \u4e2a \u6743\u503c \u6784\u9020   \\ ( n \\ )   \u68f5 \u53ea\u6709 \u4e00\u4e2a \u8282\u70b9 \u7684 \u4e8c\u53c9 \u4e8c\u53c9\u6811 \uff0c \u5f97\u5230 \u4e00\u4e2a \u4e8c\u53c9 \u4e8c\u53c9\u6811 \u96c6\u5408   \\ ( F \\ )   \u3002   \u9009\u53d6 \u4e0e \u5408\u5e76 \uff1a   \u4ece \u96c6\u5408   \\ ( F \\ )   \u4e2d \u9009\u53d6 \u4e24\u68f5 \u300c \u6839 \u8282\u70b9 \u7684 \u6743\u503c \u6700\u5c0f \u300d \u7684 \u4e8c\u53c9 \u4e8c\u53c9\u6811 \uff0c \u8ba1\u7b97 \u51fa \u4ed6\u4eec \u7684 \u6839 \u8282\u70b9 \u7684 \u6743\u503c \u4e4b \u548c \uff0c \u4ee5\u8be5 \u6743\u503c \u4e4b \u548c \u4f5c\u4e3a \u65b0 \u7684 \u6839 \u8282\u70b9 \uff0c \u90a3 \u4e24\u68f5 \u6700\u5c0f \u7684 \u4e8c\u53c9 \u4e8c\u53c9\u6811 \u5206\u522b \u4f5c\u4e3a \u8be5 \u65b0 \u7684 \u6839 \u8282\u70b9 \u7684 \u5de6\u53f3 \u5b50\u6811 \uff0c \u5c06 \u8be5 \u65b0\u6811 \u63d2\u5165 \u5230 \u96c6\u5408   \\ ( F \\ )   \u4e2d \u3002   \u4e0d\u65ad \u91cd\u590d \u6b65\u9aa4   2   \u76f4\u5230 \u96c6\u5408   \\ ( F \\ )   \u53ea \u5269\u4e0b \u4e00\u68f5 \u4e8c\u53c9 \u4e8c\u53c9\u6811 \uff0c \u8be5\u6811 \u5c31\u662f \u592b\u66fc \u970d\u592b\u66fc \u6811 \u3002   \u5efa\u6811 \u793a\u4f8b \u56fe   WPL   \u8ba1\u7b97 \u89c4\u5f8b   \u8003\u8651 \u4e0b\u9762 \u4e00\u68f5 \u592b\u66fc \u970d\u592b\u66fc \u6811 \uff1a   \u6570\u636e \u8282\u70b9 \u8282\u70b9\u5747 \u662f \u53f6\u5b50 \u8282\u70b9 \u3002   \u8be5\u6811 \u7684   WPL \uff1a   \\ [   WPL   =   1   *   4   +   5   *   4   +   6   *   3   +   9   *   2   +   8   *   2   +   7   *   2   =   90   \\ ]   \u6211\u4eec \u8003\u8651 \u4e00\u4e0b \u8003\u8651\u4e00\u4e0b \u975e\u6839 \u8282\u70b9 \u7684 \u6240\u6709 \u6709\u6743 \u6240\u6709\u6743 \u503c \u4e4b \u548c   sum \uff1a   \\ [   sum   =   1   +   5   +   6   +   6   +   12   +   9   +   21   +   8   +   7   +   15   =   90   \\ ]   \u6211\u4eec \u786e\u5b9e \u6709 \u8fd9\u6837 \u7684 \u7ed3\u8bba \uff1a   \\ ( WPL \\ )   \u7684 \u503c \u7b49\u4e8e \u300c \u975e\u6839 \u8282\u70b9 \u7684 \u6240\u6709 \u6709\u6743 \u6240\u6709\u6743 \u503c \u4e4b \u548c \u300d \u3002   \u6211\u4eec \u53ef\u4ee5 \u4ece \u6784\u9020 \u7684 \u89d2\u5ea6 \u53bb \u5206\u6790 \uff0c \u6bcf \u5408\u5e76 \u51fa \u4e00\u4e2a \u8282\u70b9 \uff0c \u5c31 \u76f8\u5f53 \u5f53\u4e8e \u76f8\u5f53\u4e8e \u53f6\u5b50 \u8282\u70b9 \u591a\u52a0 \u4e86 \u4e00\u6b21 \uff0c \u7531 \u53f6\u5b50 \u8282\u70b9   1 \u3001 5   \u5408\u5e76 \u51fa   6 \uff0c \u5219 \u8be5   6   \u5c31 \u4ee3\u8868   1   \u548c   5   \u591a\u52a0 \u4e86 \u4e00\u6b21 \uff1b \u7531   \u5de6\u8fb9 \u7684   6   \u548c   \u53f6\u5b50 \u8282\u70b9   6   \u5408\u5e76 \u51fa   12 \uff0c \u5c31 \u4ee3\u8868   1 \u3001 5 \u3001 6   \u53c8 \u591a\u52a0 \u4e86 \u4e00\u6b21 \uff0c \u5269\u4e0b \u7684 \u8bf7 \u8bfb\u8005 \u81ea\u5df1 \u7c7b\u63a8 \u3002   STL   \u7684 \u4f18\u5148 \u961f\u5217   priority _ queue   top   \u8bbf\u95ee \u6700\u503c   empty   \u961f\u5217 \u662f\u5426 \u4e3a\u7a7a   size   \u8fd4\u56de \u961f\u5217 \u5185 \u6570\u636e \u4e2a\u6570   push   \u63d2\u5165 \u65b0 \u6570\u636e \u8fdb \u4f18\u5148 \u961f\u5217   pop   \u5220\u9664 \u961f\u5934 \u5143\u7d20   priority _ queue   < type ,   vector < type > ,   cmp ( type   a ,   type   b ) >   q ;   bool   cmp ( int   a ,   int   b )   {   return   a   <   b ;   }   \u5c31 \u4f1a \u5b9e\u73b0 \u300c \u5927\u6839 \u5927\u6839\u5806 \u300d \u3002 \u73b0\u6210 \u7684 \u6709   greater < type >   \u5b9e\u73b0 \u300c \u5c0f\u6839\u5806 \u300d \uff0c   less < type >   \u5b9e\u73b0 \u300c \u5927\u6839 \u5927\u6839\u5806 \u300d \u3002   \u7ed9\u5b9a \u4e86 \u6743\u503c \u6570\u7ec4 \uff0c \u6c42   WPL   \u65b9\u6cd5 \u4e00 \uff1a \u501f\u52a9 \u300c \u4f18\u5148 \u961f\u5217 \uff08 \u5806 \uff09 \u300d   long   long   get _ wpl   (   const   vector   <   int   > &   nums   )   {   priority _ queue   <   int   ,   vector   <   int   >   ,   greater   <   int   > >   qu   (   nums   .   begin   ( ) ,   nums   .   end   ( ) ) ;   long   long   ans   =   0   ;   while   (   qu   .   size   ( )   >   1   )   {   int   a   =   qu   .   top   ( ) ;   qu   .   pop   ( ) ;   int   b   =   qu   .   top   ( ) ;   qu   .   pop   ( ) ;   int   t   =   a   +   b   ;   ans   =   ans   +   t   ;   qu   .   push   (   t   ) ;   }   return   ans   ;   }   \u65b9\u6cd5 \u4e8c \uff1a \u6709 \u73b0\u6210 \u7684 \u592b\u66fc \u970d\u592b\u66fc \u6811 \u7684 \u60c5\u51b5 \u4e0b   int   get _ wpl   (   Node   *   a   ,   int   h   =   0   )   {   if   (   a   = =   nullptr   )   return   0   ;   if   (   !   a   - >   l   &&   !   a   - >   r   )   return   a   - >   w   *   h   ;   return   get _ wpl   (   a   - >   l   ,   h   +   1   )   +   get _ wpl   (   a   - >   r   ,   h   +   1   ) ;   }   \u592b\u66fc \u970d\u592b\u66fc \u7f16\u7801   \u968f\u673a \u51fd\u6570 \u751f\u6210   10   ^   6   \u4e2a \u5c0f\u5199 \u5199\u5b57 \u5b57\u6bcd \u5c0f\u5199\u5b57\u6bcd   void   data   ( )   {   srand   ( (   unsigned   int   )   time   (   NULL   ) ) ;   for   (   int   i   =   1   ;   i   < =   1e6   ;   i   ++   )   printf   (   \" % c \"   ,   rand   ( )   %   26   +   ' a '   ) ;   puts   (   \" \"   ) ;   }   \u7edf\u8ba1 \u6bcf \u4e00\u4e2a \u5b57\u6bcd \u51fa\u73b0 \u6b21\u6570 \uff1a   const   int   N   =   int   (   1e7   +   10   ) ;   char   s   [   N   ] ;   int   cnt   [   26   ] ;   void   solve   (   void   )   {   scanf   (   \" % s \"   ,   s   ) ;   for   (   int   i   =   0   ;   s   [   i   ] ;   i   ++   )   cnt   [   s   [   i   ]   -   ' a '   ]   ++   ;   }   \u6839\u636e \u5b57\u6bcd \u51fa\u73b0 \u7684 \u6b21\u6570 \u4f5c\u4e3a \u6743\u503c \uff0c \u5efa\u7acb \u592b\u66fc \u970d\u592b\u66fc \u6811 \uff0c \u7531\u4e8e \u5c0f\u5199 \u5199\u5b57 \u5b57\u6bcd \u5c0f\u5199\u5b57\u6bcd \u6709   26   \u4e2a \uff0c \u5219 \u4f1a \u6709   26   \u4e2a \u53f6\u5b50 \u8282\u70b9 \uff0c \u8be5 \u53f6\u5b50 \u8282\u70b9 \u6784\u6210 \u7684 \u96c6\u5408 \u5c31\u662f \u6743\u503c \u6784\u6210 \u7684 \u96c6\u5408 \u3002   \u4ece\u6839 \u8282\u70b9 \u51fa\u53d1 \u5f80 \u4e0b \u5bfb\u627e \u53f6\u5b50 \u8282\u70b9 \uff0c \u5b9a\u4e49 \u5f80 \u5de6 \u8d70 \u8f93\u51fa   0 \uff0c \u5f80\u53f3 \u8d70 \u8f93\u51fa   1 \uff0c \u4e00\u76f4 \u8d70 \u5230 \u53f6\u5b50 \u8282\u70b9 \u6240 \u8f93\u51fa \u7684 \u7f16\u7801 \u5c31\u662f \u8be5 \u53f6\u5b50 \u8282\u70b9 \u7684 \u300c \u592b\u66fc \u970d\u592b\u66fc \u7f16\u7801 \u300d \u3002 \u4f60 \u4e5f \u53ef\u4ee5 \u89c4\u5b9a \u8d70 \u5230 \u513f\u5b50 \u4e2d \u6700\u5927 \u6743\u503c \u7684 \u4e3a   1 \uff0c \u6700\u5c0f \u7684 \u4e3a   0 \uff0c \u968f\u610f \u3002   \u300c \u5c0f\u5199 \u5199\u5b57 \u5b57\u6bcd \u5c0f\u5199\u5b57\u6bcd   -   \u592b\u66fc \u970d\u592b\u66fc \u7f16\u7801 \u4e3e\u4f8b \u300d   \u5b57\u6bcd   a   b   c   d   e   f   \u51fa\u73b0 \u6b21\u6570   1   5   6   9   8   7   \u7531\u6b64 \u6784\u6210 \u7684 \u592b\u66fc \u970d\u592b\u66fc \u6811 \u5982\u4e0b \u56fe \uff1a   \u592b\u66fc \u970d\u592b\u66fc \u7f16\u7801 \u4e3e\u4f8b \u56fe   \u5219   a   \u5bf9\u5e94 \u7684 \u592b\u66fc \u970d\u592b\u66fc \u7f16\u7801 \u4e3a \uff1a   0001   \uff1b   f   \u5bf9\u5e94 \u7684 \u592b\u66fc \u970d\u592b\u66fc \u7f16\u7801 \u4e3a \uff1a   10   \uff1b \u5269\u4e0b \u7684 \u4f9d\u6b64 \u6b64\u7c7b \u7c7b\u63a8 \u4f9d\u6b64\u7c7b\u63a8   \u592b\u66fc \u970d\u592b\u66fc \u7f16\u7801 \u4ee3\u7801 \u53c2\u8003 \uff1a \uff08 \u5efa \u597d \u592b\u66fc \u970d\u592b\u66fc \u6811\u540e \u518d \u4f20\u9012 \u7ed9 \u8be5 \u51fd\u6570 \u6c42\u503c \uff09   \u592b\u66fc \u970d\u592b\u66fc \u5efa\u6811 + \u592b\u66fc \u970d\u592b\u66fc \u7f16\u7801 \u4ee3\u7801 \u53c2\u8003   \u7edf\u8ba1 \u5c0f\u5199 \u5199\u5b57 \u5b57\u6bcd \u5c0f\u5199\u5b57\u6bcd \u7684 \u592b\u66fc \u970d\u592b\u66fc \u7f16\u7801   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80   81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96   97   98   99   100   101   102   103   104   105   106   107   108   109   110   111   112   113   114   115   116   117   118   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   struct   Node   {   char   c   ;   int   w   ;   Node   *   l   ,   *   r   ;   Node   (   char   chr   =   0   ,   int   weight   =   0   ,   Node   *   left   =   nullptr   ,   Node   *   right   =   nullptr   )   {   c   =   chr   ;   w   =   weight   ;   l   =   left   ;   r   =   right   ;   }   } ;   const   int   inf   =   ~   (   1   < <   31   ) ;   Node   *   create   (   vector   <   vector   <   int   > >   dts   )   {   int   n   =   dts   .   size   ( ) ;   Node   *   F   [   n   ] ,   *   root   ;   for   (   int   i   =   0   ;   i   <   n   ;   i   ++   )   {   F   [   i   ]   =   new   Node   {   char   (   dts   [   i   ] [   0   ] ) ,   dts   [   i   ] [   1   ] ,   nullptr   ,   nullptr   } ;   }   / /   \u6267\u884c   n   -   1   \u6b21   for   (   int   k   =   1   ;   k   <   n   ;   k   ++   )   {   int   m1   ,   m2   ;   m1   =   m2   =   inf   ;   / /   m1   \u662f \u6700\u5c0f \u6700\u5c0f\u503c \u7684 \u4e0b\u6807 \uff0c m2   \u662f \u6b21 \u6700\u5c0f \u6700\u5c0f\u503c \u7684 \u4e0b\u6807   / /   \u5148 \u627e\u5230 \u4e24\u4e2a \u975e\u7a7a \u8282\u70b9 \u7684 \u4e0b\u6807   for   (   int   i   =   0   ;   i   <   n   ;   i   ++   )   {   if   (   F   [   i   ]   &&   m1   = =   inf   )   {   m1   =   i   ;   continue   ;   }   else   if   (   F   [   i   ] )   {   m2   =   i   ;   break   ;   }   }   / /   \u786e\u5b9a \u4e24\u4e2a \u6700\u5c0f \u6700\u5c0f\u503c   for   (   int   i   =   m2   ;   i   <   n   ;   i   ++   )   {   if   (   F   [   i   ] )   {   if   (   F   [   i   ]   - >   w   < =   F   [   m1   ]   - >   w   )   {   m2   =   m1   ;   m1   =   i   ;   }   else   if   (   F   [   i   ]   - >   w   <   F   [   m2   ]   - >   w   )   m2   =   i   ;   }   }   root   =   new   Node   {   0   ,   F   [   m1   ]   - >   w   +   F   [   m2   ]   - >   w   ,   F   [   m1   ] ,   F   [   m2   ] } ;   F   [   m1   ]   =   root   ;   F   [   m2   ]   =   nullptr   ;   }   return   root   ;   }   int   get _ wpl   (   Node   *   a   ,   int   h   =   0   )   {   if   (   !   a   )   return   0   ;   if   (   !   a   - >   l   &&   !   a   - >   r   )   return   a   - >   w   *   h   ;   return   get _ wpl   (   a   - >   l   ,   h   +   1   )   +   get _ wpl   (   a   - >   r   ,   h   +   1   ) ;   }   const   int   N   =   int   (   1e7   +   10   ) ;   char   s   [   N   ] ;   int   cnt   [   26   ] ;   string   hff   [   26   ] ;   void   haff   (   Node   *   a   ,   string   path   =   string   ( ) )   {   if   (   !   a   )   return   ;   if   (   !   a   - >   l   &&   !   a   - >   r   )   {   hff   [   a   - >   c   -   ' a '   ]   =   path   ;   return   ;   }   haff   (   a   - >   l   ,   path   +   ' 0 '   ) ;   haff   (   a   - >   r   ,   path   +   ' 1 '   ) ;   }   void   solve   (   void   )   {   scanf   (   \" % s \"   ,   s   ) ;   vector   <   vector   <   int   > >   dts   ;   for   (   int   i   =   0   ;   s   [   i   ] ;   i   ++   )   cnt   [   s   [   i   ]   -   ' a '   ]   ++   ;   for   (   int   i   =   0   ;   i   <   26   ;   i   ++   )   dts   .   push _ back   ( {   i   +   ' a '   ,   cnt   [   i   ] } ) ;   Node   *   a   =   create   (   dts   ) ;   haff   (   a   ) ;   for   (   int   i   =   0   ;   i   <   26   ;   i   ++   )   cout   < <   char   (   i   +   ' a '   )   < <   \"   :   \"   < <   hff   [   i   ]   < <   endl   ;   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main   (   void   )   {   ifstream   fi   ;   ofstream   fo   ;   fi   .   open   (   \" . / lrq . in \"   ) ;   fo   .   open   (   \" . / lrq . out \"   ) ;   if   (   fi   .   is _ open   ( )   &&   fo   .   is _ open   ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl   ;   fo   .   close   ( ) ;   fi   .   close   ( ) ;   for   (   long   long   i   =   1   ;   i   < =   4e8   +   2e7   ;   i   ++   ) ;   FILE   *   fin   =   freopen   (   \" . / lrq . in \"   ,   \" r \"   ,   stdin   ) ;   FILE   *   fout   =   freopen   (   \" . / lrq . out \"   ,   \" w \"   ,   stdout   ) ;   solve   ( ) ;   fclose   (   fin   ) ;   fclose   (   fout   ) ;   }   else   solve   ( ) ;   return   0   ;   }   \u592b\u66fc \u970d\u592b\u66fc \u5efa\u6811 + \u592b\u66fc \u970d\u592b\u66fc \u7f16\u7801 + \u4f18\u5148 \u961f\u5217   \u7edf\u8ba1 \u5c0f\u5199 \u5199\u5b57 \u5b57\u6bcd \u5c0f\u5199\u5b57\u6bcd \u7684 \u592b\u66fc \u970d\u592b\u66fc \u7f16\u7801   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80   81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96   97   98   99   100   101   102   103   104   105   106   107   108   109   110   111   112   113   114   115   116   117   118   119   120   121   122   123   124   125   126   127   128   129   130   131   132   133   134   135   136   137   138   139   140   141   142   143   144   145   146   147   148   149   150   151   152   153   154   155   156   157   158   159   160   161   162   163   164   165   166   167   168   169   # include   < iostream >   # include   < iomanip >   # include   < algorithm >   # include   < cstdio >   # include   < cstdlib >   # include   < cstring >   # include   < string >   # include   < vector >   # include   < queue >   # include   < deque >   # include   < stack >   # include   < map >   # include   < set >   # include   < unordered _ map >   # include   < unordered _ set >   # include   < cmath >   using   namespace   std   ;   # define   endl   ' \\ n '   # define   pique   priority _ queue   # define   oier   \\   ios _ base : : sync _ with _ stdio ( false ) ; \\   cin . tie ( nullptr ) ;   cout . tie ( nullptr ) ;   # define   cf   int   t ;   cin   > >   t ;   while   ( t   -- )   # define   upfor ( i ,   l ,   r )   for   ( i   =   ( l ) ;   i   < =   ( r ) ;   i   ++ )   # define   downfor ( i ,   l ,   r )   for   ( i   =   ( r ) ;   i   > =   ( l ) ;   i   -- )   / /   # define   int   long   long   typedef   long   long   LL   ;   typedef   long   double   LD   ;   / / typedef   __ int128 _ t   int128 ;   const   int   inf   =   ~   (   1   < <   31   ) ;   / /   \u6b63 \u65e0\u7a77   const   int   ninf   =   (   1   < <   31   ) ;   / /   \u8d1f \u65e0\u7a77   const   LL   infll   =   ~   (   1l   l   < <   63   ) ;   / /   \u6b63 \u65e0\u7a77   const   LL   ninfll   =   (   1l   l   < <   63   ) ;   / /   \u8d1f \u65e0\u7a77   inline   LL   rll   ( )   {   oier   LL   x   ;   cin   > >   x   ;   return   x   ;   }   inline   int   rint   ( )   {   oier   int   x   ;   cin   > >   x   ;   return   x   ;   }   / *   0b00111111   =   0x3f   0b01111111   =   0x7f   0b11111111   =   - 1   * /   int   gdb   =   0   ;   const   int   N   =   int   (   1e7   +   10   ) ;   / /   \u7531\u4e8e \u60c5\u62a5 \u4e0d\u8db3 \uff0c \u53ea\u80fd \u900f\u8fc7 \u300c \u8bd5\u884c \u9519\u8bef \u300d \u6765 \u83b7\u53d6 \u3002   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   int   sums   [   N   ] ;   struct   Tree   {   char   a   ;   int   b   ;   Tree   *   l   ,   *   r   ;   } ;   struct   Node   {   Tree   *   t   ;   Node   (   Tree   *   a   =   nullptr   )   {   t   =   a   ;   }   bool   operator   <   (   const   Node   &   a   )   const   {   return   t   - >   b   >   a   .   t   - >   b   ;   }   } ;   typedef   priority _ queue   <   Node   >   pq   ;   struct   Qnode   {   char   a   ;   string   s   ;   bool   operator   <   (   const   Qnode   &   t   )   const   {   return   a   >   t   .   a   ;   }   } ;   typedef   priority _ queue   <   Qnode   >   sq   ;   void   solve   ( )   {   oier   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   string   s   ;   cin   > >   s   ;   for   (   auto   x   :   s   )   sums   [   x   -   ' a '   ]   ++   ;   pq   q   ;   for   (   int   i   =   0   ;   i   <   26   ;   i   ++   )   {   if   (   sums   [   i   ] )   q   .   push   (   Node   (   new   Tree   {   i   +   ' a '   ,   sums   [   i   ] ,   nullptr   ,   nullptr   } ) ) ;   }   while   (   q   .   size   ( )   >   1   )   {   Node   a   =   q   .   top   ( ) ;   q   .   pop   ( ) ;   Node   b   =   q   .   top   ( ) ;   q   .   pop   ( ) ;   Node   c   =   Node   (   new   Tree   {   0   ,   a   .   t   - >   b   +   b   .   t   - >   b   ,   a   .   t   ,   b   .   t   } ) ;   q   .   push   (   c   ) ;   }   stack   <   pair   <   Tree   *   ,   string   > >   st   ;   st   .   push   ( {   q   .   top   ( ) .   t   ,   string   ( ) } ) ;   sq   res   ;   while   (   st   .   size   ( ) )   {   auto   [   x   ,   y   ]   =   st   .   top   ( ) ;   st   .   pop   ( ) ;   if   (   !   x   - >   l   &&   !   x   - >   r   )   {   / /   cout   < <   x - > a   < <   \"   :   \"   < <   x - > b   < <   \"   :   \"   < <   y   < <   endl ;   / /   cout   < <   x - > a   < <   \"   :   \"   < <   y   < <   endl ;   res   .   push   ( {   x   - >   a   ,   y   } ) ;   continue   ;   }   st   .   push   ( {   x   - >   l   ,   y   +   ' 0 '   } ) ;   st   .   push   ( {   x   - >   r   ,   y   +   ' 1 '   } ) ;   }   while   (   res   .   size   ( ) )   {   auto   t   =   res   .   top   ( ) ;   res   .   pop   ( ) ;   cout   < <   t   .   a   < <   \"   :   \"   < <   t   .   s   < <   endl   ;   }   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   }   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   / * *   *   _ ooOoo _   *   o8888888o   *   88 \"   .   \" 88   *   ( |   -_-   | )   *   O \\   =   / O   *   ____ / ` --- ' \\ ____   *   . '   \\ \\ |   | / /   ` .   *   /   \\ \\ | | |   :   | | | / /   \\   *   /   _ | | | | |   - : -   | | | | | -   \\   *   |   |   \\ \\ \\   -   / / /   |   |   *   |   \\ _ |   ' ' \\ --- / ' '   |   |   *   \\   .- \\ __   ` - `   ___ / -.   /   *   ___ ` .   . '   / --.-- \\   ` .   .   __   *   . \" \"   ' <   ` .___ \\ _ < | > _ / ___. '   > ' \" \" .   *   |   |   :   ` -   \\ ` . ; ` \\   _   / ` ; . ` /   -   `   :   |   |   *   \\   \\   ` -.   \\ _   __ \\   / __   _ /   .- `   /   /   *   = = = = = = ` -.____ ` -.___ \\ _____ / ___.- ` ____.- ' = = = = = =   *   ` = --- = '   *   ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^   *   \u4f5b\u7956 \u4fdd\u4f51   \u6c38\u65e0 BUG   *   \u4f5b \u66f0 :   *   \u5199\u5b57 \u5199\u5b57\u697c \u91cc \u5199\u5b57 \u5199\u5b57\u95f4 \uff0c \u5199\u5b57 \u5199\u5b57\u95f4 \u91cc \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1b   *   \u7a0b\u5e8f \u4eba\u5458 \u5199 \u7a0b\u5e8f \uff0c \u53c8 \u62ff \u7a0b\u5e8f \u6362 \u9152\u94b1 \u3002   *   \u9152\u9192 \u53ea \u5728 \u7f51\u4e0a \u5750 \uff0c \u9152\u9189 \u8fd8\u6765 \u7f51\u4e0b \u7f51\u4e0b\u7720 \uff1b   *   \u9152\u9189 \u9152\u9192 \u65e5\u590d \u65e5 \uff0c \u7f51\u4e0a \u4e0a\u7f51 \u7f51\u4e0a\u7f51 \u4e0b\u5e74 \u590d\u5e74 \u3002   *   \u4f46\u613f \u8001\u6b7b \u7535\u8111 \u95f4 \uff0c \u4e0d\u613f \u97a0\u8eac \u8001\u677f \u524d \uff1b   *   \u5954\u9a70 \u5b9d\u9a6c \u8d35\u8005\u8da3 \uff0c \u516c\u4ea4 \u81ea\u884c \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \u3002   *   \u522b\u4eba \u7b11 \u6211 \u5fd2 \u75af\u766b \uff0c \u6211 \u7b11 \u81ea\u5df1 \u547d\u592a\u8d31 \uff1b   *   \u4e0d\u89c1 \u6ee1\u8857 \u6f02\u4eae \u59b9 \uff0c \u54ea\u4e2a \u5f52\u5f97 \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1f   * * /   / *   = = = = = = = = = = = = = = = = = = = = = = = = \u4f5b\u7956 \u4fdd\u4f51 ,   \u6c38\u65e0 bug = = = = = = = = = = = = = = = = = = = = = = = =   * /   int   main   ( )   {   / /   oier   cf   solve ( ) ;   return   0 ;   oier   solve   ( ) ;   return   0   ;   }   \u592b\u66fc \u970d\u592b\u66fc \u6811 \u5efa\u6811 \u4ee3\u7801 \u53c2\u8003   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   struct   Node   {   int   w   ;   Node   *   l   ,   *   r   ;   Node   (   int   weight   =   0   ,   Node   *   left   =   nullptr   ,   Node   *   right   =   nullptr   )   {   w   =   weight   ;   l   =   left   ;   r   =   right   ;   }   } ;   const   int   inf   =   ~   (   1   < <   31   ) ;   Node   *   init   (   const   vector   <   int   > &   nums   )   {   int   n   =   nums   .   size   ( ) ;   Node   *   F   [   nums   .   size   ( )   +   1   ] ;   for   (   int   i   =   1   ;   i   < =   nums   .   size   ( ) ;   i   ++   )   F   [   i   ]   =   new   Node   (   nums   [   i   -   1   ] ) ;   Node   *   root   ;   / /   \u4e24 \u4e24 \u5408\u5e76 \uff0c \u8981 \u5408\u5e76   n   -   1   \u6b21   for   (   int   a   =   1   ;   a   <   n   ;   a   ++   )   {   / /   min1   \u662f \u6700\u5c0f \u6700\u5c0f\u503c \u7684 \u4e0b\u6807 \uff0c min2   \u662f \u6b21 \u6700\u5c0f \u6700\u5c0f\u503c \u7684 \u4e0b\u6807   int   min1   ,   min2   ;   min1   =   min2   =   inf   ;   / /   \u5148 \u627e\u5230 \u4e0d \u4e3a   \u300c \u7a7a \u300d   \u7684 \u4e24\u4e2a \u8282\u70b9   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   if   (   F   [   i   ]   &&   min1   = =   inf   )   {   min1   =   i   ;   continue   ;   }   else   if   (   F   [   i   ] )   {   min2   =   i   ;   break   ;   }   }   / /   \u5bfb\u627e \u6700\u5c0f \u6700\u5c0f\u503c \uff0c \u5bfb\u627e \u6700\u5927 \u5927\u503c \u6700\u5927\u503c   for   (   int   i   =   min2   ;   i   < =   n   ;   i   ++   )   {   if   (   F   [   i   ] )   {   if   (   F   [   i   ]   - >   w   < =   F   [   min1   ]   - >   w   )   {   min2   =   min1   ;   min1   =   i   ;   }   else   if   (   F   [   i   ]   - >   w   < =   F   [   min2   ]   - >   w   )   min2   =   i   ;   }   }   / /   \u5efa\u7acb \u65b0\u6811   root   =   new   Node   (   F   [   min1   ]   - >   w   +   F   [   min2   ]   - >   w   ,   F   [   min1   ] ,   F   [   min2   ] ) ;   F   [   min1   ]   =   root   ;   F   [   min2   ]   =   nullptr   ;   }   return   root   ;   }   int   get _ wpl   (   Node   *   a   ,   int   h   =   0   )   {   if   (   a   = =   nullptr   )   return   0   ;   if   (   !   a   - >   l   &&   !   a   - >   r   )   return   a   - >   w   *   h   ;   return   get _ wpl   (   a   - >   l   ,   h   +   1   )   +   get _ wpl   (   a   - >   r   ,   h   +   1   ) ;   }   \u4e0d\u7528 \u5efa \u597d \u592b\u66fc \u970d\u592b\u66fc \u6811 \uff0c \u76f4\u63a5 \u6c42   WPL   long   long   get _ wpl   (   const   vector   <   int   > &   nums   )   {   priority _ queue   <   int   ,   vector   <   int   >   ,   greater   <   int   > >   qu   (   nums   .   begin   ( ) ,   nums   .   end   ( ) ) ;   long   long   ans   =   0   ;   while   (   qu   .   size   ( )   >   1   )   {   int   a   =   qu   .   top   ( ) ;   qu   .   pop   ( ) ;   int   b   =   qu   .   top   ( ) ;   qu   .   pop   ( ) ;   int   t   =   a   +   b   ;   ans   =   ans   +   t   ;   qu   .   push   (   t   ) ;   }   return   ans   ;   }","title":"\u970d\u592b\u66fc \u6811"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E6%A0%91/#_1","text":"","title":"\u970d\u592b\u66fc \u6811"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E6%A0%91/#_2","text":"\u73ed\u4e0a \u6709   5   \u4eba \u4e0d \u5408\u683c \uff0c 15   \u4eba   \u53ca\u683c \uff0c 40   \u4eba \u4e2d\u7b49 \uff0c 30   \u4eba \u826f\u597d \uff0c 10   \u4eba   \u4f18\u79c0 \uff0c \u5e76 \u89c4\u5b9a \u7b49\u7ea7 \u5206\u5e03 \u60c5\u51b5 \u5982\u4e0b \u8868 :   \u7b49\u7ea7   \u4e0d\u53ca \u53ca\u683c \u4e0d\u53ca\u683c   \u53ca\u683c   \u4e2d\u7b49   \u826f\u597d   \u4f18\u79c0   \u5206\u6570   \\ ( 0   \\ sim   59 \\ )   \\ ( 60   \\ sim   69 \\ )   \\ ( 70   \\ sim   79 \\ )   \\ ( 80   \\ sim   89 \\ )   \\ ( 90   \\ sim   100 \\ )   \u4eba\u6570 \u5360 \u6bd4   \\ ( 5 \\ % \\ )   \\ ( 15 \\ % \\ )   \\ ( 40 \\ % \\ )   \\ ( 30 \\ % \\ )   \\ ( 10 \\ % \\ )   \u8001\u5e08 \u8bbe\u8ba1 \u4e86 \u4e00\u4e2a \u51fd\u6570 \u6765 \u5904\u7406 \u5b66\u751f \u7684 \u5206\u6570 \u7b49\u7ea7 \uff1a   void   f   (   int   a   )   {   if   (   a   <   60   )   printf   (   \" \u4e0d\u53ca \u53ca\u683c \u4e0d\u53ca\u683c   \\ n   \"   ) ;   else   if   (   a   <   70   )   printf   (   \" \u53ca\u683c   \\ n   \"   ) ;   else   if   (   a   <   80   )   printf   (   \" \u4e2d\u7b49   \\ n   \"   ) ;   else   if   (   a   <   90   )   printf   (   \" \u826f\u597d   \\ n   \"   ) ;   else   printf   (   \" \u4f18\u79c0   \\ n   \"   ) ;   }   \u8be5 \u7a0b\u5e8f \u7684 \u6267\u884c \u987a\u5e8f \u662f \uff1a   \u8be5 \u7a0b\u5e8f \u7684 \u6267\u884c \u6548\u7387 \u662f \u6709 \u95ee\u9898 \u7684 \uff0c \u56e0\u4e3a \u6211\u4eec \u53d1\u73b0 \u6210\u7ee9 \u4f4e\u4e8e   \\ ( 60 \\ )   \u7684 \u5b66\u751f \u4ec5 \u5360   \\ ( 5 \\ % \\ )   \uff0c \u800c \u9ad8\u4e8e   \\ ( 70 \\ )   \u5206 \u7684 \u5b66\u751f \u5374 \u5360 \u4e86 \u5927\u591a \u591a\u6570 \u5927\u591a\u6570   \\ ( 80 \\ % \\ )   \uff0c \u5047\u8bbe \u8be5 \u8001\u5e08 \u5c31 \u7528 \u6b64 \u7a0b\u5e8f \u6765 \u7ed9 \u5b66\u751f \u5212\u5206 \u7b49\u7ea7 \uff0c \u6211\u4eec \u6765\u7b97 \u4e00\u4e0b \u8be5 \u7a0b\u5e8f \u603b\u5171 \u6267\u884c \u4e86 \u591a\u5c11 \u6b65 \uff1a   \\ [   5   +   15   *   2   +   40   *   3   +   30   *   4   +   10   *   4   =   315   \\ ]   \u5982\u679c \u6211\u4eec \u628a \u5206\u5e03 \u8d8a \u591a \uff0c \u5c31 \u8d8a \u653e\u5f00 \u5934\u4f1a \u662f \u600e\u6837 \u7684 \u60c5\u51b5 \u5462 \uff1f \u8003\u8651 \u4e0b\u65b9 \u7684 \u7a0b\u5e8f \u56fe \uff1a   \u6211\u4eec \u6765\u7b97 \u4e00\u4e0b \u4f7f\u7528 \u8be5 \u7a0b\u5e8f \u6765 \u7ed9 \u5b66\u751f \u5212\u5206 \u7b49\u7ea7 \u9700\u8981 \u6267\u884c \u591a\u5c11 \u6b65 \uff1a   \\ [   5   *   3   +   15   *   3   +   40   *   2   +   30   *   2   +   10   *   2   =   220   \\ ]   \u8be5 \u7a0b\u5e8f \u8f83\u4e4b \u4e0a\u9762 \u7684 \u7a0b\u5e8f \u5dee\u70b9 \u5c31 \u4f18\u5316 \u4e86   \\ ( 1 / 3 \\ )   \u7684 \u6548\u7387 \uff01","title":"\u5f15\u4f8b"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E6%A0%91/#_3","text":"\u5e26\u6743 \u8def\u5f84 \u957f\u5ea6   WPL   \uff1a \u4ece \u300c \u6839 \u8282\u70b9 \u300d \u5230 \u5404 \u300c \u53f6 \u8282\u70b9 \u300d \u7684 \u8def\u5f84 \u957f\u5ea6 \u4e0e \u76f8\u5e94 \u53f6 \u8282\u70b9 \u7684 \u6743\u503c \u7684 \u4e58\u79ef \u4e4b \u548c   \u5982\u4e0a \u4e0a\u56fe \u5982\u4e0a\u56fe \u7684   WPL   \u7684 \u8ba1\u7b97 \u65b9\u6cd5 \u8ba1\u7b97\u65b9\u6cd5 \u662f \uff1a   \\ [   WPL \\   : \\   2   *   2   +   3   *   2   +   4   *   2   +   5   *   2   =   28   \\ ]   \u592b\u66fc \u970d\u592b\u66fc \u6811 \u6bcf \u4e00\u4e2a \u8282\u70b9 \u5ea6 \uff0c \u8981\u4e48 \u662f   2   \u8981\u4e48 \u662f   0 \uff0c \u4e0d \u5b58\u5728   1   \u7684 \u60c5\u51b5 \u3002   \u5047\u8bbe \u8981 \u5bf9 \u6743\u503c \u6570\u7ec4   nums   \u5efa\u7acb \u592b\u66fc \u970d\u592b\u66fc \u6811 \uff0c \u5219 \u6bcf \u4e00\u4e2a \u6743\u503c \u90fd \u4f1a \u4f5c\u4e3a \u53f6\u5b50 \u8282\u70b9 \u5b58\u5728 \u592b\u66fc \u970d\u592b\u66fc \u6811\u4e2d \u3002   \u5efa\u6811 \u6b65\u9aa4 \uff1a   \u521d\u59cb \u521d\u59cb\u5316 \uff1a   \u7531 \u7ed9\u5b9a \u7684   \\ ( n \\ )   \u4e2a \u6743\u503c \u6784\u9020   \\ ( n \\ )   \u68f5 \u53ea\u6709 \u4e00\u4e2a \u8282\u70b9 \u7684 \u4e8c\u53c9 \u4e8c\u53c9\u6811 \uff0c \u5f97\u5230 \u4e00\u4e2a \u4e8c\u53c9 \u4e8c\u53c9\u6811 \u96c6\u5408   \\ ( F \\ )   \u3002   \u9009\u53d6 \u4e0e \u5408\u5e76 \uff1a   \u4ece \u96c6\u5408   \\ ( F \\ )   \u4e2d \u9009\u53d6 \u4e24\u68f5 \u300c \u6839 \u8282\u70b9 \u7684 \u6743\u503c \u6700\u5c0f \u300d \u7684 \u4e8c\u53c9 \u4e8c\u53c9\u6811 \uff0c \u8ba1\u7b97 \u51fa \u4ed6\u4eec \u7684 \u6839 \u8282\u70b9 \u7684 \u6743\u503c \u4e4b \u548c \uff0c \u4ee5\u8be5 \u6743\u503c \u4e4b \u548c \u4f5c\u4e3a \u65b0 \u7684 \u6839 \u8282\u70b9 \uff0c \u90a3 \u4e24\u68f5 \u6700\u5c0f \u7684 \u4e8c\u53c9 \u4e8c\u53c9\u6811 \u5206\u522b \u4f5c\u4e3a \u8be5 \u65b0 \u7684 \u6839 \u8282\u70b9 \u7684 \u5de6\u53f3 \u5b50\u6811 \uff0c \u5c06 \u8be5 \u65b0\u6811 \u63d2\u5165 \u5230 \u96c6\u5408   \\ ( F \\ )   \u4e2d \u3002   \u4e0d\u65ad \u91cd\u590d \u6b65\u9aa4   2   \u76f4\u5230 \u96c6\u5408   \\ ( F \\ )   \u53ea \u5269\u4e0b \u4e00\u68f5 \u4e8c\u53c9 \u4e8c\u53c9\u6811 \uff0c \u8be5\u6811 \u5c31\u662f \u592b\u66fc \u970d\u592b\u66fc \u6811 \u3002   \u5efa\u6811 \u793a\u4f8b \u56fe","title":"\u5b9a\u4e49 \u4e0e \u539f\u7406"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E6%A0%91/#wpl","text":"\u8003\u8651 \u4e0b\u9762 \u4e00\u68f5 \u592b\u66fc \u970d\u592b\u66fc \u6811 \uff1a   \u6570\u636e \u8282\u70b9 \u8282\u70b9\u5747 \u662f \u53f6\u5b50 \u8282\u70b9 \u3002   \u8be5\u6811 \u7684   WPL \uff1a   \\ [   WPL   =   1   *   4   +   5   *   4   +   6   *   3   +   9   *   2   +   8   *   2   +   7   *   2   =   90   \\ ]   \u6211\u4eec \u8003\u8651 \u4e00\u4e0b \u8003\u8651\u4e00\u4e0b \u975e\u6839 \u8282\u70b9 \u7684 \u6240\u6709 \u6709\u6743 \u6240\u6709\u6743 \u503c \u4e4b \u548c   sum \uff1a   \\ [   sum   =   1   +   5   +   6   +   6   +   12   +   9   +   21   +   8   +   7   +   15   =   90   \\ ]   \u6211\u4eec \u786e\u5b9e \u6709 \u8fd9\u6837 \u7684 \u7ed3\u8bba \uff1a   \\ ( WPL \\ )   \u7684 \u503c \u7b49\u4e8e \u300c \u975e\u6839 \u8282\u70b9 \u7684 \u6240\u6709 \u6709\u6743 \u6240\u6709\u6743 \u503c \u4e4b \u548c \u300d \u3002   \u6211\u4eec \u53ef\u4ee5 \u4ece \u6784\u9020 \u7684 \u89d2\u5ea6 \u53bb \u5206\u6790 \uff0c \u6bcf \u5408\u5e76 \u51fa \u4e00\u4e2a \u8282\u70b9 \uff0c \u5c31 \u76f8\u5f53 \u5f53\u4e8e \u76f8\u5f53\u4e8e \u53f6\u5b50 \u8282\u70b9 \u591a\u52a0 \u4e86 \u4e00\u6b21 \uff0c \u7531 \u53f6\u5b50 \u8282\u70b9   1 \u3001 5   \u5408\u5e76 \u51fa   6 \uff0c \u5219 \u8be5   6   \u5c31 \u4ee3\u8868   1   \u548c   5   \u591a\u52a0 \u4e86 \u4e00\u6b21 \uff1b \u7531   \u5de6\u8fb9 \u7684   6   \u548c   \u53f6\u5b50 \u8282\u70b9   6   \u5408\u5e76 \u51fa   12 \uff0c \u5c31 \u4ee3\u8868   1 \u3001 5 \u3001 6   \u53c8 \u591a\u52a0 \u4e86 \u4e00\u6b21 \uff0c \u5269\u4e0b \u7684 \u8bf7 \u8bfb\u8005 \u81ea\u5df1 \u7c7b\u63a8 \u3002   STL   \u7684 \u4f18\u5148 \u961f\u5217   priority _ queue   top   \u8bbf\u95ee \u6700\u503c   empty   \u961f\u5217 \u662f\u5426 \u4e3a\u7a7a   size   \u8fd4\u56de \u961f\u5217 \u5185 \u6570\u636e \u4e2a\u6570   push   \u63d2\u5165 \u65b0 \u6570\u636e \u8fdb \u4f18\u5148 \u961f\u5217   pop   \u5220\u9664 \u961f\u5934 \u5143\u7d20   priority _ queue   < type ,   vector < type > ,   cmp ( type   a ,   type   b ) >   q ;   bool   cmp ( int   a ,   int   b )   {   return   a   <   b ;   }   \u5c31 \u4f1a \u5b9e\u73b0 \u300c \u5927\u6839 \u5927\u6839\u5806 \u300d \u3002 \u73b0\u6210 \u7684 \u6709   greater < type >   \u5b9e\u73b0 \u300c \u5c0f\u6839\u5806 \u300d \uff0c   less < type >   \u5b9e\u73b0 \u300c \u5927\u6839 \u5927\u6839\u5806 \u300d \u3002   \u7ed9\u5b9a \u4e86 \u6743\u503c \u6570\u7ec4 \uff0c \u6c42   WPL   \u65b9\u6cd5 \u4e00 \uff1a \u501f\u52a9 \u300c \u4f18\u5148 \u961f\u5217 \uff08 \u5806 \uff09 \u300d   long   long   get _ wpl   (   const   vector   <   int   > &   nums   )   {   priority _ queue   <   int   ,   vector   <   int   >   ,   greater   <   int   > >   qu   (   nums   .   begin   ( ) ,   nums   .   end   ( ) ) ;   long   long   ans   =   0   ;   while   (   qu   .   size   ( )   >   1   )   {   int   a   =   qu   .   top   ( ) ;   qu   .   pop   ( ) ;   int   b   =   qu   .   top   ( ) ;   qu   .   pop   ( ) ;   int   t   =   a   +   b   ;   ans   =   ans   +   t   ;   qu   .   push   (   t   ) ;   }   return   ans   ;   }   \u65b9\u6cd5 \u4e8c \uff1a \u6709 \u73b0\u6210 \u7684 \u592b\u66fc \u970d\u592b\u66fc \u6811 \u7684 \u60c5\u51b5 \u4e0b   int   get _ wpl   (   Node   *   a   ,   int   h   =   0   )   {   if   (   a   = =   nullptr   )   return   0   ;   if   (   !   a   - >   l   &&   !   a   - >   r   )   return   a   - >   w   *   h   ;   return   get _ wpl   (   a   - >   l   ,   h   +   1   )   +   get _ wpl   (   a   - >   r   ,   h   +   1   ) ;   }","title":"WPL   \u8ba1\u7b97 \u89c4\u5f8b"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E6%A0%91/#_4","text":"\u968f\u673a \u51fd\u6570 \u751f\u6210   10   ^   6   \u4e2a \u5c0f\u5199 \u5199\u5b57 \u5b57\u6bcd \u5c0f\u5199\u5b57\u6bcd   void   data   ( )   {   srand   ( (   unsigned   int   )   time   (   NULL   ) ) ;   for   (   int   i   =   1   ;   i   < =   1e6   ;   i   ++   )   printf   (   \" % c \"   ,   rand   ( )   %   26   +   ' a '   ) ;   puts   (   \" \"   ) ;   }   \u7edf\u8ba1 \u6bcf \u4e00\u4e2a \u5b57\u6bcd \u51fa\u73b0 \u6b21\u6570 \uff1a   const   int   N   =   int   (   1e7   +   10   ) ;   char   s   [   N   ] ;   int   cnt   [   26   ] ;   void   solve   (   void   )   {   scanf   (   \" % s \"   ,   s   ) ;   for   (   int   i   =   0   ;   s   [   i   ] ;   i   ++   )   cnt   [   s   [   i   ]   -   ' a '   ]   ++   ;   }   \u6839\u636e \u5b57\u6bcd \u51fa\u73b0 \u7684 \u6b21\u6570 \u4f5c\u4e3a \u6743\u503c \uff0c \u5efa\u7acb \u592b\u66fc \u970d\u592b\u66fc \u6811 \uff0c \u7531\u4e8e \u5c0f\u5199 \u5199\u5b57 \u5b57\u6bcd \u5c0f\u5199\u5b57\u6bcd \u6709   26   \u4e2a \uff0c \u5219 \u4f1a \u6709   26   \u4e2a \u53f6\u5b50 \u8282\u70b9 \uff0c \u8be5 \u53f6\u5b50 \u8282\u70b9 \u6784\u6210 \u7684 \u96c6\u5408 \u5c31\u662f \u6743\u503c \u6784\u6210 \u7684 \u96c6\u5408 \u3002   \u4ece\u6839 \u8282\u70b9 \u51fa\u53d1 \u5f80 \u4e0b \u5bfb\u627e \u53f6\u5b50 \u8282\u70b9 \uff0c \u5b9a\u4e49 \u5f80 \u5de6 \u8d70 \u8f93\u51fa   0 \uff0c \u5f80\u53f3 \u8d70 \u8f93\u51fa   1 \uff0c \u4e00\u76f4 \u8d70 \u5230 \u53f6\u5b50 \u8282\u70b9 \u6240 \u8f93\u51fa \u7684 \u7f16\u7801 \u5c31\u662f \u8be5 \u53f6\u5b50 \u8282\u70b9 \u7684 \u300c \u592b\u66fc \u970d\u592b\u66fc \u7f16\u7801 \u300d \u3002 \u4f60 \u4e5f \u53ef\u4ee5 \u89c4\u5b9a \u8d70 \u5230 \u513f\u5b50 \u4e2d \u6700\u5927 \u6743\u503c \u7684 \u4e3a   1 \uff0c \u6700\u5c0f \u7684 \u4e3a   0 \uff0c \u968f\u610f \u3002   \u300c \u5c0f\u5199 \u5199\u5b57 \u5b57\u6bcd \u5c0f\u5199\u5b57\u6bcd   -   \u592b\u66fc \u970d\u592b\u66fc \u7f16\u7801 \u4e3e\u4f8b \u300d   \u5b57\u6bcd   a   b   c   d   e   f   \u51fa\u73b0 \u6b21\u6570   1   5   6   9   8   7   \u7531\u6b64 \u6784\u6210 \u7684 \u592b\u66fc \u970d\u592b\u66fc \u6811 \u5982\u4e0b \u56fe \uff1a   \u592b\u66fc \u970d\u592b\u66fc \u7f16\u7801 \u4e3e\u4f8b \u56fe   \u5219   a   \u5bf9\u5e94 \u7684 \u592b\u66fc \u970d\u592b\u66fc \u7f16\u7801 \u4e3a \uff1a   0001   \uff1b   f   \u5bf9\u5e94 \u7684 \u592b\u66fc \u970d\u592b\u66fc \u7f16\u7801 \u4e3a \uff1a   10   \uff1b \u5269\u4e0b \u7684 \u4f9d\u6b64 \u6b64\u7c7b \u7c7b\u63a8 \u4f9d\u6b64\u7c7b\u63a8   \u592b\u66fc \u970d\u592b\u66fc \u7f16\u7801 \u4ee3\u7801 \u53c2\u8003 \uff1a \uff08 \u5efa \u597d \u592b\u66fc \u970d\u592b\u66fc \u6811\u540e \u518d \u4f20\u9012 \u7ed9 \u8be5 \u51fd\u6570 \u6c42\u503c \uff09   \u592b\u66fc \u970d\u592b\u66fc \u5efa\u6811 + \u592b\u66fc \u970d\u592b\u66fc \u7f16\u7801 \u4ee3\u7801 \u53c2\u8003   \u7edf\u8ba1 \u5c0f\u5199 \u5199\u5b57 \u5b57\u6bcd \u5c0f\u5199\u5b57\u6bcd \u7684 \u592b\u66fc \u970d\u592b\u66fc \u7f16\u7801   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80   81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96   97   98   99   100   101   102   103   104   105   106   107   108   109   110   111   112   113   114   115   116   117   118   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   struct   Node   {   char   c   ;   int   w   ;   Node   *   l   ,   *   r   ;   Node   (   char   chr   =   0   ,   int   weight   =   0   ,   Node   *   left   =   nullptr   ,   Node   *   right   =   nullptr   )   {   c   =   chr   ;   w   =   weight   ;   l   =   left   ;   r   =   right   ;   }   } ;   const   int   inf   =   ~   (   1   < <   31   ) ;   Node   *   create   (   vector   <   vector   <   int   > >   dts   )   {   int   n   =   dts   .   size   ( ) ;   Node   *   F   [   n   ] ,   *   root   ;   for   (   int   i   =   0   ;   i   <   n   ;   i   ++   )   {   F   [   i   ]   =   new   Node   {   char   (   dts   [   i   ] [   0   ] ) ,   dts   [   i   ] [   1   ] ,   nullptr   ,   nullptr   } ;   }   / /   \u6267\u884c   n   -   1   \u6b21   for   (   int   k   =   1   ;   k   <   n   ;   k   ++   )   {   int   m1   ,   m2   ;   m1   =   m2   =   inf   ;   / /   m1   \u662f \u6700\u5c0f \u6700\u5c0f\u503c \u7684 \u4e0b\u6807 \uff0c m2   \u662f \u6b21 \u6700\u5c0f \u6700\u5c0f\u503c \u7684 \u4e0b\u6807   / /   \u5148 \u627e\u5230 \u4e24\u4e2a \u975e\u7a7a \u8282\u70b9 \u7684 \u4e0b\u6807   for   (   int   i   =   0   ;   i   <   n   ;   i   ++   )   {   if   (   F   [   i   ]   &&   m1   = =   inf   )   {   m1   =   i   ;   continue   ;   }   else   if   (   F   [   i   ] )   {   m2   =   i   ;   break   ;   }   }   / /   \u786e\u5b9a \u4e24\u4e2a \u6700\u5c0f \u6700\u5c0f\u503c   for   (   int   i   =   m2   ;   i   <   n   ;   i   ++   )   {   if   (   F   [   i   ] )   {   if   (   F   [   i   ]   - >   w   < =   F   [   m1   ]   - >   w   )   {   m2   =   m1   ;   m1   =   i   ;   }   else   if   (   F   [   i   ]   - >   w   <   F   [   m2   ]   - >   w   )   m2   =   i   ;   }   }   root   =   new   Node   {   0   ,   F   [   m1   ]   - >   w   +   F   [   m2   ]   - >   w   ,   F   [   m1   ] ,   F   [   m2   ] } ;   F   [   m1   ]   =   root   ;   F   [   m2   ]   =   nullptr   ;   }   return   root   ;   }   int   get _ wpl   (   Node   *   a   ,   int   h   =   0   )   {   if   (   !   a   )   return   0   ;   if   (   !   a   - >   l   &&   !   a   - >   r   )   return   a   - >   w   *   h   ;   return   get _ wpl   (   a   - >   l   ,   h   +   1   )   +   get _ wpl   (   a   - >   r   ,   h   +   1   ) ;   }   const   int   N   =   int   (   1e7   +   10   ) ;   char   s   [   N   ] ;   int   cnt   [   26   ] ;   string   hff   [   26   ] ;   void   haff   (   Node   *   a   ,   string   path   =   string   ( ) )   {   if   (   !   a   )   return   ;   if   (   !   a   - >   l   &&   !   a   - >   r   )   {   hff   [   a   - >   c   -   ' a '   ]   =   path   ;   return   ;   }   haff   (   a   - >   l   ,   path   +   ' 0 '   ) ;   haff   (   a   - >   r   ,   path   +   ' 1 '   ) ;   }   void   solve   (   void   )   {   scanf   (   \" % s \"   ,   s   ) ;   vector   <   vector   <   int   > >   dts   ;   for   (   int   i   =   0   ;   s   [   i   ] ;   i   ++   )   cnt   [   s   [   i   ]   -   ' a '   ]   ++   ;   for   (   int   i   =   0   ;   i   <   26   ;   i   ++   )   dts   .   push _ back   ( {   i   +   ' a '   ,   cnt   [   i   ] } ) ;   Node   *   a   =   create   (   dts   ) ;   haff   (   a   ) ;   for   (   int   i   =   0   ;   i   <   26   ;   i   ++   )   cout   < <   char   (   i   +   ' a '   )   < <   \"   :   \"   < <   hff   [   i   ]   < <   endl   ;   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main   (   void   )   {   ifstream   fi   ;   ofstream   fo   ;   fi   .   open   (   \" . / lrq . in \"   ) ;   fo   .   open   (   \" . / lrq . out \"   ) ;   if   (   fi   .   is _ open   ( )   &&   fo   .   is _ open   ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl   ;   fo   .   close   ( ) ;   fi   .   close   ( ) ;   for   (   long   long   i   =   1   ;   i   < =   4e8   +   2e7   ;   i   ++   ) ;   FILE   *   fin   =   freopen   (   \" . / lrq . in \"   ,   \" r \"   ,   stdin   ) ;   FILE   *   fout   =   freopen   (   \" . / lrq . out \"   ,   \" w \"   ,   stdout   ) ;   solve   ( ) ;   fclose   (   fin   ) ;   fclose   (   fout   ) ;   }   else   solve   ( ) ;   return   0   ;   }   \u592b\u66fc \u970d\u592b\u66fc \u5efa\u6811 + \u592b\u66fc \u970d\u592b\u66fc \u7f16\u7801 + \u4f18\u5148 \u961f\u5217   \u7edf\u8ba1 \u5c0f\u5199 \u5199\u5b57 \u5b57\u6bcd \u5c0f\u5199\u5b57\u6bcd \u7684 \u592b\u66fc \u970d\u592b\u66fc \u7f16\u7801   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80   81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96   97   98   99   100   101   102   103   104   105   106   107   108   109   110   111   112   113   114   115   116   117   118   119   120   121   122   123   124   125   126   127   128   129   130   131   132   133   134   135   136   137   138   139   140   141   142   143   144   145   146   147   148   149   150   151   152   153   154   155   156   157   158   159   160   161   162   163   164   165   166   167   168   169   # include   < iostream >   # include   < iomanip >   # include   < algorithm >   # include   < cstdio >   # include   < cstdlib >   # include   < cstring >   # include   < string >   # include   < vector >   # include   < queue >   # include   < deque >   # include   < stack >   # include   < map >   # include   < set >   # include   < unordered _ map >   # include   < unordered _ set >   # include   < cmath >   using   namespace   std   ;   # define   endl   ' \\ n '   # define   pique   priority _ queue   # define   oier   \\   ios _ base : : sync _ with _ stdio ( false ) ; \\   cin . tie ( nullptr ) ;   cout . tie ( nullptr ) ;   # define   cf   int   t ;   cin   > >   t ;   while   ( t   -- )   # define   upfor ( i ,   l ,   r )   for   ( i   =   ( l ) ;   i   < =   ( r ) ;   i   ++ )   # define   downfor ( i ,   l ,   r )   for   ( i   =   ( r ) ;   i   > =   ( l ) ;   i   -- )   / /   # define   int   long   long   typedef   long   long   LL   ;   typedef   long   double   LD   ;   / / typedef   __ int128 _ t   int128 ;   const   int   inf   =   ~   (   1   < <   31   ) ;   / /   \u6b63 \u65e0\u7a77   const   int   ninf   =   (   1   < <   31   ) ;   / /   \u8d1f \u65e0\u7a77   const   LL   infll   =   ~   (   1l   l   < <   63   ) ;   / /   \u6b63 \u65e0\u7a77   const   LL   ninfll   =   (   1l   l   < <   63   ) ;   / /   \u8d1f \u65e0\u7a77   inline   LL   rll   ( )   {   oier   LL   x   ;   cin   > >   x   ;   return   x   ;   }   inline   int   rint   ( )   {   oier   int   x   ;   cin   > >   x   ;   return   x   ;   }   / *   0b00111111   =   0x3f   0b01111111   =   0x7f   0b11111111   =   - 1   * /   int   gdb   =   0   ;   const   int   N   =   int   (   1e7   +   10   ) ;   / /   \u7531\u4e8e \u60c5\u62a5 \u4e0d\u8db3 \uff0c \u53ea\u80fd \u900f\u8fc7 \u300c \u8bd5\u884c \u9519\u8bef \u300d \u6765 \u83b7\u53d6 \u3002   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   int   sums   [   N   ] ;   struct   Tree   {   char   a   ;   int   b   ;   Tree   *   l   ,   *   r   ;   } ;   struct   Node   {   Tree   *   t   ;   Node   (   Tree   *   a   =   nullptr   )   {   t   =   a   ;   }   bool   operator   <   (   const   Node   &   a   )   const   {   return   t   - >   b   >   a   .   t   - >   b   ;   }   } ;   typedef   priority _ queue   <   Node   >   pq   ;   struct   Qnode   {   char   a   ;   string   s   ;   bool   operator   <   (   const   Qnode   &   t   )   const   {   return   a   >   t   .   a   ;   }   } ;   typedef   priority _ queue   <   Qnode   >   sq   ;   void   solve   ( )   {   oier   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   string   s   ;   cin   > >   s   ;   for   (   auto   x   :   s   )   sums   [   x   -   ' a '   ]   ++   ;   pq   q   ;   for   (   int   i   =   0   ;   i   <   26   ;   i   ++   )   {   if   (   sums   [   i   ] )   q   .   push   (   Node   (   new   Tree   {   i   +   ' a '   ,   sums   [   i   ] ,   nullptr   ,   nullptr   } ) ) ;   }   while   (   q   .   size   ( )   >   1   )   {   Node   a   =   q   .   top   ( ) ;   q   .   pop   ( ) ;   Node   b   =   q   .   top   ( ) ;   q   .   pop   ( ) ;   Node   c   =   Node   (   new   Tree   {   0   ,   a   .   t   - >   b   +   b   .   t   - >   b   ,   a   .   t   ,   b   .   t   } ) ;   q   .   push   (   c   ) ;   }   stack   <   pair   <   Tree   *   ,   string   > >   st   ;   st   .   push   ( {   q   .   top   ( ) .   t   ,   string   ( ) } ) ;   sq   res   ;   while   (   st   .   size   ( ) )   {   auto   [   x   ,   y   ]   =   st   .   top   ( ) ;   st   .   pop   ( ) ;   if   (   !   x   - >   l   &&   !   x   - >   r   )   {   / /   cout   < <   x - > a   < <   \"   :   \"   < <   x - > b   < <   \"   :   \"   < <   y   < <   endl ;   / /   cout   < <   x - > a   < <   \"   :   \"   < <   y   < <   endl ;   res   .   push   ( {   x   - >   a   ,   y   } ) ;   continue   ;   }   st   .   push   ( {   x   - >   l   ,   y   +   ' 0 '   } ) ;   st   .   push   ( {   x   - >   r   ,   y   +   ' 1 '   } ) ;   }   while   (   res   .   size   ( ) )   {   auto   t   =   res   .   top   ( ) ;   res   .   pop   ( ) ;   cout   < <   t   .   a   < <   \"   :   \"   < <   t   .   s   < <   endl   ;   }   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   }   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   / * *   *   _ ooOoo _   *   o8888888o   *   88 \"   .   \" 88   *   ( |   -_-   | )   *   O \\   =   / O   *   ____ / ` --- ' \\ ____   *   . '   \\ \\ |   | / /   ` .   *   /   \\ \\ | | |   :   | | | / /   \\   *   /   _ | | | | |   - : -   | | | | | -   \\   *   |   |   \\ \\ \\   -   / / /   |   |   *   |   \\ _ |   ' ' \\ --- / ' '   |   |   *   \\   .- \\ __   ` - `   ___ / -.   /   *   ___ ` .   . '   / --.-- \\   ` .   .   __   *   . \" \"   ' <   ` .___ \\ _ < | > _ / ___. '   > ' \" \" .   *   |   |   :   ` -   \\ ` . ; ` \\   _   / ` ; . ` /   -   `   :   |   |   *   \\   \\   ` -.   \\ _   __ \\   / __   _ /   .- `   /   /   *   = = = = = = ` -.____ ` -.___ \\ _____ / ___.- ` ____.- ' = = = = = =   *   ` = --- = '   *   ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^   *   \u4f5b\u7956 \u4fdd\u4f51   \u6c38\u65e0 BUG   *   \u4f5b \u66f0 :   *   \u5199\u5b57 \u5199\u5b57\u697c \u91cc \u5199\u5b57 \u5199\u5b57\u95f4 \uff0c \u5199\u5b57 \u5199\u5b57\u95f4 \u91cc \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1b   *   \u7a0b\u5e8f \u4eba\u5458 \u5199 \u7a0b\u5e8f \uff0c \u53c8 \u62ff \u7a0b\u5e8f \u6362 \u9152\u94b1 \u3002   *   \u9152\u9192 \u53ea \u5728 \u7f51\u4e0a \u5750 \uff0c \u9152\u9189 \u8fd8\u6765 \u7f51\u4e0b \u7f51\u4e0b\u7720 \uff1b   *   \u9152\u9189 \u9152\u9192 \u65e5\u590d \u65e5 \uff0c \u7f51\u4e0a \u4e0a\u7f51 \u7f51\u4e0a\u7f51 \u4e0b\u5e74 \u590d\u5e74 \u3002   *   \u4f46\u613f \u8001\u6b7b \u7535\u8111 \u95f4 \uff0c \u4e0d\u613f \u97a0\u8eac \u8001\u677f \u524d \uff1b   *   \u5954\u9a70 \u5b9d\u9a6c \u8d35\u8005\u8da3 \uff0c \u516c\u4ea4 \u81ea\u884c \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \u3002   *   \u522b\u4eba \u7b11 \u6211 \u5fd2 \u75af\u766b \uff0c \u6211 \u7b11 \u81ea\u5df1 \u547d\u592a\u8d31 \uff1b   *   \u4e0d\u89c1 \u6ee1\u8857 \u6f02\u4eae \u59b9 \uff0c \u54ea\u4e2a \u5f52\u5f97 \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1f   * * /   / *   = = = = = = = = = = = = = = = = = = = = = = = = \u4f5b\u7956 \u4fdd\u4f51 ,   \u6c38\u65e0 bug = = = = = = = = = = = = = = = = = = = = = = = =   * /   int   main   ( )   {   / /   oier   cf   solve ( ) ;   return   0 ;   oier   solve   ( ) ;   return   0   ;   }   \u592b\u66fc \u970d\u592b\u66fc \u6811 \u5efa\u6811 \u4ee3\u7801 \u53c2\u8003   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   struct   Node   {   int   w   ;   Node   *   l   ,   *   r   ;   Node   (   int   weight   =   0   ,   Node   *   left   =   nullptr   ,   Node   *   right   =   nullptr   )   {   w   =   weight   ;   l   =   left   ;   r   =   right   ;   }   } ;   const   int   inf   =   ~   (   1   < <   31   ) ;   Node   *   init   (   const   vector   <   int   > &   nums   )   {   int   n   =   nums   .   size   ( ) ;   Node   *   F   [   nums   .   size   ( )   +   1   ] ;   for   (   int   i   =   1   ;   i   < =   nums   .   size   ( ) ;   i   ++   )   F   [   i   ]   =   new   Node   (   nums   [   i   -   1   ] ) ;   Node   *   root   ;   / /   \u4e24 \u4e24 \u5408\u5e76 \uff0c \u8981 \u5408\u5e76   n   -   1   \u6b21   for   (   int   a   =   1   ;   a   <   n   ;   a   ++   )   {   / /   min1   \u662f \u6700\u5c0f \u6700\u5c0f\u503c \u7684 \u4e0b\u6807 \uff0c min2   \u662f \u6b21 \u6700\u5c0f \u6700\u5c0f\u503c \u7684 \u4e0b\u6807   int   min1   ,   min2   ;   min1   =   min2   =   inf   ;   / /   \u5148 \u627e\u5230 \u4e0d \u4e3a   \u300c \u7a7a \u300d   \u7684 \u4e24\u4e2a \u8282\u70b9   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   if   (   F   [   i   ]   &&   min1   = =   inf   )   {   min1   =   i   ;   continue   ;   }   else   if   (   F   [   i   ] )   {   min2   =   i   ;   break   ;   }   }   / /   \u5bfb\u627e \u6700\u5c0f \u6700\u5c0f\u503c \uff0c \u5bfb\u627e \u6700\u5927 \u5927\u503c \u6700\u5927\u503c   for   (   int   i   =   min2   ;   i   < =   n   ;   i   ++   )   {   if   (   F   [   i   ] )   {   if   (   F   [   i   ]   - >   w   < =   F   [   min1   ]   - >   w   )   {   min2   =   min1   ;   min1   =   i   ;   }   else   if   (   F   [   i   ]   - >   w   < =   F   [   min2   ]   - >   w   )   min2   =   i   ;   }   }   / /   \u5efa\u7acb \u65b0\u6811   root   =   new   Node   (   F   [   min1   ]   - >   w   +   F   [   min2   ]   - >   w   ,   F   [   min1   ] ,   F   [   min2   ] ) ;   F   [   min1   ]   =   root   ;   F   [   min2   ]   =   nullptr   ;   }   return   root   ;   }   int   get _ wpl   (   Node   *   a   ,   int   h   =   0   )   {   if   (   a   = =   nullptr   )   return   0   ;   if   (   !   a   - >   l   &&   !   a   - >   r   )   return   a   - >   w   *   h   ;   return   get _ wpl   (   a   - >   l   ,   h   +   1   )   +   get _ wpl   (   a   - >   r   ,   h   +   1   ) ;   }   \u4e0d\u7528 \u5efa \u597d \u592b\u66fc \u970d\u592b\u66fc \u6811 \uff0c \u76f4\u63a5 \u6c42   WPL   long   long   get _ wpl   (   const   vector   <   int   > &   nums   )   {   priority _ queue   <   int   ,   vector   <   int   >   ,   greater   <   int   > >   qu   (   nums   .   begin   ( ) ,   nums   .   end   ( ) ) ;   long   long   ans   =   0   ;   while   (   qu   .   size   ( )   >   1   )   {   int   a   =   qu   .   top   ( ) ;   qu   .   pop   ( ) ;   int   b   =   qu   .   top   ( ) ;   qu   .   pop   ( ) ;   int   t   =   a   +   b   ;   ans   =   ans   +   t   ;   qu   .   push   (   t   ) ;   }   return   ans   ;   }","title":"\u970d\u592b\u66fc \u7f16\u7801"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E4%BA%8C%E5%8F%89%E5%A0%86/","text":"\u4e8c\u53c9 \u5806   \u4ee5\u5c0f\u6839\u5806 \u4e3a\u4f8b \uff0c \u5c0f\u6839\u5806 \uff0c \u987e\u540d \u987e\u540d\u601d\u4e49 \u6839\u662f \u6700\u5c0f \u7684 \uff0c \u4efb\u610f \u4e00\u4e2a \u8282\u70b9 \u7684 \u503c \u8981 \u5c0f\u4e8e \u6216 \u7b49\u4e8e \u5b83 \u7684 \u513f\u5b50 \u8282\u70b9 \u7684 \u503c \u3002   \u6570\u7ec4 \u7248   \u5047\u8bbe \u6709 \u6570\u7ec4 \uff1a   q [ N ]   =   { ,   1 ,   4 ,   5 ,   7 ,   9 ,   2 ,   8 }   \uff0c \u6570\u636e \u4e2a\u6570 \uff1a   q [ 0 ]   =   7   \uff0c \u9ed8\u8ba4 \u6570\u636e \u57df \u4ece \u4e0b\u6807   1   \u5f00\u59cb ,   q [ 0 ]   \u5b58\u50a8 \u6570\u636e \u4e2a\u6570 \u3002   const   int   N   =   int   (   1e6   +   10   ) ;   int   q   [   N   ] ;   down   \u5411\u4e0b \u8c03\u6574   \u5148 \u627e\u5230 \u5f53\u524d \u8282\u70b9 \u4e2d \u7684 \u6700\u5c0f \u513f\u5b50 \u8282\u70b9 \uff08 \u53ef\u80fd \u53ea\u6709 \u4e00\u4e2a \u5de6 \u513f\u5b50 \uff0c \u4e5f \u53ef\u80fd \u6ca1\u6709 \u513f\u5b50 \uff0c \u6ca1\u6709 \u5c31 \u76f4\u63a5 \u9000\u51fa \u5faa\u73af \uff0c \u4e0d\u80fd \u7ee7\u7eed \u5411\u4e0b \u8c03\u6574 \u4e86 \uff09 \u5982\u679c \u6700\u5c0f \u7684 \u513f\u5b50 \u5927\u4e8e \u5f53\u524d \u8282\u70b9 \uff0c \u5219 \u8c03\u6574 \u7ed3\u675f \uff0c \u5426\u5219 \u4ea4\u6362 \u4e24\u8005 \u4f4d\u7f6e \uff0c pos   \u4e0b\u79fb \u5230 \u6700\u5c0f \u513f\u5b50 \u7684 \u4f4d\u7f6e \uff0c \u7ee7\u7eed \u5411\u4e0b \u8c03\u6574 \u3002   void   down   (   int   q   [ ] ,   int   pos   )   {   while   (   2   *   pos   < =   q   [   0   ] )   {   int   t   =   2   *   pos   ;   if   (   t   +   1   < =   q   [   0   ]   &&   q   [   t   +   1   ]   <   q   [   t   ] )   t   =   t   +   1   ;   if   (   q   [   pos   ]   >   q   [   t   ] )   swap   (   q   [   pos   ] ,   q   [   t   ] ) ,   pos   =   t   ;   else   break   ;   }   }   up   \u5411\u4e0a \u8c03\u6574   \u5982\u679c \u5f53\u524d \u8282\u70b9 \u7684 \u7236 \u8282\u70b9 \u5b58\u5728 \uff08 \u5373   pos   /   2   >   0 \uff09 \u5e76\u4e14 \u8fd8 \u5927\u4e8e \u5f53\u524d \u8282\u70b9 \u7684\u8bdd \uff0c \u5c31\u8981 \u4ea4\u6362 \u4e24\u8005 \u7684 \u503c \uff0c pos   \u4e0a\u79fb \u5230   pos   /   2 \uff0c \u7136\u540e \u7ee7\u7eed \u6267\u884c \u7ee7\u7eed\u6267\u884c \u5411\u4e0a \u8c03\u6574 \u3002   void   up   (   int   q   [ ] ,   int   pos   )   {   while   (   pos   /   2   >   0   )   {   if   (   q   [   pos   ]   <   q   [   pos   /   2   ] )   swap   (   q   [   pos   ] ,   q   [   pos   /   2   ] ) ,   pos   / =   2   ;   else   break   ;   }   }   heap   \u5c06 \u6570\u7ec4 \u8c03\u6574 \u6210\u5806   \u5199\u6cd5 \u4e00 \uff1a \uff08 \u6700 \u7b80\u5355 \u7684 \u5199\u6cd5 \uff09   void   heap   (   int   q   [ ] )   {   for   (   int   i   =   q   [   0   ] ;   i   ;   i   --   )   down   (   q   ,   i   ) ;   }   \u5199\u6cd5 \u4e8c \uff1a \uff08 \u4ece \u6700\u540e \u4e00\u4e2a \u5e26 \u513f\u5b50 \u7684 \u8282\u70b9 \u7684 \u5f00\u59cb \uff09   \u5047\u8bbe \u6700\u540e \u4e00\u4e2a \u5e26 \u513f\u5b50 \u7684 \u8282\u70b9 \u662f   \\ ( k \\ )   \uff0c \u5047\u8bbe \u53ea\u6709 \u4e00\u4e2a \u513f\u5b50 \uff0c \u5219   \\ ( 2k   =   q [ 0 ] \\ )   \u4e14   \\ ( q [ 0 ] \\ )   \u4e3a \u5076\u6570 \uff0c \u6240\u4ee5   \\ ( k   =   q [ 0 ]   /   2 \\ )   \u5047\u8bbe \u6709 \u4e24\u4e2a \u513f\u5b50 \u8282\u70b9 \uff0c \u5219   \\ ( 2k   +   1   =   q [ 0 ] \\ )   \u4e14   \\ ( q [ 0 ] \\ )   \u4e3a \u5947\u6570 \uff0c \u6240\u4ee5   \\ ( k   =   ( q [ 0 ]   -   1 )   /   2 \\ )   \uff0c \u7531\u4e8e c++ \u5411\u4e0b \u53d6\u503c \u7684 \u7279\u6027 \uff0c \u4e5f \u53ef \u5199\u6210 \uff1a   \\ ( k   =   q [ 0 ]   /   2 \\ )   \u8bfb\u8005 \u53ef\u4ee5 \u753b \u51e0\u4e2a \u56fe \u7ec6\u7ec6 \u7814\u8ba8 \u4ec0\u4e48 \u4e3a\u4ec0\u4e48 \u6700\u540e \u4e00\u4e2a \u5e26 \u513f\u5b50 \u7684 \u8282\u70b9 \u53ea\u6709 \u4e00\u4e2a \u513f\u5b50 \u8282\u70b9 \u65f6 \uff0c \u603b \u8282\u70b9 \u6570\u4e3a \u5076\u6570 \uff1b \u6709 \u4e24\u4e2a \u513f\u5b50 \u8282\u70b9 \u65f6 \uff0c \u603b \u8282\u70b9 \u6570\u4e3a \u5947\u6570 \u3002   void   heap   (   int   q   [ ] )   {   for   (   int   i   =   q   [   0   ]   /   2   ;   i   ;   i   --   )   down   (   q   ,   i   ) ;   }   push   \u538b\u5165 \u6570\u636e   \u5c06 \u65b0 \u6570\u636e \u653e\u5728 \u6700\u540e \u7684 \u4f4d\u7f6e \uff0c \u518d \u6267\u884c \u5411\u4e0a \u8c03\u6574   void   push   (   int   q   [ ] ,   int   x   )   {   q   [   ++   q   [   0   ] ]   =   x   ;   up   (   q   ,   q   [   0   ] ) ;   }   pop \u3001 front   \u5220\u9664 \u3001 \u8bbf\u95ee \u6700\u5c0f \u6700\u5c0f\u503c   int   front   (   int   q   [ ] )   {   return   q   [   1   ] ;   }   / /   \u60f3 \u4ea4\u6362 \u5f53\u524d \u5143\u7d20 \u548c \u6700\u540e \u4e00\u4e2a \u5143\u7d20 \uff0c \u957f\u5ea6 \u51cf\u4e00 \uff0c \u5bf9 \u6839\u90e8   1   \u6267\u884c \u5411\u4e0b \u8c03\u6574   void   pop   (   int   q   [ ] )   {   swap   (   q   [   1   ] ,   q   [   q   [   0   ]   --   ] ) ;   down   (   q   ,   1   ) ;   }   empty \u3001 size   bool   empty   (   int   q   [ ] )   {   return   q   [   0   ]   = =   0   ;   }   int   size   (   int   q   [ ] )   {   return   q   [   0   ] ;   }   \u6570\u7ec4 \u7248 \u4ee3\u7801   const   int   N   =   int   (   1e6   +   10   ) ;   int   q   [   N   ] ;   void   down   (   int   q   [ ] ,   int   pos   )   {   while   (   2   *   pos   < =   q   [   0   ] )   {   int   t   =   2   *   pos   ;   if   (   t   +   1   < =   q   [   0   ]   &&   q   [   t   +   1   ]   <   q   [   t   ] )   t   =   t   +   1   ;   if   (   q   [   pos   ]   >   q   [   t   ] )   swap   (   q   [   pos   ] ,   q   [   t   ] ) ,   pos   =   t   ;   else   break   ;   }   }   void   up   (   int   q   [ ] ,   int   pos   )   {   while   (   pos   /   2   >   0   )   {   if   (   q   [   pos   ]   <   q   [   pos   /   2   ] )   swap   (   q   [   pos   ] ,   q   [   pos   /   2   ] ) ,   pos   / =   2   ;   else   break   ;   }   }   / /   void   heap ( int   q [ ] )   / /   {   / /   for   ( int   i   =   q [ 0 ] ;   i ;   i   -- )   down ( q ,   i ) ;   / /   }   void   heap   (   int   q   [ ] )   {   for   (   int   i   =   q   [   0   ]   /   2   ;   i   ;   i   --   )   down   (   q   ,   i   ) ;   }   void   push   (   int   q   [ ] ,   int   x   )   {   q   [   ++   q   [   0   ] ]   =   x   ;   up   (   q   ,   q   [   0   ] ) ;   }   int   front   (   int   q   [ ] )   {   return   q   [   1   ] ;   }   void   pop   (   int   q   [ ] )   {   swap   (   q   [   1   ] ,   q   [   q   [   0   ]   --   ] ) ;   down   (   q   ,   1   ) ;   }   bool   empty   (   int   q   [ ] )   {   return   q   [   0   ]   = =   0   ;   }   int   size   (   int   q   [ ] )   {   return   q   [   0   ] ;   }","title":"\u4e8c\u53c9 \u5806"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E4%BA%8C%E5%8F%89%E5%A0%86/#_1","text":"\u4ee5\u5c0f\u6839\u5806 \u4e3a\u4f8b \uff0c \u5c0f\u6839\u5806 \uff0c \u987e\u540d \u987e\u540d\u601d\u4e49 \u6839\u662f \u6700\u5c0f \u7684 \uff0c \u4efb\u610f \u4e00\u4e2a \u8282\u70b9 \u7684 \u503c \u8981 \u5c0f\u4e8e \u6216 \u7b49\u4e8e \u5b83 \u7684 \u513f\u5b50 \u8282\u70b9 \u7684 \u503c \u3002","title":"\u4e8c\u53c9 \u5806"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E4%BA%8C%E5%8F%89%E5%A0%86/#_2","text":"\u5047\u8bbe \u6709 \u6570\u7ec4 \uff1a   q [ N ]   =   { ,   1 ,   4 ,   5 ,   7 ,   9 ,   2 ,   8 }   \uff0c \u6570\u636e \u4e2a\u6570 \uff1a   q [ 0 ]   =   7   \uff0c \u9ed8\u8ba4 \u6570\u636e \u57df \u4ece \u4e0b\u6807   1   \u5f00\u59cb ,   q [ 0 ]   \u5b58\u50a8 \u6570\u636e \u4e2a\u6570 \u3002   const   int   N   =   int   (   1e6   +   10   ) ;   int   q   [   N   ] ;","title":"\u6570\u7ec4 \u7248"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E4%BA%8C%E5%8F%89%E5%A0%86/#down","text":"\u5148 \u627e\u5230 \u5f53\u524d \u8282\u70b9 \u4e2d \u7684 \u6700\u5c0f \u513f\u5b50 \u8282\u70b9 \uff08 \u53ef\u80fd \u53ea\u6709 \u4e00\u4e2a \u5de6 \u513f\u5b50 \uff0c \u4e5f \u53ef\u80fd \u6ca1\u6709 \u513f\u5b50 \uff0c \u6ca1\u6709 \u5c31 \u76f4\u63a5 \u9000\u51fa \u5faa\u73af \uff0c \u4e0d\u80fd \u7ee7\u7eed \u5411\u4e0b \u8c03\u6574 \u4e86 \uff09 \u5982\u679c \u6700\u5c0f \u7684 \u513f\u5b50 \u5927\u4e8e \u5f53\u524d \u8282\u70b9 \uff0c \u5219 \u8c03\u6574 \u7ed3\u675f \uff0c \u5426\u5219 \u4ea4\u6362 \u4e24\u8005 \u4f4d\u7f6e \uff0c pos   \u4e0b\u79fb \u5230 \u6700\u5c0f \u513f\u5b50 \u7684 \u4f4d\u7f6e \uff0c \u7ee7\u7eed \u5411\u4e0b \u8c03\u6574 \u3002   void   down   (   int   q   [ ] ,   int   pos   )   {   while   (   2   *   pos   < =   q   [   0   ] )   {   int   t   =   2   *   pos   ;   if   (   t   +   1   < =   q   [   0   ]   &&   q   [   t   +   1   ]   <   q   [   t   ] )   t   =   t   +   1   ;   if   (   q   [   pos   ]   >   q   [   t   ] )   swap   (   q   [   pos   ] ,   q   [   t   ] ) ,   pos   =   t   ;   else   break   ;   }   }","title":"down   \u5411\u4e0b \u8c03\u6574"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E4%BA%8C%E5%8F%89%E5%A0%86/#up","text":"\u5982\u679c \u5f53\u524d \u8282\u70b9 \u7684 \u7236 \u8282\u70b9 \u5b58\u5728 \uff08 \u5373   pos   /   2   >   0 \uff09 \u5e76\u4e14 \u8fd8 \u5927\u4e8e \u5f53\u524d \u8282\u70b9 \u7684\u8bdd \uff0c \u5c31\u8981 \u4ea4\u6362 \u4e24\u8005 \u7684 \u503c \uff0c pos   \u4e0a\u79fb \u5230   pos   /   2 \uff0c \u7136\u540e \u7ee7\u7eed \u6267\u884c \u7ee7\u7eed\u6267\u884c \u5411\u4e0a \u8c03\u6574 \u3002   void   up   (   int   q   [ ] ,   int   pos   )   {   while   (   pos   /   2   >   0   )   {   if   (   q   [   pos   ]   <   q   [   pos   /   2   ] )   swap   (   q   [   pos   ] ,   q   [   pos   /   2   ] ) ,   pos   / =   2   ;   else   break   ;   }   }","title":"up   \u5411\u4e0a \u8c03\u6574"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E4%BA%8C%E5%8F%89%E5%A0%86/#heap","text":"\u5199\u6cd5 \u4e00 \uff1a \uff08 \u6700 \u7b80\u5355 \u7684 \u5199\u6cd5 \uff09   void   heap   (   int   q   [ ] )   {   for   (   int   i   =   q   [   0   ] ;   i   ;   i   --   )   down   (   q   ,   i   ) ;   }   \u5199\u6cd5 \u4e8c \uff1a \uff08 \u4ece \u6700\u540e \u4e00\u4e2a \u5e26 \u513f\u5b50 \u7684 \u8282\u70b9 \u7684 \u5f00\u59cb \uff09   \u5047\u8bbe \u6700\u540e \u4e00\u4e2a \u5e26 \u513f\u5b50 \u7684 \u8282\u70b9 \u662f   \\ ( k \\ )   \uff0c \u5047\u8bbe \u53ea\u6709 \u4e00\u4e2a \u513f\u5b50 \uff0c \u5219   \\ ( 2k   =   q [ 0 ] \\ )   \u4e14   \\ ( q [ 0 ] \\ )   \u4e3a \u5076\u6570 \uff0c \u6240\u4ee5   \\ ( k   =   q [ 0 ]   /   2 \\ )   \u5047\u8bbe \u6709 \u4e24\u4e2a \u513f\u5b50 \u8282\u70b9 \uff0c \u5219   \\ ( 2k   +   1   =   q [ 0 ] \\ )   \u4e14   \\ ( q [ 0 ] \\ )   \u4e3a \u5947\u6570 \uff0c \u6240\u4ee5   \\ ( k   =   ( q [ 0 ]   -   1 )   /   2 \\ )   \uff0c \u7531\u4e8e c++ \u5411\u4e0b \u53d6\u503c \u7684 \u7279\u6027 \uff0c \u4e5f \u53ef \u5199\u6210 \uff1a   \\ ( k   =   q [ 0 ]   /   2 \\ )   \u8bfb\u8005 \u53ef\u4ee5 \u753b \u51e0\u4e2a \u56fe \u7ec6\u7ec6 \u7814\u8ba8 \u4ec0\u4e48 \u4e3a\u4ec0\u4e48 \u6700\u540e \u4e00\u4e2a \u5e26 \u513f\u5b50 \u7684 \u8282\u70b9 \u53ea\u6709 \u4e00\u4e2a \u513f\u5b50 \u8282\u70b9 \u65f6 \uff0c \u603b \u8282\u70b9 \u6570\u4e3a \u5076\u6570 \uff1b \u6709 \u4e24\u4e2a \u513f\u5b50 \u8282\u70b9 \u65f6 \uff0c \u603b \u8282\u70b9 \u6570\u4e3a \u5947\u6570 \u3002   void   heap   (   int   q   [ ] )   {   for   (   int   i   =   q   [   0   ]   /   2   ;   i   ;   i   --   )   down   (   q   ,   i   ) ;   }","title":"heap   \u5c06 \u6570\u7ec4 \u8c03\u6574 \u6210\u5806"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E4%BA%8C%E5%8F%89%E5%A0%86/#push","text":"\u5c06 \u65b0 \u6570\u636e \u653e\u5728 \u6700\u540e \u7684 \u4f4d\u7f6e \uff0c \u518d \u6267\u884c \u5411\u4e0a \u8c03\u6574   void   push   (   int   q   [ ] ,   int   x   )   {   q   [   ++   q   [   0   ] ]   =   x   ;   up   (   q   ,   q   [   0   ] ) ;   }","title":"push   \u538b\u5165 \u6570\u636e"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E4%BA%8C%E5%8F%89%E5%A0%86/#popfront","text":"int   front   (   int   q   [ ] )   {   return   q   [   1   ] ;   }   / /   \u60f3 \u4ea4\u6362 \u5f53\u524d \u5143\u7d20 \u548c \u6700\u540e \u4e00\u4e2a \u5143\u7d20 \uff0c \u957f\u5ea6 \u51cf\u4e00 \uff0c \u5bf9 \u6839\u90e8   1   \u6267\u884c \u5411\u4e0b \u8c03\u6574   void   pop   (   int   q   [ ] )   {   swap   (   q   [   1   ] ,   q   [   q   [   0   ]   --   ] ) ;   down   (   q   ,   1   ) ;   }","title":"pop \u3001 front   \u5220\u9664 \u3001 \u8bbf\u95ee \u6700\u5c0f\u503c"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E4%BA%8C%E5%8F%89%E5%A0%86/#emptysize","text":"bool   empty   (   int   q   [ ] )   {   return   q   [   0   ]   = =   0   ;   }   int   size   (   int   q   [ ] )   {   return   q   [   0   ] ;   }   \u6570\u7ec4 \u7248 \u4ee3\u7801   const   int   N   =   int   (   1e6   +   10   ) ;   int   q   [   N   ] ;   void   down   (   int   q   [ ] ,   int   pos   )   {   while   (   2   *   pos   < =   q   [   0   ] )   {   int   t   =   2   *   pos   ;   if   (   t   +   1   < =   q   [   0   ]   &&   q   [   t   +   1   ]   <   q   [   t   ] )   t   =   t   +   1   ;   if   (   q   [   pos   ]   >   q   [   t   ] )   swap   (   q   [   pos   ] ,   q   [   t   ] ) ,   pos   =   t   ;   else   break   ;   }   }   void   up   (   int   q   [ ] ,   int   pos   )   {   while   (   pos   /   2   >   0   )   {   if   (   q   [   pos   ]   <   q   [   pos   /   2   ] )   swap   (   q   [   pos   ] ,   q   [   pos   /   2   ] ) ,   pos   / =   2   ;   else   break   ;   }   }   / /   void   heap ( int   q [ ] )   / /   {   / /   for   ( int   i   =   q [ 0 ] ;   i ;   i   -- )   down ( q ,   i ) ;   / /   }   void   heap   (   int   q   [ ] )   {   for   (   int   i   =   q   [   0   ]   /   2   ;   i   ;   i   --   )   down   (   q   ,   i   ) ;   }   void   push   (   int   q   [ ] ,   int   x   )   {   q   [   ++   q   [   0   ] ]   =   x   ;   up   (   q   ,   q   [   0   ] ) ;   }   int   front   (   int   q   [ ] )   {   return   q   [   1   ] ;   }   void   pop   (   int   q   [ ] )   {   swap   (   q   [   1   ] ,   q   [   q   [   0   ]   --   ] ) ;   down   (   q   ,   1   ) ;   }   bool   empty   (   int   q   [ ] )   {   return   q   [   0   ]   = =   0   ;   }   int   size   (   int   q   [ ] )   {   return   q   [   0   ] ;   }","title":"empty \u3001 size"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E5%B7%A6%E5%81%8F%E6%A0%91/","text":"\u5de6\u504f \u6811   \u5de6\u504f \u6811 \u7684 \u542b\u4e49 \u662f \u53ea\u80fd \u5141\u8bb8 \u5de6\u5b50 \u6811 \u7684 \u6df1\u5ea6 \u6bd4\u53f3\u5b50 \u6811 \u7684 \u6df1 \uff0c \u5408\u5e76 \u5806\u65f6 \uff0c \u53d6 \u6700\u5c0f \u7684 \u6839 \u4f5c\u4e3a \u65b0\u5806 \u7684 \u6839 \uff0c \u5c06 \u53e6\u5916 \u4e00\u4e2a \u5806 \u4e0e \u8be5 \u6700\u5c0f \u5806 \u7684 \u53f3\u5b50 \u6811 \u91cd\u590d \u6267\u884c \u4e0a\u8ff0 \u64cd\u4f5c \uff0c \u5408\u5e76 \u540e \u5982\u679c \u51fa\u73b0 \u5de6\u5b50 \u6811 \u7684 \u9ad8\u5ea6 \u5c0f\u4e8e \u53f3\u5b50 \u6811 \u7684 \u9ad8\u5ea6 \uff0c \u8981 \u4ea4\u6362 \u5de6\u53f3 \u5b50\u6811 \uff0c \u56e0\u6b64 \u5de6\u8fb9 \u7684 \u6811 \u90fd \u4f1a \u6bd4 \u53f3\u8fb9 \u7684 \u9ad8 \uff0c \u8fd9\u6837 \u505a \u7684 \u597d\u5904 \u80fd \u5c06 \u5408\u5e76 \u5806 \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u964d\u4f4e \u81f3   \\ ( O ( log ( n )   +   log ( m ) ) \\ )   \u914d\u5bf9 \u5806 \u7684 \u5408\u5e76 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u662f   \\ ( O ( 1 ) \\ )   \u4f46 \u5220\u9664 \u6839 \u8282\u70b9 \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u4e3a   \\ ( O ( log ( n ) ) \\ )   \u5de6\u504f \u6811 \u5408\u5e76 \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u867d\u7136 \u662f   \\ ( O ( log ( n   +   m ) ) \\ )   \u5220\u9664 \u6839 \u8282\u70b9 \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u4e5f \u4e0d\u591a \u5dee\u4e0d\u591a \u662f   \\ ( O ( log ( n   +   m ) ) \\ )   \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u5bf9\u6bd4 \u56fe   \u7ed3\u6784 \u4f53 \u5b9a\u4e49   \u9700\u8981 \u7528   dist   \u6765 \u5b58\u50a8 \u5f53\u524d \u8282\u70b9 \u8ddd\u79bb \u6700\u8fd1 \u53f6\u5b50 \u8282\u70b9 \u7684 \u8def\u5f84 \u957f\u5ea6 \uff0c \u5b9e\u9645 \u5b9e\u9645\u4e0a   a . d   =   min ( a . l . d ,   a . r . d )   +   1   \u6211\u4eec \u89c4\u5b9a   nullptr   \u7684   dist   \u503c\u4e3a   0 \uff0c \u53f6\u5b50 \u8282\u70b9 \u7684   dist   \u5c31\u662f   1 \u3002   struct   Node   {   int   v   ,   d   ;   Node   *   l   ,   *   r   ;   } ;   int   d   (   Node   *   a   )   {   if   (   !   a   )   return   0   ;   return   a   - >   d   ;   }   meld   \u5408\u5e76 \u4e24\u5806   \u5982\u679c \u8fd9 \u4e24\u5806 \u6709 \u300c \u7a7a\u5806 \u300d \u76f4\u63a5 \u8fd4\u56de \u53e6\u5916 \u4e00\u4e2a \u5806 \uff1b   \u5728 \u8fd9 \u4e24\u5806 \u4e2d \u5bfb\u627e \u6700\u5c0f \u7684 \u5806 \uff0c \u6682\u4e14 \u79f0\u547c \u5b83 \u4e3a   a \uff0c \u79f0\u547c \u53e6\u5916 \u4e00\u4e2a \u5806\u4e3a   b \uff0c \u5c06 \u6700\u5c0f \u7684 \u5806   a   \u7684 \u53f3 \u5b69\u5b50 \u4e0e \u5806   b   \u6267\u884c \u4e0a\u8ff0 \u5408\u5e76 \u64cd\u4f5c \uff1b   \u6267\u884c \u5b8c \u4e4b\u540e \uff0c \u5982\u679c \u5de6\u5b50 \u6811 \u7684   dist   \u5c0f\u4e8e \u53f3\u5b50 \u6811 \u7684   dist \uff0c \u4ea4\u6362 \u5de6\u53f3 \u5b50\u6811 \uff0c \u5e76 \u8fd4\u56de \u65b0 \u7684 \u6839 \u8282\u70b9 \u3002   Node   *   meld   (   Node   *   a   ,   Node   *   b   )   {   if   (   !   a   | |   !   b   )   return   a   ?   a   :   b   ;   if   (   a   - >   v   >   b   - >   v   )   swap   <   Node   * >   (   a   ,   b   ) ;   a   - >   r   =   meld   (   a   - >   r   ,   b   ) ;   if   (   d   (   a   - >   l   )   <   d   (   a   - >   r   ) )   swap   <   Node   * >   (   a   - >   l   ,   a   - >   r   ) ;   a   - >   d   =   d   (   a   - >   r   )   +   1   ;   return   a   ;   }   meld   \u5408\u5e76 \u65b0\u5143 \u5143\u7d20 \u65b0\u5143\u7d20   \u5c06 \u65b0\u5143 \u5143\u7d20 \u65b0\u5143\u7d20 \u4f5c\u4e3a \u65b0\u5806 \u5408\u5e76   Node   *   meld   (   Node   *   a   ,   int   x   )   {   Node   *   t   =   new   Node   {   x   ,   1   ,   nullptr   ,   nullptr   } ;   return   meld   (   a   ,   t   ) ;   }   front   \u83b7\u53d6 \u6700\u5c0f \u6700\u5c0f\u503c   int   front   (   Node   *   a   )   {   return   a   - >   v   ;   }   pop   \u5220\u9664 \u6839 \u8282\u70b9   \u5220\u9664 \u6839 \u8282\u70b9 \uff0c \u5e76 \u5bf9 \u5de6\u53f3 \u5b50\u5806 \u5408\u5e76 \uff0c \u8fd4\u56de \u65b0\u6839 \u8282\u70b9   Node   *   pop   (   Node   *   a   )   {   Node   *   t   =   meld   (   a   - >   l   ,   a   - >   r   ) ;   delete   a   ;   return   t   ;   }   empty   bool   empty   (   Node   *   a   )   {   return   !   a   ;   }   \u5de6\u504f \u6811 \u4ee3\u7801 \u6c47\u603b   struct   Node   {   int   v   ,   d   ;   Node   *   l   ,   *   r   ;   } ;   int   d   (   Node   *   a   )   {   if   (   !   a   )   return   0   ;   return   a   - >   d   ;   }   Node   *   meld   (   Node   *   a   ,   Node   *   b   )   {   if   (   !   a   | |   !   b   )   return   a   ?   a   :   b   ;   if   (   a   - >   v   >   b   - >   v   )   swap   <   Node   * >   (   a   ,   b   ) ;   a   - >   r   =   meld   (   a   - >   r   ,   b   ) ;   if   (   d   (   a   - >   l   )   >   d   (   a   - >   r   ) )   swap   <   Node   * >   (   a   - >   l   ,   a   - >   r   ) ;   a   - >   d   =   d   (   a   - >   r   ) ;   return   a   ;   }   Node   *   meld   (   Node   *   a   ,   int   x   )   {   Node   *   t   =   new   Node   {   x   ,   1   ,   nullptr   ,   nullptr   } ;   return   meld   (   a   ,   t   ) ;   }   int   front   (   Node   *   a   )   {   return   a   - >   v   ;   }   Node   *   pop   (   Node   *   a   )   {   Node   *   t   =   meld   (   a   - >   l   ,   a   - >   r   ) ;   delete   a   ;   return   t   ;   }   bool   empty   (   Node   *   a   )   {   return   !   a   ;   }","title":"\u5de6\u504f \u6811   ( \u53ef \u5e76 \u5806 )"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E5%B7%A6%E5%81%8F%E6%A0%91/#_1","text":"\u5de6\u504f \u6811 \u7684 \u542b\u4e49 \u662f \u53ea\u80fd \u5141\u8bb8 \u5de6\u5b50 \u6811 \u7684 \u6df1\u5ea6 \u6bd4\u53f3\u5b50 \u6811 \u7684 \u6df1 \uff0c \u5408\u5e76 \u5806\u65f6 \uff0c \u53d6 \u6700\u5c0f \u7684 \u6839 \u4f5c\u4e3a \u65b0\u5806 \u7684 \u6839 \uff0c \u5c06 \u53e6\u5916 \u4e00\u4e2a \u5806 \u4e0e \u8be5 \u6700\u5c0f \u5806 \u7684 \u53f3\u5b50 \u6811 \u91cd\u590d \u6267\u884c \u4e0a\u8ff0 \u64cd\u4f5c \uff0c \u5408\u5e76 \u540e \u5982\u679c \u51fa\u73b0 \u5de6\u5b50 \u6811 \u7684 \u9ad8\u5ea6 \u5c0f\u4e8e \u53f3\u5b50 \u6811 \u7684 \u9ad8\u5ea6 \uff0c \u8981 \u4ea4\u6362 \u5de6\u53f3 \u5b50\u6811 \uff0c \u56e0\u6b64 \u5de6\u8fb9 \u7684 \u6811 \u90fd \u4f1a \u6bd4 \u53f3\u8fb9 \u7684 \u9ad8 \uff0c \u8fd9\u6837 \u505a \u7684 \u597d\u5904 \u80fd \u5c06 \u5408\u5e76 \u5806 \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u964d\u4f4e \u81f3   \\ ( O ( log ( n )   +   log ( m ) ) \\ )   \u914d\u5bf9 \u5806 \u7684 \u5408\u5e76 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u662f   \\ ( O ( 1 ) \\ )   \u4f46 \u5220\u9664 \u6839 \u8282\u70b9 \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u4e3a   \\ ( O ( log ( n ) ) \\ )   \u5de6\u504f \u6811 \u5408\u5e76 \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u867d\u7136 \u662f   \\ ( O ( log ( n   +   m ) ) \\ )   \u5220\u9664 \u6839 \u8282\u70b9 \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u4e5f \u4e0d\u591a \u5dee\u4e0d\u591a \u662f   \\ ( O ( log ( n   +   m ) ) \\ )   \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u5bf9\u6bd4 \u56fe","title":"\u5de6\u504f \u6811"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E5%B7%A6%E5%81%8F%E6%A0%91/#_2","text":"\u9700\u8981 \u7528   dist   \u6765 \u5b58\u50a8 \u5f53\u524d \u8282\u70b9 \u8ddd\u79bb \u6700\u8fd1 \u53f6\u5b50 \u8282\u70b9 \u7684 \u8def\u5f84 \u957f\u5ea6 \uff0c \u5b9e\u9645 \u5b9e\u9645\u4e0a   a . d   =   min ( a . l . d ,   a . r . d )   +   1   \u6211\u4eec \u89c4\u5b9a   nullptr   \u7684   dist   \u503c\u4e3a   0 \uff0c \u53f6\u5b50 \u8282\u70b9 \u7684   dist   \u5c31\u662f   1 \u3002   struct   Node   {   int   v   ,   d   ;   Node   *   l   ,   *   r   ;   } ;   int   d   (   Node   *   a   )   {   if   (   !   a   )   return   0   ;   return   a   - >   d   ;   }","title":"\u7ed3\u6784 \u4f53 \u5b9a\u4e49"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E5%B7%A6%E5%81%8F%E6%A0%91/#meld","text":"\u5982\u679c \u8fd9 \u4e24\u5806 \u6709 \u300c \u7a7a\u5806 \u300d \u76f4\u63a5 \u8fd4\u56de \u53e6\u5916 \u4e00\u4e2a \u5806 \uff1b   \u5728 \u8fd9 \u4e24\u5806 \u4e2d \u5bfb\u627e \u6700\u5c0f \u7684 \u5806 \uff0c \u6682\u4e14 \u79f0\u547c \u5b83 \u4e3a   a \uff0c \u79f0\u547c \u53e6\u5916 \u4e00\u4e2a \u5806\u4e3a   b \uff0c \u5c06 \u6700\u5c0f \u7684 \u5806   a   \u7684 \u53f3 \u5b69\u5b50 \u4e0e \u5806   b   \u6267\u884c \u4e0a\u8ff0 \u5408\u5e76 \u64cd\u4f5c \uff1b   \u6267\u884c \u5b8c \u4e4b\u540e \uff0c \u5982\u679c \u5de6\u5b50 \u6811 \u7684   dist   \u5c0f\u4e8e \u53f3\u5b50 \u6811 \u7684   dist \uff0c \u4ea4\u6362 \u5de6\u53f3 \u5b50\u6811 \uff0c \u5e76 \u8fd4\u56de \u65b0 \u7684 \u6839 \u8282\u70b9 \u3002   Node   *   meld   (   Node   *   a   ,   Node   *   b   )   {   if   (   !   a   | |   !   b   )   return   a   ?   a   :   b   ;   if   (   a   - >   v   >   b   - >   v   )   swap   <   Node   * >   (   a   ,   b   ) ;   a   - >   r   =   meld   (   a   - >   r   ,   b   ) ;   if   (   d   (   a   - >   l   )   <   d   (   a   - >   r   ) )   swap   <   Node   * >   (   a   - >   l   ,   a   - >   r   ) ;   a   - >   d   =   d   (   a   - >   r   )   +   1   ;   return   a   ;   }","title":"meld   \u5408\u5e76 \u4e24\u5806"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E5%B7%A6%E5%81%8F%E6%A0%91/#meld_1","text":"\u5c06 \u65b0\u5143 \u5143\u7d20 \u65b0\u5143\u7d20 \u4f5c\u4e3a \u65b0\u5806 \u5408\u5e76   Node   *   meld   (   Node   *   a   ,   int   x   )   {   Node   *   t   =   new   Node   {   x   ,   1   ,   nullptr   ,   nullptr   } ;   return   meld   (   a   ,   t   ) ;   }","title":"meld   \u5408\u5e76 \u65b0\u5143\u7d20"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E5%B7%A6%E5%81%8F%E6%A0%91/#front","text":"int   front   (   Node   *   a   )   {   return   a   - >   v   ;   }","title":"front   \u83b7\u53d6 \u6700\u5c0f\u503c"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E5%B7%A6%E5%81%8F%E6%A0%91/#pop","text":"\u5220\u9664 \u6839 \u8282\u70b9 \uff0c \u5e76 \u5bf9 \u5de6\u53f3 \u5b50\u5806 \u5408\u5e76 \uff0c \u8fd4\u56de \u65b0\u6839 \u8282\u70b9   Node   *   pop   (   Node   *   a   )   {   Node   *   t   =   meld   (   a   - >   l   ,   a   - >   r   ) ;   delete   a   ;   return   t   ;   }","title":"pop   \u5220\u9664 \u6839 \u8282\u70b9"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E5%B7%A6%E5%81%8F%E6%A0%91/#empty","text":"bool   empty   (   Node   *   a   )   {   return   !   a   ;   }   \u5de6\u504f \u6811 \u4ee3\u7801 \u6c47\u603b   struct   Node   {   int   v   ,   d   ;   Node   *   l   ,   *   r   ;   } ;   int   d   (   Node   *   a   )   {   if   (   !   a   )   return   0   ;   return   a   - >   d   ;   }   Node   *   meld   (   Node   *   a   ,   Node   *   b   )   {   if   (   !   a   | |   !   b   )   return   a   ?   a   :   b   ;   if   (   a   - >   v   >   b   - >   v   )   swap   <   Node   * >   (   a   ,   b   ) ;   a   - >   r   =   meld   (   a   - >   r   ,   b   ) ;   if   (   d   (   a   - >   l   )   >   d   (   a   - >   r   ) )   swap   <   Node   * >   (   a   - >   l   ,   a   - >   r   ) ;   a   - >   d   =   d   (   a   - >   r   ) ;   return   a   ;   }   Node   *   meld   (   Node   *   a   ,   int   x   )   {   Node   *   t   =   new   Node   {   x   ,   1   ,   nullptr   ,   nullptr   } ;   return   meld   (   a   ,   t   ) ;   }   int   front   (   Node   *   a   )   {   return   a   - >   v   ;   }   Node   *   pop   (   Node   *   a   )   {   Node   *   t   =   meld   (   a   - >   l   ,   a   - >   r   ) ;   delete   a   ;   return   t   ;   }   bool   empty   (   Node   *   a   )   {   return   !   a   ;   }","title":"empty"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E9%85%8D%E5%AF%B9%E5%A0%86/","text":"\u914d\u5bf9 \u5806   \u914d\u5bf9 \u5806 \u662f \u4e00\u4e2a \u652f\u6301 \u300c \u63d2\u5165 \u300d \uff0c \u300c \u67e5\u8be2 \u300d / \u300c \u5220\u9664 \u300d \u6700\u5c0f \u6700\u5c0f\u503c \uff0c \u300c \u5408\u5e76 \u300d \uff0c \u300c \u4fee\u6539 \u300d \u5143\u7d20 \u7b49 \u64cd\u4f5c \u7684 \u6570\u636e \u7ed3\u6784 \u6570\u636e\u7ed3\u6784 \uff0c \u4e5f \u5c31\u662f \u4fd7\u79f0 \u7684 \u53ef \u5e76 \u5806 \u3002   \u901a\u5e38 \u6211\u4eec \u4f7f\u7528 \u300c \u5de6 \u513f\u5b50 \u53f3 \u5144\u5f1f \u8868\u793a \u8868\u793a\u6cd5 \u300d \u50a8\u5b58 \u4e00\u4e2a \u914d\u5bf9 \u5806 \uff08 \u5982\u4e0b \u56fe \uff09   \u7ed3\u6784 \u4f53 \u5b9a\u4e49   struct   Node   {   int   v   ;   Node   *   ch   ,   *   si   ;   Node   (   int   val   =   0   ,   Node   *   child   =   nullptr   ,   Node   *   sibling   =   nullptr   )   {   v   =   val   ;   ch   =   child   ;   si   =   sibling   ;   }   } ;   empty   bool   empty   (   Node   *   a   )   {   return   !   a   ;   }   meld   \u5408\u5e76 \u4e24\u4e2a \u914d\u5bf9 \u5806   \u914d\u5bf9 \u5806 \u7684 \u5408\u5e76 \u64cd\u4f5c \u6781\u4e3a \u7b80\u5355 \uff0c \u76f4\u63a5 \u628a \u6839 \u8282\u70b9 \u6743\u503c \u8f83\u5927 \u7684 \u90a3\u4e2a \u914d\u5bf9 \u5806 \u8bbe\u6210 \u53e6 \u4e00\u4e2a \u7684 \u513f\u5b50 \u5c31 \u597d \u4e86 \u3002   Node   *   meld   (   Node   *   a   ,   Node   *   b   )   {   if   (   !   a   | |   !   b   )   return   a   ?   a   :   b   ;   if   (   a   - >   v   >   b   - >   v   )   swap   <   Node   * >   (   a   ,   b   ) ;   b   - >   si   =   a   - >   ch   ;   a   - >   ch   =   b   ;   return   a   ;   }   meld   \u63d2\u5165 \u6570\u636e   \u76f4\u63a5 \u5c06 \u300c \u65b0\u5143 \u5143\u7d20 \u65b0\u5143\u7d20 \u300d \u5f53\u4f5c \u4e00\u4e2a \u914d\u5bf9 \u5806 \u6267\u884c \u5408\u5e76 \u64cd\u4f5c \u5c31\u884c \u3002   Node   *   meld   (   Node   *   a   ,   int   x   )   {   Node   *   t   =   new   Node   (   x   ) ;   return   meld   (   a   ,   t   ) ;   }   front   \u83b7\u53d6 \u6700\u5c0f \u6700\u5c0f\u503c   int   front   (   Node   *   a   )   {   return   a   - >   v   ;   }   pop   \u5220\u9664 \u5806\u6839   \u4e0a\u8ff0 \u7684 \u51e0\u4e2a \u64cd\u4f5c \u90fd \u5f88 \u300c \u6175\u61d2 \u300d \uff0c \u5173\u952e \u662f \u53d6\u51fa \u6700\u5c0f \u6700\u5c0f\u503c \u540e \uff0c \u6b21 \u6700\u5c0f \u6700\u5c0f\u503c \u8981 \u5982\u4f55 \u5bfb\u627e \u5462 \uff1f   \u5982\u4e0a \u4e0a\u56fe \u5982\u4e0a\u56fe \uff0c \u6700\u5c0f \u6700\u5c0f\u503c \u662f   1 \uff0c \u6b21 \u6700\u5c0f \u6700\u5c0f\u503c \u4e00\u5b9a \u51fa\u73b0 \u5728 \u300c \u84dd\u8272 \u6846 \u300d \u4e2d \uff0c \u6211 \u53ef\u4ee5 \u66b4\u529b \u904d\u5386 \u84dd\u8272 \u6846 \u627e\u51fa \u6700\u5c0f \u6700\u5c0f\u503c \uff0c \u4f46 \u6211\u4eec \u4e00\u65e6 \u5220\u9664 \u64cd\u4f5c \u6267\u884c \u8fc7\u591a\u65f6 \uff0c \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u5c31 \u4f1a \u4e0d\u65ad \u9000\u5316 \u5230   O ( n )   ,   \u56e0\u6b64 \u6211\u4eec \u8981\u6c42 \u5728 \u5220\u9664 \u6700\u5c0f \u6700\u5c0f\u503c \u65f6 \uff0c \u5bf9 \u8be5 \u914d\u5bf9 \u5806 \u5b58\u50a8 \u7ed3\u6784 \u8fdb\u884c \u4f18\u5316   \u628a \u513f\u5b50 \u4eec   \u5f80\u53f3 \u4ece\u5de6\u5f80\u53f3   \u4e24 \u4e24 \u914d\u6210 \u4e00\u5bf9 \uff0c \u7528   meld   \u64cd\u4f5c \u628a \u88ab \u914d\u6210 \u540c\u4e00 \u5bf9 \u7684 \u4e24\u4e2a \u513f\u5b50 \u5408\u5e76 \u5230 \u4e00\u8d77 \uff08 \u89c1 \u4e0b\u56fe   1 ) \uff0c \u518d \u5c06 \u65b0 \u4ea7\u751f \u7684 \u5806   \u4ece\u53f3 \u5f80 \u5de6   \u66b4\u529b \u5408\u5e76 \u5728 \u4e00\u8d77 \uff08 \u89c1 \u4e0b\u56fe   2 \uff09 \u3002   \u5220\u9664 \u64cd\u4f5c \u5747\u644a \u4e0b\u6765 \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u4e3a \uff1a   \\ ( O ( log ( n ) ) \\ )   \\ ( O ( log ( n ) ) \\ )   \u662f \u4ec0\u4e48 \u6982\u5ff5 \uff1a   \\ ( log ( 1267650600228229401496703205376 )   =   100 \\ )   \u51e0\u4e4e \u7b49\u4e8e \u7ea6\u7b49\u4e8e \u5e38\u6570 \u3002   \u8be6\u60c5 \u89c1   oi - wiki   Node   *   merges   (   Node   *   a   )   {   if   (   !   a   | |   !   a   - >   si   )   return   a   ;   Node   *   b   =   a   - >   si   ;   Node   *   c   =   b   - >   si   ;   a   - >   si   =   b   - >   si   =   nullptr   ;   / /   \u5206\u79bb   a   \u548c   b   return   meld   (   meld   (   a   ,   b   ) ,   merges   (   c   ) ) ;   }   Node   *   pop   (   Node   *   a   )   {   Node   *   t   =   merges   (   a   - >   ch   ) ;   delete   a   ;   return   t   ;   }   \u914d\u5bf9 \u5806 \u4ee3\u7801 \u6c47\u603b   struct   Node   {   int   v   ;   Node   *   ch   ,   *   si   ;   Node   (   int   val   =   0   ,   Node   *   child   =   nullptr   ,   Node   *   sibling   =   nullptr   )   {   v   =   val   ;   ch   =   child   ;   si   =   sibling   ;   }   } ;   bool   empty   (   Node   *   a   )   {   return   !   a   ;   }   Node   *   meld   (   Node   *   a   ,   Node   *   b   )   {   if   (   !   a   | |   !   b   )   return   a   ?   a   :   b   ;   if   (   a   - >   v   >   b   - >   v   )   swap   <   Node   * >   (   a   ,   b   ) ;   b   - >   si   =   a   - >   ch   ;   a   - >   ch   =   b   ;   return   a   ;   }   Node   *   meld   (   Node   *   a   ,   int   x   )   {   Node   *   t   =   new   Node   (   x   ) ;   return   meld   (   a   ,   t   ) ;   }   int   front   (   Node   *   a   )   {   return   a   - >   v   ;   }   Node   *   merges   (   Node   *   a   )   {   if   (   !   a   | |   !   a   - >   si   )   return   a   ;   Node   *   b   =   a   - >   si   ;   Node   *   c   =   b   - >   si   ;   a   - >   si   =   b   - >   si   =   nullptr   ;   / /   \u5206\u79bb   a   \u548c   b   return   meld   (   meld   (   a   ,   b   ) ,   merges   (   c   ) ) ;   }   Node   *   pop   (   Node   *   a   )   {   Node   *   t   =   merges   (   a   - >   ch   ) ;   delete   a   ;   return   t   ;   }","title":"\u914d\u5bf9 \u5806   ( \u53ef \u5e76 \u5806 )"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E9%85%8D%E5%AF%B9%E5%A0%86/#_1","text":"\u914d\u5bf9 \u5806 \u662f \u4e00\u4e2a \u652f\u6301 \u300c \u63d2\u5165 \u300d \uff0c \u300c \u67e5\u8be2 \u300d / \u300c \u5220\u9664 \u300d \u6700\u5c0f \u6700\u5c0f\u503c \uff0c \u300c \u5408\u5e76 \u300d \uff0c \u300c \u4fee\u6539 \u300d \u5143\u7d20 \u7b49 \u64cd\u4f5c \u7684 \u6570\u636e \u7ed3\u6784 \u6570\u636e\u7ed3\u6784 \uff0c \u4e5f \u5c31\u662f \u4fd7\u79f0 \u7684 \u53ef \u5e76 \u5806 \u3002   \u901a\u5e38 \u6211\u4eec \u4f7f\u7528 \u300c \u5de6 \u513f\u5b50 \u53f3 \u5144\u5f1f \u8868\u793a \u8868\u793a\u6cd5 \u300d \u50a8\u5b58 \u4e00\u4e2a \u914d\u5bf9 \u5806 \uff08 \u5982\u4e0b \u56fe \uff09","title":"\u914d\u5bf9 \u5806"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E9%85%8D%E5%AF%B9%E5%A0%86/#_2","text":"struct   Node   {   int   v   ;   Node   *   ch   ,   *   si   ;   Node   (   int   val   =   0   ,   Node   *   child   =   nullptr   ,   Node   *   sibling   =   nullptr   )   {   v   =   val   ;   ch   =   child   ;   si   =   sibling   ;   }   } ;","title":"\u7ed3\u6784 \u4f53 \u5b9a\u4e49"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E9%85%8D%E5%AF%B9%E5%A0%86/#empty","text":"bool   empty   (   Node   *   a   )   {   return   !   a   ;   }","title":"empty"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E9%85%8D%E5%AF%B9%E5%A0%86/#meld","text":"\u914d\u5bf9 \u5806 \u7684 \u5408\u5e76 \u64cd\u4f5c \u6781\u4e3a \u7b80\u5355 \uff0c \u76f4\u63a5 \u628a \u6839 \u8282\u70b9 \u6743\u503c \u8f83\u5927 \u7684 \u90a3\u4e2a \u914d\u5bf9 \u5806 \u8bbe\u6210 \u53e6 \u4e00\u4e2a \u7684 \u513f\u5b50 \u5c31 \u597d \u4e86 \u3002   Node   *   meld   (   Node   *   a   ,   Node   *   b   )   {   if   (   !   a   | |   !   b   )   return   a   ?   a   :   b   ;   if   (   a   - >   v   >   b   - >   v   )   swap   <   Node   * >   (   a   ,   b   ) ;   b   - >   si   =   a   - >   ch   ;   a   - >   ch   =   b   ;   return   a   ;   }","title":"meld   \u5408\u5e76 \u4e24\u4e2a \u914d\u5bf9 \u5806"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E9%85%8D%E5%AF%B9%E5%A0%86/#meld_1","text":"\u76f4\u63a5 \u5c06 \u300c \u65b0\u5143 \u5143\u7d20 \u65b0\u5143\u7d20 \u300d \u5f53\u4f5c \u4e00\u4e2a \u914d\u5bf9 \u5806 \u6267\u884c \u5408\u5e76 \u64cd\u4f5c \u5c31\u884c \u3002   Node   *   meld   (   Node   *   a   ,   int   x   )   {   Node   *   t   =   new   Node   (   x   ) ;   return   meld   (   a   ,   t   ) ;   }","title":"meld   \u63d2\u5165 \u6570\u636e"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E9%85%8D%E5%AF%B9%E5%A0%86/#front","text":"int   front   (   Node   *   a   )   {   return   a   - >   v   ;   }","title":"front   \u83b7\u53d6 \u6700\u5c0f\u503c"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E9%85%8D%E5%AF%B9%E5%A0%86/#pop","text":"\u4e0a\u8ff0 \u7684 \u51e0\u4e2a \u64cd\u4f5c \u90fd \u5f88 \u300c \u6175\u61d2 \u300d \uff0c \u5173\u952e \u662f \u53d6\u51fa \u6700\u5c0f \u6700\u5c0f\u503c \u540e \uff0c \u6b21 \u6700\u5c0f \u6700\u5c0f\u503c \u8981 \u5982\u4f55 \u5bfb\u627e \u5462 \uff1f   \u5982\u4e0a \u4e0a\u56fe \u5982\u4e0a\u56fe \uff0c \u6700\u5c0f \u6700\u5c0f\u503c \u662f   1 \uff0c \u6b21 \u6700\u5c0f \u6700\u5c0f\u503c \u4e00\u5b9a \u51fa\u73b0 \u5728 \u300c \u84dd\u8272 \u6846 \u300d \u4e2d \uff0c \u6211 \u53ef\u4ee5 \u66b4\u529b \u904d\u5386 \u84dd\u8272 \u6846 \u627e\u51fa \u6700\u5c0f \u6700\u5c0f\u503c \uff0c \u4f46 \u6211\u4eec \u4e00\u65e6 \u5220\u9664 \u64cd\u4f5c \u6267\u884c \u8fc7\u591a\u65f6 \uff0c \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u5c31 \u4f1a \u4e0d\u65ad \u9000\u5316 \u5230   O ( n )   ,   \u56e0\u6b64 \u6211\u4eec \u8981\u6c42 \u5728 \u5220\u9664 \u6700\u5c0f \u6700\u5c0f\u503c \u65f6 \uff0c \u5bf9 \u8be5 \u914d\u5bf9 \u5806 \u5b58\u50a8 \u7ed3\u6784 \u8fdb\u884c \u4f18\u5316   \u628a \u513f\u5b50 \u4eec   \u5f80\u53f3 \u4ece\u5de6\u5f80\u53f3   \u4e24 \u4e24 \u914d\u6210 \u4e00\u5bf9 \uff0c \u7528   meld   \u64cd\u4f5c \u628a \u88ab \u914d\u6210 \u540c\u4e00 \u5bf9 \u7684 \u4e24\u4e2a \u513f\u5b50 \u5408\u5e76 \u5230 \u4e00\u8d77 \uff08 \u89c1 \u4e0b\u56fe   1 ) \uff0c \u518d \u5c06 \u65b0 \u4ea7\u751f \u7684 \u5806   \u4ece\u53f3 \u5f80 \u5de6   \u66b4\u529b \u5408\u5e76 \u5728 \u4e00\u8d77 \uff08 \u89c1 \u4e0b\u56fe   2 \uff09 \u3002   \u5220\u9664 \u64cd\u4f5c \u5747\u644a \u4e0b\u6765 \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u4e3a \uff1a   \\ ( O ( log ( n ) ) \\ )   \\ ( O ( log ( n ) ) \\ )   \u662f \u4ec0\u4e48 \u6982\u5ff5 \uff1a   \\ ( log ( 1267650600228229401496703205376 )   =   100 \\ )   \u51e0\u4e4e \u7b49\u4e8e \u7ea6\u7b49\u4e8e \u5e38\u6570 \u3002   \u8be6\u60c5 \u89c1   oi - wiki   Node   *   merges   (   Node   *   a   )   {   if   (   !   a   | |   !   a   - >   si   )   return   a   ;   Node   *   b   =   a   - >   si   ;   Node   *   c   =   b   - >   si   ;   a   - >   si   =   b   - >   si   =   nullptr   ;   / /   \u5206\u79bb   a   \u548c   b   return   meld   (   meld   (   a   ,   b   ) ,   merges   (   c   ) ) ;   }   Node   *   pop   (   Node   *   a   )   {   Node   *   t   =   merges   (   a   - >   ch   ) ;   delete   a   ;   return   t   ;   }   \u914d\u5bf9 \u5806 \u4ee3\u7801 \u6c47\u603b   struct   Node   {   int   v   ;   Node   *   ch   ,   *   si   ;   Node   (   int   val   =   0   ,   Node   *   child   =   nullptr   ,   Node   *   sibling   =   nullptr   )   {   v   =   val   ;   ch   =   child   ;   si   =   sibling   ;   }   } ;   bool   empty   (   Node   *   a   )   {   return   !   a   ;   }   Node   *   meld   (   Node   *   a   ,   Node   *   b   )   {   if   (   !   a   | |   !   b   )   return   a   ?   a   :   b   ;   if   (   a   - >   v   >   b   - >   v   )   swap   <   Node   * >   (   a   ,   b   ) ;   b   - >   si   =   a   - >   ch   ;   a   - >   ch   =   b   ;   return   a   ;   }   Node   *   meld   (   Node   *   a   ,   int   x   )   {   Node   *   t   =   new   Node   (   x   ) ;   return   meld   (   a   ,   t   ) ;   }   int   front   (   Node   *   a   )   {   return   a   - >   v   ;   }   Node   *   merges   (   Node   *   a   )   {   if   (   !   a   | |   !   a   - >   si   )   return   a   ;   Node   *   b   =   a   - >   si   ;   Node   *   c   =   b   - >   si   ;   a   - >   si   =   b   - >   si   =   nullptr   ;   / /   \u5206\u79bb   a   \u548c   b   return   meld   (   meld   (   a   ,   b   ) ,   merges   (   c   ) ) ;   }   Node   *   pop   (   Node   *   a   )   {   Node   *   t   =   merges   (   a   - >   ch   ) ;   delete   a   ;   return   t   ;   }","title":"pop   \u5220\u9664 \u5806\u6839"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/","text":"\u5b57\u7b26 \u5b57\u7b26\u4e32 \u54c8\u5e0c   \u4f8b\u9898 \u5f15\u5165   841 .   \u5b57\u7b26 \u5b57\u7b26\u4e32 \u54c8\u5e0c   \u7ed9\u5b9a \u4e00\u4e2a \u957f\u5ea6 \u4e3a   \\ ( n \\ )   \u7684 \u5b57\u7b26 \u5b57\u7b26\u4e32 \uff0c \u518d \u7ed9\u5b9a   \\ ( m \\ )   \u4e2a \u8be2\u95ee \uff0c \u6bcf\u4e2a \u8be2\u95ee \u5305\u542b \u56db\u4e2a \u6574\u6570   \\ ( l _ 1 ,   r _ 1 ,   l _ 2 ,   r _ 2 \\ )   \uff0c \u8bf7 \u4f60 \u5224\u65ad   \\ ( [ l _ 1 ,   r _ 1 ] \\ )   \u548c   \\ ( [ l _ 2 ,   r _ 2 ] \\ )   \u8fd9 \u4e24\u4e2a \u533a\u95f4 \u6240 \u5305\u542b \u7684 \u5b57\u7b26 \u5b57\u7b26\u4e32 \u5b50\u4e32 \u662f\u5426 \u5b8c\u5168 \u76f8\u540c \u5b8c\u5168\u76f8\u540c \u3002   \u5b57\u7b26 \u5b57\u7b26\u4e32 \u4e2d \u53ea \u5305\u542b \u5927 \u5c0f\u5199 \u5199\u5b57 \u5b57\u6bcd \u5c0f\u5199\u5b57\u6bcd \u548c \u6570\u5b57 \u3002   \u76f8\u540c \u8f93\u51fa   Yes   \uff0c \u4e0d\u540c \u8f93\u51fa   No   \u3002   \u8003\u8651 \u66b4\u529b \u4ee3\u7801 \uff1a   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   const   int   N   =   int   (   1e7   +   10   ) ;   int   n   ,   m   ;   char   s   [   N   ] ;   void   solve   (   void   )   {   scanf   (   \" % d% d \"   ,   &   n   ,   &   m   ) ;   scanf   (   \" % s \"   ,   s   ) ;   while   (   m   --   )   {   int   l1   ,   r1   ,   l2   ,   r2   ;   scanf   (   \" % d% d% d% d \"   ,   &   l1   ,   &   r1   ,   &   l2   ,   &   r2   ) ;   l1   --   ,   r1   --   ,   l2   --   ,   r2   --   ;   if   ( (   r1   -   l1   +   1   )   ! =   (   r2   -   l2   +   1   ) )   printf   (   \" No   \\ n   \"   ) ;   else   {   int   on   =   1   ;   for   (   int   i   =   0   ;   i   +   l1   < =   r1   ;   i   ++   )   if   (   s   [   l1   +   i   ]   ! =   s   [   l2   +   i   ] ) {   on   =   0   ;   printf   (   \" No   \\ n   \"   ) ;   break   ;   }   if   (   on   )   printf   (   \" Yes   \\ n   \"   ) ;   }   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   \u5047\u8bbe \u8be2\u95ee \u7684 \u533a\u95f4 \u957f\u5ea6 \u4e3a   \\ ( k \\ )   \uff0c \u5b57\u7b26 \u5b57\u7b26\u4e32 \u957f\u5ea6 \u4e3a   \\ ( n \\ )   \uff0c \u6bcf \u8be2\u95ee \u4e00\u6b21 \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u4e3a \uff1a   \\ ( O ( 2k ) \\ )   \\ ( k \\ )   \u7684 \u53ef\u80fd \u53d6\u503c \u4e3a   \\ ( 1 ,   2 ,   \\ cdots   ,   n \\ )   \uff0c \u6240\u4ee5 \u5e73\u5747 \u4e0b\u6765 \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u4e3a \uff1a   \\ [   ( 1   +   2   +   \\ cdots   +   n )   *   2   /   n   =   O ( n   +   1 )   \\ ]   \u7a0b\u5e8f \u4f1a \u8d85\u65f6 \uff0c \u5982\u679c \u4f7f\u7528 \u5b57\u7b26 \u5b57\u7b26\u4e32 \u54c8\u5e0c \uff0c \u53ef\u4ee5 \u4f7f\u5f97 \u6bcf \u4e00\u6b21 \u67e5\u8be2 \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u964d\u4f4e \u81f3   \\ ( O ( 1 ) \\ )   \u3002   \u539f\u7406 \u4e0e \u5b9e\u73b0   \u5c06 \u5b57\u7b26 \u5b57\u7b26\u4e32   \\ ( s \\ )   \u770b\u4f5c \u662f \u4e00\u4e2a   \\ ( p \\ )   \u8fdb\u5236 \uff0c \u7531\u4e8e \u6570\u636e \u592a \u5927 \uff0c \u8981 \u5bf9   \\ ( q \\ )   \u53d6\u6a21   \u82e5 \u9009\u53d6 \u7684   \\ ( p   =   131 \u3001 13331 , \\   \\   q   =   2 ^ { 64 } \\ )   \u5b57\u7b26 \u5b57\u7b26\u4e32 \u67e5\u8be2 \u4e0d\u4f1a \u53d1\u751f \u78b0\u649e \u7684 \u6982\u7387 \u51e0\u4e4e \u4e3a   \\ ( 99.99 \\ % \\ )   \uff0c \u6211\u4eec \u53ef\u4ee5 \u8ba4\u4e3a \u6781\u5927 \u6982\u7387 \u4e0d\u4f1a \u53d1\u751f \u51b2\u7a81 \u53d1\u751f\u51b2\u7a81 \u3002   \u82e5 \u5b57\u7b26 \u5b57\u7b26\u4e32   \\ ( s   =   s _ ns _ { n   -   1 }   \\ cdots   s _ 2s _ 1 \\ )   \uff0c \u5219 \u4ece   \\ ( p \\ )   \u8fdb\u5236 \u6362\u6210   \\ ( 10 \\ )   \u8fdb\u5236 \u8868\u793a \u4e3a \uff1a   \\ [   s _ n * p ^ { n   -   1 }   +   s _ { n   -   1 }   *   p   ^   { n   -   2 }   +   \\ cdots   +   s _ 2   *   p ^ 1   +   s _ 1   *   p ^ 0   \\ ]   \u5047\u8bbe \u5b57\u7b26 \u5b57\u7b26\u4e32 \u5c31\u662f   \\ ( s _ 5s _ 4s _ 3s _ 2s _ 1 \\ )   \u6211\u4eec \u8981 \u5904\u7406 \u9884\u5904\u7406 \u51fa \u54c8\u5e0c \u524d\u7f00 \u548c \u6570\u7ec4 \uff1a   \u5b57\u7b26 \u5b57\u7b26\u4e32   \u54c8\u5e0c \u524d\u7f00 \u503c   \\ ( s _ 5 \\ )   \\ ( s _ 5   *   p ^ 0 \\ )   \\ ( s _ 4 \\ )   \\ ( s _ 5   *   p ^ 1   +   s _ 4   *   p ^ 0 \\ )   \\ ( s _ 3 \\ )   \\ ( s _ 5   *   p ^ 2   +   s _ 4   *   p ^ 1   +   s _ 3   *   p ^ 0 \\ )   \\ ( s _ 2 \\ )   \\ ( s _ 5   *   p ^ 3   +   s _ 4   *   p ^ 2   +   s _ 3   *   p ^ 1   +   s _ 2   *   p ^ 0 \\ )   \\ ( s _ 1 \\ )   \\ ( s _ 5   *   p ^ 4   +   s _ 4   *   p ^ 3   +   s _ 3   *   p ^ 2   +   s _ 2   *   p ^ 1   +   s _ 1   *   p ^ 0 \\ )   \u5982\u679c \u6211 \u8981\u6c42   \\ ( s _ 4s _ 3s _ 2 \\ )   \u7684 \u54c8\u5e0c \u503c \uff0c \u53ea \u9700\u8981 \u7528   \\ [   s _ 2   -   s _ 5   *   p ^ { 4   -   2   +   1   =   3 }   =   s _ 5   *   p ^ 3   +   s _ 4   *   p ^ 2   +   s _ 3   *   p ^ 1   +   s _ 2   *   p ^ 0   -   s _ 5   *   p ^ 3   =   s _ 4   *   p ^ 2   +   s _ 3   *   p ^ 1   +   s _ 2   *   p ^ 0   \\ ]   \u8fd9\u6837 \u8bbe\u8ba1 \u5c31 \u907f\u514d \u7684 \u9664\u6cd5 \u5bf9 \u300c \u53d6\u6a21 \u8fd0\u7b97 \u300d \u6216 \u300c \u81ea\u7136 \u6ea2\u51fa \u300d \u7684 \u5f71\u54cd \u3002   \u8bbe\u8ba1 \u6b65\u9aa4 \uff1a   \u5b9a\u4e49 \u4e24\u4e2a \u6570\u7ec4   unsigned   long   long   p [ N ] ,   h [ N ]   \uff0c \u5176\u4e2d   p [ i ]   \u4ee3\u8868   \\ ( p   ^   i \\ )   \uff0c   h [ i ]   \u4ee3\u8868 \u5b57\u7b26 \u5b57\u7b26\u4e32   s   \u7684 \u524d   \\ ( i \\ )   \u5b57\u7b26 \u4e2a\u5b57\u7b26 \u6784\u6210 \u7684 \u5b50\u4e32 \u7684 \u54c8\u5e0c \u503c   \u67e5\u8be2 \u533a\u95f4   \\ ( [ l ,   r ] \\ )   \u7684 \u54c8\u5e0c \u503c \uff1a   h [ r ]   -   h [ l   -   1 ]   *   p [ r   -   l   +   1 ]   init   typedef   unsigned   long   long   ULL   ;   const   int   N   =   int   (   1e7   +   10   ) ;   char   s   [   N   ] ;   int   n   ,   m   ;   ULL   p   [   N   ] ,   h   [   N   ] ,   pr   =   13331   ;   void   init   ( )   {   p   [   0   ]   =   1   ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   h   [   i   ]   =   h   [   i   -   1   ]   *   pr   +   s   [   i   ] ;   p   [   i   ]   =   p   [   i   -   1   ]   *   pr   ;   }   }   query   ULL   query   (   int   l   ,   int   r   )   {   ULL   ans   =   h   [   r   ]   -   h   [   l   -   1   ]   *   p   [   r   -   l   +   1   ] ;   return   ans   ;   }   841 .   \u5b57\u7b26 \u5b57\u7b26\u4e32 \u54c8\u5e0c   \u5b9e\u73b0 \u4ee3\u7801 \u53c2\u8003   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   typedef   unsigned   long   long   ULL   ;   const   int   N   =   int   (   1e7   +   10   ) ;   char   s   [   N   ] ;   int   n   ,   m   ;   ULL   p   [   N   ] ,   h   [   N   ] ,   pr   =   13331   ;   void   init   ( )   {   p   [   0   ]   =   1   ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   h   [   i   ]   =   h   [   i   -   1   ]   *   pr   +   s   [   i   ] ;   p   [   i   ]   =   p   [   i   -   1   ]   *   pr   ;   }   }   ULL   query   (   int   l   ,   int   r   )   {   ULL   ans   =   h   [   r   ]   -   h   [   l   -   1   ]   *   p   [   r   -   l   +   1   ] ;   return   ans   ;   }   void   solve   (   void   )   {   scanf   (   \" % d% d \"   ,   &   n   ,   &   m   ) ;   scanf   (   \" % s \"   ,   s   +   1   ) ;   init   ( ) ;   while   (   m   --   )   {   int   l1   ,   r1   ,   l2   ,   r2   ;   scanf   (   \" % d% d% d% d \"   ,   &   l1   ,   &   r1   ,   &   l2   ,   &   r2   ) ;   if   (   query   (   l1   ,   r1   )   = =   query   (   l2   ,   r2   ) )   printf   (   \" Yes   \\ n   \"   ) ;   else   printf   (   \" No   \\ n   \"   ) ;   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002","title":"\u5b57\u7b26\u4e32 \u54c8\u5e0c"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/#_1","text":"","title":"\u5b57\u7b26\u4e32 \u54c8\u5e0c"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/#_2","text":"841 .   \u5b57\u7b26 \u5b57\u7b26\u4e32 \u54c8\u5e0c   \u7ed9\u5b9a \u4e00\u4e2a \u957f\u5ea6 \u4e3a   \\ ( n \\ )   \u7684 \u5b57\u7b26 \u5b57\u7b26\u4e32 \uff0c \u518d \u7ed9\u5b9a   \\ ( m \\ )   \u4e2a \u8be2\u95ee \uff0c \u6bcf\u4e2a \u8be2\u95ee \u5305\u542b \u56db\u4e2a \u6574\u6570   \\ ( l _ 1 ,   r _ 1 ,   l _ 2 ,   r _ 2 \\ )   \uff0c \u8bf7 \u4f60 \u5224\u65ad   \\ ( [ l _ 1 ,   r _ 1 ] \\ )   \u548c   \\ ( [ l _ 2 ,   r _ 2 ] \\ )   \u8fd9 \u4e24\u4e2a \u533a\u95f4 \u6240 \u5305\u542b \u7684 \u5b57\u7b26 \u5b57\u7b26\u4e32 \u5b50\u4e32 \u662f\u5426 \u5b8c\u5168 \u76f8\u540c \u5b8c\u5168\u76f8\u540c \u3002   \u5b57\u7b26 \u5b57\u7b26\u4e32 \u4e2d \u53ea \u5305\u542b \u5927 \u5c0f\u5199 \u5199\u5b57 \u5b57\u6bcd \u5c0f\u5199\u5b57\u6bcd \u548c \u6570\u5b57 \u3002   \u76f8\u540c \u8f93\u51fa   Yes   \uff0c \u4e0d\u540c \u8f93\u51fa   No   \u3002   \u8003\u8651 \u66b4\u529b \u4ee3\u7801 \uff1a   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   const   int   N   =   int   (   1e7   +   10   ) ;   int   n   ,   m   ;   char   s   [   N   ] ;   void   solve   (   void   )   {   scanf   (   \" % d% d \"   ,   &   n   ,   &   m   ) ;   scanf   (   \" % s \"   ,   s   ) ;   while   (   m   --   )   {   int   l1   ,   r1   ,   l2   ,   r2   ;   scanf   (   \" % d% d% d% d \"   ,   &   l1   ,   &   r1   ,   &   l2   ,   &   r2   ) ;   l1   --   ,   r1   --   ,   l2   --   ,   r2   --   ;   if   ( (   r1   -   l1   +   1   )   ! =   (   r2   -   l2   +   1   ) )   printf   (   \" No   \\ n   \"   ) ;   else   {   int   on   =   1   ;   for   (   int   i   =   0   ;   i   +   l1   < =   r1   ;   i   ++   )   if   (   s   [   l1   +   i   ]   ! =   s   [   l2   +   i   ] ) {   on   =   0   ;   printf   (   \" No   \\ n   \"   ) ;   break   ;   }   if   (   on   )   printf   (   \" Yes   \\ n   \"   ) ;   }   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   \u5047\u8bbe \u8be2\u95ee \u7684 \u533a\u95f4 \u957f\u5ea6 \u4e3a   \\ ( k \\ )   \uff0c \u5b57\u7b26 \u5b57\u7b26\u4e32 \u957f\u5ea6 \u4e3a   \\ ( n \\ )   \uff0c \u6bcf \u8be2\u95ee \u4e00\u6b21 \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u4e3a \uff1a   \\ ( O ( 2k ) \\ )   \\ ( k \\ )   \u7684 \u53ef\u80fd \u53d6\u503c \u4e3a   \\ ( 1 ,   2 ,   \\ cdots   ,   n \\ )   \uff0c \u6240\u4ee5 \u5e73\u5747 \u4e0b\u6765 \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u4e3a \uff1a   \\ [   ( 1   +   2   +   \\ cdots   +   n )   *   2   /   n   =   O ( n   +   1 )   \\ ]   \u7a0b\u5e8f \u4f1a \u8d85\u65f6 \uff0c \u5982\u679c \u4f7f\u7528 \u5b57\u7b26 \u5b57\u7b26\u4e32 \u54c8\u5e0c \uff0c \u53ef\u4ee5 \u4f7f\u5f97 \u6bcf \u4e00\u6b21 \u67e5\u8be2 \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u964d\u4f4e \u81f3   \\ ( O ( 1 ) \\ )   \u3002","title":"\u4f8b\u9898 \u5f15\u5165"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/#_3","text":"\u5c06 \u5b57\u7b26 \u5b57\u7b26\u4e32   \\ ( s \\ )   \u770b\u4f5c \u662f \u4e00\u4e2a   \\ ( p \\ )   \u8fdb\u5236 \uff0c \u7531\u4e8e \u6570\u636e \u592a \u5927 \uff0c \u8981 \u5bf9   \\ ( q \\ )   \u53d6\u6a21   \u82e5 \u9009\u53d6 \u7684   \\ ( p   =   131 \u3001 13331 , \\   \\   q   =   2 ^ { 64 } \\ )   \u5b57\u7b26 \u5b57\u7b26\u4e32 \u67e5\u8be2 \u4e0d\u4f1a \u53d1\u751f \u78b0\u649e \u7684 \u6982\u7387 \u51e0\u4e4e \u4e3a   \\ ( 99.99 \\ % \\ )   \uff0c \u6211\u4eec \u53ef\u4ee5 \u8ba4\u4e3a \u6781\u5927 \u6982\u7387 \u4e0d\u4f1a \u53d1\u751f \u51b2\u7a81 \u53d1\u751f\u51b2\u7a81 \u3002   \u82e5 \u5b57\u7b26 \u5b57\u7b26\u4e32   \\ ( s   =   s _ ns _ { n   -   1 }   \\ cdots   s _ 2s _ 1 \\ )   \uff0c \u5219 \u4ece   \\ ( p \\ )   \u8fdb\u5236 \u6362\u6210   \\ ( 10 \\ )   \u8fdb\u5236 \u8868\u793a \u4e3a \uff1a   \\ [   s _ n * p ^ { n   -   1 }   +   s _ { n   -   1 }   *   p   ^   { n   -   2 }   +   \\ cdots   +   s _ 2   *   p ^ 1   +   s _ 1   *   p ^ 0   \\ ]   \u5047\u8bbe \u5b57\u7b26 \u5b57\u7b26\u4e32 \u5c31\u662f   \\ ( s _ 5s _ 4s _ 3s _ 2s _ 1 \\ )   \u6211\u4eec \u8981 \u5904\u7406 \u9884\u5904\u7406 \u51fa \u54c8\u5e0c \u524d\u7f00 \u548c \u6570\u7ec4 \uff1a   \u5b57\u7b26 \u5b57\u7b26\u4e32   \u54c8\u5e0c \u524d\u7f00 \u503c   \\ ( s _ 5 \\ )   \\ ( s _ 5   *   p ^ 0 \\ )   \\ ( s _ 4 \\ )   \\ ( s _ 5   *   p ^ 1   +   s _ 4   *   p ^ 0 \\ )   \\ ( s _ 3 \\ )   \\ ( s _ 5   *   p ^ 2   +   s _ 4   *   p ^ 1   +   s _ 3   *   p ^ 0 \\ )   \\ ( s _ 2 \\ )   \\ ( s _ 5   *   p ^ 3   +   s _ 4   *   p ^ 2   +   s _ 3   *   p ^ 1   +   s _ 2   *   p ^ 0 \\ )   \\ ( s _ 1 \\ )   \\ ( s _ 5   *   p ^ 4   +   s _ 4   *   p ^ 3   +   s _ 3   *   p ^ 2   +   s _ 2   *   p ^ 1   +   s _ 1   *   p ^ 0 \\ )   \u5982\u679c \u6211 \u8981\u6c42   \\ ( s _ 4s _ 3s _ 2 \\ )   \u7684 \u54c8\u5e0c \u503c \uff0c \u53ea \u9700\u8981 \u7528   \\ [   s _ 2   -   s _ 5   *   p ^ { 4   -   2   +   1   =   3 }   =   s _ 5   *   p ^ 3   +   s _ 4   *   p ^ 2   +   s _ 3   *   p ^ 1   +   s _ 2   *   p ^ 0   -   s _ 5   *   p ^ 3   =   s _ 4   *   p ^ 2   +   s _ 3   *   p ^ 1   +   s _ 2   *   p ^ 0   \\ ]   \u8fd9\u6837 \u8bbe\u8ba1 \u5c31 \u907f\u514d \u7684 \u9664\u6cd5 \u5bf9 \u300c \u53d6\u6a21 \u8fd0\u7b97 \u300d \u6216 \u300c \u81ea\u7136 \u6ea2\u51fa \u300d \u7684 \u5f71\u54cd \u3002   \u8bbe\u8ba1 \u6b65\u9aa4 \uff1a   \u5b9a\u4e49 \u4e24\u4e2a \u6570\u7ec4   unsigned   long   long   p [ N ] ,   h [ N ]   \uff0c \u5176\u4e2d   p [ i ]   \u4ee3\u8868   \\ ( p   ^   i \\ )   \uff0c   h [ i ]   \u4ee3\u8868 \u5b57\u7b26 \u5b57\u7b26\u4e32   s   \u7684 \u524d   \\ ( i \\ )   \u5b57\u7b26 \u4e2a\u5b57\u7b26 \u6784\u6210 \u7684 \u5b50\u4e32 \u7684 \u54c8\u5e0c \u503c   \u67e5\u8be2 \u533a\u95f4   \\ ( [ l ,   r ] \\ )   \u7684 \u54c8\u5e0c \u503c \uff1a   h [ r ]   -   h [ l   -   1 ]   *   p [ r   -   l   +   1 ]","title":"\u539f\u7406 \u4e0e \u5b9e\u73b0"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/#init","text":"typedef   unsigned   long   long   ULL   ;   const   int   N   =   int   (   1e7   +   10   ) ;   char   s   [   N   ] ;   int   n   ,   m   ;   ULL   p   [   N   ] ,   h   [   N   ] ,   pr   =   13331   ;   void   init   ( )   {   p   [   0   ]   =   1   ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   h   [   i   ]   =   h   [   i   -   1   ]   *   pr   +   s   [   i   ] ;   p   [   i   ]   =   p   [   i   -   1   ]   *   pr   ;   }   }","title":"init"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/#query","text":"ULL   query   (   int   l   ,   int   r   )   {   ULL   ans   =   h   [   r   ]   -   h   [   l   -   1   ]   *   p   [   r   -   l   +   1   ] ;   return   ans   ;   }   841 .   \u5b57\u7b26 \u5b57\u7b26\u4e32 \u54c8\u5e0c   \u5b9e\u73b0 \u4ee3\u7801 \u53c2\u8003   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   typedef   unsigned   long   long   ULL   ;   const   int   N   =   int   (   1e7   +   10   ) ;   char   s   [   N   ] ;   int   n   ,   m   ;   ULL   p   [   N   ] ,   h   [   N   ] ,   pr   =   13331   ;   void   init   ( )   {   p   [   0   ]   =   1   ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   h   [   i   ]   =   h   [   i   -   1   ]   *   pr   +   s   [   i   ] ;   p   [   i   ]   =   p   [   i   -   1   ]   *   pr   ;   }   }   ULL   query   (   int   l   ,   int   r   )   {   ULL   ans   =   h   [   r   ]   -   h   [   l   -   1   ]   *   p   [   r   -   l   +   1   ] ;   return   ans   ;   }   void   solve   (   void   )   {   scanf   (   \" % d% d \"   ,   &   n   ,   &   m   ) ;   scanf   (   \" % s \"   ,   s   +   1   ) ;   init   ( ) ;   while   (   m   --   )   {   int   l1   ,   r1   ,   l2   ,   r2   ;   scanf   (   \" % d% d% d% d \"   ,   &   l1   ,   &   r1   ,   &   l2   ,   &   r2   ) ;   if   (   query   (   l1   ,   r1   )   = =   query   (   l2   ,   r2   ) )   printf   (   \" Yes   \\ n   \"   ) ;   else   printf   (   \" No   \\ n   \"   ) ;   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002","title":"query"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E5%B9%B6%E6%9F%A5%E9%9B%86/","text":"\u5e76 \u67e5\u96c6   \u300c \u5e76 \u67e5\u96c6 \u300d \u53ef\u4ee5 \u5feb\u901f \u7684 \u5408\u5e76 \u540c \u4e00\u7c7b \u4e1c\u897f \uff0c \u53ef\u4ee5 \u6709\u6548 \u7684 \u7ba1\u7406 \u540c \u4e00\u7c7b \u4e8b\u7269   \u6838\u5fc3 \u64cd\u4f5c \u6709   \u300c \u5408\u5e76 \u4e24 \u96c6\u5408 \u300d \u3001 \u300c \u67e5\u8be2 \u6240\u5c5e \u96c6\u5408 \u300d   \u5e76 \u67e5\u96c6 \u7684 \u6bcf\u4e2a \u64cd\u4f5c \u5e73\u5747 \u65f6\u95f4 \u4e3a   \\ ( O ( a ( n ) ) \\ )   \uff0c \u5176\u4e2d   \\ ( a \\ )   \u4e3a \u300c \u963f\u514b \u963f\u514b\u66fc \u51fd\u6570 \u7684 \u51fd\u6570 \u53cd\u51fd\u6570 \u300d \uff0c \u5e73\u5747 \u64cd\u4f5c \u51e0\u4e4e \u53ef\u4ee5 \u8ba4\u4e3a \u662f \u4e00\u4e2a \u5f88\u5c0f \u7684 \u5e38\u6570 \u3002   init   \u521d\u59cb \u521d\u59cb\u5316   \u521d\u59cb \u65f6 \uff0c \u6bcf \u4e00\u4e2a \u6570\u636e \u90fd \u4ee3\u8868 \u4e00\u4e2a \u72ec\u7acb \u7684 \u96c6\u5408   void   init   ( )   {   for   (   int   i   =   1   ;   i   <   N   ;   i   ++   )   ds   [   i   ]   =   i   ,   sz   [   i   ]   =   1   ;   }   find   \u67e5\u627e   pos   \u4f4d\u7f6e \u6240\u5c5e \u96c6\u5408 \u4f4d\u7f6e   pos `   int   find   (   int   pos   )   {   if   (   ds   [   pos   ]   = =   pos   )   return   pos   ;   ds   [   pos   ]   =   find   (   ds   [   pos   ] ) ;   / /   \u8def\u5f84 \u538b\u7f29   return   ds   [   pos   ] ;   }   meld   \u5c06 \u4e24\u4e2a \u96c6\u5408 \u5408\u5e76 \u4e3a \u4e00\u4e2a \u96c6\u5408   \u65b9\u6cd5 \u4e00 \uff1a   \u6309 \u96c6\u5408 \u4e2a\u6570 \u5408\u5e76   \uff0c \u5c06 \u4e2a\u6570 \u5c0f \u7684 \u5408\u5e76 \u8fdb \u4e2a\u6570 \u5927 \u7684   / /   \u6309 \u4e2a\u6570 \u5408\u5e76 \uff0c \u5c06 \u4e2a\u6570 \u5c0f \u7684 \u5408\u5e76 \u8fdb \u4e2a\u6570 \u5927 \u7684   void   meld   (   int   p1   ,   int   p2   )   {   int   a   =   find   (   p1   ) ;   int   b   =   find   (   p2   ) ;   if   (   a   = =   b   )   return   ;   if   (   sz   [   a   ]   <   sz   [   b   ] )   swap   (   a   ,   b   ) ;   / /   \u8ba9   a   \u4e2a\u6570 \u6700\u5927   ds   [   b   ]   =   a   ;   sz   [   a   ]   + =   sz   [   b   ] ;   / /   \u5c06 \u5143\u7d20 \u5c11 \u7684 \u5408\u5e76 \u5230 \u5143\u7d20 \u5927 \u7684 \uff0c \u6548\u7387 \u89c6\u4e4e \u4f1a\u53d8 \u9ad8   / /   \u56e0\u4e3a \u6574\u4f53 \u5230\u8fbe \u6839 \u7684 \u8def\u5f84 \u957f\u5ea6 \u4f1a \u77ed \u4e86 \u4e00\u70b9 \u70b9\u70b9 \u4e00\u70b9\u70b9 \u3002   }   \u65b9\u6cd5 \u4e8c \uff1a   \u6309 \u79e9 \u5408\u5e76   \uff0c \u5c06 \u79e9\u5c0f \u7684 \u5408\u5e76 \u8fdb \u79e9\u5927 \u7684   / /   \u6309 \u79e9 \u5408\u5e76 \uff0c \u5c06 \u79e9\u5c0f \u7684 \u5408\u5e76 \u8fdb \u79e9\u5927 \u7684   void   meld   (   int   p1   ,   int   p2   )   {   int   a   =   find   (   p1   ) ;   int   b   =   find   (   p2   ) ;   if   (   a   = =   b   )   return   ;   if   (   rk   [   a   ]   <   rk   [   b   ] )   ds   [   a   ]   =   b   ,   sz   [   b   ]   + =   sz   [   a   ] ;   else   if   (   rk   [   a   ]   >   rk   [   b   ] )   ds   [   b   ]   =   a   ,   sz   [   a   ]   + =   sz   [   b   ] ;   else   ds   [   b   ]   =   a   ,   sz   [   a   ]   + =   sz   [   b   ] ,   rk   [   a   ]   ++   ;   }   \u4e0a\u8ff0 \u4e24\u79cd \u65b9\u6cd5 \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u89c6\u4e4e \u4e00\u81f4 \uff0c \u53ef\u4ee5 \u9009\u53d6 \u4e00\u4efd \u7b80\u5355 \u7684 \u3002   \u5e76 \u67e5\u96c6 \u4ee3\u7801 \u6c47\u603b   const   int   N   =   int   (   1e6   +   10   ) ;   int   ds   [   N   ] ,   sz   [   N   ] ,   rk   [   N   ] ;   / /   \u5e76 \u67e5\u96c6 \uff0c \u96c6\u5408 \u4e2a\u6570 \uff0c \u79e9   void   init   ( )   {   for   (   int   i   =   1   ;   i   <   N   ;   i   ++   )   ds   [   i   ]   =   i   ,   sz   [   i   ]   =   1   ;   }   int   find   (   int   pos   )   {   if   (   ds   [   pos   ]   = =   pos   )   return   pos   ;   ds   [   pos   ]   =   find   (   ds   [   pos   ] ) ;   return   ds   [   pos   ] ;   }   / /   \u6309 \u4e2a\u6570 \u5408\u5e76 \uff0c \u5c06 \u4e2a\u6570 \u5c0f \u7684 \u5408\u5e76 \u8fdb \u4e2a\u6570 \u5927 \u7684   void   meld   (   int   p1   ,   int   p2   )   {   int   a   =   find   (   p1   ) ;   int   b   =   find   (   p2   ) ;   if   (   a   = =   b   )   return   ;   if   (   sz   [   a   ]   <   sz   [   b   ] )   swap   (   a   ,   b   ) ;   ds   [   b   ]   =   a   ;   sz   [   a   ]   + =   sz   [   b   ] ;   / /   \u5c06 \u5143\u7d20 \u5c11 \u7684 \u5408\u5e76 \u5230 \u5143\u7d20 \u5927 \u7684 \uff0c \u6548\u7387 \u89c6\u4e4e \u4f1a\u53d8 \u9ad8   / /   \u56e0\u4e3a \u6574\u4f53 \u5230\u8fbe \u6839 \u7684 \u8def\u5f84 \u957f\u5ea6 \u4f1a \u77ed \u4e86 \u4e00\u70b9 \u70b9\u70b9 \u4e00\u70b9\u70b9 \u3002   }   / /   \u6309 \u79e9 \u5408\u5e76 \uff0c \u5c06 \u79e9\u5c0f \u7684 \u5408\u5e76 \u8fdb \u79e9\u5927 \u7684   void   meld   (   int   p1   ,   int   p2   )   {   int   a   =   find   (   p1   ) ;   int   b   =   find   (   p2   ) ;   if   (   a   = =   b   )   return   ;   if   (   rk   [   a   ]   <   rk   [   b   ] )   ds   [   a   ]   =   b   ,   sz   [   b   ]   + =   sz   [   a   ] ;   else   if   (   rk   [   a   ]   >   rk   [   b   ] )   ds   [   b   ]   =   a   ,   sz   [   a   ]   + =   sz   [   b   ] ;   else   ds   [   b   ]   =   a   ,   sz   [   a   ]   + =   sz   [   b   ] ,   rk   [   a   ]   ++   ;   }   \u53c2\u8003 \u4f8b\u9898 \uff1a \u5408\u5e76 \u96c6\u5408   \u4e00\u5171 \u6709   \\ ( n \\ )   \u4e2a\u6570 \uff0c \u7f16\u53f7 \u662f   \\ ( 1 \u223c n \\ )   \uff0c \u6700 \u5f00\u59cb \u6bcf\u4e2a \u6570 \u5404\u81ea \u5728 \u4e00\u4e2a \u96c6\u5408 \u4e2d \u3002   \u73b0\u5728 \u8981 \u8fdb\u884c   \\ ( m \\ )   \u4e2a \u64cd\u4f5c \uff0c \u64cd\u4f5c \u5171\u6709 \u4e24\u79cd \uff1a   M   a   b   \u5c06 \u7f16\u53f7 \u4e3a   \\ ( a \\ )   \u548c   \\ ( b \\ )   \u7684 \u4e24\u4e2a \u6570 \u6240\u5728 \u7684 \u96c6\u5408 \u5408\u5e76 \uff0c \u5982\u679c \u4e24\u4e2a \u6570 \u5df2\u7ecf \u5728 \u540c\u4e00 \u4e00\u4e2a \u540c\u4e00\u4e2a \u96c6\u5408 \u4e2d \uff0c \u5219 \u5ffd\u7565 \u8fd9\u4e2a \u64cd\u4f5c \uff1b   Q   a   b   \u8be2\u95ee \u7f16\u53f7 \u4e3a   \\ ( a \\ )   \u548c   \\ ( b \\ )   \u7684 \u4e24\u4e2a \u6570 \u662f\u5426 \u5728 \u540c\u4e00 \u4e00\u4e2a \u540c\u4e00\u4e2a \u96c6\u5408 \u4e2d \uff1b   \u5408\u5e76 \u96c6\u5408 \u4ee3\u7801 \u53c2\u8003   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   const   int   N   =   int   (   1e6   +   10   ) ;   int   n   ,   m   ;   int   ds   [   N   ] ,   sz   [   N   ] ;   void   init   ( )   {   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   ds   [   i   ]   =   i   ,   sz   [   i   ]   =   1   ;   }   int   find   (   int   pos   )   {   if   (   ds   [   pos   ]   = =   pos   )   return   pos   ;   ds   [   pos   ]   =   find   (   ds   [   pos   ] ) ;   return   ds   [   pos   ] ;   }   void   meld   (   int   p1   ,   int   p2   )   {   int   a   =   find   (   p1   ) ;   int   b   =   find   (   p2   ) ;   if   (   a   = =   b   )   return   ;   if   (   sz   [   a   ]   <   sz   [   b   ] )   swap   (   a   ,   b   ) ;   ds   [   b   ]   =   a   ;   sz   [   a   ]   + =   sz   [   b   ] ;   }   void   solve   (   void   )   {   scanf   (   \" % d% d \"   ,   &   n   ,   &   m   ) ;   init   ( ) ;   while   (   m   --   )   {   char   s   [   20   ] ;   int   a   ,   b   ;   scanf   (   \" % s% d% d \"   ,   s   ,   &   a   ,   &   b   ) ;   if   (   s   [   0   ]   = =   ' M '   )   meld   (   a   ,   b   ) ;   else   if   (   s   [   0   ]   = =   ' Q '   )   {   int   p1   =   find   (   a   ) ;   int   p2   =   find   (   b   ) ;   printf   (   \" % s   \\ n   \"   ,   p1   = =   p2   ?   \" Yes \"   :   \" No \"   ) ;   }   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002","title":"\u5e76 \u67e5\u96c6"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_1","text":"\u300c \u5e76 \u67e5\u96c6 \u300d \u53ef\u4ee5 \u5feb\u901f \u7684 \u5408\u5e76 \u540c \u4e00\u7c7b \u4e1c\u897f \uff0c \u53ef\u4ee5 \u6709\u6548 \u7684 \u7ba1\u7406 \u540c \u4e00\u7c7b \u4e8b\u7269   \u6838\u5fc3 \u64cd\u4f5c \u6709   \u300c \u5408\u5e76 \u4e24 \u96c6\u5408 \u300d \u3001 \u300c \u67e5\u8be2 \u6240\u5c5e \u96c6\u5408 \u300d   \u5e76 \u67e5\u96c6 \u7684 \u6bcf\u4e2a \u64cd\u4f5c \u5e73\u5747 \u65f6\u95f4 \u4e3a   \\ ( O ( a ( n ) ) \\ )   \uff0c \u5176\u4e2d   \\ ( a \\ )   \u4e3a \u300c \u963f\u514b \u963f\u514b\u66fc \u51fd\u6570 \u7684 \u51fd\u6570 \u53cd\u51fd\u6570 \u300d \uff0c \u5e73\u5747 \u64cd\u4f5c \u51e0\u4e4e \u53ef\u4ee5 \u8ba4\u4e3a \u662f \u4e00\u4e2a \u5f88\u5c0f \u7684 \u5e38\u6570 \u3002","title":"\u5e76 \u67e5\u96c6"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E5%B9%B6%E6%9F%A5%E9%9B%86/#init","text":"\u521d\u59cb \u65f6 \uff0c \u6bcf \u4e00\u4e2a \u6570\u636e \u90fd \u4ee3\u8868 \u4e00\u4e2a \u72ec\u7acb \u7684 \u96c6\u5408   void   init   ( )   {   for   (   int   i   =   1   ;   i   <   N   ;   i   ++   )   ds   [   i   ]   =   i   ,   sz   [   i   ]   =   1   ;   }","title":"init   \u521d\u59cb\u5316"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E5%B9%B6%E6%9F%A5%E9%9B%86/#find","text":"\u67e5\u627e   pos   \u4f4d\u7f6e \u6240\u5c5e \u96c6\u5408 \u4f4d\u7f6e   pos `   int   find   (   int   pos   )   {   if   (   ds   [   pos   ]   = =   pos   )   return   pos   ;   ds   [   pos   ]   =   find   (   ds   [   pos   ] ) ;   / /   \u8def\u5f84 \u538b\u7f29   return   ds   [   pos   ] ;   }","title":"find"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E5%B9%B6%E6%9F%A5%E9%9B%86/#meld","text":"\u5c06 \u4e24\u4e2a \u96c6\u5408 \u5408\u5e76 \u4e3a \u4e00\u4e2a \u96c6\u5408   \u65b9\u6cd5 \u4e00 \uff1a   \u6309 \u96c6\u5408 \u4e2a\u6570 \u5408\u5e76   \uff0c \u5c06 \u4e2a\u6570 \u5c0f \u7684 \u5408\u5e76 \u8fdb \u4e2a\u6570 \u5927 \u7684   / /   \u6309 \u4e2a\u6570 \u5408\u5e76 \uff0c \u5c06 \u4e2a\u6570 \u5c0f \u7684 \u5408\u5e76 \u8fdb \u4e2a\u6570 \u5927 \u7684   void   meld   (   int   p1   ,   int   p2   )   {   int   a   =   find   (   p1   ) ;   int   b   =   find   (   p2   ) ;   if   (   a   = =   b   )   return   ;   if   (   sz   [   a   ]   <   sz   [   b   ] )   swap   (   a   ,   b   ) ;   / /   \u8ba9   a   \u4e2a\u6570 \u6700\u5927   ds   [   b   ]   =   a   ;   sz   [   a   ]   + =   sz   [   b   ] ;   / /   \u5c06 \u5143\u7d20 \u5c11 \u7684 \u5408\u5e76 \u5230 \u5143\u7d20 \u5927 \u7684 \uff0c \u6548\u7387 \u89c6\u4e4e \u4f1a\u53d8 \u9ad8   / /   \u56e0\u4e3a \u6574\u4f53 \u5230\u8fbe \u6839 \u7684 \u8def\u5f84 \u957f\u5ea6 \u4f1a \u77ed \u4e86 \u4e00\u70b9 \u70b9\u70b9 \u4e00\u70b9\u70b9 \u3002   }   \u65b9\u6cd5 \u4e8c \uff1a   \u6309 \u79e9 \u5408\u5e76   \uff0c \u5c06 \u79e9\u5c0f \u7684 \u5408\u5e76 \u8fdb \u79e9\u5927 \u7684   / /   \u6309 \u79e9 \u5408\u5e76 \uff0c \u5c06 \u79e9\u5c0f \u7684 \u5408\u5e76 \u8fdb \u79e9\u5927 \u7684   void   meld   (   int   p1   ,   int   p2   )   {   int   a   =   find   (   p1   ) ;   int   b   =   find   (   p2   ) ;   if   (   a   = =   b   )   return   ;   if   (   rk   [   a   ]   <   rk   [   b   ] )   ds   [   a   ]   =   b   ,   sz   [   b   ]   + =   sz   [   a   ] ;   else   if   (   rk   [   a   ]   >   rk   [   b   ] )   ds   [   b   ]   =   a   ,   sz   [   a   ]   + =   sz   [   b   ] ;   else   ds   [   b   ]   =   a   ,   sz   [   a   ]   + =   sz   [   b   ] ,   rk   [   a   ]   ++   ;   }   \u4e0a\u8ff0 \u4e24\u79cd \u65b9\u6cd5 \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u89c6\u4e4e \u4e00\u81f4 \uff0c \u53ef\u4ee5 \u9009\u53d6 \u4e00\u4efd \u7b80\u5355 \u7684 \u3002   \u5e76 \u67e5\u96c6 \u4ee3\u7801 \u6c47\u603b   const   int   N   =   int   (   1e6   +   10   ) ;   int   ds   [   N   ] ,   sz   [   N   ] ,   rk   [   N   ] ;   / /   \u5e76 \u67e5\u96c6 \uff0c \u96c6\u5408 \u4e2a\u6570 \uff0c \u79e9   void   init   ( )   {   for   (   int   i   =   1   ;   i   <   N   ;   i   ++   )   ds   [   i   ]   =   i   ,   sz   [   i   ]   =   1   ;   }   int   find   (   int   pos   )   {   if   (   ds   [   pos   ]   = =   pos   )   return   pos   ;   ds   [   pos   ]   =   find   (   ds   [   pos   ] ) ;   return   ds   [   pos   ] ;   }   / /   \u6309 \u4e2a\u6570 \u5408\u5e76 \uff0c \u5c06 \u4e2a\u6570 \u5c0f \u7684 \u5408\u5e76 \u8fdb \u4e2a\u6570 \u5927 \u7684   void   meld   (   int   p1   ,   int   p2   )   {   int   a   =   find   (   p1   ) ;   int   b   =   find   (   p2   ) ;   if   (   a   = =   b   )   return   ;   if   (   sz   [   a   ]   <   sz   [   b   ] )   swap   (   a   ,   b   ) ;   ds   [   b   ]   =   a   ;   sz   [   a   ]   + =   sz   [   b   ] ;   / /   \u5c06 \u5143\u7d20 \u5c11 \u7684 \u5408\u5e76 \u5230 \u5143\u7d20 \u5927 \u7684 \uff0c \u6548\u7387 \u89c6\u4e4e \u4f1a\u53d8 \u9ad8   / /   \u56e0\u4e3a \u6574\u4f53 \u5230\u8fbe \u6839 \u7684 \u8def\u5f84 \u957f\u5ea6 \u4f1a \u77ed \u4e86 \u4e00\u70b9 \u70b9\u70b9 \u4e00\u70b9\u70b9 \u3002   }   / /   \u6309 \u79e9 \u5408\u5e76 \uff0c \u5c06 \u79e9\u5c0f \u7684 \u5408\u5e76 \u8fdb \u79e9\u5927 \u7684   void   meld   (   int   p1   ,   int   p2   )   {   int   a   =   find   (   p1   ) ;   int   b   =   find   (   p2   ) ;   if   (   a   = =   b   )   return   ;   if   (   rk   [   a   ]   <   rk   [   b   ] )   ds   [   a   ]   =   b   ,   sz   [   b   ]   + =   sz   [   a   ] ;   else   if   (   rk   [   a   ]   >   rk   [   b   ] )   ds   [   b   ]   =   a   ,   sz   [   a   ]   + =   sz   [   b   ] ;   else   ds   [   b   ]   =   a   ,   sz   [   a   ]   + =   sz   [   b   ] ,   rk   [   a   ]   ++   ;   }","title":"meld"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_2","text":"\u4e00\u5171 \u6709   \\ ( n \\ )   \u4e2a\u6570 \uff0c \u7f16\u53f7 \u662f   \\ ( 1 \u223c n \\ )   \uff0c \u6700 \u5f00\u59cb \u6bcf\u4e2a \u6570 \u5404\u81ea \u5728 \u4e00\u4e2a \u96c6\u5408 \u4e2d \u3002   \u73b0\u5728 \u8981 \u8fdb\u884c   \\ ( m \\ )   \u4e2a \u64cd\u4f5c \uff0c \u64cd\u4f5c \u5171\u6709 \u4e24\u79cd \uff1a   M   a   b   \u5c06 \u7f16\u53f7 \u4e3a   \\ ( a \\ )   \u548c   \\ ( b \\ )   \u7684 \u4e24\u4e2a \u6570 \u6240\u5728 \u7684 \u96c6\u5408 \u5408\u5e76 \uff0c \u5982\u679c \u4e24\u4e2a \u6570 \u5df2\u7ecf \u5728 \u540c\u4e00 \u4e00\u4e2a \u540c\u4e00\u4e2a \u96c6\u5408 \u4e2d \uff0c \u5219 \u5ffd\u7565 \u8fd9\u4e2a \u64cd\u4f5c \uff1b   Q   a   b   \u8be2\u95ee \u7f16\u53f7 \u4e3a   \\ ( a \\ )   \u548c   \\ ( b \\ )   \u7684 \u4e24\u4e2a \u6570 \u662f\u5426 \u5728 \u540c\u4e00 \u4e00\u4e2a \u540c\u4e00\u4e2a \u96c6\u5408 \u4e2d \uff1b   \u5408\u5e76 \u96c6\u5408 \u4ee3\u7801 \u53c2\u8003   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   const   int   N   =   int   (   1e6   +   10   ) ;   int   n   ,   m   ;   int   ds   [   N   ] ,   sz   [   N   ] ;   void   init   ( )   {   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   ds   [   i   ]   =   i   ,   sz   [   i   ]   =   1   ;   }   int   find   (   int   pos   )   {   if   (   ds   [   pos   ]   = =   pos   )   return   pos   ;   ds   [   pos   ]   =   find   (   ds   [   pos   ] ) ;   return   ds   [   pos   ] ;   }   void   meld   (   int   p1   ,   int   p2   )   {   int   a   =   find   (   p1   ) ;   int   b   =   find   (   p2   ) ;   if   (   a   = =   b   )   return   ;   if   (   sz   [   a   ]   <   sz   [   b   ] )   swap   (   a   ,   b   ) ;   ds   [   b   ]   =   a   ;   sz   [   a   ]   + =   sz   [   b   ] ;   }   void   solve   (   void   )   {   scanf   (   \" % d% d \"   ,   &   n   ,   &   m   ) ;   init   ( ) ;   while   (   m   --   )   {   char   s   [   20   ] ;   int   a   ,   b   ;   scanf   (   \" % s% d% d \"   ,   s   ,   &   a   ,   &   b   ) ;   if   (   s   [   0   ]   = =   ' M '   )   meld   (   a   ,   b   ) ;   else   if   (   s   [   0   ]   = =   ' Q '   )   {   int   p1   =   find   (   a   ) ;   int   p2   =   find   (   b   ) ;   printf   (   \" % s   \\ n   \"   ,   p1   = =   p2   ?   \" Yes \"   :   \" No \"   ) ;   }   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002","title":"\u53c2\u8003 \u4f8b\u9898 \uff1a \u5408\u5e76 \u96c6\u5408"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/%E5%8D%95%E8%B0%83%E6%A0%88/","text":"\u5355\u8c03 \u6808   \u987e\u540d \u987e\u540d\u601d\u4e49 \uff0c \u6808\u4e2d \u7684 \u6570\u636e \u662f \u5355\u8c03 \u7684 \uff0c \u6211\u4eec \u8fd9\u91cc \u4ee5 \u300c \u4e0d \u4e25\u683c \u5355\u8c03 \u9012\u589e \u300d \u4e3a\u4f8b \u8bbe\u8ba1 \u4e2a \u5355\u8c03 \u6808 \u3002   push   \u538b\u5165 \u6808\u65f6 \uff0c \u8981 \u4fdd\u6301 \u4ece \u6808\u5e95 \u5230 \u6808 \u9876 \u7684 \u5355\u8c03 \u9012\u589e \u7684 \u7279\u6027 \uff0c \u53ea\u80fd \u628a \u6808 \u9876 \u6bd4 \u65b0 \u538b\u5165 \u7684 \u6570\u636e   \\ ( x \\ )   \u5c0f \u7684 \u5143\u7d20 \u90fd \u5254\u9664 \u51fa\u6808 \uff0c \u7136\u540e \u538b\u5165 \u3002   \u5355\u8c03 \u6808\u538b\u5165 \u5143\u7d20 \u793a\u610f \u610f\u56fe \u793a\u610f\u56fe   void   push   (   int   st   [ ] ,   int   x   )   {   while   (   size   (   st   )   &&   front   (   st   )   >   x   )   pop   (   st   ) ;   st   [   ++   st   [   0   ] ]   =   x   ;   }   \u5355\u8c03 \u6808 \u4ee3\u7801 \u6c47\u603b   const   int   N   =   int   (   1e6   +   10   ) ;   int   q   [   N   ] ;   bool   empty   (   int   st   [ ] )   {   return   !   st   [   0   ] ;   }   int   size   (   int   st   [ ] )   {   return   st   [   0   ] ;   }   int   front   (   int   st   [ ] )   {   return   st   [   st   [   0   ] ] ;   }   void   pop   (   int   st   [ ] )   {   st   [   0   ]   --   ;   }   void   push   (   int   st   [ ] ,   int   x   )   {   while   (   size   (   st   )   &&   front   (   st   )   >   x   )   pop   (   st   ) ;   st   [   ++   st   [   0   ] ]   =   x   ;   }   \u4f8b\u9898 \uff1a   830 .   \u5355\u8c03 \u6808   830 .   \u5355\u8c03 \u6808   \u7ed9\u5b9a \u4e00\u4e2a \u957f\u5ea6 \u4e3a   \\ ( N \\ )   \u7684 \u6574\u6570 \u6570\u5217 \uff0c \u8f93\u51fa \u6bcf\u4e2a \u6570 \u5de6\u8fb9 \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u6bd4 \u5b83 \u5c0f \u7684 \u6570 \uff0c \u5982\u679c \u4e0d \u5b58\u5728 \u5219 \u8f93\u51fa   \\ ( \u2212 1 \\ )   \u3002   \u601d\u8def \uff1a \u4e0d\u65ad \u7ef4\u62a4 \u4e00\u4e2a \u4e25\u683c \u5355\u8c03 \u9012\u589e \u7684 \u6808 \uff0c \u8981 \u627e \u5de6\u8fb9 \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u6bd4\u8be5 \u6570\u5c0f \u7684 \u6570 \uff0c \u5c31 \u5148 \u628a \u8be5\u6570 \u653e\u5165 \u6808\u4e2d \uff0c \u7136\u540e \u518d \u53d6\u51fa \uff0c \u5982\u679c \u5355\u8c03 \u6808\u4e3a \u7a7a \uff0c \u5c31 \u8bf4\u660e \u8be5\u6570 \u5de6\u8fb9 \u6ca1\u6709 \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u6bd4\u8be5 \u6570\u5c0f \u7684 \u6570 \uff0c \u5982\u679c \u8fd8\u6709 \u5143\u7d20 \uff0c \u5219 \u6808\u9876 \u5143\u7d20 \u5c31\u662f \u7b54\u6848   \u4ec0\u4e48 \u4e3a\u4ec0\u4e48 \u53ef\u4ee5 \u76f4\u63a5 \u4e22\u5f03 \u5de6\u8fb9 \u6bd4\u8be5 \u6570 \uff08 \u8bbe \u4e3a   \\ ( x \\ )   \uff09 \u5927 \u6216\u8005 \u7b49 \u7684 \u6570 \uff1f \u90a3\u4e9b \u6bd4\u8be5 \u6570   \\ ( x \\ )   \u5927 \u7684 \u6570\u662f \u4e00\u5b9a \u4e0d\u4f1a \u4f5c\u4e3a \u53f3\u8fb9 \u5176\u4ed6 \u5143\u7d20 \u5de6\u8fb9 \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u5c0f \u7684 \u6570 \u51fa\u73b0 \uff0c \u56e0\u4e3a \u6709 \u66f4 \u5c0f \u7684 \u66f4 \u9760\u53f3 \u7684 \u6570   \\ ( x \\ )   \u53ef\u4ee5 \u9009\u62e9 \uff0c \u56e0\u6b64 \u53ef\u4ee5 \u5927\u80c6 \u5220\u9664 \u3002   \u4ee3\u7801 \u53c2\u8003   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   const   int   N   =   int   (   1e6   +   10   ) ;   int   q   [   N   ] ,   n   ;   bool   empty   (   int   st   [ ] )   {   return   !   st   [   0   ] ;   }   int   size   (   int   st   [ ] )   {   return   st   [   0   ] ;   }   int   front   (   int   st   [ ] )   {   return   st   [   st   [   0   ] ] ;   }   void   pop   (   int   st   [ ] )   {   st   [   0   ]   --   ;   }   void   push   (   int   st   [ ] ,   int   x   )   {   while   (   size   (   st   )   &&   front   (   st   )   > =   x   )   pop   (   st   ) ;   st   [   ++   st   [   0   ] ]   =   x   ;   }   void   solve   (   void   )   {   scanf   (   \" % d \"   ,   &   n   ) ;   while   (   n   --   )   {   int   t   ;   scanf   (   \" % d \"   ,   &   t   ) ;   push   (   q   ,   t   ) ;   pop   (   q   ) ;   if   (   size   (   q   ) )   printf   (   \" % d   \"   ,   front   (   q   ) ) ;   else   printf   (   \" - 1   \"   ) ;   push   (   q   ,   t   ) ;   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002","title":"\u5355\u8c03 \u6808"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/%E5%8D%95%E8%B0%83%E6%A0%88/#_1","text":"\u987e\u540d \u987e\u540d\u601d\u4e49 \uff0c \u6808\u4e2d \u7684 \u6570\u636e \u662f \u5355\u8c03 \u7684 \uff0c \u6211\u4eec \u8fd9\u91cc \u4ee5 \u300c \u4e0d \u4e25\u683c \u5355\u8c03 \u9012\u589e \u300d \u4e3a\u4f8b \u8bbe\u8ba1 \u4e2a \u5355\u8c03 \u6808 \u3002","title":"\u5355\u8c03 \u6808"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/%E5%8D%95%E8%B0%83%E6%A0%88/#push","text":"\u538b\u5165 \u6808\u65f6 \uff0c \u8981 \u4fdd\u6301 \u4ece \u6808\u5e95 \u5230 \u6808 \u9876 \u7684 \u5355\u8c03 \u9012\u589e \u7684 \u7279\u6027 \uff0c \u53ea\u80fd \u628a \u6808 \u9876 \u6bd4 \u65b0 \u538b\u5165 \u7684 \u6570\u636e   \\ ( x \\ )   \u5c0f \u7684 \u5143\u7d20 \u90fd \u5254\u9664 \u51fa\u6808 \uff0c \u7136\u540e \u538b\u5165 \u3002   \u5355\u8c03 \u6808\u538b\u5165 \u5143\u7d20 \u793a\u610f \u610f\u56fe \u793a\u610f\u56fe   void   push   (   int   st   [ ] ,   int   x   )   {   while   (   size   (   st   )   &&   front   (   st   )   >   x   )   pop   (   st   ) ;   st   [   ++   st   [   0   ] ]   =   x   ;   }   \u5355\u8c03 \u6808 \u4ee3\u7801 \u6c47\u603b   const   int   N   =   int   (   1e6   +   10   ) ;   int   q   [   N   ] ;   bool   empty   (   int   st   [ ] )   {   return   !   st   [   0   ] ;   }   int   size   (   int   st   [ ] )   {   return   st   [   0   ] ;   }   int   front   (   int   st   [ ] )   {   return   st   [   st   [   0   ] ] ;   }   void   pop   (   int   st   [ ] )   {   st   [   0   ]   --   ;   }   void   push   (   int   st   [ ] ,   int   x   )   {   while   (   size   (   st   )   &&   front   (   st   )   >   x   )   pop   (   st   ) ;   st   [   ++   st   [   0   ] ]   =   x   ;   }","title":"push"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/%E5%8D%95%E8%B0%83%E6%A0%88/#830","text":"830 .   \u5355\u8c03 \u6808   \u7ed9\u5b9a \u4e00\u4e2a \u957f\u5ea6 \u4e3a   \\ ( N \\ )   \u7684 \u6574\u6570 \u6570\u5217 \uff0c \u8f93\u51fa \u6bcf\u4e2a \u6570 \u5de6\u8fb9 \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u6bd4 \u5b83 \u5c0f \u7684 \u6570 \uff0c \u5982\u679c \u4e0d \u5b58\u5728 \u5219 \u8f93\u51fa   \\ ( \u2212 1 \\ )   \u3002   \u601d\u8def \uff1a \u4e0d\u65ad \u7ef4\u62a4 \u4e00\u4e2a \u4e25\u683c \u5355\u8c03 \u9012\u589e \u7684 \u6808 \uff0c \u8981 \u627e \u5de6\u8fb9 \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u6bd4\u8be5 \u6570\u5c0f \u7684 \u6570 \uff0c \u5c31 \u5148 \u628a \u8be5\u6570 \u653e\u5165 \u6808\u4e2d \uff0c \u7136\u540e \u518d \u53d6\u51fa \uff0c \u5982\u679c \u5355\u8c03 \u6808\u4e3a \u7a7a \uff0c \u5c31 \u8bf4\u660e \u8be5\u6570 \u5de6\u8fb9 \u6ca1\u6709 \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u6bd4\u8be5 \u6570\u5c0f \u7684 \u6570 \uff0c \u5982\u679c \u8fd8\u6709 \u5143\u7d20 \uff0c \u5219 \u6808\u9876 \u5143\u7d20 \u5c31\u662f \u7b54\u6848   \u4ec0\u4e48 \u4e3a\u4ec0\u4e48 \u53ef\u4ee5 \u76f4\u63a5 \u4e22\u5f03 \u5de6\u8fb9 \u6bd4\u8be5 \u6570 \uff08 \u8bbe \u4e3a   \\ ( x \\ )   \uff09 \u5927 \u6216\u8005 \u7b49 \u7684 \u6570 \uff1f \u90a3\u4e9b \u6bd4\u8be5 \u6570   \\ ( x \\ )   \u5927 \u7684 \u6570\u662f \u4e00\u5b9a \u4e0d\u4f1a \u4f5c\u4e3a \u53f3\u8fb9 \u5176\u4ed6 \u5143\u7d20 \u5de6\u8fb9 \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u5c0f \u7684 \u6570 \u51fa\u73b0 \uff0c \u56e0\u4e3a \u6709 \u66f4 \u5c0f \u7684 \u66f4 \u9760\u53f3 \u7684 \u6570   \\ ( x \\ )   \u53ef\u4ee5 \u9009\u62e9 \uff0c \u56e0\u6b64 \u53ef\u4ee5 \u5927\u80c6 \u5220\u9664 \u3002   \u4ee3\u7801 \u53c2\u8003   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   const   int   N   =   int   (   1e6   +   10   ) ;   int   q   [   N   ] ,   n   ;   bool   empty   (   int   st   [ ] )   {   return   !   st   [   0   ] ;   }   int   size   (   int   st   [ ] )   {   return   st   [   0   ] ;   }   int   front   (   int   st   [ ] )   {   return   st   [   st   [   0   ] ] ;   }   void   pop   (   int   st   [ ] )   {   st   [   0   ]   --   ;   }   void   push   (   int   st   [ ] ,   int   x   )   {   while   (   size   (   st   )   &&   front   (   st   )   > =   x   )   pop   (   st   ) ;   st   [   ++   st   [   0   ] ]   =   x   ;   }   void   solve   (   void   )   {   scanf   (   \" % d \"   ,   &   n   ) ;   while   (   n   --   )   {   int   t   ;   scanf   (   \" % d \"   ,   &   t   ) ;   push   (   q   ,   t   ) ;   pop   (   q   ) ;   if   (   size   (   q   ) )   printf   (   \" % d   \"   ,   front   (   q   ) ) ;   else   printf   (   \" - 1   \"   ) ;   push   (   q   ,   t   ) ;   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002","title":"\u4f8b\u9898 \uff1a 830 .   \u5355\u8c03 \u6808"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/","text":"\u540e\u7f00 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f   3302 .   \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u6c42\u503c   \u7ed9\u5b9a \u4e00\u4e2a \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \uff0c \u5176\u4e2d \u8fd0\u7b97 \u7b97\u7b26 \u8fd0\u7b97\u7b26 \u4ec5 \u5305\u542b   + \u3001 - \u3001 * \u3001 /   \uff0c \u53ef\u80fd \u5305\u542b \u62ec\u53f7 \uff0c \u8bf7 \u4f60 \u6c42\u51fa \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u7684 \u6700\u7ec8 \u503c \u3002   \u6570\u636e \u4fdd\u8bc1 \u7ed9\u5b9a \u7684 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u5408\u6cd5 \u3002   \u9898\u76ee \u4fdd\u8bc1   -   \u53ea \u4f5c\u4e3a \u51cf\u53f7 \u51fa\u73b0 \uff0c \u4e0d\u4f1a \u4f5c\u4e3a \u8d1f\u53f7 \u51fa\u73b0 \u3002   \u9898\u76ee \u4fdd\u8bc1 \u6240\u6709 \u7684 \u6570\u5b57 \u5747 \u4e3a \u6574\u6570 \u6b63\u6574\u6570 \u3002   \u9898\u76ee \u4fdd\u8bc1 \u8fd0\u7b97 \u8fc7\u7a0b \u4ee5\u53ca \u7ed3\u679c \u4e2d \uff0c \u5747 \u4e0d \u8d85\u8fc7   \\ ( 2 ^ { 31 }   -   1 \\ )   \u3002   \u9898\u76ee \u4e2d \u7684 \u6574\u9664 \u662f \u6307\u5411   \\ ( 0 \\ )   \u53d6\u6574 \uff0c c++   \u7684 \u6574\u9664 \u9ed8\u8ba4 \u5c31\u662f \u5411   \\ ( 0 \\ )   \u53d6\u6574 \uff1a   - 3.2   =   - 3 ,   3.2   =   3   \u50cf \u6211\u4eec \u5e73\u5e38 \u4f7f\u7528 \u7684 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f   ( 4   +   2   *   30 )   /   8   +   2   \u5c31\u662f \u300c \u4e2d\u7f00 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u300d \uff0c \u8981 \u7528 \u4ee3\u7801 \u5b9e\u73b0 \u6c42 \u503c\u5f97 \u5c06 \u4e2d\u7f00 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u8f6c \u6210 \u300c \u540e\u7f00 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u300d \u6216\u8005 \u53eb \u300c \u9006 \u6ce2\u5170 \u8868\u793a \u8868\u793a\u6cd5 \u300d \uff1a   4   2   30   *   +   8   /   2   +   \u3002   \u6709 \u4e86 \u540e\u7f00 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u540e \u600e\u4e48 \u6c42\u503c \uff1f   \u521d\u59cb \u521d\u59cb\u5316 \u6808   st3   \u4ece \u540e\u7f00 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u7684 \u524d\u9762 \u4e00\u76f4 \u5f80 \u540e\u8fb9 \u626b\u63cf   \u9047\u5230 \u300c \u6570   num \u300d \u4e22\u5165 \u6808   st3   \u9047\u5230 \u300c \u7b26\u53f7   op \u300d \uff0c \u4f9d\u6b21 \u4ece\u6808   st3   \u4e2d \u53d6\u51fa \u5143\u7d20   \\ ( b ,   a \\ )   \uff0c \u5c06   \u300c a   op   b \u300d \u7684 \u7ed3\u679c \u4e22\u5165 \u6808   st3   \u5185   \uff08 \u8981 \u7279\u522b \u7559\u610f \u53d6\u51fa \u7684 \u987a\u5e8f \uff0c \u662f \u5148 \u53d6\u51fa   \\ ( b \\ )   \uff0c \u518d \u53d6\u51fa   \\ ( a \\ )   \uff09   \u540e\u7f00 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u6c42\u503c \u4e3e\u4f8b   4   2   30   *   +   8   /   2   +   st1   \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f   4   2   30   *   +   8   /   2   +   4   60   +   8   /   2   +   64   8   /   2   +   64   8   /   2   +   8   2   +   8   2   +   10   none   \u5982\u4f55 \u5c06 \u300c \u4e2d\u7f00 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u300d \u8f6c \u6210 \u300c \u540e\u7f00 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u300d \uff1f   \u521d\u59cb \u521d\u59cb\u5316 \u6808   st1 \u3001 st2   \u4ece\u4e2d \u7f00 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u7684 \u5de6\u8fb9 \u4e00\u76f4 \u626b\u63cf \u5230 \u540e\u9762   \u9047\u5230 \u300c \u6570\u5b57 \u300d \u76f4\u63a5 \u4e22\u5165 \u6808   st1   \u4e2d   \u9047\u5230 \u300c   (   \u300d \u76f4\u63a5 \u4e22\u5165 \u6808   st2   \u4e2d   \u9047\u5230 \u300c   )   \u300d \u5c06   st2   \u7684 \u6808\u9876 \u7b26\u53f7 \u4f9d\u6b21 \u53d6\u51fa \u5e76 \u4e22 \u8fdb\u6808   st1   \u4e2d \uff0c \u77e5\u9053 \u9047\u5230   (   \u4e3a\u6b62 \uff0c \u5e76 \u4e22\u5f03   (   \u9047\u5230 \u300c \u7b26\u53f7 \u300d \u5148 \u5c06 \u6808\u9876   st2   \u7684 \u7b26\u53f7 \u4f9d\u6b21 \u53d6\u51fa \u5e76 \u4e22 \u8fdb\u6808   st1   \u4e2d \uff0c \u76f4\u5230 \u9047\u5230 \u7684 \u7b26\u53f7 \u4e3a   (   \u6216\u8005 \u9047\u5230 \u7684 \u7b26\u53f7 \u8fd0\u7b97 \u4f18\u5148 \u4f18\u5148\u7ea7 \u66f4 \u4f4e \u4e3a\u6b62 \u3002   \u626b\u63cf \u5b8c\u6210 \u540e \u4e0d\u8981 \u5fd8\u8bb0 \u5c06   st2   \u6808\u4e2d \u6ede\u7559 \u7684 \u7b26\u53f7 \u4f9d\u6b21 \u53d6\u51fa \u4e22\u5165 \u6808   st1   \u4e2d \u3002   \u300c \u4e2d\u7f00 \u300d \u8f6c \u300c \u540e\u7f00 \u300d \u518d \u6c42\u503c \u4ee3\u7801 \u53c2\u8003   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80   81   82   83   84   85   86   87   88   89   90   91   92   93   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   int   sti   (   const   string   &   s   )   {   int   ans   =   0   ;   for   (   auto   x   :   s   )   ans   * =   10   ,   ans   + =   x   -   ' 0 '   ;   return   ans   ;   }   int   calc   (   int   a   ,   int   b   ,   int   op   )   {   if   (   op   = =   ' * '   )   return   a   *   b   ;   if   (   op   = =   ' / '   )   return   a   /   b   ;   if   (   op   = =   ' - '   )   return   a   -   b   ;   if   (   op   = =   ' + '   )   return   a   +   b   ;   }   / /   \u4f18\u5148 \u4f18\u5148\u7ea7   int   pri   (   int   op   )   {   if   (   op   = =   ' + '   | |   op   = =   ' - '   )   return   1   ;   if   (   op   = =   ' * '   | |   op   = =   ' / '   )   return   2   ;   }   queue   <   string   >   RPN   (   const   string   &   s   )   {   queue   <   string   >   st1   ;   stack   <   string   >   st2   ;   int   p   =   0   ;   while   (   p   <   s   .   size   ( ) )   {   if   (   s   [   p   ]   > =   ' 0 '   &&   s   [   p   ]   < =   ' 9 '   )   {   int   l   =   p   ;   while   (   p   +   1   <   s   .   size   ( )   &&   s   [   p   +   1   ]   > =   ' 0 '   &&   s   [   p   +   1   ]   < =   ' 9 '   )   p   ++   ;   st1   .   push   (   string   (   s   .   begin   ( )   +   l   ,   s   .   begin   ( )   +   ++   p   ) ) ;   }   else   if   (   s   [   p   ]   = =   ' ( '   )   st2   .   push   (   \" ( \"   ) ,   p   ++   ;   else   if   (   s   [   p   ]   = =   ' ) '   )   {   while   (   st2   .   top   ( )   ! =   string   (   \" ( \"   ) )   {   st1   .   push   (   st2   .   top   ( ) ) ;   st2   .   pop   ( ) ;   }   st2   .   pop   ( ) ;   p   ++   ;   }   else   {   while   (   st2   .   size   ( )   &&   st2   .   top   ( )   ! =   string   (   \" ( \"   )   &&   pri   (   st2   .   top   ( ) [   0   ] )   > =   pri   (   s   [   p   ] ) )   {   st1   .   push   (   st2   .   top   ( ) ) ;   st2   .   pop   ( ) ;   }   st2   .   push   (   string   ( )   +   s   [   p   ++   ] ) ;   }   }   while   (   st2   .   size   ( ) )   {   st1   .   push   (   st2   .   top   ( ) ) ;   st2   .   pop   ( ) ;   }   return   st1   ;   }   int   value   (   queue   <   string   >   st1   )   {   stack   <   int   >   st2   ;   while   (   st1   .   size   ( ) )   {   string   t   =   st1   .   front   ( ) ;   st1   .   pop   ( ) ;   / /   cout   < <   t   < <   \"   \" ;   / /   \u8f93\u51fa \u540e\u7f00 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f   if   (   t   [   0   ]   > =   ' 0 '   &&   t   [   0   ]   < =   ' 9 '   )   {   st2   .   push   (   sti   (   t   ) ) ;   }   else   {   int   a   ,   b   ;   b   =   st2   .   top   ( ) ;   st2   .   pop   ( ) ;   a   =   st2   .   top   ( ) ;   st2   .   pop   ( ) ;   st2   .   push   (   calc   (   a   ,   b   ,   t   [   0   ] ) ) ;   }   }   return   st2   .   top   ( ) ;   }   string   s   ;   void   solve   (   void   )   {   cin   > >   s   ;   cout   < <   value   (   RPN   (   s   ) )   < <   endl   ;   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   \u300c \u4e2d\u7f00 \u300d \u8fb9 \u8f6c\u8fb9 \u6c42\u503c \u4ee3\u7801 \u53c2\u8003   int   sti   (   const   string   &   s   )   {   int   ans   =   0   ;   for   (   auto   x   :   s   )   ans   * =   10   ,   ans   + =   x   -   ' 0 '   ;   return   ans   ;   }   int   calc   (   int   a   ,   int   b   ,   int   op   )   {   if   (   op   = =   ' * '   )   return   a   *   b   ;   if   (   op   = =   ' / '   )   return   a   /   b   ;   if   (   op   = =   ' - '   )   return   a   -   b   ;   if   (   op   = =   ' + '   )   return   a   +   b   ;   }   / /   \u4f18\u5148 \u4f18\u5148\u7ea7   int   pri   (   int   op   )   {   if   (   op   = =   ' + '   | |   op   = =   ' - '   )   return   1   ;   if   (   op   = =   ' * '   | |   op   = =   ' / '   )   return   2   ;   }   int   RPN   (   const   string   &   s   )   {   int   p   =   0   ;   stack   <   int   >   st1   ,   st2   ;   while   (   p   <   s   .   size   ( ) )   {   if   (   s   [   p   ]   > =   ' 0 '   &&   s   [   p   ]   < =   ' 9 '   )   {   int   l   =   p   ;   while   (   p   +   1   <   s   .   size   ( )   &&   s   [   p   +   1   ]   > =   ' 0 '   &&   s   [   p   +   1   ]   < =   ' 9 '   )   p   ++   ;   st1   .   push   (   sti   (   string   (   s   .   begin   ( )   +   l   ,   s   .   begin   ( )   +   ++   p   ) ) ) ;   }   else   if   (   s   [   p   ]   = =   ' ( '   )   st2   .   push   (   s   [   p   ++   ] ) ;   else   if   (   s   [   p   ]   = =   ' ) '   )   {   while   (   st2   .   top   ( )   ! =   ' ( '   )   {   int   op   =   st2   .   top   ( ) ;   st2   .   pop   ( ) ;   int   b   =   st1   .   top   ( ) ;   st1   .   pop   ( ) ;   int   a   =   st1   .   top   ( ) ;   st1   .   pop   ( ) ;   st1   .   push   (   calc   (   a   ,   b   ,   op   ) ) ;   }   st2   .   pop   ( ) ;   p   ++   ;   }   else   {   while   (   st2   .   size   ( )   &&   st2   .   top   ( )   ! =   ' ( '   &&   pri   (   st2   .   top   ( ) )   > =   pri   (   s   [   p   ] ) )   {   int   op   =   st2   .   top   ( ) ;   st2   .   pop   ( ) ;   int   b   =   st1   .   top   ( ) ;   st1   .   pop   ( ) ;   int   a   =   st1   .   top   ( ) ;   st1   .   pop   ( ) ;   st1   .   push   (   calc   (   a   ,   b   ,   op   ) ) ;   }   st2   .   push   (   s   [   p   ++   ] ) ;   }   }   while   (   st2   .   size   ( ) )   {   int   op   =   st2   .   top   ( ) ;   st2   .   pop   ( ) ;   int   b   =   st1   .   top   ( ) ;   st1   .   pop   ( ) ;   int   a   =   st1   .   top   ( ) ;   st1   .   pop   ( ) ;   st1   .   push   (   calc   (   a   ,   b   ,   op   ) ) ;   }   return   st1   .   top   ( ) ;   }   string   s   ;   void   solve   (   void   )   {   cin   > >   s   ;   cout   < <   RPN   (   s   )   < <   endl   ;   }","title":"\u540e\u7f00 \u8868\u8fbe\u5f0f"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/#_1","text":"3302 .   \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u6c42\u503c   \u7ed9\u5b9a \u4e00\u4e2a \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \uff0c \u5176\u4e2d \u8fd0\u7b97 \u7b97\u7b26 \u8fd0\u7b97\u7b26 \u4ec5 \u5305\u542b   + \u3001 - \u3001 * \u3001 /   \uff0c \u53ef\u80fd \u5305\u542b \u62ec\u53f7 \uff0c \u8bf7 \u4f60 \u6c42\u51fa \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u7684 \u6700\u7ec8 \u503c \u3002   \u6570\u636e \u4fdd\u8bc1 \u7ed9\u5b9a \u7684 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u5408\u6cd5 \u3002   \u9898\u76ee \u4fdd\u8bc1   -   \u53ea \u4f5c\u4e3a \u51cf\u53f7 \u51fa\u73b0 \uff0c \u4e0d\u4f1a \u4f5c\u4e3a \u8d1f\u53f7 \u51fa\u73b0 \u3002   \u9898\u76ee \u4fdd\u8bc1 \u6240\u6709 \u7684 \u6570\u5b57 \u5747 \u4e3a \u6574\u6570 \u6b63\u6574\u6570 \u3002   \u9898\u76ee \u4fdd\u8bc1 \u8fd0\u7b97 \u8fc7\u7a0b \u4ee5\u53ca \u7ed3\u679c \u4e2d \uff0c \u5747 \u4e0d \u8d85\u8fc7   \\ ( 2 ^ { 31 }   -   1 \\ )   \u3002   \u9898\u76ee \u4e2d \u7684 \u6574\u9664 \u662f \u6307\u5411   \\ ( 0 \\ )   \u53d6\u6574 \uff0c c++   \u7684 \u6574\u9664 \u9ed8\u8ba4 \u5c31\u662f \u5411   \\ ( 0 \\ )   \u53d6\u6574 \uff1a   - 3.2   =   - 3 ,   3.2   =   3   \u50cf \u6211\u4eec \u5e73\u5e38 \u4f7f\u7528 \u7684 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f   ( 4   +   2   *   30 )   /   8   +   2   \u5c31\u662f \u300c \u4e2d\u7f00 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u300d \uff0c \u8981 \u7528 \u4ee3\u7801 \u5b9e\u73b0 \u6c42 \u503c\u5f97 \u5c06 \u4e2d\u7f00 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u8f6c \u6210 \u300c \u540e\u7f00 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u300d \u6216\u8005 \u53eb \u300c \u9006 \u6ce2\u5170 \u8868\u793a \u8868\u793a\u6cd5 \u300d \uff1a   4   2   30   *   +   8   /   2   +   \u3002   \u6709 \u4e86 \u540e\u7f00 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u540e \u600e\u4e48 \u6c42\u503c \uff1f   \u521d\u59cb \u521d\u59cb\u5316 \u6808   st3   \u4ece \u540e\u7f00 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u7684 \u524d\u9762 \u4e00\u76f4 \u5f80 \u540e\u8fb9 \u626b\u63cf   \u9047\u5230 \u300c \u6570   num \u300d \u4e22\u5165 \u6808   st3   \u9047\u5230 \u300c \u7b26\u53f7   op \u300d \uff0c \u4f9d\u6b21 \u4ece\u6808   st3   \u4e2d \u53d6\u51fa \u5143\u7d20   \\ ( b ,   a \\ )   \uff0c \u5c06   \u300c a   op   b \u300d \u7684 \u7ed3\u679c \u4e22\u5165 \u6808   st3   \u5185   \uff08 \u8981 \u7279\u522b \u7559\u610f \u53d6\u51fa \u7684 \u987a\u5e8f \uff0c \u662f \u5148 \u53d6\u51fa   \\ ( b \\ )   \uff0c \u518d \u53d6\u51fa   \\ ( a \\ )   \uff09   \u540e\u7f00 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u6c42\u503c \u4e3e\u4f8b   4   2   30   *   +   8   /   2   +   st1   \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f   4   2   30   *   +   8   /   2   +   4   60   +   8   /   2   +   64   8   /   2   +   64   8   /   2   +   8   2   +   8   2   +   10   none   \u5982\u4f55 \u5c06 \u300c \u4e2d\u7f00 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u300d \u8f6c \u6210 \u300c \u540e\u7f00 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u300d \uff1f   \u521d\u59cb \u521d\u59cb\u5316 \u6808   st1 \u3001 st2   \u4ece\u4e2d \u7f00 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f \u7684 \u5de6\u8fb9 \u4e00\u76f4 \u626b\u63cf \u5230 \u540e\u9762   \u9047\u5230 \u300c \u6570\u5b57 \u300d \u76f4\u63a5 \u4e22\u5165 \u6808   st1   \u4e2d   \u9047\u5230 \u300c   (   \u300d \u76f4\u63a5 \u4e22\u5165 \u6808   st2   \u4e2d   \u9047\u5230 \u300c   )   \u300d \u5c06   st2   \u7684 \u6808\u9876 \u7b26\u53f7 \u4f9d\u6b21 \u53d6\u51fa \u5e76 \u4e22 \u8fdb\u6808   st1   \u4e2d \uff0c \u77e5\u9053 \u9047\u5230   (   \u4e3a\u6b62 \uff0c \u5e76 \u4e22\u5f03   (   \u9047\u5230 \u300c \u7b26\u53f7 \u300d \u5148 \u5c06 \u6808\u9876   st2   \u7684 \u7b26\u53f7 \u4f9d\u6b21 \u53d6\u51fa \u5e76 \u4e22 \u8fdb\u6808   st1   \u4e2d \uff0c \u76f4\u5230 \u9047\u5230 \u7684 \u7b26\u53f7 \u4e3a   (   \u6216\u8005 \u9047\u5230 \u7684 \u7b26\u53f7 \u8fd0\u7b97 \u4f18\u5148 \u4f18\u5148\u7ea7 \u66f4 \u4f4e \u4e3a\u6b62 \u3002   \u626b\u63cf \u5b8c\u6210 \u540e \u4e0d\u8981 \u5fd8\u8bb0 \u5c06   st2   \u6808\u4e2d \u6ede\u7559 \u7684 \u7b26\u53f7 \u4f9d\u6b21 \u53d6\u51fa \u4e22\u5165 \u6808   st1   \u4e2d \u3002   \u300c \u4e2d\u7f00 \u300d \u8f6c \u300c \u540e\u7f00 \u300d \u518d \u6c42\u503c \u4ee3\u7801 \u53c2\u8003   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80   81   82   83   84   85   86   87   88   89   90   91   92   93   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   int   sti   (   const   string   &   s   )   {   int   ans   =   0   ;   for   (   auto   x   :   s   )   ans   * =   10   ,   ans   + =   x   -   ' 0 '   ;   return   ans   ;   }   int   calc   (   int   a   ,   int   b   ,   int   op   )   {   if   (   op   = =   ' * '   )   return   a   *   b   ;   if   (   op   = =   ' / '   )   return   a   /   b   ;   if   (   op   = =   ' - '   )   return   a   -   b   ;   if   (   op   = =   ' + '   )   return   a   +   b   ;   }   / /   \u4f18\u5148 \u4f18\u5148\u7ea7   int   pri   (   int   op   )   {   if   (   op   = =   ' + '   | |   op   = =   ' - '   )   return   1   ;   if   (   op   = =   ' * '   | |   op   = =   ' / '   )   return   2   ;   }   queue   <   string   >   RPN   (   const   string   &   s   )   {   queue   <   string   >   st1   ;   stack   <   string   >   st2   ;   int   p   =   0   ;   while   (   p   <   s   .   size   ( ) )   {   if   (   s   [   p   ]   > =   ' 0 '   &&   s   [   p   ]   < =   ' 9 '   )   {   int   l   =   p   ;   while   (   p   +   1   <   s   .   size   ( )   &&   s   [   p   +   1   ]   > =   ' 0 '   &&   s   [   p   +   1   ]   < =   ' 9 '   )   p   ++   ;   st1   .   push   (   string   (   s   .   begin   ( )   +   l   ,   s   .   begin   ( )   +   ++   p   ) ) ;   }   else   if   (   s   [   p   ]   = =   ' ( '   )   st2   .   push   (   \" ( \"   ) ,   p   ++   ;   else   if   (   s   [   p   ]   = =   ' ) '   )   {   while   (   st2   .   top   ( )   ! =   string   (   \" ( \"   ) )   {   st1   .   push   (   st2   .   top   ( ) ) ;   st2   .   pop   ( ) ;   }   st2   .   pop   ( ) ;   p   ++   ;   }   else   {   while   (   st2   .   size   ( )   &&   st2   .   top   ( )   ! =   string   (   \" ( \"   )   &&   pri   (   st2   .   top   ( ) [   0   ] )   > =   pri   (   s   [   p   ] ) )   {   st1   .   push   (   st2   .   top   ( ) ) ;   st2   .   pop   ( ) ;   }   st2   .   push   (   string   ( )   +   s   [   p   ++   ] ) ;   }   }   while   (   st2   .   size   ( ) )   {   st1   .   push   (   st2   .   top   ( ) ) ;   st2   .   pop   ( ) ;   }   return   st1   ;   }   int   value   (   queue   <   string   >   st1   )   {   stack   <   int   >   st2   ;   while   (   st1   .   size   ( ) )   {   string   t   =   st1   .   front   ( ) ;   st1   .   pop   ( ) ;   / /   cout   < <   t   < <   \"   \" ;   / /   \u8f93\u51fa \u540e\u7f00 \u8868\u8fbe \u8fbe\u5f0f \u8868\u8fbe\u5f0f   if   (   t   [   0   ]   > =   ' 0 '   &&   t   [   0   ]   < =   ' 9 '   )   {   st2   .   push   (   sti   (   t   ) ) ;   }   else   {   int   a   ,   b   ;   b   =   st2   .   top   ( ) ;   st2   .   pop   ( ) ;   a   =   st2   .   top   ( ) ;   st2   .   pop   ( ) ;   st2   .   push   (   calc   (   a   ,   b   ,   t   [   0   ] ) ) ;   }   }   return   st2   .   top   ( ) ;   }   string   s   ;   void   solve   (   void   )   {   cin   > >   s   ;   cout   < <   value   (   RPN   (   s   ) )   < <   endl   ;   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   \u300c \u4e2d\u7f00 \u300d \u8fb9 \u8f6c\u8fb9 \u6c42\u503c \u4ee3\u7801 \u53c2\u8003   int   sti   (   const   string   &   s   )   {   int   ans   =   0   ;   for   (   auto   x   :   s   )   ans   * =   10   ,   ans   + =   x   -   ' 0 '   ;   return   ans   ;   }   int   calc   (   int   a   ,   int   b   ,   int   op   )   {   if   (   op   = =   ' * '   )   return   a   *   b   ;   if   (   op   = =   ' / '   )   return   a   /   b   ;   if   (   op   = =   ' - '   )   return   a   -   b   ;   if   (   op   = =   ' + '   )   return   a   +   b   ;   }   / /   \u4f18\u5148 \u4f18\u5148\u7ea7   int   pri   (   int   op   )   {   if   (   op   = =   ' + '   | |   op   = =   ' - '   )   return   1   ;   if   (   op   = =   ' * '   | |   op   = =   ' / '   )   return   2   ;   }   int   RPN   (   const   string   &   s   )   {   int   p   =   0   ;   stack   <   int   >   st1   ,   st2   ;   while   (   p   <   s   .   size   ( ) )   {   if   (   s   [   p   ]   > =   ' 0 '   &&   s   [   p   ]   < =   ' 9 '   )   {   int   l   =   p   ;   while   (   p   +   1   <   s   .   size   ( )   &&   s   [   p   +   1   ]   > =   ' 0 '   &&   s   [   p   +   1   ]   < =   ' 9 '   )   p   ++   ;   st1   .   push   (   sti   (   string   (   s   .   begin   ( )   +   l   ,   s   .   begin   ( )   +   ++   p   ) ) ) ;   }   else   if   (   s   [   p   ]   = =   ' ( '   )   st2   .   push   (   s   [   p   ++   ] ) ;   else   if   (   s   [   p   ]   = =   ' ) '   )   {   while   (   st2   .   top   ( )   ! =   ' ( '   )   {   int   op   =   st2   .   top   ( ) ;   st2   .   pop   ( ) ;   int   b   =   st1   .   top   ( ) ;   st1   .   pop   ( ) ;   int   a   =   st1   .   top   ( ) ;   st1   .   pop   ( ) ;   st1   .   push   (   calc   (   a   ,   b   ,   op   ) ) ;   }   st2   .   pop   ( ) ;   p   ++   ;   }   else   {   while   (   st2   .   size   ( )   &&   st2   .   top   ( )   ! =   ' ( '   &&   pri   (   st2   .   top   ( ) )   > =   pri   (   s   [   p   ] ) )   {   int   op   =   st2   .   top   ( ) ;   st2   .   pop   ( ) ;   int   b   =   st1   .   top   ( ) ;   st1   .   pop   ( ) ;   int   a   =   st1   .   top   ( ) ;   st1   .   pop   ( ) ;   st1   .   push   (   calc   (   a   ,   b   ,   op   ) ) ;   }   st2   .   push   (   s   [   p   ++   ] ) ;   }   }   while   (   st2   .   size   ( ) )   {   int   op   =   st2   .   top   ( ) ;   st2   .   pop   ( ) ;   int   b   =   st1   .   top   ( ) ;   st1   .   pop   ( ) ;   int   a   =   st1   .   top   ( ) ;   st1   .   pop   ( ) ;   st1   .   push   (   calc   (   a   ,   b   ,   op   ) ) ;   }   return   st1   .   top   ( ) ;   }   string   s   ;   void   solve   (   void   )   {   cin   > >   s   ;   cout   < <   RPN   (   s   )   < <   endl   ;   }","title":"\u540e\u7f00 \u8868\u8fbe\u5f0f"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/%E6%A0%88/","text":"\u6808   \u6808\u662f \u4e00\u79cd \u300c \u5148\u8fdb \u5148\u8fdb\u540e\u51fa \u300d \u7684 \u6570\u636e \u7ed3\u6784 \u6570\u636e\u7ed3\u6784 \u3002   \u6570\u7ec4 \u5b9e\u73b0 \u6808   \u7528 \u6570\u7ec4 \u5b9e\u73b0 \u6808 \uff0c \u4ee3\u7801 \u7b80\u6d01 \uff0c \u6548\u7387 \u4e5f \u9ad8 \uff0c \u901f\u5ea6 \u4e5f \u5feb   \u7ed9\u5b9a \u4e00\u4e2a \u6570\u7ec4   \\ ( q [ N ] \\ )   \uff0c \u6570\u7ec4 \u7684 \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u5143\u7d20   \\ ( q [ 0 ] \\ )   \u5b58\u50a8 \u5b58\u50a8\u6808 \u7684 \u6570\u636e \u4e2a\u6570 \uff0c \u4e5f \u4ee3\u8868 \u6700\u540e \u4e00\u4e2a \u5143\u7d20 \u7684 \u4e0b\u6807 \uff0c \u5982\u4e0b \u56fe \uff1a   empty   \u5982\u679c   \\ ( q [ 0 ]   =   0 \\ )   \uff0c \u8bf4\u660e \u6808\u4e3a \u7a7a   # define   st _ empty ( st )   ( st [ 0 ]   = =   0 )   / /   \u5224\u65ad \u6808 \u662f\u5426 \u4e3a   \u7a7a   full   \u5982\u679c   \\ ( q [ 0 ]   =   N   -   1 \\ )   \uff0c \u8bf4\u660e \u6570\u7ec4 \u7a7a\u95f4 \u5df2\u6ee1   # define   st _ full ( st )   ( st [ 0 ]   = =   ( N   -   1 ) )   / /   \u6808 \u7684 \u957f\u5ea6 \u6700\u5927 \u4e3a   N   -   1   push   \u63d2\u5165 \u6570\u636e \u65f6 \uff1a   q [ ++ q [ 0 ] ]   =   x   # define   st _ push ( st ,   x )   ( st [ ++ st [ 0 ] ]   =   ( x ) )   / /   \u653e\u5165 \u6570\u636e   pop   \u53d6\u51fa \u6570\u636e \u65f6 \uff1a   q [ q [ 0 ] -- ]   # define   st _ pop ( st )   ( st [ st [ 0 ] -- ] )   / /   \u62ff\u51fa \u6570\u636e   # define   st _ top ( st )   ( st [ st [ 0 ] ] )   / /   \u8bbf\u95ee \u6808\u9876 \u5143\u7d20   \u6808 - \u4ee3\u7801 \u53c2\u8003   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   const   int   N   =   int   (   1e5   +   10   ) ;   int   q   [   N   ] ;   / /   \u4f7f\u7528   q [ 0 ]   \u8868\u793a   \u6808   \u7684 \u6570\u636e \u4e2a\u6570   # define   st _ size ( st )   ( st [ 0 ] )   / /   \u6808 \u7684 \u6570\u636e \u4e2a\u6570   # define   st _ full ( st )   ( st [ 0 ]   = =   ( N   -   1 ) )   / /   \u6808 \u7684 \u957f\u5ea6 \u6700\u5927 \u4e3a   N   -   1   # define   st _ empty ( st )   ( st [ 0 ]   = =   0 )   / /   \u5224\u65ad \u6808 \u662f\u5426 \u4e3a   \u7a7a   # define   st _ push ( st ,   x )   ( st [ ++ st [ 0 ] ]   =   ( x ) )   / /   \u653e\u5165 \u6570\u636e   # define   st _ pop ( st )   ( st [ st [ 0 ] -- ] )   / /   \u62ff\u51fa \u6570\u636e   # define   st _ top ( st )   ( st [ st [ 0 ] ] )   / /   \u8bbf\u95ee \u6808\u9876 \u5143\u7d20   \u7ed3\u6784 \u4f53   \u7ed3\u6784 \u4f53 \u5b9a\u4e49   struct   Node   {   int   v   ;   Node   *   ne   ;   Node   (   int   val   =   0   ,   Node   *   next   =   nullptr   )   {   v   =   val   ;   ne   =   next   ;   }   } ;   \u5934 \u63d2\u6cd5   \u5b9a\u4e49 \u4e00\u4e2a   st _ top   \u6307\u9488 \u6307\u5411 \u5f00\u5934 \uff0c \u521d\u59cb \u521d\u59cb\u5316 \u4e3a \u300c \u7a7a \u300d   Node   *   st _ top   =   nullptr   ;   push   \u538b\u6808   \u5047\u8bbe \u6211\u4eec \u8981 \u52a0\u5165 \u4e00\u4e2a \u6570\u636e \uff0c \u6211\u4eec \u91c7\u7528 \u5934 \u63d2\u6cd5 \u4e0d\u65ad \u7ef4\u62a4 \u6808\u9876 \u5373\u53ef   void   push   (   Node   * &   st _ top   ,   int   x   )   {   Node   *   t   =   new   Node   (   x   ,   st _ top   ) ;   st _ top   =   t   ;   }   pop   \u53d6\u51fa \u6808\u9876   int   top   (   Node   *   st _ top   )   {   return   st _ top   - >   v   ;   }   void   pop   (   Node   * &   st _ top   )   {   Node   *   p   =   st _ top   ;   st _ top   =   st _ top   - >   ne   ;   delete   p   ;   }   empty   bool   empty   (   Node   *   st _ top   )   {   return   !   st _ top   ;   }   \u7ed3\u6784 \u4f53 - \u4ee3\u7801 \u6c47\u603b   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   struct   Node   {   int   v   ;   Node   *   ne   ;   Node   (   int   val   =   0   ,   Node   *   next   =   nullptr   )   {   v   =   val   ;   ne   =   next   ;   }   } ;   Node   *   st _ top   =   nullptr   ;   void   push   (   Node   * &   st _ top   ,   int   x   )   {   Node   *   t   =   new   Node   (   x   ,   st _ top   ) ;   st _ top   =   t   ;   }   int   top   (   Node   *   st _ top   )   {   return   st _ top   - >   v   ;   }   void   pop   (   Node   * &   st _ top   )   {   Node   *   p   =   st _ top   ;   st _ top   =   st _ top   - >   ne   ;   delete   p   ;   }   bool   empty   (   Node   *   st _ top   )   {   return   !   st _ top   ;   }   \u9a8c\u8bc1 \u6808 \u5e8f\u5217   \u9a8c\u8bc1 \u6808 \u5e8f\u5217   \u7ed9\u5b9a \u4e24\u4e2a \u5e8f\u5217   a   \u548c   b   \uff0c \u5176\u4e2d \u8fd9 \u4e24\u4e2a \u5e8f\u5217 \u7684 \u957f\u5ea6 \u76f8\u540c \uff0c \u4e14 \u6ca1\u6709 \u91cd\u590d \u7684 \u5143\u7d20 \uff1b \u8fd9 \u4e24\u4e2a \u5e8f\u5217 \u7684 \u957f\u5ea6 \u4e0d \u8d85\u8fc7   \\ ( 1000 \\ )   \u4e14 \u5b58\u50a8 \u7684 \u5143\u7d20 \u90fd \u662f \u6574\u6570 \uff0c \u8303\u56f4 \u5728   \\ ( 0   \\ sim   1000 \\ )   \u5b50\u5185 \u3002   \u8bf7 \u4f60 \u5224\u65ad \u5e8f\u5217   b   \u662f\u5426 \u53ef\u4ee5 \u901a\u8fc7 \u5e8f\u5217   a   \u501f\u52a9 \u6808 \u6240\u5f97 \u3002   \u6837\u4f8b \uff1a   \u8f93\u5165   a   =   1   2   3   4   5   b   =   4   5   3   2   1   \u8f93\u51fa   true   \u5148\u627e \u4e00\u4e0b \u6709 \u4ec0\u4e48 \u89c4\u5f8b \u3001 \u7279\u5f81   \u82e5 \u4e00 \u5f00\u59cb \u5c31 \u8f93\u51fa   4 \uff0c \u90a3\u4e48 \u5728 \u539f \u5e8f\u5217   a   \u4e2d \uff0c \u6bd4   4   \u66f4 \u524d\u9762 \u7684 \u5143\u7d20   1   2   3   \u4e00\u5b9a \u8fd8\u4f1a \u6ede\u7559 \u5728 \u6808 \u4e2d   \u4e0b \u4e00\u6b21 \u8f93\u51fa \u65f6 \uff0c \u8981\u4e48 \u5c31 \u8f93\u51fa \u6bd4   4   \u66f4\u540e \u7684 \u5143\u7d20 \uff0c \u8981\u4e48 \u5c31 \u8f93\u51fa \u6b64\u65f6 \u7684 \u6808\u9876 \u5143\u7d20   3 .   \u5982\u679c \u4e0b\u6b21 \u8f93\u51fa   5   \uff0c \u90a3\u4e48 \u6bd4   5   \u66f4\u524d \u7684 \uff0c \u8fd8 \u6ca1\u6709 \u8f93\u51fa \u7684 \u5143\u7d20 \u80af\u5b9a \u8fd8\u4f1a \u6ede\u7559 \u5728 \u6808 \u4e2d \uff0c \u6211\u4eec \u53ef\u4ee5 \u7528 \u9012\u5f52 \u601d\u8def \u6765 \u6c42\u89e3 \u6b64\u9898 \u3002   \u627e \u89c4\u5f8b \u3001 \u627e \u7279\u5f81 \u7684 \u601d\u8def   vector   <   int   >   a   ,   b   ,   c   ;   / /   3   \u72b6\u6001 \uff1a 0   \u672a \u8bbf\u95ee \uff0c 1   \u6ede\u7559 \u6808\u4e2d \uff0c 2   \u5df2 \u8f93\u51fa   int   cur   ,   n   ;   stack   <   int   >   st   ;   bool   isstack   (   int   pos   )   {   if   (   pos   = =   n   )   return   true   ;   if   (   c   [   b   [   pos   ] ]   = =   1   )   {   if   (   st   .   size   ( )   &&   st   .   top   ( )   = =   b   [   pos   ] )   {   c   [   b   [   pos   ] ]   =   2   ;   st   .   pop   ( ) ;   return   isstack   (   pos   +   1   ) ;   }   else   return   false   ;   }   else   {   while   (   cur   <   n   &&   a   [   cur   ]   ! =   b   [   pos   ] )   {   if   (   c   [   a   [   cur   ] ]   = =   0   )   st   .   push   (   a   [   cur   ] ) ,   c   [   a   [   cur   ] ]   =   1   ;   cur   ++   ;   }   if   (   cur   > =   n   )   return   false   ;   c   [   b   [   pos   ] ]   =   2   ;   return   isstack   (   pos   +   1   ) ;   }   }   \u6808 \u6a21\u62df   \u5148 \u5c06 \u5e8f\u5217   a   \u4e2d \u7684 \u5143\u7d20 \u90fd \u4f9d\u6b21 \u653e\u5165 \u6808\u4e2d   \u5728 \u653e \u7684 \u8fc7\u7a0b \u4e2d\u8981 \u4e0d\u65ad \u5730 \u5c06 \u6808\u9876 \u5143\u7d20 \u4e0e \u5e8f\u5217   b   \u4e2d \u7684 \u5f00\u59cb \u5143\u7d20 \u6bd4\u8f83 \uff0c \u5982\u679c \u6808\u9876 \u5143\u7d20 \u4e0e   b   \u7684 \u5f00\u59cb \u5143\u7d20 \u76f8\u540c \uff0c \u5c31 \u629b\u5f03 \u6808\u9876 \u5143\u7d20 \u548c   b   \u7684 \u5f00\u59cb \u5143\u7d20 \uff0c \u76f4\u5230 \u6808\u4e3a \u7a7a \u6216 \u4e0d \u51fa\u73b0 \u6808\u9876 \u5143\u7d20 \u4e0e \u5f00\u59cb \u5143\u7d20 \u76f8\u540c \u4e3a\u6b62 \u3002   \u5982\u679c \u6700\u7ec8   a   \u8bfb\u5b8c \u4e86 \uff0c \u4f46\u662f   b   \u5374 \u8fd8\u6709 \u5269 \uff0c \u8bf4\u660e \u4e0d\u662f \u6808 \u5e8f\u5217 \uff0c \u6b64\u65f6 \u7684 \u6808 \u4e5f \u4e0d \u4e3a \u7a7a \u3002   \u8be5 \u601d\u8def \u672c\u8d28 \u4e0a \u662f \u627e \u89c4\u5f8b \u3001 \u627e \u7279\u5f81 \u7684 \u601d\u8def \u7684 \u7b80\u5316 \u3002   \u6808 \u6a21\u62df \u601d\u8def   vector   <   int   >   a   ,   b   ;   stack   <   int   >   st   ;   int   n   ;   bool   isstack   ( )   {   int   i   =   0   ,   j   =   0   ;   for   ( ;   i   <   n   &&   j   <   n   ;   i   ++   )   {   st   .   push   (   a   [   i   ] ) ;   while   (   j   <   n   &&   st   .   size   ( )   &&   st   .   top   ( )   = =   b   [   j   ] )   {   st   .   pop   ( ) ;   j   ++   ;   }   }   return   st   .   size   ( )   = =   0   ;   }","title":"\u6808"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/%E6%A0%88/#_1","text":"\u6808\u662f \u4e00\u79cd \u300c \u5148\u8fdb \u5148\u8fdb\u540e\u51fa \u300d \u7684 \u6570\u636e \u7ed3\u6784 \u6570\u636e\u7ed3\u6784 \u3002","title":"\u6808"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/%E6%A0%88/#_2","text":"\u7528 \u6570\u7ec4 \u5b9e\u73b0 \u6808 \uff0c \u4ee3\u7801 \u7b80\u6d01 \uff0c \u6548\u7387 \u4e5f \u9ad8 \uff0c \u901f\u5ea6 \u4e5f \u5feb   \u7ed9\u5b9a \u4e00\u4e2a \u6570\u7ec4   \\ ( q [ N ] \\ )   \uff0c \u6570\u7ec4 \u7684 \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u5143\u7d20   \\ ( q [ 0 ] \\ )   \u5b58\u50a8 \u5b58\u50a8\u6808 \u7684 \u6570\u636e \u4e2a\u6570 \uff0c \u4e5f \u4ee3\u8868 \u6700\u540e \u4e00\u4e2a \u5143\u7d20 \u7684 \u4e0b\u6807 \uff0c \u5982\u4e0b \u56fe \uff1a","title":"\u6570\u7ec4 \u5b9e\u73b0 \u6808"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/%E6%A0%88/#empty","text":"\u5982\u679c   \\ ( q [ 0 ]   =   0 \\ )   \uff0c \u8bf4\u660e \u6808\u4e3a \u7a7a   # define   st _ empty ( st )   ( st [ 0 ]   = =   0 )   / /   \u5224\u65ad \u6808 \u662f\u5426 \u4e3a   \u7a7a","title":"empty"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/%E6%A0%88/#full","text":"\u5982\u679c   \\ ( q [ 0 ]   =   N   -   1 \\ )   \uff0c \u8bf4\u660e \u6570\u7ec4 \u7a7a\u95f4 \u5df2\u6ee1   # define   st _ full ( st )   ( st [ 0 ]   = =   ( N   -   1 ) )   / /   \u6808 \u7684 \u957f\u5ea6 \u6700\u5927 \u4e3a   N   -   1","title":"full"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/%E6%A0%88/#push","text":"\u63d2\u5165 \u6570\u636e \u65f6 \uff1a   q [ ++ q [ 0 ] ]   =   x   # define   st _ push ( st ,   x )   ( st [ ++ st [ 0 ] ]   =   ( x ) )   / /   \u653e\u5165 \u6570\u636e","title":"push"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/%E6%A0%88/#pop","text":"\u53d6\u51fa \u6570\u636e \u65f6 \uff1a   q [ q [ 0 ] -- ]   # define   st _ pop ( st )   ( st [ st [ 0 ] -- ] )   / /   \u62ff\u51fa \u6570\u636e   # define   st _ top ( st )   ( st [ st [ 0 ] ] )   / /   \u8bbf\u95ee \u6808\u9876 \u5143\u7d20   \u6808 - \u4ee3\u7801 \u53c2\u8003   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   const   int   N   =   int   (   1e5   +   10   ) ;   int   q   [   N   ] ;   / /   \u4f7f\u7528   q [ 0 ]   \u8868\u793a   \u6808   \u7684 \u6570\u636e \u4e2a\u6570   # define   st _ size ( st )   ( st [ 0 ] )   / /   \u6808 \u7684 \u6570\u636e \u4e2a\u6570   # define   st _ full ( st )   ( st [ 0 ]   = =   ( N   -   1 ) )   / /   \u6808 \u7684 \u957f\u5ea6 \u6700\u5927 \u4e3a   N   -   1   # define   st _ empty ( st )   ( st [ 0 ]   = =   0 )   / /   \u5224\u65ad \u6808 \u662f\u5426 \u4e3a   \u7a7a   # define   st _ push ( st ,   x )   ( st [ ++ st [ 0 ] ]   =   ( x ) )   / /   \u653e\u5165 \u6570\u636e   # define   st _ pop ( st )   ( st [ st [ 0 ] -- ] )   / /   \u62ff\u51fa \u6570\u636e   # define   st _ top ( st )   ( st [ st [ 0 ] ] )   / /   \u8bbf\u95ee \u6808\u9876 \u5143\u7d20","title":"pop"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/%E6%A0%88/#_3","text":"","title":"\u7ed3\u6784 \u4f53"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/%E6%A0%88/#_4","text":"struct   Node   {   int   v   ;   Node   *   ne   ;   Node   (   int   val   =   0   ,   Node   *   next   =   nullptr   )   {   v   =   val   ;   ne   =   next   ;   }   } ;","title":"\u7ed3\u6784 \u4f53 \u5b9a\u4e49"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/%E6%A0%88/#_5","text":"\u5b9a\u4e49 \u4e00\u4e2a   st _ top   \u6307\u9488 \u6307\u5411 \u5f00\u5934 \uff0c \u521d\u59cb \u521d\u59cb\u5316 \u4e3a \u300c \u7a7a \u300d   Node   *   st _ top   =   nullptr   ;","title":"\u5934 \u63d2\u6cd5"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/%E6%A0%88/#push_1","text":"\u5047\u8bbe \u6211\u4eec \u8981 \u52a0\u5165 \u4e00\u4e2a \u6570\u636e \uff0c \u6211\u4eec \u91c7\u7528 \u5934 \u63d2\u6cd5 \u4e0d\u65ad \u7ef4\u62a4 \u6808\u9876 \u5373\u53ef   void   push   (   Node   * &   st _ top   ,   int   x   )   {   Node   *   t   =   new   Node   (   x   ,   st _ top   ) ;   st _ top   =   t   ;   }","title":"push   \u538b\u6808"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/%E6%A0%88/#pop_1","text":"int   top   (   Node   *   st _ top   )   {   return   st _ top   - >   v   ;   }   void   pop   (   Node   * &   st _ top   )   {   Node   *   p   =   st _ top   ;   st _ top   =   st _ top   - >   ne   ;   delete   p   ;   }","title":"pop   \u53d6\u51fa \u6808\u9876"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/%E6%A0%88/#empty_1","text":"bool   empty   (   Node   *   st _ top   )   {   return   !   st _ top   ;   }   \u7ed3\u6784 \u4f53 - \u4ee3\u7801 \u6c47\u603b   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   struct   Node   {   int   v   ;   Node   *   ne   ;   Node   (   int   val   =   0   ,   Node   *   next   =   nullptr   )   {   v   =   val   ;   ne   =   next   ;   }   } ;   Node   *   st _ top   =   nullptr   ;   void   push   (   Node   * &   st _ top   ,   int   x   )   {   Node   *   t   =   new   Node   (   x   ,   st _ top   ) ;   st _ top   =   t   ;   }   int   top   (   Node   *   st _ top   )   {   return   st _ top   - >   v   ;   }   void   pop   (   Node   * &   st _ top   )   {   Node   *   p   =   st _ top   ;   st _ top   =   st _ top   - >   ne   ;   delete   p   ;   }   bool   empty   (   Node   *   st _ top   )   {   return   !   st _ top   ;   }","title":"empty"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/%E6%A0%88/#_6","text":"\u9a8c\u8bc1 \u6808 \u5e8f\u5217   \u7ed9\u5b9a \u4e24\u4e2a \u5e8f\u5217   a   \u548c   b   \uff0c \u5176\u4e2d \u8fd9 \u4e24\u4e2a \u5e8f\u5217 \u7684 \u957f\u5ea6 \u76f8\u540c \uff0c \u4e14 \u6ca1\u6709 \u91cd\u590d \u7684 \u5143\u7d20 \uff1b \u8fd9 \u4e24\u4e2a \u5e8f\u5217 \u7684 \u957f\u5ea6 \u4e0d \u8d85\u8fc7   \\ ( 1000 \\ )   \u4e14 \u5b58\u50a8 \u7684 \u5143\u7d20 \u90fd \u662f \u6574\u6570 \uff0c \u8303\u56f4 \u5728   \\ ( 0   \\ sim   1000 \\ )   \u5b50\u5185 \u3002   \u8bf7 \u4f60 \u5224\u65ad \u5e8f\u5217   b   \u662f\u5426 \u53ef\u4ee5 \u901a\u8fc7 \u5e8f\u5217   a   \u501f\u52a9 \u6808 \u6240\u5f97 \u3002   \u6837\u4f8b \uff1a   \u8f93\u5165   a   =   1   2   3   4   5   b   =   4   5   3   2   1   \u8f93\u51fa   true   \u5148\u627e \u4e00\u4e0b \u6709 \u4ec0\u4e48 \u89c4\u5f8b \u3001 \u7279\u5f81   \u82e5 \u4e00 \u5f00\u59cb \u5c31 \u8f93\u51fa   4 \uff0c \u90a3\u4e48 \u5728 \u539f \u5e8f\u5217   a   \u4e2d \uff0c \u6bd4   4   \u66f4 \u524d\u9762 \u7684 \u5143\u7d20   1   2   3   \u4e00\u5b9a \u8fd8\u4f1a \u6ede\u7559 \u5728 \u6808 \u4e2d   \u4e0b \u4e00\u6b21 \u8f93\u51fa \u65f6 \uff0c \u8981\u4e48 \u5c31 \u8f93\u51fa \u6bd4   4   \u66f4\u540e \u7684 \u5143\u7d20 \uff0c \u8981\u4e48 \u5c31 \u8f93\u51fa \u6b64\u65f6 \u7684 \u6808\u9876 \u5143\u7d20   3 .   \u5982\u679c \u4e0b\u6b21 \u8f93\u51fa   5   \uff0c \u90a3\u4e48 \u6bd4   5   \u66f4\u524d \u7684 \uff0c \u8fd8 \u6ca1\u6709 \u8f93\u51fa \u7684 \u5143\u7d20 \u80af\u5b9a \u8fd8\u4f1a \u6ede\u7559 \u5728 \u6808 \u4e2d \uff0c \u6211\u4eec \u53ef\u4ee5 \u7528 \u9012\u5f52 \u601d\u8def \u6765 \u6c42\u89e3 \u6b64\u9898 \u3002   \u627e \u89c4\u5f8b \u3001 \u627e \u7279\u5f81 \u7684 \u601d\u8def   vector   <   int   >   a   ,   b   ,   c   ;   / /   3   \u72b6\u6001 \uff1a 0   \u672a \u8bbf\u95ee \uff0c 1   \u6ede\u7559 \u6808\u4e2d \uff0c 2   \u5df2 \u8f93\u51fa   int   cur   ,   n   ;   stack   <   int   >   st   ;   bool   isstack   (   int   pos   )   {   if   (   pos   = =   n   )   return   true   ;   if   (   c   [   b   [   pos   ] ]   = =   1   )   {   if   (   st   .   size   ( )   &&   st   .   top   ( )   = =   b   [   pos   ] )   {   c   [   b   [   pos   ] ]   =   2   ;   st   .   pop   ( ) ;   return   isstack   (   pos   +   1   ) ;   }   else   return   false   ;   }   else   {   while   (   cur   <   n   &&   a   [   cur   ]   ! =   b   [   pos   ] )   {   if   (   c   [   a   [   cur   ] ]   = =   0   )   st   .   push   (   a   [   cur   ] ) ,   c   [   a   [   cur   ] ]   =   1   ;   cur   ++   ;   }   if   (   cur   > =   n   )   return   false   ;   c   [   b   [   pos   ] ]   =   2   ;   return   isstack   (   pos   +   1   ) ;   }   }   \u6808 \u6a21\u62df   \u5148 \u5c06 \u5e8f\u5217   a   \u4e2d \u7684 \u5143\u7d20 \u90fd \u4f9d\u6b21 \u653e\u5165 \u6808\u4e2d   \u5728 \u653e \u7684 \u8fc7\u7a0b \u4e2d\u8981 \u4e0d\u65ad \u5730 \u5c06 \u6808\u9876 \u5143\u7d20 \u4e0e \u5e8f\u5217   b   \u4e2d \u7684 \u5f00\u59cb \u5143\u7d20 \u6bd4\u8f83 \uff0c \u5982\u679c \u6808\u9876 \u5143\u7d20 \u4e0e   b   \u7684 \u5f00\u59cb \u5143\u7d20 \u76f8\u540c \uff0c \u5c31 \u629b\u5f03 \u6808\u9876 \u5143\u7d20 \u548c   b   \u7684 \u5f00\u59cb \u5143\u7d20 \uff0c \u76f4\u5230 \u6808\u4e3a \u7a7a \u6216 \u4e0d \u51fa\u73b0 \u6808\u9876 \u5143\u7d20 \u4e0e \u5f00\u59cb \u5143\u7d20 \u76f8\u540c \u4e3a\u6b62 \u3002   \u5982\u679c \u6700\u7ec8   a   \u8bfb\u5b8c \u4e86 \uff0c \u4f46\u662f   b   \u5374 \u8fd8\u6709 \u5269 \uff0c \u8bf4\u660e \u4e0d\u662f \u6808 \u5e8f\u5217 \uff0c \u6b64\u65f6 \u7684 \u6808 \u4e5f \u4e0d \u4e3a \u7a7a \u3002   \u8be5 \u601d\u8def \u672c\u8d28 \u4e0a \u662f \u627e \u89c4\u5f8b \u3001 \u627e \u7279\u5f81 \u7684 \u601d\u8def \u7684 \u7b80\u5316 \u3002   \u6808 \u6a21\u62df \u601d\u8def   vector   <   int   >   a   ,   b   ;   stack   <   int   >   st   ;   int   n   ;   bool   isstack   ( )   {   int   i   =   0   ,   j   =   0   ;   for   ( ;   i   <   n   &&   j   <   n   ;   i   ++   )   {   st   .   push   (   a   [   i   ] ) ;   while   (   j   <   n   &&   st   .   size   ( )   &&   st   .   top   ( )   = =   b   [   j   ] )   {   st   .   pop   ( ) ;   j   ++   ;   }   }   return   st   .   size   ( )   = =   0   ;   }","title":"\u9a8c\u8bc1 \u6808 \u5e8f\u5217"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/","text":"\u6811\u72b6 \u6570\u7ec4   \u6811\u72b6 \u6570\u7ec4 \u53ef\u4ee5 \u5f88\u5feb \u7684 \u6c42\u51fa \u533a\u95f4 \u548c \u3002   \u6811\u72b6 \u6570\u7ec4 \u4e3e\u4f8b \u56fe   ci   \u7ba1\u7406 \u7684 \u533a\u95f4 \u4e3a :   [ i   -   lowbit ( i )   +   1 ,   i ]   \u7ba1\u7406 \u7684 \u957f\u5ea6 \u4e3a \uff1a lowbit ( i )   ci   \u7684 \u7236 \u8282\u70b9   cp :   p   =   i   +   lowbit ( i )   ci   \u7ba1\u7406 \u7684 \u533a\u95f4 \u662f   [ i   -   lowbit ( i )   +   1 ,   i ] \uff0c \u90a3\u4e48   \u4ee4   j   =   i   -   lowbit ( i )   \u5219   cj   =   [ j   -   lowbit ( j )   +   1 ,   j   =   i   -   lowbit ( i ) ]   \u5c31\u662f   ci   \u5de6 \u76f8\u90bb \u7684 \u533a\u95f4 \u3002   \u6539\u53d8 \u67d0\u4e2a \u8282\u70b9 \u7684 \u503c\u65f6 \uff0c \u8981 \u66f4\u65b0 \u8be5 \u8282\u70b9 \u7684 \u6240\u6709 \u4e0a\u7ea7 \u3002   lowbit   \u83b7\u53d6   x   \u7684 \u6700 \u53f3\u8fb9 \u7684   1   / /   101000   / /   010111   +   1   =   011000   / /   101000   &   011000   =   001000   =   8   int   lowbit   (   int   x   )   {   return   (   ~   x   +   1   )   &   x   ;   }   init   \u9020\u6811   \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \uff1a   \\ ( O ( n ) \\ )   \u65b9\u6cd5 \u4e00 \uff1a   \u5047\u8bbe   \\ ( a [ N ] \\ )   \u662f \u6570\u636e \u6570\u7ec4 \uff0c \u53c2\u8003 \u6811 \u7684 \u7ed3\u6784 \uff0c \u6211\u4eec \u53d1\u73b0 \u53ef\u4ee5 \u4e0d\u65ad \u7684 \u901a\u8fc7 \u5b50 \u8282\u70b9 \u7684 \u503c \u7d2f\u52a0 \u786e\u5b9a \u7236 \u8282\u70b9 \u7684 \u503c \uff1a   \u6811\u72b6 \u6570\u7ec4 \u4e3e\u4f8b \u56fe   \u5f80\u53f3 \u4ece\u5de6\u5f80\u53f3 \u626b\u63cf \uff0c \u901a\u8fc7 \u786e\u5b9a   c2 \u3001 c3 \u3001 a4   \u7684 \u503c \u63a8\u5bfc \u51fa   c4   \u7684 \u503c \u3002   void   init   ( )   {   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   c   [   i   ]   + =   a   [   i   ] ;   if   ( (   j   =   lowbit   (   i   ) )   < =   n   )   c   [   j   ]   + =   c   [   i   ] ;   }   }   \u65b9\u6cd5 \u4e8c \uff1a   \u5904\u7406 \u9884\u5904\u7406 \u51fa \u524d\u7f00 \u548c \u6570\u7ec4 \u3002   ci   \u7ba1\u7406 \u7684 \u533a\u95f4 \u662f   [   i   -   lowbit   (   i   )   +   1   ,   i   ]   ci   =   s   [   i   ]   -   s   [   i   -   lowbit   (   i   ) ]   \u4ee3\u7801 \uff1a   void   init   ( )   {   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   c   [   i   ]   =   s   [   i   ]   -   s   [   i   -   lowbit   (   i   ) ] ;   }   getsum   \u300c \u533a\u95f4 \u67e5\u8be2 \u300d \u83b7\u53d6 \u524d\u7f00 \u548c   \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \uff1a   \\ ( O ( log ( n ) ) \\ )   \u4e0d\u65ad \u6c42\u548c   ci   \u5de6\u8fb9 \u7ba1\u7406 \u7684 \u533a\u5757 \u3002   ci   \u7ba1\u7406 \u7684 \u533a\u95f4 \u662f   [   i   -   lowbit   (   i   )   +   1   ,   i   ]   \uff0c   \u90a3\u4e48   \u4ee4   j   =   i   -   lowbit   (   i   )   \u5219   cj   =   [   j   -   lowbit   (   j   )   +   1   ,   j   =   i   -   lowbit   (   i   ) ]   \u5c31\u662f   ci   \u5de6 \u76f8\u90bb \u7684 \u533a\u95f4   \u3002   \u4ee3\u7801 \uff1a   long   long   getsum   (   int   pos   )   {   long   long   ans   =   0   ;   while   (   pos   > =   1   )   {   ans   + =   c   [   pos   ] ;   pos   =   pos   -   lowbit   (   pos   ) ;   }   return   ans   ;   }   add   \u300c \u5355\u70b9 \u66f4\u65b0 \u300d \u7ed9 \u67d0 \u6570\u636e \u589e\u52a0 \u52a0\u503c \u589e\u52a0\u503c   \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \uff1a   \\ ( O ( log ( n ) ) \\ )   \u6539\u53d8 \u67d0\u4e2a \u8282\u70b9 \u7684 \u503c\u65f6 \uff0c \u8981 \u66f4\u65b0 \u8be5 \u8282\u70b9 \u7684 \u6240\u6709 \u4e0a\u7ea7 \u3002   ci   \u7684 \u7236 \u8282\u70b9   cp   :   p   =   i   +   lowbit   (   i   )   \u4ee3\u7801 \uff1a   void   add   (   int   pos   ,   int   x   )   {   while   (   pos   < =   n   )   {   c   [   pos   ]   =   c   [   pos   ]   +   x   ;   pos   =   pos   +   lowbit   (   pos   ) ;   }   }   \u300c \u533a\u95f4 \u66f4\u65b0 \u3001 \u533a\u95f4 \u67e5\u8be2 \u3001 \u5355\u70b9 \u67e5\u8be2 \u3001 \u5355\u70b9 \u66f4\u65b0 \u300d   diff   \u5dee\u5206 \u6570\u7ec4   \u82e5 \u6570\u636e \u6570\u7ec4   \\ ( a [ N ] \\ )   \u7684 \u5dee\u5206 \u6570\u7ec4 \u4e3a   \\ ( b [ N ] \\ )   \uff0c \u5148 \u6765\u770b \u4e00\u4e0b \u5982\u4f55 \u6c42 \u5dee\u5206 \u6570\u7ec4   \\ ( b \\ )   :   b [ i ]   =   a [ i ]   -   a [ i   -   1 ]   / /   \u8ba1\u7b97   a   \u7684 \u5dee\u5206 \u6570\u7ec4   b   void   diff   ( )   {   a   [   0   ]   =   0   ;   / /   \u4e0d \u5141\u8bb8   a [ 0 ]   \u5b58\u50a8 \u4efb\u4f55 \u6570\u7ec4 \uff0c \u6570\u636e \u57df \u5f97 \u4ece   [ 1   ~   N - 1 ]   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   b   [   i   ]   =   a   [   i   ]   -   a   [   i   -   1   ] ;   }   \u5219 \u6709 \uff1a   a   [   1   ]   =   b   [   1   ]   a   [   2   ]   =   b   [   2   ]   +   b   [   1   ]   a   [   3   ]   =   b   [   3   ]   +   b   [   2   ]   +   b   [   1   ]   \u00b7 \u00b7 \u00b7   \u00b7 \u00b7 \u00b7   \u00b7 \u00b7 \u00b7   \u00b7 \u00b7 \u00b7   a   [   n   ]   =   b   [   n   ]   +   b   [   n   -   1   ]   +   \u00b7 \u00b7 \u00b7   \u00b7 \u00b7 \u00b7   +   b   [   3   ]   +   b   [   2   ]   +   b   [   1   ]   \u6240\u4ee5 \u6709 \uff1a   \\ ( a [ i ]   =   \\ sum _ { k = 1 } ^ { i } b [ k ] \\ )   \uff0c \u524d\u7f00 \u548c   \\ ( s [ i ]   =   \\ sum _ { j = 1 } ^ { i } \\ sum _ { k = 1 } ^ { j } b [ i ] \\ )   \uff0c \u5373 \uff1a   s   [   i   ]   =   a   [   i   ]   +   a   [   i   -   1   ]   +   \u00b7 \u00b7 \u00b7   +   a   [   1   ]   =   b   [   1   ]   +   b   [   2   ]   +   b   [   3   ]   +   \u00b7 \u00b7 \u00b7   +   b   [   i   -   1   ]   +   b   [   i   ]   +   b   [   1   ]   +   b   [   2   ]   +   b   [   3   ]   +   \u00b7 \u00b7 \u00b7   +   b   [   i   -   1   ]   +   \u00b7 \u00b7 \u00b7   \u00b7 \u00b7 \u00b7   \u00b7 \u00b7 \u00b7   \u00b7 \u00b7 \u00b7   b   [   1   ]   +   b   [   2   ]   +   b   [   3   ]   +   b   [   1   ]   +   b   [   2   ]   +   b   [   1   ]   =   (   i   +   1   )   *   (   b   [   1   ]   +   b   [   2   ]   +   b   [   3   ]   +   \u00b7 \u00b7 \u00b7   +   b   [   i   ] )   -   (   1   *   b   [   1   ]   +   2   *   b   [   2   ]   +   \u00b7 \u00b7 \u00b7   +   i   *   b   [   i   ] )   \u7efc\u4e0a \uff1a   \\ [   \\ begin { aligned }   a [ i ]   =   \\ sum _ { j   =   1 } ^ { i }   b [ i ] ,   \\   \\   \\   s [ i ]   =   ( i   +   1 )   *   \\ sum _ { j   =   1 } ^ { i }   b [ j ]   -   \\ sum _ { j   =   1 } ^ { i }   ( j   *   b [ j ] )   \\ end { aligned }   \\ ]   \u56e0\u6b64 \uff0c \u6211\u4eec \u53ea \u9700\u8981 \u7ef4\u62a4 \u4e24\u79cd \u6811\u72b6 \u6570\u7ec4   \\ ( \\ sum   b [ i ] \\ )   \u548c   \\ ( \\ sum   i   *   b [ i ] \\ )   \u5c31 \u53ef\u4ee5 \u6c42 \u51fa \u6570\u636e   \\ ( a [ i ] \\ )   \u548c \u524d\u7f00 \u548c   \\ ( s [ i ] \\ )   \uff1a   \\ [   a [ i ]   =   \\ sum _ { j   =   1 } ^ { i }   b [ i ] ,   \\   \\   \\   s [ i ]   =   ( i   +   1 )   *   a [ i ]   -   \\ sum _ { j   =   1 } ^ { i }   ( j   *   b [ j ] )   \\ ]   \u5dee\u5206 \u6570\u7ec4 \u53ef\u4ee5 \u5b9e\u73b0 \u533a\u95f4 \u52a0 \uff0c \u4f8b\u5982 \u7531\u4e8e   \\ ( a [ i ]   =   \\ sum _ { k   =   1 } ^ { i } b [ i ] \\ )   \uff0c \u82e5 \u6211\u4eec \u4f7f   \\ ( b [ 1 ]   =   b [ 1 ]   +   x \\ )   \uff0c \u5219 \u6240\u6709 \u6bd4   \\ ( 1 \\ )   \u5927 \u6216 \u7b49 \u7684   \\ ( a [ i ]   =   x   +   \\ sum _ { k   =   1 } ^ { i } b [ i ] \\ )   \u5b9e\u73b0 \u4e86 \u533a\u95f4 \u90fd \u52a0\u4e0a \u4e86   \\ ( x \\ )   \uff0c \u56e0\u6b64 \u5982\u679c \u8981 \u5b9e\u73b0 \u533a\u95f4   \\ ( [ l ,   r ] \\ )   \u52a0 \uff0c \u5219 \u53ea \u9700 \u8ba9 \u5dee\u5206 \u6570\u7ec4   \\ ( b [ l ]   =   b [ l ]   +   x \uff0c b [ r   +   1 ]   =   b [ r   +   1 ]   -   x \\ )   \u5c31 \u80fd \u5b9e\u73b0 \u533a\u95f4 \u52a0 \u3002   \u5bf9 \u5355\u70b9   \\ ( pos \\ )   \u52a0\u4e0a   \\ ( x \\ )   :   cb   [   pos   ]   + =   x   ,   \u5e76 \u5bf9   pos   \u7684 \u6240\u6709 \u4e0a\u7ea7 \u90fd \u52a0\u4e0a   x   cbi   [   pos   ]   =   (   cbi   [   pos   ]   /   pos   +   x   )   *   pos   =   cbi   [   pos   ]   +   x   *   pos   + =   x   *   pos   ,   \u5e76 \u5bf9   pos   \u7684 \u6240\u6709 \u4e0a\u7ea7 \u90fd \u52a0\u4e0a   x   *   pos   \u5bf9 \u6570\u7ec4   b [ i ] \u3001 i   *   b [ i ]   \u7ef4\u62a4 \u6811\u72b6 \u6570\u7ec4 \uff1a   \u5b9a\u4e49 \u90e8\u5206   a [ N ]   \u662f \u6570\u636e \u6570\u7ec4   b [ N ]   \u662f   \\ ( a \\ )   \u7684 \u5dee\u5206 \u6570\u7ec4   s [ N ]   \u662f   \\ ( a \\ )   \u7684 \u524d\u7f00 \u548c \u6570\u7ec4   n   \u662f \u6570\u636e \u957f\u5ea6   cb [ N ]   \u662f   \\ ( b \\ )   \u7684 \u6811\u72b6 \u6570\u7ec4   cbi [ N ]   \u662f   \\ ( i   *   b \\ )   \u7684 \u6811\u72b6 \u6570\u7ec4   read   \u662f \u5feb \u8bfb   diff   \u662f \u6c42   \\ ( a \\ )   \u7684 \u5dee\u5206 \u6570\u7ec4   const   int   N   =   int   (   1e6   +   10   ) ;   long   long   a   [   N   ] ,   b   [   N   ] ,   cb   [   N   ] ,   cbi   [   N   ] ;   int   n   ;   inline   int   read   ( )   {   int   x   =   0   ,   f   =   1   ;   char   c   =   getchar   ( ) ;   while   (   c   <   ' 0 '   | |   c   >   ' 9 '   )   {   if   (   c   = =   ' - '   )   f   =   - 1   ;   c   =   getchar   ( ) ;   }   while   (   c   > =   ' 0 '   &&   c   < =   ' 9 '   )   {   x   =   x   *   10   +   c   -   ' 0 '   ;   c   =   getchar   ( ) ;   }   return   x   *   f   ;   }   int   lowbit   (   int   x   )   {   return   (   ~   x   +   1   )   &   x   ;   }   / /   \u8ba1\u7b97   a   \u7684 \u5dee\u5206 \u6570\u7ec4   b   void   diff   ( )   {   a   [   0   ]   =   0   ;   for   (   int   i   =   1   ;   i   <   n   ;   i   ++   )   b   [   i   ]   =   a   [   i   ]   -   a   [   i   -   1   ] ;   }   init   \u5efa\u6811   \u4f7f\u7528 \u6bd4\u8f83 \u4e0d\u597d \u60f3 \u7684 \u300c \u65b9\u6cd5 \u4e00 \u300d \u5b9e\u73b0 \uff1a   \u901a\u8fc7 \u524d\u9762 \u4e0d\u65ad \u6c42\u51fa \u7684 \u5b50 \u8282\u70b9 \u7d2f\u52a0 \u5230 \u540e\u9762 \u7684 \u8282\u70b9 \uff0c \u4ece\u800c \u9010\u6e10 \u63a8\u5bfc \u51fa \u540e\u9762 \u7684 \u8282\u70b9 \u3002   void   init   ( )   {   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   cb   [   i   ]   + =   b   [   i   ] ;   cbi   [   i   ]   + =   b   [   i   ]   *   i   ;   int   j   =   i   +   lowbit   (   i   ) ;   / /   i   \u7684 \u4e0a\u7ea7   if   (   j   < =   n   )   cb   [   j   ]   + =   cb   [   i   ] ,   cbi   [   j   ]   + =   cbi   [   i   ] ;   }   }   add   \u533a\u95f4 \u52a0   \u5982\u679c \u8981 \u5bf9 \u533a\u95f4   \\ ( [ l ,   r ] \\ )   \u540c\u65f6 \u52a0\u4e0a \u4e00\u4e2a \u6570   \\ ( x \\ )   \uff0c \u8981 \u5bf9 \u4e24\u4e2a \u70b9   \\ ( l \\ )   \u548c   \\ ( r   +   1 \\ )   \u5355\u70b9 \u66f4\u65b0 \uff0c \u8fd8\u8981 \u5bf9 \u6240\u6709 \u7684 \u4e0a\u7ea7 \u589e\u52a0 \u76f8\u540c \u7684 \u6570\u503c \uff1a   cb   [   l   ]   + =   x   \u3001   cb   [   r   +   1   ]   - =   x   cbi   [   l   ]   =   (   cbi   [   l   ]   /   l   +   x   )   *   l   =   (   cbi   [   l   ]   +   x   *   l   )   cbi   [   r   +   1   ]   - =   x   *   (   r   +   1   )   \u4f46 \u4e3a\u4e86 \u7b80\u5316 \u4ee3\u7801 \u6211\u4eec \u4e00\u822c \u5148 \u5b9e\u73b0 \u5355\u70b9 \u66f4\u65b0 \u7684 \u533a\u5757 \uff1a   / /   \u5355\u70b9 \u589e\u503c   void   add   (   int   pos   ,   long   long   x   )   {   / /   \u5bf9   cbi   \u7684 \u6240\u6709 \u4e0a\u7ea7 \u90fd \u52a0\u4e0a \u540c\u4e00 \u4e00\u4e2a \u540c\u4e00\u4e2a \u503c \uff0c pos   \u5904 \u7684 \u589e\u91cf   long   long   v   =   pos   *   x   ;   while   (   pos   < =   n   )   {   cb   [   pos   ]   + =   x   ;   cbi   [   pos   ]   + =   v   ;   pos   + =   lowbit   (   pos   ) ;   }   }   \u501f\u52a9 \u5dee\u5206 \u6811\u72b6 \u6570\u7ec4 \u7684 \u5355\u70b9 \u66f4\u65b0 \uff0c \u5b9e\u73b0 \u533a\u95f4 \u66f4\u65b0 \uff1a   / /   \u533a\u95f4 \u589e\u503c   void   add   (   int   l   ,   int   r   ,   long   long   x   )   {   add   (   l   ,   x   ) ;   add   (   r   +   1   ,   -   x   ) ;   }   getdata   \u5355\u70b9 \u6c42\u503c   \\ [   a [ i ]   =   \\ sum _ { j   =   1 } ^ { i }   b [ i ]   \\ ]   / /   \u5355\u70b9 \u67e5\u8be2   long   long   getdata   (   int   pos   )   {   long   long   ans   =   0   ;   while   (   pos   > =   1   )   {   ans   + =   cb   [   pos   ] ;   pos   - =   lowbit   (   pos   ) ;   }   return   ans   ;   }   getsum   \u524d\u7f00 \u548c   \\ [   s [ i ]   =   ( i   +   1 )   *   a [ i ]   -   \\ sum _ { j   =   1 } ^ { i }   ( j   *   b [ j ] )   \\ ]   \u4ee3\u7801 \u53c2\u8003 \uff1a   / /   \u524d\u7f00 \u548c   long   long   getsum   (   int   pos   )   {   long   long   ans   =   (   pos   +   1   )   *   getdata   (   pos   ) ;   while   (   pos   > =   1   )   {   ans   - =   cbi   [   pos   ] ;   pos   - =   lowbit   (   pos   ) ;   }   return   ans   ;   }   getsum   \u533a\u95f4 \u548c   / /   \u533a\u95f4 \u548c   long   long   getsum   (   int   l   ,   int   r   )   {   return   getsum   (   r   )   -   getsum   (   l   -   1   ) ;   }   \u4e00\u4e9b \u4f8b\u9898   130 . \u6811\u72b6 \u6570\u7ec4   1 \uff1a \u5355\u70b9 \u4fee\u6539 \uff0c \u533a\u95f4 \u67e5\u8be2   \u7ed9\u5b9a \u6570\u5217   \\ ( a _ 1 ,   a _ 2 ,   \\ cdots   ,   a _ n \\ )   \uff0c \u4f60 \u9700\u8981 \u4f9d\u6b21 \u8fdb\u884c   \\ ( q \\ )   \u4e2a \u64cd\u4f5c \uff1a   1   i   x   :   \u7ed9\u5b9a   \\ ( i ,   x \\ )   \uff0c \u5c06   \\ ( a _ i \\ )   \u52a0\u4e0a   \\ ( x \\ )   ;   2   l   r   :   \u7ed9\u5b9a   \\ ( l ,   r \\ )   \uff0c \u6c42   \\ ( a _ l   +   \\ cdots   +   a _ r \\ )   \u7684 \u503c \u3002   \u4ee3\u7801 \u53c2\u8003   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   const   int   N   =   int   (   1e6   +   10   ) ;   long   long   a   [   N   ] ,   c   [   N   ] ;   int   n   ;   inline   int   read   ( )   {   int   x   =   0   ,   f   =   1   ;   char   c   =   getchar   ( ) ;   while   (   c   <   ' 0 '   | |   c   >   ' 9 '   )   {   if   (   c   = =   ' - '   )   f   =   - 1   ;   c   =   getchar   ( ) ;   }   while   (   c   > =   ' 0 '   &&   c   < =   ' 9 '   )   {   x   =   x   *   10   +   c   -   ' 0 '   ;   c   =   getchar   ( ) ;   }   return   x   *   f   ;   }   int   lowbit   (   int   x   )   {   return   (   ~   x   +   1   )   &   x   ;   }   void   init   ( )   {   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   c   [   i   ]   + =   a   [   i   ] ;   int   j   =   i   +   lowbit   (   i   ) ;   / /   i   \u7684 \u4e0a\u7ea7   if   (   j   < =   n   )   c   [   j   ]   + =   c   [   i   ] ;   }   }   / /   \u5355\u70b9 \u589e\u503c \uff0c \u4e0a\u7ea7 \u66f4\u65b0   void   add   (   int   pos   ,   int   x   )   {   while   (   pos   < =   n   )   {   c   [   pos   ]   + =   x   ;   pos   + =   lowbit   (   pos   ) ;   }   }   / /   \u524d\u7f00 \u548c   long   long   getsum   (   int   pos   )   {   long   long   ans   =   0   ;   while   (   pos   > =   1   )   {   ans   + =   c   [   pos   ] ;   pos   - =   lowbit   (   pos   ) ;   / /   pos   \u7684 \u5de6\u8fb9 \u90bb\u63a5 \u533a\u95f4   }   return   ans   ;   }   / /   \u533a\u95f4 \u548c   long   long   getsum   (   int   l   ,   int   r   )   {   return   getsum   (   r   )   -   getsum   (   l   -   1   ) ;   }   void   solve   (   void   )   {   int   m   ;   n   =   read   ( ) ;   m   =   read   ( ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   a   [   i   ]   =   read   ( ) ;   init   ( ) ;   while   (   m   --   )   {   int   a   ,   b   ,   c   ;   a   =   read   ( ) ;   b   =   read   ( ) ;   c   =   read   ( ) ;   if   (   a   = =   1   )   add   (   b   ,   c   ) ;   else   printf   (   \" % lld   \\ n   \"   ,   getsum   (   b   ,   c   ) ) ;   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   # 131 .   \u6811\u72b6 \u6570\u7ec4   2   \uff1a \u533a\u95f4 \u4fee\u6539 \uff0c \u5355\u70b9 \u67e5\u8be2   \u7ed9\u5b9a \u6570\u5217   \\ ( a _ 1 ,   a _ 2 ,   \\ cdots   ,   a _ n \\ )   \uff0c \u4f60 \u9700\u8981 \u4f9d\u6b21 \u8fdb\u884c   \\ ( q \\ )   \u4e2a \u64cd\u4f5c \uff1a   1   l   r   x   :   \u7ed9\u5b9a   \\ ( l ,   r ,   x \\ )   \u5bf9\u4e8e \u6240\u6709   \\ ( i   \\ in   [ l ,   r ] \\ )   \uff0c \u5c06   \\ ( a [ i ] \\ )   \u52a0\u4e0a   \\ ( x \\ )   \u3002   2   i   :   \u7ed9\u5b9a   \\ ( i \\ )   \uff0c \u6c42   \\ ( a [ i ] \\ )   \u7684 \u503c \u3002   \u57fa\u4e8e \u5dee\u5206 \u6570\u7ec4 \u7684 \u6811\u72b6 \u6570\u7ec4   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   const   int   N   =   int   (   1e6   +   10   ) ;   long   long   a   [   N   ] ,   b   [   N   ] ,   cb   [   N   ] ,   cbi   [   N   ] ;   int   n   ;   inline   int   read   ( )   {   int   x   =   0   ,   f   =   1   ;   char   c   =   getchar   ( ) ;   while   (   c   <   ' 0 '   | |   c   >   ' 9 '   )   {   if   (   c   = =   ' - '   )   f   =   - 1   ;   c   =   getchar   ( ) ;   }   while   (   c   > =   ' 0 '   &&   c   < =   ' 9 '   )   {   x   =   x   *   10   +   c   -   ' 0 '   ;   c   =   getchar   ( ) ;   }   return   x   *   f   ;   }   int   lowbit   (   int   x   )   {   return   (   ~   x   +   1   )   &   x   ;   }   void   init   ( )   {   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   cb   [   i   ]   + =   b   [   i   ] ;   cbi   [   i   ]   + =   b   [   i   ]   *   i   ;   int   j   =   i   +   lowbit   (   i   ) ;   if   (   j   < =   n   )   cb   [   j   ]   + =   cb   [   i   ] ,   cbi   [   j   ]   + =   cbi   [   i   ] ;   }   }   / /   \u5355\u70b9 \u589e\u503c   void   add   (   int   pos   ,   long   long   x   )   {   long   long   v   =   pos   *   x   ;   while   (   pos   < =   n   )   {   cb   [   pos   ]   + =   x   ;   cbi   [   pos   ]   + =   v   ;   pos   + =   lowbit   (   pos   ) ;   }   }   / /   \u533a\u95f4 \u589e\u503c   void   add   (   int   l   ,   int   r   ,   long   long   x   )   {   add   (   l   ,   x   ) ;   add   (   r   +   1   ,   -   x   ) ;   }   / /   \u5355\u70b9 \u67e5\u8be2   long   long   getdata   (   int   pos   )   {   long   long   ans   =   0   ;   while   (   pos   > =   1   )   {   ans   + =   cb   [   pos   ] ;   pos   - =   lowbit   (   pos   ) ;   }   return   ans   ;   }   / /   \u524d\u7f00 \u548c   long   long   getsum   (   int   pos   )   {   long   long   ans   =   (   pos   +   1   )   *   getdata   (   pos   ) ;   while   (   pos   > =   1   )   {   ans   - =   cbi   [   pos   ] ;   pos   - =   lowbit   (   pos   ) ;   }   return   ans   ;   }   / /   \u533a\u95f4 \u548c   long   long   getsum   (   int   l   ,   int   r   )   {   return   getsum   (   r   )   -   getsum   (   l   -   1   ) ;   }   void   solve   (   void   )   {   int   m   ;   n   =   read   ( ) ,   m   =   read   ( ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   a   [   i   ]   =   read   ( ) ,   b   [   i   ]   =   a   [   i   ]   -   a   [   i   -   1   ] ;   init   ( ) ;   while   (   m   --   )   {   int   t   =   read   ( ) ;   if   (   t   = =   1   )   {   int   l   ,   r   ,   x   ;   l   =   read   ( ) ,   r   =   read   ( ) ,   x   =   read   ( ) ;   add   (   l   ,   r   ,   x   ) ;   }   else   {   int   a   =   read   ( ) ;   printf   (   \" % lld   \\ n   \"   ,   getdata   (   a   ) ) ;   }   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   # 132 .   \u6811\u72b6 \u6570\u7ec4   3   \uff1a \u533a\u95f4 \u4fee\u6539 \uff0c \u533a\u95f4 \u67e5\u8be2   \u7ed9\u5b9a \u6570\u5217   \\ ( a _ 1 ,   a _ 2 ,   \\ cdots   ,   a _ n \\ )   \uff0c \u4f60 \u9700\u8981 \u4f9d\u6b21 \u8fdb\u884c   \\ ( q \\ )   \u4e2a \u64cd\u4f5c \uff1a   1   l   r   x   :   \u7ed9\u5b9a   \\ ( l ,   r ,   x \\ )   \u5bf9\u4e8e \u6240\u6709   \\ ( i   \\ in   [ l ,   r ] \\ )   \uff0c \u5c06   \\ ( a [ i ] \\ )   \u52a0\u4e0a   \\ ( x \\ )   \u3002   2   l   r   :   \u7ed9\u5b9a   \\ ( l ,   r \\ )   \uff0c \u6c42   \\ ( a _ l   +   \\ cdots   +   a _ r \\ )   \u7684 \u503c \u3002   \u57fa\u4e8e \u5dee\u5206 \u6570\u7ec4 \u7684 \u6811\u72b6 \u6570\u7ec4   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   const   int   N   =   int   (   1e6   +   10   ) ;   long   long   a   [   N   ] ,   b   [   N   ] ,   cb   [   N   ] ,   cbi   [   N   ] ;   int   n   ;   inline   int   read   ( )   {   int   x   =   0   ,   f   =   1   ;   char   c   =   getchar   ( ) ;   while   (   c   <   ' 0 '   | |   c   >   ' 9 '   )   {   if   (   c   = =   ' - '   )   f   =   - 1   ;   c   =   getchar   ( ) ;   }   while   (   c   > =   ' 0 '   &&   c   < =   ' 9 '   )   {   x   =   x   *   10   +   c   -   ' 0 '   ;   c   =   getchar   ( ) ;   }   return   x   *   f   ;   }   int   lowbit   (   int   x   )   {   return   (   ~   x   +   1   )   &   x   ;   }   void   init   ( )   {   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   cb   [   i   ]   + =   b   [   i   ] ;   cbi   [   i   ]   + =   b   [   i   ]   *   i   ;   int   j   =   i   +   lowbit   (   i   ) ;   if   (   j   < =   n   )   cb   [   j   ]   + =   cb   [   i   ] ,   cbi   [   j   ]   + =   cbi   [   i   ] ;   }   }   / /   \u5355\u70b9 \u589e\u503c   void   add   (   int   pos   ,   long   long   x   )   {   long   long   v   =   pos   *   x   ;   while   (   pos   < =   n   )   {   cb   [   pos   ]   + =   x   ;   cbi   [   pos   ]   + =   v   ;   pos   + =   lowbit   (   pos   ) ;   }   }   / /   \u533a\u95f4 \u589e\u503c   void   add   (   int   l   ,   int   r   ,   long   long   x   )   {   add   (   l   ,   x   ) ;   add   (   r   +   1   ,   -   x   ) ;   }   / /   \u5355\u70b9 \u67e5\u8be2   long   long   getdata   (   int   pos   )   {   long   long   ans   =   0   ;   while   (   pos   > =   1   )   {   ans   + =   cb   [   pos   ] ;   pos   - =   lowbit   (   pos   ) ;   }   return   ans   ;   }   / /   \u524d\u7f00 \u548c   long   long   getsum   (   int   pos   )   {   long   long   ans   =   (   pos   +   1   )   *   getdata   (   pos   ) ;   while   (   pos   > =   1   )   {   ans   - =   cbi   [   pos   ] ;   pos   - =   lowbit   (   pos   ) ;   }   return   ans   ;   }   / /   \u533a\u95f4 \u548c   long   long   getsum   (   int   l   ,   int   r   )   {   return   getsum   (   r   )   -   getsum   (   l   -   1   ) ;   }   void   solve   (   void   )   {   int   m   ;   n   =   read   ( ) ,   m   =   read   ( ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   a   [   i   ]   =   read   ( ) ,   b   [   i   ]   =   a   [   i   ]   -   a   [   i   -   1   ] ;   init   ( ) ;   while   (   m   --   )   {   int   t   =   read   ( ) ;   if   (   t   = =   1   )   {   int   l   ,   r   ,   x   ;   l   =   read   ( ) ,   r   =   read   ( ) ,   x   =   read   ( ) ;   add   (   l   ,   r   ,   x   ) ;   }   else   {   int   l   ,   r   ;   l   =   read   ( ) ,   r   =   read   ( ) ;   printf   (   \" % lld   \\ n   \"   ,   getsum   (   l   ,   r   ) ) ;   }   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002","title":"\u6811\u72b6 \u6570\u7ec4"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#_1","text":"\u6811\u72b6 \u6570\u7ec4 \u53ef\u4ee5 \u5f88\u5feb \u7684 \u6c42\u51fa \u533a\u95f4 \u548c \u3002   \u6811\u72b6 \u6570\u7ec4 \u4e3e\u4f8b \u56fe   ci   \u7ba1\u7406 \u7684 \u533a\u95f4 \u4e3a :   [ i   -   lowbit ( i )   +   1 ,   i ]   \u7ba1\u7406 \u7684 \u957f\u5ea6 \u4e3a \uff1a lowbit ( i )   ci   \u7684 \u7236 \u8282\u70b9   cp :   p   =   i   +   lowbit ( i )   ci   \u7ba1\u7406 \u7684 \u533a\u95f4 \u662f   [ i   -   lowbit ( i )   +   1 ,   i ] \uff0c \u90a3\u4e48   \u4ee4   j   =   i   -   lowbit ( i )   \u5219   cj   =   [ j   -   lowbit ( j )   +   1 ,   j   =   i   -   lowbit ( i ) ]   \u5c31\u662f   ci   \u5de6 \u76f8\u90bb \u7684 \u533a\u95f4 \u3002   \u6539\u53d8 \u67d0\u4e2a \u8282\u70b9 \u7684 \u503c\u65f6 \uff0c \u8981 \u66f4\u65b0 \u8be5 \u8282\u70b9 \u7684 \u6240\u6709 \u4e0a\u7ea7 \u3002","title":"\u6811\u72b6 \u6570\u7ec4"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#lowbit-x-1","text":"/ /   101000   / /   010111   +   1   =   011000   / /   101000   &   011000   =   001000   =   8   int   lowbit   (   int   x   )   {   return   (   ~   x   +   1   )   &   x   ;   }","title":"lowbit   \u83b7\u53d6   x   \u7684 \u6700 \u53f3\u8fb9 \u7684   1"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#init","text":"\u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \uff1a   \\ ( O ( n ) \\ )   \u65b9\u6cd5 \u4e00 \uff1a   \u5047\u8bbe   \\ ( a [ N ] \\ )   \u662f \u6570\u636e \u6570\u7ec4 \uff0c \u53c2\u8003 \u6811 \u7684 \u7ed3\u6784 \uff0c \u6211\u4eec \u53d1\u73b0 \u53ef\u4ee5 \u4e0d\u65ad \u7684 \u901a\u8fc7 \u5b50 \u8282\u70b9 \u7684 \u503c \u7d2f\u52a0 \u786e\u5b9a \u7236 \u8282\u70b9 \u7684 \u503c \uff1a   \u6811\u72b6 \u6570\u7ec4 \u4e3e\u4f8b \u56fe   \u5f80\u53f3 \u4ece\u5de6\u5f80\u53f3 \u626b\u63cf \uff0c \u901a\u8fc7 \u786e\u5b9a   c2 \u3001 c3 \u3001 a4   \u7684 \u503c \u63a8\u5bfc \u51fa   c4   \u7684 \u503c \u3002   void   init   ( )   {   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   c   [   i   ]   + =   a   [   i   ] ;   if   ( (   j   =   lowbit   (   i   ) )   < =   n   )   c   [   j   ]   + =   c   [   i   ] ;   }   }   \u65b9\u6cd5 \u4e8c \uff1a   \u5904\u7406 \u9884\u5904\u7406 \u51fa \u524d\u7f00 \u548c \u6570\u7ec4 \u3002   ci   \u7ba1\u7406 \u7684 \u533a\u95f4 \u662f   [   i   -   lowbit   (   i   )   +   1   ,   i   ]   ci   =   s   [   i   ]   -   s   [   i   -   lowbit   (   i   ) ]   \u4ee3\u7801 \uff1a   void   init   ( )   {   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   c   [   i   ]   =   s   [   i   ]   -   s   [   i   -   lowbit   (   i   ) ] ;   }","title":"init   \u9020\u6811"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#getsum","text":"\u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \uff1a   \\ ( O ( log ( n ) ) \\ )   \u4e0d\u65ad \u6c42\u548c   ci   \u5de6\u8fb9 \u7ba1\u7406 \u7684 \u533a\u5757 \u3002   ci   \u7ba1\u7406 \u7684 \u533a\u95f4 \u662f   [   i   -   lowbit   (   i   )   +   1   ,   i   ]   \uff0c   \u90a3\u4e48   \u4ee4   j   =   i   -   lowbit   (   i   )   \u5219   cj   =   [   j   -   lowbit   (   j   )   +   1   ,   j   =   i   -   lowbit   (   i   ) ]   \u5c31\u662f   ci   \u5de6 \u76f8\u90bb \u7684 \u533a\u95f4   \u3002   \u4ee3\u7801 \uff1a   long   long   getsum   (   int   pos   )   {   long   long   ans   =   0   ;   while   (   pos   > =   1   )   {   ans   + =   c   [   pos   ] ;   pos   =   pos   -   lowbit   (   pos   ) ;   }   return   ans   ;   }","title":"getsum   \u300c \u533a\u95f4 \u67e5\u8be2 \u300d \u83b7\u53d6 \u524d\u7f00 \u548c"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#add","text":"\u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \uff1a   \\ ( O ( log ( n ) ) \\ )   \u6539\u53d8 \u67d0\u4e2a \u8282\u70b9 \u7684 \u503c\u65f6 \uff0c \u8981 \u66f4\u65b0 \u8be5 \u8282\u70b9 \u7684 \u6240\u6709 \u4e0a\u7ea7 \u3002   ci   \u7684 \u7236 \u8282\u70b9   cp   :   p   =   i   +   lowbit   (   i   )   \u4ee3\u7801 \uff1a   void   add   (   int   pos   ,   int   x   )   {   while   (   pos   < =   n   )   {   c   [   pos   ]   =   c   [   pos   ]   +   x   ;   pos   =   pos   +   lowbit   (   pos   ) ;   }   }","title":"add   \u300c \u5355\u70b9 \u66f4\u65b0 \u300d \u7ed9 \u67d0 \u6570\u636e \u589e\u52a0\u503c"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#_2","text":"","title":"\u300c \u533a\u95f4 \u66f4\u65b0 \u3001 \u533a\u95f4 \u67e5\u8be2 \u3001 \u5355\u70b9 \u67e5\u8be2 \u3001 \u5355\u70b9 \u66f4\u65b0 \u300d"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#diff","text":"\u82e5 \u6570\u636e \u6570\u7ec4   \\ ( a [ N ] \\ )   \u7684 \u5dee\u5206 \u6570\u7ec4 \u4e3a   \\ ( b [ N ] \\ )   \uff0c \u5148 \u6765\u770b \u4e00\u4e0b \u5982\u4f55 \u6c42 \u5dee\u5206 \u6570\u7ec4   \\ ( b \\ )   :   b [ i ]   =   a [ i ]   -   a [ i   -   1 ]   / /   \u8ba1\u7b97   a   \u7684 \u5dee\u5206 \u6570\u7ec4   b   void   diff   ( )   {   a   [   0   ]   =   0   ;   / /   \u4e0d \u5141\u8bb8   a [ 0 ]   \u5b58\u50a8 \u4efb\u4f55 \u6570\u7ec4 \uff0c \u6570\u636e \u57df \u5f97 \u4ece   [ 1   ~   N - 1 ]   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   b   [   i   ]   =   a   [   i   ]   -   a   [   i   -   1   ] ;   }   \u5219 \u6709 \uff1a   a   [   1   ]   =   b   [   1   ]   a   [   2   ]   =   b   [   2   ]   +   b   [   1   ]   a   [   3   ]   =   b   [   3   ]   +   b   [   2   ]   +   b   [   1   ]   \u00b7 \u00b7 \u00b7   \u00b7 \u00b7 \u00b7   \u00b7 \u00b7 \u00b7   \u00b7 \u00b7 \u00b7   a   [   n   ]   =   b   [   n   ]   +   b   [   n   -   1   ]   +   \u00b7 \u00b7 \u00b7   \u00b7 \u00b7 \u00b7   +   b   [   3   ]   +   b   [   2   ]   +   b   [   1   ]   \u6240\u4ee5 \u6709 \uff1a   \\ ( a [ i ]   =   \\ sum _ { k = 1 } ^ { i } b [ k ] \\ )   \uff0c \u524d\u7f00 \u548c   \\ ( s [ i ]   =   \\ sum _ { j = 1 } ^ { i } \\ sum _ { k = 1 } ^ { j } b [ i ] \\ )   \uff0c \u5373 \uff1a   s   [   i   ]   =   a   [   i   ]   +   a   [   i   -   1   ]   +   \u00b7 \u00b7 \u00b7   +   a   [   1   ]   =   b   [   1   ]   +   b   [   2   ]   +   b   [   3   ]   +   \u00b7 \u00b7 \u00b7   +   b   [   i   -   1   ]   +   b   [   i   ]   +   b   [   1   ]   +   b   [   2   ]   +   b   [   3   ]   +   \u00b7 \u00b7 \u00b7   +   b   [   i   -   1   ]   +   \u00b7 \u00b7 \u00b7   \u00b7 \u00b7 \u00b7   \u00b7 \u00b7 \u00b7   \u00b7 \u00b7 \u00b7   b   [   1   ]   +   b   [   2   ]   +   b   [   3   ]   +   b   [   1   ]   +   b   [   2   ]   +   b   [   1   ]   =   (   i   +   1   )   *   (   b   [   1   ]   +   b   [   2   ]   +   b   [   3   ]   +   \u00b7 \u00b7 \u00b7   +   b   [   i   ] )   -   (   1   *   b   [   1   ]   +   2   *   b   [   2   ]   +   \u00b7 \u00b7 \u00b7   +   i   *   b   [   i   ] )   \u7efc\u4e0a \uff1a   \\ [   \\ begin { aligned }   a [ i ]   =   \\ sum _ { j   =   1 } ^ { i }   b [ i ] ,   \\   \\   \\   s [ i ]   =   ( i   +   1 )   *   \\ sum _ { j   =   1 } ^ { i }   b [ j ]   -   \\ sum _ { j   =   1 } ^ { i }   ( j   *   b [ j ] )   \\ end { aligned }   \\ ]   \u56e0\u6b64 \uff0c \u6211\u4eec \u53ea \u9700\u8981 \u7ef4\u62a4 \u4e24\u79cd \u6811\u72b6 \u6570\u7ec4   \\ ( \\ sum   b [ i ] \\ )   \u548c   \\ ( \\ sum   i   *   b [ i ] \\ )   \u5c31 \u53ef\u4ee5 \u6c42 \u51fa \u6570\u636e   \\ ( a [ i ] \\ )   \u548c \u524d\u7f00 \u548c   \\ ( s [ i ] \\ )   \uff1a   \\ [   a [ i ]   =   \\ sum _ { j   =   1 } ^ { i }   b [ i ] ,   \\   \\   \\   s [ i ]   =   ( i   +   1 )   *   a [ i ]   -   \\ sum _ { j   =   1 } ^ { i }   ( j   *   b [ j ] )   \\ ]   \u5dee\u5206 \u6570\u7ec4 \u53ef\u4ee5 \u5b9e\u73b0 \u533a\u95f4 \u52a0 \uff0c \u4f8b\u5982 \u7531\u4e8e   \\ ( a [ i ]   =   \\ sum _ { k   =   1 } ^ { i } b [ i ] \\ )   \uff0c \u82e5 \u6211\u4eec \u4f7f   \\ ( b [ 1 ]   =   b [ 1 ]   +   x \\ )   \uff0c \u5219 \u6240\u6709 \u6bd4   \\ ( 1 \\ )   \u5927 \u6216 \u7b49 \u7684   \\ ( a [ i ]   =   x   +   \\ sum _ { k   =   1 } ^ { i } b [ i ] \\ )   \u5b9e\u73b0 \u4e86 \u533a\u95f4 \u90fd \u52a0\u4e0a \u4e86   \\ ( x \\ )   \uff0c \u56e0\u6b64 \u5982\u679c \u8981 \u5b9e\u73b0 \u533a\u95f4   \\ ( [ l ,   r ] \\ )   \u52a0 \uff0c \u5219 \u53ea \u9700 \u8ba9 \u5dee\u5206 \u6570\u7ec4   \\ ( b [ l ]   =   b [ l ]   +   x \uff0c b [ r   +   1 ]   =   b [ r   +   1 ]   -   x \\ )   \u5c31 \u80fd \u5b9e\u73b0 \u533a\u95f4 \u52a0 \u3002   \u5bf9 \u5355\u70b9   \\ ( pos \\ )   \u52a0\u4e0a   \\ ( x \\ )   :   cb   [   pos   ]   + =   x   ,   \u5e76 \u5bf9   pos   \u7684 \u6240\u6709 \u4e0a\u7ea7 \u90fd \u52a0\u4e0a   x   cbi   [   pos   ]   =   (   cbi   [   pos   ]   /   pos   +   x   )   *   pos   =   cbi   [   pos   ]   +   x   *   pos   + =   x   *   pos   ,   \u5e76 \u5bf9   pos   \u7684 \u6240\u6709 \u4e0a\u7ea7 \u90fd \u52a0\u4e0a   x   *   pos   \u5bf9 \u6570\u7ec4   b [ i ] \u3001 i   *   b [ i ]   \u7ef4\u62a4 \u6811\u72b6 \u6570\u7ec4 \uff1a","title":"diff   \u5dee\u5206 \u6570\u7ec4"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#_3","text":"a [ N ]   \u662f \u6570\u636e \u6570\u7ec4   b [ N ]   \u662f   \\ ( a \\ )   \u7684 \u5dee\u5206 \u6570\u7ec4   s [ N ]   \u662f   \\ ( a \\ )   \u7684 \u524d\u7f00 \u548c \u6570\u7ec4   n   \u662f \u6570\u636e \u957f\u5ea6   cb [ N ]   \u662f   \\ ( b \\ )   \u7684 \u6811\u72b6 \u6570\u7ec4   cbi [ N ]   \u662f   \\ ( i   *   b \\ )   \u7684 \u6811\u72b6 \u6570\u7ec4   read   \u662f \u5feb \u8bfb   diff   \u662f \u6c42   \\ ( a \\ )   \u7684 \u5dee\u5206 \u6570\u7ec4   const   int   N   =   int   (   1e6   +   10   ) ;   long   long   a   [   N   ] ,   b   [   N   ] ,   cb   [   N   ] ,   cbi   [   N   ] ;   int   n   ;   inline   int   read   ( )   {   int   x   =   0   ,   f   =   1   ;   char   c   =   getchar   ( ) ;   while   (   c   <   ' 0 '   | |   c   >   ' 9 '   )   {   if   (   c   = =   ' - '   )   f   =   - 1   ;   c   =   getchar   ( ) ;   }   while   (   c   > =   ' 0 '   &&   c   < =   ' 9 '   )   {   x   =   x   *   10   +   c   -   ' 0 '   ;   c   =   getchar   ( ) ;   }   return   x   *   f   ;   }   int   lowbit   (   int   x   )   {   return   (   ~   x   +   1   )   &   x   ;   }   / /   \u8ba1\u7b97   a   \u7684 \u5dee\u5206 \u6570\u7ec4   b   void   diff   ( )   {   a   [   0   ]   =   0   ;   for   (   int   i   =   1   ;   i   <   n   ;   i   ++   )   b   [   i   ]   =   a   [   i   ]   -   a   [   i   -   1   ] ;   }","title":"\u5b9a\u4e49 \u90e8\u5206"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#init_1","text":"\u4f7f\u7528 \u6bd4\u8f83 \u4e0d\u597d \u60f3 \u7684 \u300c \u65b9\u6cd5 \u4e00 \u300d \u5b9e\u73b0 \uff1a   \u901a\u8fc7 \u524d\u9762 \u4e0d\u65ad \u6c42\u51fa \u7684 \u5b50 \u8282\u70b9 \u7d2f\u52a0 \u5230 \u540e\u9762 \u7684 \u8282\u70b9 \uff0c \u4ece\u800c \u9010\u6e10 \u63a8\u5bfc \u51fa \u540e\u9762 \u7684 \u8282\u70b9 \u3002   void   init   ( )   {   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   cb   [   i   ]   + =   b   [   i   ] ;   cbi   [   i   ]   + =   b   [   i   ]   *   i   ;   int   j   =   i   +   lowbit   (   i   ) ;   / /   i   \u7684 \u4e0a\u7ea7   if   (   j   < =   n   )   cb   [   j   ]   + =   cb   [   i   ] ,   cbi   [   j   ]   + =   cbi   [   i   ] ;   }   }","title":"init   \u5efa\u6811"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#add_1","text":"\u5982\u679c \u8981 \u5bf9 \u533a\u95f4   \\ ( [ l ,   r ] \\ )   \u540c\u65f6 \u52a0\u4e0a \u4e00\u4e2a \u6570   \\ ( x \\ )   \uff0c \u8981 \u5bf9 \u4e24\u4e2a \u70b9   \\ ( l \\ )   \u548c   \\ ( r   +   1 \\ )   \u5355\u70b9 \u66f4\u65b0 \uff0c \u8fd8\u8981 \u5bf9 \u6240\u6709 \u7684 \u4e0a\u7ea7 \u589e\u52a0 \u76f8\u540c \u7684 \u6570\u503c \uff1a   cb   [   l   ]   + =   x   \u3001   cb   [   r   +   1   ]   - =   x   cbi   [   l   ]   =   (   cbi   [   l   ]   /   l   +   x   )   *   l   =   (   cbi   [   l   ]   +   x   *   l   )   cbi   [   r   +   1   ]   - =   x   *   (   r   +   1   )   \u4f46 \u4e3a\u4e86 \u7b80\u5316 \u4ee3\u7801 \u6211\u4eec \u4e00\u822c \u5148 \u5b9e\u73b0 \u5355\u70b9 \u66f4\u65b0 \u7684 \u533a\u5757 \uff1a   / /   \u5355\u70b9 \u589e\u503c   void   add   (   int   pos   ,   long   long   x   )   {   / /   \u5bf9   cbi   \u7684 \u6240\u6709 \u4e0a\u7ea7 \u90fd \u52a0\u4e0a \u540c\u4e00 \u4e00\u4e2a \u540c\u4e00\u4e2a \u503c \uff0c pos   \u5904 \u7684 \u589e\u91cf   long   long   v   =   pos   *   x   ;   while   (   pos   < =   n   )   {   cb   [   pos   ]   + =   x   ;   cbi   [   pos   ]   + =   v   ;   pos   + =   lowbit   (   pos   ) ;   }   }   \u501f\u52a9 \u5dee\u5206 \u6811\u72b6 \u6570\u7ec4 \u7684 \u5355\u70b9 \u66f4\u65b0 \uff0c \u5b9e\u73b0 \u533a\u95f4 \u66f4\u65b0 \uff1a   / /   \u533a\u95f4 \u589e\u503c   void   add   (   int   l   ,   int   r   ,   long   long   x   )   {   add   (   l   ,   x   ) ;   add   (   r   +   1   ,   -   x   ) ;   }","title":"add   \u533a\u95f4 \u52a0"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#getdata","text":"\\ [   a [ i ]   =   \\ sum _ { j   =   1 } ^ { i }   b [ i ]   \\ ]   / /   \u5355\u70b9 \u67e5\u8be2   long   long   getdata   (   int   pos   )   {   long   long   ans   =   0   ;   while   (   pos   > =   1   )   {   ans   + =   cb   [   pos   ] ;   pos   - =   lowbit   (   pos   ) ;   }   return   ans   ;   }","title":"getdata   \u5355\u70b9 \u6c42\u503c"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#getsum_1","text":"\\ [   s [ i ]   =   ( i   +   1 )   *   a [ i ]   -   \\ sum _ { j   =   1 } ^ { i }   ( j   *   b [ j ] )   \\ ]   \u4ee3\u7801 \u53c2\u8003 \uff1a   / /   \u524d\u7f00 \u548c   long   long   getsum   (   int   pos   )   {   long   long   ans   =   (   pos   +   1   )   *   getdata   (   pos   ) ;   while   (   pos   > =   1   )   {   ans   - =   cbi   [   pos   ] ;   pos   - =   lowbit   (   pos   ) ;   }   return   ans   ;   }","title":"getsum   \u524d\u7f00 \u548c"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#getsum_2","text":"/ /   \u533a\u95f4 \u548c   long   long   getsum   (   int   l   ,   int   r   )   {   return   getsum   (   r   )   -   getsum   (   l   -   1   ) ;   }","title":"getsum   \u533a\u95f4 \u548c"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/#_4","text":"130 . \u6811\u72b6 \u6570\u7ec4   1 \uff1a \u5355\u70b9 \u4fee\u6539 \uff0c \u533a\u95f4 \u67e5\u8be2   \u7ed9\u5b9a \u6570\u5217   \\ ( a _ 1 ,   a _ 2 ,   \\ cdots   ,   a _ n \\ )   \uff0c \u4f60 \u9700\u8981 \u4f9d\u6b21 \u8fdb\u884c   \\ ( q \\ )   \u4e2a \u64cd\u4f5c \uff1a   1   i   x   :   \u7ed9\u5b9a   \\ ( i ,   x \\ )   \uff0c \u5c06   \\ ( a _ i \\ )   \u52a0\u4e0a   \\ ( x \\ )   ;   2   l   r   :   \u7ed9\u5b9a   \\ ( l ,   r \\ )   \uff0c \u6c42   \\ ( a _ l   +   \\ cdots   +   a _ r \\ )   \u7684 \u503c \u3002   \u4ee3\u7801 \u53c2\u8003   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   const   int   N   =   int   (   1e6   +   10   ) ;   long   long   a   [   N   ] ,   c   [   N   ] ;   int   n   ;   inline   int   read   ( )   {   int   x   =   0   ,   f   =   1   ;   char   c   =   getchar   ( ) ;   while   (   c   <   ' 0 '   | |   c   >   ' 9 '   )   {   if   (   c   = =   ' - '   )   f   =   - 1   ;   c   =   getchar   ( ) ;   }   while   (   c   > =   ' 0 '   &&   c   < =   ' 9 '   )   {   x   =   x   *   10   +   c   -   ' 0 '   ;   c   =   getchar   ( ) ;   }   return   x   *   f   ;   }   int   lowbit   (   int   x   )   {   return   (   ~   x   +   1   )   &   x   ;   }   void   init   ( )   {   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   c   [   i   ]   + =   a   [   i   ] ;   int   j   =   i   +   lowbit   (   i   ) ;   / /   i   \u7684 \u4e0a\u7ea7   if   (   j   < =   n   )   c   [   j   ]   + =   c   [   i   ] ;   }   }   / /   \u5355\u70b9 \u589e\u503c \uff0c \u4e0a\u7ea7 \u66f4\u65b0   void   add   (   int   pos   ,   int   x   )   {   while   (   pos   < =   n   )   {   c   [   pos   ]   + =   x   ;   pos   + =   lowbit   (   pos   ) ;   }   }   / /   \u524d\u7f00 \u548c   long   long   getsum   (   int   pos   )   {   long   long   ans   =   0   ;   while   (   pos   > =   1   )   {   ans   + =   c   [   pos   ] ;   pos   - =   lowbit   (   pos   ) ;   / /   pos   \u7684 \u5de6\u8fb9 \u90bb\u63a5 \u533a\u95f4   }   return   ans   ;   }   / /   \u533a\u95f4 \u548c   long   long   getsum   (   int   l   ,   int   r   )   {   return   getsum   (   r   )   -   getsum   (   l   -   1   ) ;   }   void   solve   (   void   )   {   int   m   ;   n   =   read   ( ) ;   m   =   read   ( ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   a   [   i   ]   =   read   ( ) ;   init   ( ) ;   while   (   m   --   )   {   int   a   ,   b   ,   c   ;   a   =   read   ( ) ;   b   =   read   ( ) ;   c   =   read   ( ) ;   if   (   a   = =   1   )   add   (   b   ,   c   ) ;   else   printf   (   \" % lld   \\ n   \"   ,   getsum   (   b   ,   c   ) ) ;   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   # 131 .   \u6811\u72b6 \u6570\u7ec4   2   \uff1a \u533a\u95f4 \u4fee\u6539 \uff0c \u5355\u70b9 \u67e5\u8be2   \u7ed9\u5b9a \u6570\u5217   \\ ( a _ 1 ,   a _ 2 ,   \\ cdots   ,   a _ n \\ )   \uff0c \u4f60 \u9700\u8981 \u4f9d\u6b21 \u8fdb\u884c   \\ ( q \\ )   \u4e2a \u64cd\u4f5c \uff1a   1   l   r   x   :   \u7ed9\u5b9a   \\ ( l ,   r ,   x \\ )   \u5bf9\u4e8e \u6240\u6709   \\ ( i   \\ in   [ l ,   r ] \\ )   \uff0c \u5c06   \\ ( a [ i ] \\ )   \u52a0\u4e0a   \\ ( x \\ )   \u3002   2   i   :   \u7ed9\u5b9a   \\ ( i \\ )   \uff0c \u6c42   \\ ( a [ i ] \\ )   \u7684 \u503c \u3002   \u57fa\u4e8e \u5dee\u5206 \u6570\u7ec4 \u7684 \u6811\u72b6 \u6570\u7ec4   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   const   int   N   =   int   (   1e6   +   10   ) ;   long   long   a   [   N   ] ,   b   [   N   ] ,   cb   [   N   ] ,   cbi   [   N   ] ;   int   n   ;   inline   int   read   ( )   {   int   x   =   0   ,   f   =   1   ;   char   c   =   getchar   ( ) ;   while   (   c   <   ' 0 '   | |   c   >   ' 9 '   )   {   if   (   c   = =   ' - '   )   f   =   - 1   ;   c   =   getchar   ( ) ;   }   while   (   c   > =   ' 0 '   &&   c   < =   ' 9 '   )   {   x   =   x   *   10   +   c   -   ' 0 '   ;   c   =   getchar   ( ) ;   }   return   x   *   f   ;   }   int   lowbit   (   int   x   )   {   return   (   ~   x   +   1   )   &   x   ;   }   void   init   ( )   {   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   cb   [   i   ]   + =   b   [   i   ] ;   cbi   [   i   ]   + =   b   [   i   ]   *   i   ;   int   j   =   i   +   lowbit   (   i   ) ;   if   (   j   < =   n   )   cb   [   j   ]   + =   cb   [   i   ] ,   cbi   [   j   ]   + =   cbi   [   i   ] ;   }   }   / /   \u5355\u70b9 \u589e\u503c   void   add   (   int   pos   ,   long   long   x   )   {   long   long   v   =   pos   *   x   ;   while   (   pos   < =   n   )   {   cb   [   pos   ]   + =   x   ;   cbi   [   pos   ]   + =   v   ;   pos   + =   lowbit   (   pos   ) ;   }   }   / /   \u533a\u95f4 \u589e\u503c   void   add   (   int   l   ,   int   r   ,   long   long   x   )   {   add   (   l   ,   x   ) ;   add   (   r   +   1   ,   -   x   ) ;   }   / /   \u5355\u70b9 \u67e5\u8be2   long   long   getdata   (   int   pos   )   {   long   long   ans   =   0   ;   while   (   pos   > =   1   )   {   ans   + =   cb   [   pos   ] ;   pos   - =   lowbit   (   pos   ) ;   }   return   ans   ;   }   / /   \u524d\u7f00 \u548c   long   long   getsum   (   int   pos   )   {   long   long   ans   =   (   pos   +   1   )   *   getdata   (   pos   ) ;   while   (   pos   > =   1   )   {   ans   - =   cbi   [   pos   ] ;   pos   - =   lowbit   (   pos   ) ;   }   return   ans   ;   }   / /   \u533a\u95f4 \u548c   long   long   getsum   (   int   l   ,   int   r   )   {   return   getsum   (   r   )   -   getsum   (   l   -   1   ) ;   }   void   solve   (   void   )   {   int   m   ;   n   =   read   ( ) ,   m   =   read   ( ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   a   [   i   ]   =   read   ( ) ,   b   [   i   ]   =   a   [   i   ]   -   a   [   i   -   1   ] ;   init   ( ) ;   while   (   m   --   )   {   int   t   =   read   ( ) ;   if   (   t   = =   1   )   {   int   l   ,   r   ,   x   ;   l   =   read   ( ) ,   r   =   read   ( ) ,   x   =   read   ( ) ;   add   (   l   ,   r   ,   x   ) ;   }   else   {   int   a   =   read   ( ) ;   printf   (   \" % lld   \\ n   \"   ,   getdata   (   a   ) ) ;   }   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   # 132 .   \u6811\u72b6 \u6570\u7ec4   3   \uff1a \u533a\u95f4 \u4fee\u6539 \uff0c \u533a\u95f4 \u67e5\u8be2   \u7ed9\u5b9a \u6570\u5217   \\ ( a _ 1 ,   a _ 2 ,   \\ cdots   ,   a _ n \\ )   \uff0c \u4f60 \u9700\u8981 \u4f9d\u6b21 \u8fdb\u884c   \\ ( q \\ )   \u4e2a \u64cd\u4f5c \uff1a   1   l   r   x   :   \u7ed9\u5b9a   \\ ( l ,   r ,   x \\ )   \u5bf9\u4e8e \u6240\u6709   \\ ( i   \\ in   [ l ,   r ] \\ )   \uff0c \u5c06   \\ ( a [ i ] \\ )   \u52a0\u4e0a   \\ ( x \\ )   \u3002   2   l   r   :   \u7ed9\u5b9a   \\ ( l ,   r \\ )   \uff0c \u6c42   \\ ( a _ l   +   \\ cdots   +   a _ r \\ )   \u7684 \u503c \u3002   \u57fa\u4e8e \u5dee\u5206 \u6570\u7ec4 \u7684 \u6811\u72b6 \u6570\u7ec4   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   const   int   N   =   int   (   1e6   +   10   ) ;   long   long   a   [   N   ] ,   b   [   N   ] ,   cb   [   N   ] ,   cbi   [   N   ] ;   int   n   ;   inline   int   read   ( )   {   int   x   =   0   ,   f   =   1   ;   char   c   =   getchar   ( ) ;   while   (   c   <   ' 0 '   | |   c   >   ' 9 '   )   {   if   (   c   = =   ' - '   )   f   =   - 1   ;   c   =   getchar   ( ) ;   }   while   (   c   > =   ' 0 '   &&   c   < =   ' 9 '   )   {   x   =   x   *   10   +   c   -   ' 0 '   ;   c   =   getchar   ( ) ;   }   return   x   *   f   ;   }   int   lowbit   (   int   x   )   {   return   (   ~   x   +   1   )   &   x   ;   }   void   init   ( )   {   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   cb   [   i   ]   + =   b   [   i   ] ;   cbi   [   i   ]   + =   b   [   i   ]   *   i   ;   int   j   =   i   +   lowbit   (   i   ) ;   if   (   j   < =   n   )   cb   [   j   ]   + =   cb   [   i   ] ,   cbi   [   j   ]   + =   cbi   [   i   ] ;   }   }   / /   \u5355\u70b9 \u589e\u503c   void   add   (   int   pos   ,   long   long   x   )   {   long   long   v   =   pos   *   x   ;   while   (   pos   < =   n   )   {   cb   [   pos   ]   + =   x   ;   cbi   [   pos   ]   + =   v   ;   pos   + =   lowbit   (   pos   ) ;   }   }   / /   \u533a\u95f4 \u589e\u503c   void   add   (   int   l   ,   int   r   ,   long   long   x   )   {   add   (   l   ,   x   ) ;   add   (   r   +   1   ,   -   x   ) ;   }   / /   \u5355\u70b9 \u67e5\u8be2   long   long   getdata   (   int   pos   )   {   long   long   ans   =   0   ;   while   (   pos   > =   1   )   {   ans   + =   cb   [   pos   ] ;   pos   - =   lowbit   (   pos   ) ;   }   return   ans   ;   }   / /   \u524d\u7f00 \u548c   long   long   getsum   (   int   pos   )   {   long   long   ans   =   (   pos   +   1   )   *   getdata   (   pos   ) ;   while   (   pos   > =   1   )   {   ans   - =   cbi   [   pos   ] ;   pos   - =   lowbit   (   pos   ) ;   }   return   ans   ;   }   / /   \u533a\u95f4 \u548c   long   long   getsum   (   int   l   ,   int   r   )   {   return   getsum   (   r   )   -   getsum   (   l   -   1   ) ;   }   void   solve   (   void   )   {   int   m   ;   n   =   read   ( ) ,   m   =   read   ( ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   a   [   i   ]   =   read   ( ) ,   b   [   i   ]   =   a   [   i   ]   -   a   [   i   -   1   ] ;   init   ( ) ;   while   (   m   --   )   {   int   t   =   read   ( ) ;   if   (   t   = =   1   )   {   int   l   ,   r   ,   x   ;   l   =   read   ( ) ,   r   =   read   ( ) ,   x   =   read   ( ) ;   add   (   l   ,   r   ,   x   ) ;   }   else   {   int   l   ,   r   ;   l   =   read   ( ) ,   r   =   read   ( ) ;   printf   (   \" % lld   \\ n   \"   ,   getsum   (   l   ,   r   ) ) ;   }   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002","title":"\u4e00\u4e9b \u4f8b\u9898"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/%E7%BA%BF%E6%AE%B5%E6%A0%91/","text":"\u7ebf\u6bb5 \u6811   \u7ebf\u6bb5 \u6811","title":"\u7ebf\u6bb5 \u6811"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/%E7%BA%BF%E6%AE%B5%E6%A0%91/#_1","text":"\u7ebf\u6bb5 \u6811","title":"\u7ebf\u6bb5 \u6811"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E4%BE%8B%E9%A2%98-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/","text":"\u4f8b\u9898 - \u673a\u5668 \u7ffb\u8bd1 \u673a\u5668\u7ffb\u8bd1   \u9898\u76ee \u5927\u610f   \u5185\u5b58 \u4e2d\u6709   \\ ( M \\ )   \u4e2a \u5355\u5143 \uff0c \u6bcf\u4e2a \u5355\u5143 \u53ef\u4ee5 \u5b58\u50a8 \u4e00\u4e2a \u5355\u8bcd \u548c \u5176 \u610f\u8bd1 \u3002   \u73b0\u6709   \\ ( N \\ )   \u4e2a \u5355\u8bcd \uff0c \u521a\u521a \u5f00\u59cb \u521a\u521a\u5f00\u59cb \u5185\u5b58 \u7a7a\u95f4 \u5185\u5b58\u7a7a\u95f4 \u662f \u7a7a \u7684 \uff0c \u4ec0\u4e48 \u90fd \u5355\u8bcd \u548c \u5176 \u610f\u8bd1 \u90fd \u6ca1\u6709 \u5b58 \uff0c \u6bcf \u8bfb\u53d6 \u4e00\u4e2a \u65b0 \u5355\u8bcd \u65f6 \u5c31 \u4f1a \u4e0a\u7f51 \u641c\u7d22 \u8be5 \u5355\u8bcd \u7684 \u542b\u4e49 \uff0c \u5e76 \u5c06 \u5176 \u5b58\u8fdb \u5185\u5b58 \u7a7a\u95f4 \u5185\u5b58\u7a7a\u95f4 \u4e2d \uff0c \u82e5 \u4e0b\u6b21 \u518d \u9047\u5230 \u8be5 \u5355\u8bcd \u5e76\u4e14 \u8fd8 \u5728 \u5185\u5b58 \u7a7a\u95f4 \u5185\u5b58\u7a7a\u95f4 \u4e2d \u7684\u8bdd \uff0c \u5c31 \u4e0d\u7528 \u4e0a\u7f51 \u518d \u641c \u4e00\u904d \u3002   \u82e5 \u5355\u8bcd \u592a \u591a \u7684\u8bdd \uff0c \u5185\u5b58 \u7a7a\u95f4 \u5185\u5b58\u7a7a\u95f4 \u4e0d\u591f \u7528 \uff0c \u6b64\u65f6 \u5c31\u8981 \u5c06 \u6700\u65e9 \u653e\u5165 \u5185\u5b58 \u4e2d \u7684 \u5355\u8bcd \u548c \u5176 \u610f\u8bd1 \u5220\u9664 \u6389 \uff0c \u817e\u51fa \u4e00\u4e2a \u65b0 \u7a7a\u95f4 \u653e\u5165 \u5185\u5b58 \u4e2d \u3002   \u8bf7\u95ee \u8be5 \u673a\u5668 \u8981 \u4e0a\u7f51 \u641c \u591a\u5c11 \u6b21 \u624d\u80fd \u5c06 \u8fd9\u4e9b \u5355\u8bcd \u7ffb\u8bd1 \u5b8c\u6bd5 \uff1f   \u8f93\u5165 \u683c\u5f0f   \u7b2c\u4e00 \u4e00\u884c \u7b2c\u4e00\u884c \u8f93\u5165 \u4e24\u4e2a \u6574\u6570 \uff0c \u5206\u522b \u4ee3\u8868   \\ ( M \u3001 N \\ )   \uff1b   \u7b2c\u4e8c \u4e8c\u884c \u7b2c\u4e8c\u884c \u8f93\u5165   \\ ( N \\ )   \u4e2a \u6574\u6570 \uff0c \u6bcf\u4e2a \u6574\u6570 \u90fd \u4ee3\u8868 \u4e00\u4e2a \u5355\u8bcd \uff0c \u5f53 \u4e24\u4e2a \u6574\u6570 \u7684 \u6570\u503c \u76f8\u540c \u65f6 \uff0c \u8fd9 \u4e24\u4e2a \u6574\u6570 \u4ee3\u8868 \u7684 \u5355\u8bcd \u4e5f \u76f8\u540c \u3002   \u8f93\u51fa \u683c\u5f0f   \u8f93\u51fa \u4e00\u4e2a \u6574\u6570 \u4ee3\u8868 \u4e0a\u7f51 \u641c\u7d22 \u7684 \u6b21\u6570 \u3002   \u6570\u636e \u8303\u56f4   \\ ( 1   \\ leq   M   \\ leq   100 \\ )   \\ ( 1   \\ leq   N   \\ leq   1000 \\ )   \u6bcf\u4e2a \u5355\u8bcd \u6240 \u5bf9\u5e94 \u7684 \u6574\u6570   \\ ( \\ in   [ 0 ,   1000 ] \\ )   \u601d\u8def   \u5b9a\u4e49 \u4e00\u4e2a \u6570\u7ec4   a [ i ]   \u4ee3\u8868 \u5355\u8bcd   i   \u662f\u5426 \u5b58\u5728 \u961f\u5217 \u4e2d \uff0c \u82e5   a [ i ]   =   1   \u8bf4\u660e \u5355\u8bcd   i   \u5b58\u5728 \u961f\u5217 \u4e2d \uff0c \u5426\u5219 \u5c31 \u4e0d \u5b58\u5728 \u961f\u5217 \u4e2d \uff0c \u6b64\u65f6 \u5c31\u8981 \u5c06 \u5176 \u5b58\u5165 \u961f\u5217 \u4e2d \uff0c \u5e76\u4e14 \u67e5\u627e \u6b21\u6570 \u8981 \u9012\u589e   \\ ( 1 \\ )   \u3002   \u4ee3\u7801 \u53c2\u8003   # include   < iostream >   # include   < queue >   using   namespace   std   ;   const   int   N   =   1e7   +   10   ;   int   a   [   N   ] ,   t   ,   n   ,   m   ,   res   ;   queue   <   int   >   qa   ;   int   main   (   void   )   {   cin   > >   m   > >   n   ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   cin   > >   t   ;   if   (   !   a   [   t   ] )   {   a   [   t   ]   =   1   ,   res   ++   ;   if   (   qa   .   size   ( )   = =   m   )   {   a   [   qa   .   front   ( ) ]   =   0   ;   qa   .   pop   ( ) ;   }   qa   .   push   (   t   ) ;   }   }   cout   < <   res   < <   endl   ;   return   0   ;   }","title":"\u4f8b\u9898 - \u673a\u5668\u7ffb\u8bd1"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E4%BE%8B%E9%A2%98-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/#-","text":"\u9898\u76ee \u5927\u610f   \u5185\u5b58 \u4e2d\u6709   \\ ( M \\ )   \u4e2a \u5355\u5143 \uff0c \u6bcf\u4e2a \u5355\u5143 \u53ef\u4ee5 \u5b58\u50a8 \u4e00\u4e2a \u5355\u8bcd \u548c \u5176 \u610f\u8bd1 \u3002   \u73b0\u6709   \\ ( N \\ )   \u4e2a \u5355\u8bcd \uff0c \u521a\u521a \u5f00\u59cb \u521a\u521a\u5f00\u59cb \u5185\u5b58 \u7a7a\u95f4 \u5185\u5b58\u7a7a\u95f4 \u662f \u7a7a \u7684 \uff0c \u4ec0\u4e48 \u90fd \u5355\u8bcd \u548c \u5176 \u610f\u8bd1 \u90fd \u6ca1\u6709 \u5b58 \uff0c \u6bcf \u8bfb\u53d6 \u4e00\u4e2a \u65b0 \u5355\u8bcd \u65f6 \u5c31 \u4f1a \u4e0a\u7f51 \u641c\u7d22 \u8be5 \u5355\u8bcd \u7684 \u542b\u4e49 \uff0c \u5e76 \u5c06 \u5176 \u5b58\u8fdb \u5185\u5b58 \u7a7a\u95f4 \u5185\u5b58\u7a7a\u95f4 \u4e2d \uff0c \u82e5 \u4e0b\u6b21 \u518d \u9047\u5230 \u8be5 \u5355\u8bcd \u5e76\u4e14 \u8fd8 \u5728 \u5185\u5b58 \u7a7a\u95f4 \u5185\u5b58\u7a7a\u95f4 \u4e2d \u7684\u8bdd \uff0c \u5c31 \u4e0d\u7528 \u4e0a\u7f51 \u518d \u641c \u4e00\u904d \u3002   \u82e5 \u5355\u8bcd \u592a \u591a \u7684\u8bdd \uff0c \u5185\u5b58 \u7a7a\u95f4 \u5185\u5b58\u7a7a\u95f4 \u4e0d\u591f \u7528 \uff0c \u6b64\u65f6 \u5c31\u8981 \u5c06 \u6700\u65e9 \u653e\u5165 \u5185\u5b58 \u4e2d \u7684 \u5355\u8bcd \u548c \u5176 \u610f\u8bd1 \u5220\u9664 \u6389 \uff0c \u817e\u51fa \u4e00\u4e2a \u65b0 \u7a7a\u95f4 \u653e\u5165 \u5185\u5b58 \u4e2d \u3002   \u8bf7\u95ee \u8be5 \u673a\u5668 \u8981 \u4e0a\u7f51 \u641c \u591a\u5c11 \u6b21 \u624d\u80fd \u5c06 \u8fd9\u4e9b \u5355\u8bcd \u7ffb\u8bd1 \u5b8c\u6bd5 \uff1f   \u8f93\u5165 \u683c\u5f0f   \u7b2c\u4e00 \u4e00\u884c \u7b2c\u4e00\u884c \u8f93\u5165 \u4e24\u4e2a \u6574\u6570 \uff0c \u5206\u522b \u4ee3\u8868   \\ ( M \u3001 N \\ )   \uff1b   \u7b2c\u4e8c \u4e8c\u884c \u7b2c\u4e8c\u884c \u8f93\u5165   \\ ( N \\ )   \u4e2a \u6574\u6570 \uff0c \u6bcf\u4e2a \u6574\u6570 \u90fd \u4ee3\u8868 \u4e00\u4e2a \u5355\u8bcd \uff0c \u5f53 \u4e24\u4e2a \u6574\u6570 \u7684 \u6570\u503c \u76f8\u540c \u65f6 \uff0c \u8fd9 \u4e24\u4e2a \u6574\u6570 \u4ee3\u8868 \u7684 \u5355\u8bcd \u4e5f \u76f8\u540c \u3002   \u8f93\u51fa \u683c\u5f0f   \u8f93\u51fa \u4e00\u4e2a \u6574\u6570 \u4ee3\u8868 \u4e0a\u7f51 \u641c\u7d22 \u7684 \u6b21\u6570 \u3002   \u6570\u636e \u8303\u56f4   \\ ( 1   \\ leq   M   \\ leq   100 \\ )   \\ ( 1   \\ leq   N   \\ leq   1000 \\ )   \u6bcf\u4e2a \u5355\u8bcd \u6240 \u5bf9\u5e94 \u7684 \u6574\u6570   \\ ( \\ in   [ 0 ,   1000 ] \\ )","title":"\u4f8b\u9898 - \u673a\u5668\u7ffb\u8bd1"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E4%BE%8B%E9%A2%98-%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91/#_1","text":"\u5b9a\u4e49 \u4e00\u4e2a \u6570\u7ec4   a [ i ]   \u4ee3\u8868 \u5355\u8bcd   i   \u662f\u5426 \u5b58\u5728 \u961f\u5217 \u4e2d \uff0c \u82e5   a [ i ]   =   1   \u8bf4\u660e \u5355\u8bcd   i   \u5b58\u5728 \u961f\u5217 \u4e2d \uff0c \u5426\u5219 \u5c31 \u4e0d \u5b58\u5728 \u961f\u5217 \u4e2d \uff0c \u6b64\u65f6 \u5c31\u8981 \u5c06 \u5176 \u5b58\u5165 \u961f\u5217 \u4e2d \uff0c \u5e76\u4e14 \u67e5\u627e \u6b21\u6570 \u8981 \u9012\u589e   \\ ( 1 \\ )   \u3002   \u4ee3\u7801 \u53c2\u8003   # include   < iostream >   # include   < queue >   using   namespace   std   ;   const   int   N   =   1e7   +   10   ;   int   a   [   N   ] ,   t   ,   n   ,   m   ,   res   ;   queue   <   int   >   qa   ;   int   main   (   void   )   {   cin   > >   m   > >   n   ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   cin   > >   t   ;   if   (   !   a   [   t   ] )   {   a   [   t   ]   =   1   ,   res   ++   ;   if   (   qa   .   size   ( )   = =   m   )   {   a   [   qa   .   front   ( ) ]   =   0   ;   qa   .   pop   ( ) ;   }   qa   .   push   (   t   ) ;   }   }   cout   < <   res   < <   endl   ;   return   0   ;   }","title":"\u601d\u8def"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/","text":"\u5355\u8c03 \u961f\u5217   154 .   \u6ed1\u52a8 \u7a97\u53e3   \u7ed9\u5b9a \u4e00\u4e2a \u5927\u5c0f \u4e3a   \\ ( n   \\ leq   10   ^   6 \\ )   \u7684 \u6570\u7ec4 \u3002   \u6709 \u4e00\u4e2a \u5927\u5c0f \u4e3a   \\ ( k \\ )   \u7684 \u6ed1\u52a8 \u7a97\u53e3 \uff0c \u5b83 \u4ece \u6570\u7ec4 \u7684 \u6700 \u5de6\u8fb9 \u79fb\u52a8 \u5230 \u6700 \u53f3\u8fb9 \u3002   \u4f60 \u53ea\u80fd \u5728 \u7a97\u53e3 \u4e2d \u770b\u5230   \\ ( k \\ )   \u4e2a \u6570\u5b57 \u3002   \u6bcf\u6b21 \u6ed1\u52a8 \u7a97\u53e3 \u5411 \u53f3 \u79fb\u52a8 \u4e00\u4e2a \u4f4d\u7f6e \u3002   \u4ee5\u4e0b \u662f \u4e00\u4e2a \u4f8b\u5b50 \uff1a   \u8be5 \u6570\u7ec4 \u4e3a   [ 1   3   - 1   - 3   5   3   6   7 ]   \uff0c   \\ ( k \\ )   \u4e3a   \\ ( 3 \\ )   \u3002   \u7a97\u53e3 \u4f4d\u7f6e   \u6700\u5c0f \u6700\u5c0f\u503c   \u6700\u5927 \u5927\u503c \u6700\u5927\u503c   [ 1   3   - 1 ]   - 3   5   3   6   7   - 1   3   1   [ 3   - 1   - 3 ]   5   3   6   7   - 3   3   1   3   [ - 1   - 3   5 ]   3   6   7   - 3   5   1   3   - 1   [ - 3   5   3 ]   6   7   - 3   5   1   3   - 1   - 3   [ 5   3   6 ]   7   3   6   1   3   - 1   - 3   5   [ 3   6   7 ]   3   7   \u4f60 \u7684 \u4efb\u52a1 \u662f \u786e\u5b9a \u6ed1\u52a8 \u7a97\u53e3 \u4f4d\u4e8e \u6bcf\u4e2a \u4f4d\u7f6e \u65f6 \uff0c \u7a97\u53e3 \u4e2d \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u548c \u6700\u5c0f \u6700\u5c0f\u503c \u3002   \u5355\u8c03 \u961f\u5217 \uff0c \u987e\u540d \u987e\u540d\u601d\u4e49 \u961f\u5217 \u91cc\u9762 \u7684 \u5143\u7d20 \u662f \u5355\u8c03 \u6392\u5217 \u7684 \u3002 \u5bf9\u4e8e \u8be5\u9898 \uff0c \u5c31 \u8003\u8651 \u4e00\u4e2a \u7a97\u53e3 \uff1a   [ 1   3   - 1 ]   - 3   - 5   3   6   7   \u5f53\u524d \u7a97\u53e3 \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u4e00\u5b9a \u662f   3   \uff0c \u6211\u4eec \u53ef\u4ee5 \u4e22\u5f03   1   \u5417 \uff1f \u968f\u7740 \u7a97\u53e3 \u7684 \u5411 \u53f3 \u79fb\u52a8 \uff0c   1   \u4e00\u5b9a \u65e0\u6cd5 \u4f5c\u4e3a \u7a97\u53e3 \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u8f93\u51fa \u7684 \uff0c \u56e0\u4e3a \u6709 \u66f4 \u9760\u53f3 \u7684 \u3001 \u66f4\u5927 \u7684   3   \u53ef\u4ee5 \u9009\u62e9 \uff1b   - 1   \u53ef\u4ee5 \u4e22\u5f03 \u5417 \uff0c \u4e0d \u53ef\u4ee5 \u968f\u7740 \u7a97\u53e3 \u7684 \u5411 \u53f3 \u79fb\u52a8 \uff0c   3   \u662f \u53ef\u4ee5 \u88ab \u8e22 \u51fa \u7a97\u53e3 \u7684 \uff0c   - 1   \u53ea\u80fd \u4f5c\u4e3a \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u9884\u5907 \u519b \u4fdd\u7559 \u5728 \u7a97\u53e3 \u4e2d \u3002   \u56e0\u6b64 \u8fd9\u9053\u9898 \u6211\u4eec \u53ea \u9700\u8981 \u4e0d\u65ad \u5730 \u7ef4\u62a4 \u4e00\u4e2a \u5355\u8c03 \u9012\u51cf \u7684 \u961f\u5217 \u5c31\u884c \uff0c \u63d2\u5165 \u65b0 \u6570\u636e   \\ ( x \\ )   \u65f6 \uff0c \u5982\u679c \u961f\u5c3e \u7684 \u6570\u636e \u6bd4 \u5f53\u524d \u63d2\u5165 \u7684 \u6570\u636e   \\ ( x \\ )   \u8fd8\u8981 \u5c0f \u6216\u8005 \u7b49 \u65f6 \uff0c \u76f4\u63a5 \u8e22 \u51fa \u961f\u5217 \uff0c \u76f4\u5230 \u961f\u5c3e \u6570\u636e \u5927\u4e8e   x   \u4e3a\u6b62 \u624d\u80fd \u63d2\u5165 \uff0c \u5bf9\u4e8e \u961f\u5934 \u7684 \u5904\u7406 \uff0c \u7531\u4e8e \u8be5\u961f \u5934\u6709 \u53ef\u80fd \u5df2\u7ecf \u4e0d \u5728 \u7a97\u53e3 \u4e2d \u4e86 \uff0c \u6240\u4ee5 \u8981 \u5c06 \u4e0d \u5728 \u7a97\u53e3 \u4e2d \u6ede\u7559 \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u8e22 \u51fa \u961f\u5217 \uff0c \u505a\u597d \u4e0a\u9762 \u7684 \u6240\u6709 \u5de5\u4f5c \u540e \uff0c \u961f\u5934 \u5143\u7d20 \u5c31\u662f \u7a97\u53e3 \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u3002   STL   \u53cc\u7aef \u961f\u5217   deque   push _ back   :   \u961f\u5217 \u5c3e\u90e8 \u63d2\u5165 \u6570\u636e   push _ front   :   \u961f\u5217 \u5934\u90e8 \u63d2\u5165 \u6570\u636e   pop _ back   :   \u961f\u5217 \u5c3e\u90e8 \u629b\u5f03 \u6570\u636e   pop _ front   :   \u961f\u5217 \u5934\u90e8 \u629b\u5f03 \u6570\u636e   back   :   \u8fd4\u56de \u961f\u5217 \u5c3e\u90e8 \u7684 \u503c   top   :   \u8fd4\u56de \u961f\u5217 \u5934\u90e8 \u7684 \u503c   size   :   \u8fd4\u56de \u961f\u5217 \u957f\u5ea6   empty   :   \u8fd4\u56de \u961f\u5217 \u662f\u5426 \u4e3a\u7a7a   154 .   \u6ed1\u52a8 \u7a97\u53e3   -   \u4ee3\u7801 \u53c2\u8003   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   const   int   N   =   int   (   1e7   +   10   ) ;   int   n   ,   m   ;   int   q   [   N   ] ;   deque   <   vector   <   int   > >   mi   ,   mx   ;   queue   <   int   >   ax   ,   ai   ;   void   solve   (   void   )   {   scanf   (   \" % d% d \"   ,   &   n   ,   &   m   ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   scanf   (   \" % d \"   ,   q   +   i   ) ;   for   (   int   i   =   1   ;   i   <   m   ;   i   ++   )   {   while   (   mx   .   size   ( )   &&   mx   .   back   ( ) [   0   ]   < =   q   [   i   ] )   mx   .   pop _ back   ( ) ;   while   (   mi   .   size   ( )   &&   mi   .   back   ( ) [   0   ]   > =   q   [   i   ] )   mi   .   pop _ back   ( ) ;   mx   .   push _ back   ( {   q   [   i   ] ,   i   } ) ;   mi   .   push _ back   ( {   q   [   i   ] ,   i   } ) ;   }   for   (   int   i   =   m   ;   i   < =   n   ;   i   ++   )   {   while   (   mx   .   size   ( )   &&   mx   .   back   ( ) [   0   ]   < =   q   [   i   ] )   mx   .   pop _ back   ( ) ;   while   (   mi   .   size   ( )   &&   mi   .   back   ( ) [   0   ]   > =   q   [   i   ] )   mi   .   pop _ back   ( ) ;   mx   .   push _ back   ( {   q   [   i   ] ,   i   } ) ;   mi   .   push _ back   ( {   q   [   i   ] ,   i   } ) ;   while   (   mx   .   front   ( ) [   1   ]   <   i   -   m   +   1   )   mx   .   pop _ front   ( ) ;   while   (   mi   .   front   ( ) [   1   ]   <   i   -   m   +   1   )   mi   .   pop _ front   ( ) ;   ax   .   push   (   mx   .   front   ( ) [   0   ] ) ;   ai   .   push   (   mi   .   front   ( ) [   0   ] ) ;   }   while   (   ai   .   size   ( ) )   {   printf   (   \" % d   \"   ,   ai   .   front   ( ) ) ;   ai   .   pop   ( ) ;   }   puts   (   \" \"   ) ;   while   (   ax   .   size   ( ) )   {   printf   (   \" % d   \"   ,   ax   .   front   ( ) ) ;   ax   .   pop   ( ) ;   }   puts   (   \" \"   ) ;   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002","title":"\u5355\u8c03 \u961f\u5217"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/#_1","text":"154 .   \u6ed1\u52a8 \u7a97\u53e3   \u7ed9\u5b9a \u4e00\u4e2a \u5927\u5c0f \u4e3a   \\ ( n   \\ leq   10   ^   6 \\ )   \u7684 \u6570\u7ec4 \u3002   \u6709 \u4e00\u4e2a \u5927\u5c0f \u4e3a   \\ ( k \\ )   \u7684 \u6ed1\u52a8 \u7a97\u53e3 \uff0c \u5b83 \u4ece \u6570\u7ec4 \u7684 \u6700 \u5de6\u8fb9 \u79fb\u52a8 \u5230 \u6700 \u53f3\u8fb9 \u3002   \u4f60 \u53ea\u80fd \u5728 \u7a97\u53e3 \u4e2d \u770b\u5230   \\ ( k \\ )   \u4e2a \u6570\u5b57 \u3002   \u6bcf\u6b21 \u6ed1\u52a8 \u7a97\u53e3 \u5411 \u53f3 \u79fb\u52a8 \u4e00\u4e2a \u4f4d\u7f6e \u3002   \u4ee5\u4e0b \u662f \u4e00\u4e2a \u4f8b\u5b50 \uff1a   \u8be5 \u6570\u7ec4 \u4e3a   [ 1   3   - 1   - 3   5   3   6   7 ]   \uff0c   \\ ( k \\ )   \u4e3a   \\ ( 3 \\ )   \u3002   \u7a97\u53e3 \u4f4d\u7f6e   \u6700\u5c0f \u6700\u5c0f\u503c   \u6700\u5927 \u5927\u503c \u6700\u5927\u503c   [ 1   3   - 1 ]   - 3   5   3   6   7   - 1   3   1   [ 3   - 1   - 3 ]   5   3   6   7   - 3   3   1   3   [ - 1   - 3   5 ]   3   6   7   - 3   5   1   3   - 1   [ - 3   5   3 ]   6   7   - 3   5   1   3   - 1   - 3   [ 5   3   6 ]   7   3   6   1   3   - 1   - 3   5   [ 3   6   7 ]   3   7   \u4f60 \u7684 \u4efb\u52a1 \u662f \u786e\u5b9a \u6ed1\u52a8 \u7a97\u53e3 \u4f4d\u4e8e \u6bcf\u4e2a \u4f4d\u7f6e \u65f6 \uff0c \u7a97\u53e3 \u4e2d \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u548c \u6700\u5c0f \u6700\u5c0f\u503c \u3002   \u5355\u8c03 \u961f\u5217 \uff0c \u987e\u540d \u987e\u540d\u601d\u4e49 \u961f\u5217 \u91cc\u9762 \u7684 \u5143\u7d20 \u662f \u5355\u8c03 \u6392\u5217 \u7684 \u3002 \u5bf9\u4e8e \u8be5\u9898 \uff0c \u5c31 \u8003\u8651 \u4e00\u4e2a \u7a97\u53e3 \uff1a   [ 1   3   - 1 ]   - 3   - 5   3   6   7   \u5f53\u524d \u7a97\u53e3 \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u4e00\u5b9a \u662f   3   \uff0c \u6211\u4eec \u53ef\u4ee5 \u4e22\u5f03   1   \u5417 \uff1f \u968f\u7740 \u7a97\u53e3 \u7684 \u5411 \u53f3 \u79fb\u52a8 \uff0c   1   \u4e00\u5b9a \u65e0\u6cd5 \u4f5c\u4e3a \u7a97\u53e3 \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u8f93\u51fa \u7684 \uff0c \u56e0\u4e3a \u6709 \u66f4 \u9760\u53f3 \u7684 \u3001 \u66f4\u5927 \u7684   3   \u53ef\u4ee5 \u9009\u62e9 \uff1b   - 1   \u53ef\u4ee5 \u4e22\u5f03 \u5417 \uff0c \u4e0d \u53ef\u4ee5 \u968f\u7740 \u7a97\u53e3 \u7684 \u5411 \u53f3 \u79fb\u52a8 \uff0c   3   \u662f \u53ef\u4ee5 \u88ab \u8e22 \u51fa \u7a97\u53e3 \u7684 \uff0c   - 1   \u53ea\u80fd \u4f5c\u4e3a \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u9884\u5907 \u519b \u4fdd\u7559 \u5728 \u7a97\u53e3 \u4e2d \u3002   \u56e0\u6b64 \u8fd9\u9053\u9898 \u6211\u4eec \u53ea \u9700\u8981 \u4e0d\u65ad \u5730 \u7ef4\u62a4 \u4e00\u4e2a \u5355\u8c03 \u9012\u51cf \u7684 \u961f\u5217 \u5c31\u884c \uff0c \u63d2\u5165 \u65b0 \u6570\u636e   \\ ( x \\ )   \u65f6 \uff0c \u5982\u679c \u961f\u5c3e \u7684 \u6570\u636e \u6bd4 \u5f53\u524d \u63d2\u5165 \u7684 \u6570\u636e   \\ ( x \\ )   \u8fd8\u8981 \u5c0f \u6216\u8005 \u7b49 \u65f6 \uff0c \u76f4\u63a5 \u8e22 \u51fa \u961f\u5217 \uff0c \u76f4\u5230 \u961f\u5c3e \u6570\u636e \u5927\u4e8e   x   \u4e3a\u6b62 \u624d\u80fd \u63d2\u5165 \uff0c \u5bf9\u4e8e \u961f\u5934 \u7684 \u5904\u7406 \uff0c \u7531\u4e8e \u8be5\u961f \u5934\u6709 \u53ef\u80fd \u5df2\u7ecf \u4e0d \u5728 \u7a97\u53e3 \u4e2d \u4e86 \uff0c \u6240\u4ee5 \u8981 \u5c06 \u4e0d \u5728 \u7a97\u53e3 \u4e2d \u6ede\u7559 \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u8e22 \u51fa \u961f\u5217 \uff0c \u505a\u597d \u4e0a\u9762 \u7684 \u6240\u6709 \u5de5\u4f5c \u540e \uff0c \u961f\u5934 \u5143\u7d20 \u5c31\u662f \u7a97\u53e3 \u7684 \u6700\u5927 \u5927\u503c \u6700\u5927\u503c \u3002   STL   \u53cc\u7aef \u961f\u5217   deque   push _ back   :   \u961f\u5217 \u5c3e\u90e8 \u63d2\u5165 \u6570\u636e   push _ front   :   \u961f\u5217 \u5934\u90e8 \u63d2\u5165 \u6570\u636e   pop _ back   :   \u961f\u5217 \u5c3e\u90e8 \u629b\u5f03 \u6570\u636e   pop _ front   :   \u961f\u5217 \u5934\u90e8 \u629b\u5f03 \u6570\u636e   back   :   \u8fd4\u56de \u961f\u5217 \u5c3e\u90e8 \u7684 \u503c   top   :   \u8fd4\u56de \u961f\u5217 \u5934\u90e8 \u7684 \u503c   size   :   \u8fd4\u56de \u961f\u5217 \u957f\u5ea6   empty   :   \u8fd4\u56de \u961f\u5217 \u662f\u5426 \u4e3a\u7a7a   154 .   \u6ed1\u52a8 \u7a97\u53e3   -   \u4ee3\u7801 \u53c2\u8003   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   const   int   N   =   int   (   1e7   +   10   ) ;   int   n   ,   m   ;   int   q   [   N   ] ;   deque   <   vector   <   int   > >   mi   ,   mx   ;   queue   <   int   >   ax   ,   ai   ;   void   solve   (   void   )   {   scanf   (   \" % d% d \"   ,   &   n   ,   &   m   ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   scanf   (   \" % d \"   ,   q   +   i   ) ;   for   (   int   i   =   1   ;   i   <   m   ;   i   ++   )   {   while   (   mx   .   size   ( )   &&   mx   .   back   ( ) [   0   ]   < =   q   [   i   ] )   mx   .   pop _ back   ( ) ;   while   (   mi   .   size   ( )   &&   mi   .   back   ( ) [   0   ]   > =   q   [   i   ] )   mi   .   pop _ back   ( ) ;   mx   .   push _ back   ( {   q   [   i   ] ,   i   } ) ;   mi   .   push _ back   ( {   q   [   i   ] ,   i   } ) ;   }   for   (   int   i   =   m   ;   i   < =   n   ;   i   ++   )   {   while   (   mx   .   size   ( )   &&   mx   .   back   ( ) [   0   ]   < =   q   [   i   ] )   mx   .   pop _ back   ( ) ;   while   (   mi   .   size   ( )   &&   mi   .   back   ( ) [   0   ]   > =   q   [   i   ] )   mi   .   pop _ back   ( ) ;   mx   .   push _ back   ( {   q   [   i   ] ,   i   } ) ;   mi   .   push _ back   ( {   q   [   i   ] ,   i   } ) ;   while   (   mx   .   front   ( ) [   1   ]   <   i   -   m   +   1   )   mx   .   pop _ front   ( ) ;   while   (   mi   .   front   ( ) [   1   ]   <   i   -   m   +   1   )   mi   .   pop _ front   ( ) ;   ax   .   push   (   mx   .   front   ( ) [   0   ] ) ;   ai   .   push   (   mi   .   front   ( ) [   0   ] ) ;   }   while   (   ai   .   size   ( ) )   {   printf   (   \" % d   \"   ,   ai   .   front   ( ) ) ;   ai   .   pop   ( ) ;   }   puts   (   \" \"   ) ;   while   (   ax   .   size   ( ) )   {   printf   (   \" % d   \"   ,   ax   .   front   ( ) ) ;   ax   .   pop   ( ) ;   }   puts   (   \" \"   ) ;   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002","title":"\u5355\u8c03 \u961f\u5217"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/","text":"\u53cc\u7aef \u961f\u5217   \u4e24\u7aef \u90fd \u80fd \u8fdb \u6216 \u51fa   \u6570\u7ec4 \u7248 - \u53cc\u7aef \u961f\u5217   \u89c4\u5b9a   \\ ( q [ 0 ] \\ )   \u662f \u5de6 \u6307\u9488 \uff0c   \\ ( q [ 1 ] \\ )   \u662f \u53f3 \u6307\u9488 \uff0c \u5e76\u4e14 \u5de6\u53f3 \u6307\u9488 \u90fd \u80fd \u5f80 \u5de6 \u6216\u8005 \u5f80\u53f3 \u79fb\u52a8   \u53cc\u7aef \u961f\u5217 \u793a\u610f \u610f\u56fe \u793a\u610f\u56fe   init   \u521d\u59cb \u521d\u59cb\u5316   \u6211\u4eec \u89c4\u5b9a \uff0c \u6570\u7ec4 \u4e0b\u6807 \u4e3a   \\ ( q [ 0 ] \\ )   \u3001   \\ ( q [ 1 ] \\ )   \u7684 \u6570\u636e \u57df \u4e0d\u80fd \u5b58\u653e \u6570\u636e \u5b58\u653e\u6570\u636e \uff0c \u5373   \\ ( q [ q [ 0 ] ] \\ )   \u548c   \\ ( q [ q [ 1 ] ] \\ )   \u4e0d\u80fd \u653e \u6570\u636e \uff0c   \u521d\u59cb \u521d\u59cb\u5316 \u65f6 \uff0c   \\ ( q [ 0 ]   =   2 ,   q [ 1 ]   =   3 \\ )   \u53cc\u7aef \u961f\u5217 - \u4e0d\u80fd \u653e \u6570\u636e \u7684 \u4e24\u4e2a \u4e0b\u6807   \u53cc\u7aef \u961f\u5217 - \u521d\u59cb \u72b6\u6001 \u521d\u59cb\u72b6\u6001 \u56fe\u7247   void   init   (   int   q   [ ] )   {   q   [   0   ]   =   2   ,   q   [   1   ]   =   3   ;   }   ml   \u5de6\u8fb9 \u5143\u7d20 \u4e0b\u6807   \u5982\u679c   pos   ! =   2   \uff0c \u5219   ml   =   pos   -   1   \u5426\u5219   ml   =   N   -   1   \u82e5   \\ ( i \\ )   \u662f \u533a\u95f4   \\ ( [ 0 ,   N   -   3 ] \\ )   \u7684 \u5143\u7d20 \uff0c \u5de6\u79fb \u5c31 \u76f8\u5f53 \u5f53\u4e8e \u76f8\u5f53\u4e8e \u662f   \\ ( i   -   1 \\ )   \u5bf9   \\ ( N   -   2 \\ )   \u540c\u4f59 \u64cd\u4f5c \uff0c \u5373   \\ ( ( i   -   1 )   \\ bmod   ( N   -   2 ) \\ )   \u5df2\u77e5   \\ ( pos \\ )   \u662f \u533a\u95f4   \\ ( [ 2 ,   N   -   1 ] \\ )   \u7684 \u5143\u7d20 \uff0c \u4e5f \u662f   \\ ( [ 0 ,   N   -   3 ]   +   2 \\ )   \u7684 \u5143\u7d20 \uff0c   \\ ( pos \\ )   \u5de6\u79fb \u5c31 \u76f8\u5f53 \u5f53\u4e8e \u76f8\u5f53\u4e8e \u662f   \\ ( ( pos   -   2   -   1 )   \\ bmod   ( N   -   2 )   +   2   =   ( pos   -   2   -   1   +   N   -   2 )   \\ bmod   ( N   -   2 )   +   2 \\ )   int   ml   (   int   pos   )   {   return   (   pos   -   5   +   N   )   %   (   N   -   2   )   +   2   ;   }   mr   \u53f3\u8fb9 \u5143\u7d20 \u7684 \u4e0b\u6807   \u5982\u679c   pos   ! =   N - 1   \uff0c \u5219   mr   =   pos   +   1   \u5426\u5219   ml   =   2   \u5df2\u77e5   \\ ( pos \\ )   \u7684 \u53d6\u503c \u8303\u56f4 \uff1a   \\ ( [ 2 ,   N - 1 ] \\ )   \uff0c \u5728 \u8be5 \u533a\u95f4 \u5185 \u53f3\u79fb \uff0c \u5c31 \u76f8\u5f53 \u5f53\u4e8e \u76f8\u5f53\u4e8e \u5728 \u533a\u95f4   \\ ( [ 0 ,   N   -   3 ] \\ )   \u5185 \u53f3\u79fb \uff0c \u9700\u8981 \u5148   \\ ( pos   -   2 \\ )   \u5316\u6210 \u533a\u95f4   \\ ( [ 0 ,   N   -   3 ] \\ )   \u5185 \u7684 \u5143\u7d20 \uff0c \u518d \u5bf9 \u53f3\u79fb \u64cd\u4f5c   \\ ( ( pos   -   2   +   1 )   \\ bmod   (   N   -   2 ) \\ )   \u540c\u4f59   int   mr   (   int   pos   )   {   return   (   pos   -   1   )   %   (   N   -   2   )   +   2   ;   }   empty   \u53ea\u8981   \\ ( q [ 0 ] \\ )   \u7d27\u8ddf \u5728   \\ ( q [ 1 ] \\ )   \u7684 \u5de6\u624b \u624b\u8fb9 \u5de6\u624b\u8fb9 \uff0c \u5c31 \u8bf4\u660e \u53cc\u7aef \u961f \u5217\u4e3a \u7a7a   \u53cc\u7aef \u961f\u5217 \u7a7a \u72b6\u6001 \u56fe\u4f8b   bool   empty   (   int   q   [ ] )   {   return   ml   (   q   [   1   ] )   = =   q   [   0   ] ;   }   size   \u5982\u679c   \\ ( q [ 1 ]   >   q [ 0 ] \\ )   \uff0c   \\ ( size   =   q [ 1 ]   -   q [ 0 ]   -   1 \\ )   \uff1b   \u5982\u679c   \\ ( q [ 1 ]   <   q [ 0 ] \\ )   \uff0c   \\ ( size   =   ( q [ 1 ]   -   2 )   +   ( N   -   q [ 0 ]   -   1 )   =   ( q [ 1 ]   -   q [ 0 ]   -   1 )   +   N   -   2 \\ )   \uff1b   \u7efc\u4e0a \uff1a   \\ ( size   =   ( q [ 1 ]   -   q [ 0 ]   -   1   +   N   -   2 )   \\ bmod   ( N   -   2 ) \\ )   int   size   (   int   q   [ ] )   {   return   (   q   [   1   ]   -   q   [   0   ]   -   1   +   N   -   2   )   %   (   N   -   2   ) ;   }   full   \u5b9e\u9645 \u5b9e\u9645\u4e0a \uff0c \u6570\u7ec4 \u80fd\u7528 \u7684 \u7a7a\u95f4 \u53ea\u6709   \\ ( N   -   4 \\ )   bool   full   (   int   q   [ ] )   {   return   size   (   q   )   = =   N   -   4   ;   }   push _ left   \u5f80 \u5de6 \u63d2   void   push _ left   (   int   q   [ ] ,   int   x   )   {   q   [   q   [   0   ] ]   =   x   ;   q   [   0   ]   =   ml   (   q   [   0   ] ) ;   }   push _ right   \u5f80\u53f3 \u63d2   void   push _ right   (   int   q   [ ] ,   int   x   )   {   q   [   q   [   1   ] ]   =   x   ;   q   [   1   ]   =   mr   (   q   [   1   ] ) ;   }   pop _ left   \u5220 \u5de6\u8fb9   int   top _ left   (   int   q   [ ] )   {   return   q   [   mr   (   q   [   0   ] ) ] ;   }   void   pop _ left   (   int   q   [ ] )   {   q   [   0   ]   =   mr   (   q   [   0   ] ) ;   }   pop _ right   \u5220 \u53f3\u8fb9   int   top _ right   (   int   q   [ ] )   {   return   q   [   ml   (   q   [   1   ] ) ] ;   }   void   pop _ right   (   int   q   [ ] )   {   q   [   1   ]   =   ml   (   q   [   1   ] ) ;   }   \u53cc\u7aef \u961f\u5217 - \u6570\u7ec4 \u7248 - \u4ee3\u7801 \u6c47\u603b   const   int   N   =   int   (   1e6   +   10   ) ;   int   q   [   N   ] ;   void   init   (   int   q   [ ] )   {   q   [   0   ]   =   2   ,   q   [   1   ]   =   3   ;   }   int   ml   (   int   pos   )   {   return   (   pos   -   5   +   N   )   %   (   N   -   2   )   +   2   ;   }   int   mr   (   int   pos   )   {   return   (   pos   -   1   )   %   (   N   -   2   )   +   2   ;   }   bool   empty   (   int   q   [ ] )   {   return   ml   (   q   [   1   ] )   = =   q   [   0   ] ;   }   int   size   (   int   q   [ ] )   {   return   (   q   [   1   ]   -   q   [   0   ]   -   1   +   N   -   2   )   %   (   N   -   2   ) ;   }   bool   full   (   int   q   [ ] )   {   return   size   (   q   )   = =   N   -   4   ;   }   void   push _ left   (   int   q   [ ] ,   int   x   )   {   q   [   q   [   0   ] ]   =   x   ;   q   [   0   ]   =   ml   (   q   [   0   ] ) ;   }   void   push _ right   (   int   q   [ ] ,   int   x   )   {   q   [   q   [   1   ] ]   =   x   ;   q   [   1   ]   =   mr   (   q   [   1   ] ) ;   }   int   top _ left   (   int   q   [ ] )   {   return   q   [   mr   (   q   [   0   ] ) ] ;   }   void   pop _ left   (   int   q   [ ] )   {   q   [   0   ]   =   mr   (   q   [   0   ] ) ;   }   int   top _ right   (   int   q   [ ] )   {   return   q   [   ml   (   q   [   1   ] ) ] ;   }   void   pop _ right   (   int   q   [ ] )   {   q   [   1   ]   =   ml   (   q   [   1   ] ) ;   }   \u7ed3\u6784 \u4f53\u7248   \u57fa\u4e8e \u300c \u53cc\u94fe \u8868 \u300d \u5b9e\u73b0   \u7ed3\u6784 \u4f53 \u5b9a\u4e49   struct   Node   {   int   v   ;   Node   *   le   ,   *   re   ;   Node   (   int   val   =   0   ,   Node   *   left   =   nullptr   ,   Node   *   right   =   nullptr   )   {   v   =   val   ;   le   =   left   ;   re   =   right   ;   }   } ;   init   \u521d\u59cb \u521d\u59cb\u5316   Node   *   head   ,   *   tail   ;   void   init   ( )   {   head   =   new   Node   ( ) ;   tail   =   new   Node   ( ) ;   head   - >   re   =   tail   ;   tail   - >   le   =   head   ;   }   empty   bool   empty   ( )   {   return   head   - >   re   = =   tail   ;   }   push _ left   void   push _ left   (   int   x   )   {   Node   *   t   =   new   Node   (   x   ,   head   ,   head   - >   re   ) ;   head   - >   re   - >   le   =   t   ;   head   - >   re   =   t   ;   }   push _ right   void   push _ right   (   int   x   )   {   Node   *   t   =   new   Node   (   x   ,   tail   - >   le   ,   tail   ) ;   tail   - >   le   - >   re   =   t   ;   tail   - >   le   =   t   ;   }   pop _ left   int   top _ left   ( )   {   return   head   - >   re   - >   v   ;   }   void   pop _ left   ( )   {   Node   *   p   =   head   - >   re   ;   p   - >   re   - >   le   =   head   ;   head   - >   re   =   p   - >   re   ;   delete   p   ;   }   pop _ right   int   top _ right   ( )   {   return   tail   - >   le   - >   v   ;   }   void   pop _ right   ( )   {   Node   *   p   =   tail   - >   le   ;   p   - >   le   - >   re   =   tail   ;   tail   - >   le   =   p   - >   le   ;   delete   p   ;   }   \u7ed3\u6784 \u4f53\u7248 - \u4ee3\u7801 \u6c47\u603b   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   struct   Node   {   int   v   ;   Node   *   le   ,   *   re   ;   Node   (   int   val   =   0   ,   Node   *   left   =   nullptr   ,   Node   *   right   =   nullptr   )   {   v   =   val   ;   le   =   left   ;   re   =   right   ;   }   } ;   Node   *   head   ,   *   tail   ;   void   init   ( )   {   head   =   new   Node   ( ) ;   tail   =   new   Node   ( ) ;   head   - >   re   =   tail   ;   tail   - >   le   =   head   ;   }   bool   empty   ( )   {   return   head   - >   re   = =   tail   ;   }   void   push _ left   (   int   x   )   {   Node   *   t   =   new   Node   (   x   ,   head   ,   head   - >   re   ) ;   head   - >   re   - >   le   =   t   ;   head   - >   re   =   t   ;   }   void   push _ right   (   int   x   )   {   Node   *   t   =   new   Node   (   x   ,   tail   - >   le   ,   tail   ) ;   tail   - >   le   - >   re   =   t   ;   tail   - >   le   =   t   ;   }   int   top _ left   ( )   {   return   head   - >   re   - >   v   ;   }   void   pop _ left   ( )   {   Node   *   p   =   head   - >   re   ;   p   - >   re   - >   le   =   head   ;   head   - >   re   =   p   - >   re   ;   delete   p   ;   }   int   top _ right   ( )   {   return   tail   - >   le   - >   v   ;   }   void   pop _ right   ( )   {   Node   *   p   =   tail   - >   le   ;   p   - >   le   - >   re   =   tail   ;   tail   - >   le   =   p   - >   le   ;   delete   p   ;   }","title":"\u53cc\u7aef \u961f\u5217"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/#_1","text":"\u4e24\u7aef \u90fd \u80fd \u8fdb \u6216 \u51fa","title":"\u53cc\u7aef \u961f\u5217"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/#-","text":"\u89c4\u5b9a   \\ ( q [ 0 ] \\ )   \u662f \u5de6 \u6307\u9488 \uff0c   \\ ( q [ 1 ] \\ )   \u662f \u53f3 \u6307\u9488 \uff0c \u5e76\u4e14 \u5de6\u53f3 \u6307\u9488 \u90fd \u80fd \u5f80 \u5de6 \u6216\u8005 \u5f80\u53f3 \u79fb\u52a8   \u53cc\u7aef \u961f\u5217 \u793a\u610f \u610f\u56fe \u793a\u610f\u56fe","title":"\u6570\u7ec4 \u7248 - \u53cc\u7aef \u961f\u5217"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/#init","text":"\u6211\u4eec \u89c4\u5b9a \uff0c \u6570\u7ec4 \u4e0b\u6807 \u4e3a   \\ ( q [ 0 ] \\ )   \u3001   \\ ( q [ 1 ] \\ )   \u7684 \u6570\u636e \u57df \u4e0d\u80fd \u5b58\u653e \u6570\u636e \u5b58\u653e\u6570\u636e \uff0c \u5373   \\ ( q [ q [ 0 ] ] \\ )   \u548c   \\ ( q [ q [ 1 ] ] \\ )   \u4e0d\u80fd \u653e \u6570\u636e \uff0c   \u521d\u59cb \u521d\u59cb\u5316 \u65f6 \uff0c   \\ ( q [ 0 ]   =   2 ,   q [ 1 ]   =   3 \\ )   \u53cc\u7aef \u961f\u5217 - \u4e0d\u80fd \u653e \u6570\u636e \u7684 \u4e24\u4e2a \u4e0b\u6807   \u53cc\u7aef \u961f\u5217 - \u521d\u59cb \u72b6\u6001 \u521d\u59cb\u72b6\u6001 \u56fe\u7247   void   init   (   int   q   [ ] )   {   q   [   0   ]   =   2   ,   q   [   1   ]   =   3   ;   }","title":"init   \u521d\u59cb\u5316"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/#ml","text":"\u5982\u679c   pos   ! =   2   \uff0c \u5219   ml   =   pos   -   1   \u5426\u5219   ml   =   N   -   1   \u82e5   \\ ( i \\ )   \u662f \u533a\u95f4   \\ ( [ 0 ,   N   -   3 ] \\ )   \u7684 \u5143\u7d20 \uff0c \u5de6\u79fb \u5c31 \u76f8\u5f53 \u5f53\u4e8e \u76f8\u5f53\u4e8e \u662f   \\ ( i   -   1 \\ )   \u5bf9   \\ ( N   -   2 \\ )   \u540c\u4f59 \u64cd\u4f5c \uff0c \u5373   \\ ( ( i   -   1 )   \\ bmod   ( N   -   2 ) \\ )   \u5df2\u77e5   \\ ( pos \\ )   \u662f \u533a\u95f4   \\ ( [ 2 ,   N   -   1 ] \\ )   \u7684 \u5143\u7d20 \uff0c \u4e5f \u662f   \\ ( [ 0 ,   N   -   3 ]   +   2 \\ )   \u7684 \u5143\u7d20 \uff0c   \\ ( pos \\ )   \u5de6\u79fb \u5c31 \u76f8\u5f53 \u5f53\u4e8e \u76f8\u5f53\u4e8e \u662f   \\ ( ( pos   -   2   -   1 )   \\ bmod   ( N   -   2 )   +   2   =   ( pos   -   2   -   1   +   N   -   2 )   \\ bmod   ( N   -   2 )   +   2 \\ )   int   ml   (   int   pos   )   {   return   (   pos   -   5   +   N   )   %   (   N   -   2   )   +   2   ;   }","title":"ml   \u5de6\u8fb9 \u5143\u7d20 \u4e0b\u6807"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/#mr","text":"\u5982\u679c   pos   ! =   N - 1   \uff0c \u5219   mr   =   pos   +   1   \u5426\u5219   ml   =   2   \u5df2\u77e5   \\ ( pos \\ )   \u7684 \u53d6\u503c \u8303\u56f4 \uff1a   \\ ( [ 2 ,   N - 1 ] \\ )   \uff0c \u5728 \u8be5 \u533a\u95f4 \u5185 \u53f3\u79fb \uff0c \u5c31 \u76f8\u5f53 \u5f53\u4e8e \u76f8\u5f53\u4e8e \u5728 \u533a\u95f4   \\ ( [ 0 ,   N   -   3 ] \\ )   \u5185 \u53f3\u79fb \uff0c \u9700\u8981 \u5148   \\ ( pos   -   2 \\ )   \u5316\u6210 \u533a\u95f4   \\ ( [ 0 ,   N   -   3 ] \\ )   \u5185 \u7684 \u5143\u7d20 \uff0c \u518d \u5bf9 \u53f3\u79fb \u64cd\u4f5c   \\ ( ( pos   -   2   +   1 )   \\ bmod   (   N   -   2 ) \\ )   \u540c\u4f59   int   mr   (   int   pos   )   {   return   (   pos   -   1   )   %   (   N   -   2   )   +   2   ;   }","title":"mr   \u53f3\u8fb9 \u5143\u7d20 \u7684 \u4e0b\u6807"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/#empty","text":"\u53ea\u8981   \\ ( q [ 0 ] \\ )   \u7d27\u8ddf \u5728   \\ ( q [ 1 ] \\ )   \u7684 \u5de6\u624b \u624b\u8fb9 \u5de6\u624b\u8fb9 \uff0c \u5c31 \u8bf4\u660e \u53cc\u7aef \u961f \u5217\u4e3a \u7a7a   \u53cc\u7aef \u961f\u5217 \u7a7a \u72b6\u6001 \u56fe\u4f8b   bool   empty   (   int   q   [ ] )   {   return   ml   (   q   [   1   ] )   = =   q   [   0   ] ;   }","title":"empty"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/#size","text":"\u5982\u679c   \\ ( q [ 1 ]   >   q [ 0 ] \\ )   \uff0c   \\ ( size   =   q [ 1 ]   -   q [ 0 ]   -   1 \\ )   \uff1b   \u5982\u679c   \\ ( q [ 1 ]   <   q [ 0 ] \\ )   \uff0c   \\ ( size   =   ( q [ 1 ]   -   2 )   +   ( N   -   q [ 0 ]   -   1 )   =   ( q [ 1 ]   -   q [ 0 ]   -   1 )   +   N   -   2 \\ )   \uff1b   \u7efc\u4e0a \uff1a   \\ ( size   =   ( q [ 1 ]   -   q [ 0 ]   -   1   +   N   -   2 )   \\ bmod   ( N   -   2 ) \\ )   int   size   (   int   q   [ ] )   {   return   (   q   [   1   ]   -   q   [   0   ]   -   1   +   N   -   2   )   %   (   N   -   2   ) ;   }","title":"size"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/#full","text":"\u5b9e\u9645 \u5b9e\u9645\u4e0a \uff0c \u6570\u7ec4 \u80fd\u7528 \u7684 \u7a7a\u95f4 \u53ea\u6709   \\ ( N   -   4 \\ )   bool   full   (   int   q   [ ] )   {   return   size   (   q   )   = =   N   -   4   ;   }","title":"full"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/#push_left","text":"void   push _ left   (   int   q   [ ] ,   int   x   )   {   q   [   q   [   0   ] ]   =   x   ;   q   [   0   ]   =   ml   (   q   [   0   ] ) ;   }","title":"push _ left   \u5f80 \u5de6 \u63d2"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/#push_right","text":"void   push _ right   (   int   q   [ ] ,   int   x   )   {   q   [   q   [   1   ] ]   =   x   ;   q   [   1   ]   =   mr   (   q   [   1   ] ) ;   }","title":"push _ right   \u5f80\u53f3 \u63d2"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/#pop_left","text":"int   top _ left   (   int   q   [ ] )   {   return   q   [   mr   (   q   [   0   ] ) ] ;   }   void   pop _ left   (   int   q   [ ] )   {   q   [   0   ]   =   mr   (   q   [   0   ] ) ;   }","title":"pop _ left   \u5220 \u5de6\u8fb9"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/#pop_right","text":"int   top _ right   (   int   q   [ ] )   {   return   q   [   ml   (   q   [   1   ] ) ] ;   }   void   pop _ right   (   int   q   [ ] )   {   q   [   1   ]   =   ml   (   q   [   1   ] ) ;   }   \u53cc\u7aef \u961f\u5217 - \u6570\u7ec4 \u7248 - \u4ee3\u7801 \u6c47\u603b   const   int   N   =   int   (   1e6   +   10   ) ;   int   q   [   N   ] ;   void   init   (   int   q   [ ] )   {   q   [   0   ]   =   2   ,   q   [   1   ]   =   3   ;   }   int   ml   (   int   pos   )   {   return   (   pos   -   5   +   N   )   %   (   N   -   2   )   +   2   ;   }   int   mr   (   int   pos   )   {   return   (   pos   -   1   )   %   (   N   -   2   )   +   2   ;   }   bool   empty   (   int   q   [ ] )   {   return   ml   (   q   [   1   ] )   = =   q   [   0   ] ;   }   int   size   (   int   q   [ ] )   {   return   (   q   [   1   ]   -   q   [   0   ]   -   1   +   N   -   2   )   %   (   N   -   2   ) ;   }   bool   full   (   int   q   [ ] )   {   return   size   (   q   )   = =   N   -   4   ;   }   void   push _ left   (   int   q   [ ] ,   int   x   )   {   q   [   q   [   0   ] ]   =   x   ;   q   [   0   ]   =   ml   (   q   [   0   ] ) ;   }   void   push _ right   (   int   q   [ ] ,   int   x   )   {   q   [   q   [   1   ] ]   =   x   ;   q   [   1   ]   =   mr   (   q   [   1   ] ) ;   }   int   top _ left   (   int   q   [ ] )   {   return   q   [   mr   (   q   [   0   ] ) ] ;   }   void   pop _ left   (   int   q   [ ] )   {   q   [   0   ]   =   mr   (   q   [   0   ] ) ;   }   int   top _ right   (   int   q   [ ] )   {   return   q   [   ml   (   q   [   1   ] ) ] ;   }   void   pop _ right   (   int   q   [ ] )   {   q   [   1   ]   =   ml   (   q   [   1   ] ) ;   }","title":"pop _ right   \u5220 \u53f3\u8fb9"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/#_2","text":"\u57fa\u4e8e \u300c \u53cc\u94fe \u8868 \u300d \u5b9e\u73b0","title":"\u7ed3\u6784 \u4f53\u7248"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/#_3","text":"struct   Node   {   int   v   ;   Node   *   le   ,   *   re   ;   Node   (   int   val   =   0   ,   Node   *   left   =   nullptr   ,   Node   *   right   =   nullptr   )   {   v   =   val   ;   le   =   left   ;   re   =   right   ;   }   } ;","title":"\u7ed3\u6784 \u4f53 \u5b9a\u4e49"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/#init_1","text":"Node   *   head   ,   *   tail   ;   void   init   ( )   {   head   =   new   Node   ( ) ;   tail   =   new   Node   ( ) ;   head   - >   re   =   tail   ;   tail   - >   le   =   head   ;   }","title":"init   \u521d\u59cb\u5316"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/#empty_1","text":"bool   empty   ( )   {   return   head   - >   re   = =   tail   ;   }","title":"empty"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/#push_left_1","text":"void   push _ left   (   int   x   )   {   Node   *   t   =   new   Node   (   x   ,   head   ,   head   - >   re   ) ;   head   - >   re   - >   le   =   t   ;   head   - >   re   =   t   ;   }","title":"push _ left"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/#push_right_1","text":"void   push _ right   (   int   x   )   {   Node   *   t   =   new   Node   (   x   ,   tail   - >   le   ,   tail   ) ;   tail   - >   le   - >   re   =   t   ;   tail   - >   le   =   t   ;   }","title":"push _ right"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/#pop_left_1","text":"int   top _ left   ( )   {   return   head   - >   re   - >   v   ;   }   void   pop _ left   ( )   {   Node   *   p   =   head   - >   re   ;   p   - >   re   - >   le   =   head   ;   head   - >   re   =   p   - >   re   ;   delete   p   ;   }","title":"pop _ left"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/#pop_right_1","text":"int   top _ right   ( )   {   return   tail   - >   le   - >   v   ;   }   void   pop _ right   ( )   {   Node   *   p   =   tail   - >   le   ;   p   - >   le   - >   re   =   tail   ;   tail   - >   le   =   p   - >   le   ;   delete   p   ;   }   \u7ed3\u6784 \u4f53\u7248 - \u4ee3\u7801 \u6c47\u603b   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   struct   Node   {   int   v   ;   Node   *   le   ,   *   re   ;   Node   (   int   val   =   0   ,   Node   *   left   =   nullptr   ,   Node   *   right   =   nullptr   )   {   v   =   val   ;   le   =   left   ;   re   =   right   ;   }   } ;   Node   *   head   ,   *   tail   ;   void   init   ( )   {   head   =   new   Node   ( ) ;   tail   =   new   Node   ( ) ;   head   - >   re   =   tail   ;   tail   - >   le   =   head   ;   }   bool   empty   ( )   {   return   head   - >   re   = =   tail   ;   }   void   push _ left   (   int   x   )   {   Node   *   t   =   new   Node   (   x   ,   head   ,   head   - >   re   ) ;   head   - >   re   - >   le   =   t   ;   head   - >   re   =   t   ;   }   void   push _ right   (   int   x   )   {   Node   *   t   =   new   Node   (   x   ,   tail   - >   le   ,   tail   ) ;   tail   - >   le   - >   re   =   t   ;   tail   - >   le   =   t   ;   }   int   top _ left   ( )   {   return   head   - >   re   - >   v   ;   }   void   pop _ left   ( )   {   Node   *   p   =   head   - >   re   ;   p   - >   re   - >   le   =   head   ;   head   - >   re   =   p   - >   re   ;   delete   p   ;   }   int   top _ right   ( )   {   return   tail   - >   le   - >   v   ;   }   void   pop _ right   ( )   {   Node   *   p   =   tail   - >   le   ;   p   - >   le   - >   re   =   tail   ;   tail   - >   le   =   p   - >   le   ;   delete   p   ;   }","title":"pop _ right"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E9%98%9F%E5%88%97/","text":"\u961f\u5217   \u961f\u5217 :   \u662f \u4e00\u79cd \u300c \u5148\u8fdb \u5148\u8fdb\u5148\u51fa \u300d \u7684 \u6570\u636e \u7ed3\u6784 \u6570\u636e\u7ed3\u6784 \u3002   \u5c3e\u8fdb \uff0c \u5934\u51fa   \u6570\u7ec4 \u7248 \uff1a \u5faa\u73af \u961f\u5217   \u7ed9\u5b9a \u4e00\u4e2a \u6570\u7ec4   q [ N ]   \uff0c \u89c4\u5b9a   q [ 0 ]   \u6307\u5411 \u961f\u5934 \uff0c   q [ 1 ]   \u6307\u5411 \u961f\u5c3e \uff0c \u5e76\u4e14 \u89c4\u5b9a \u961f\u5c3e \u4e0d \u5b58\u653e \u6570\u636e \u5b58\u653e\u6570\u636e \uff0c \u53ef \u5b58\u653e \u6570\u636e \u5b58\u653e\u6570\u636e \u7684 \u533a\u95f4 \u4e3a \uff1a   \\ ( [ 2 ,   N   -   1 ] \\ )   init   \u521d\u59cb \u521d\u59cb\u5316   \u8ba9   q [ 0 ]   \u548c   q [ 1 ]   \u540c\u65f6 \u6307\u5411   \\ ( [ 2 ,   N   -   1 ] \\ )   \u7684 \u4efb\u610f \u4e00\u4e2a \u4f4d\u7f6e \u5c31\u884c \uff0c \u6211 \u8fd9\u91cc \u6307\u5411   2   const   int   N   =   int   (   1e5   +   10   ) ;   int   q   [   N   ] ;   / /   \u5c3e \u8fdb\u5934 \u51fa \uff0c \u89c4\u5b9a   q [ 0 ]   \u4ee3\u8868 \u4ee3\u8868\u961f \u5934 \uff0c q [ 1 ]   \u4ee3\u8868 \u4ee3\u8868\u961f \u5c3e   / /   \u521d\u59cb \u521d\u59cb\u5316 \u961f\u5217   void   init   (   int   q   [ ] )   {   q   [   0   ]   =   q   [   1   ]   =   2   ;   }   empty   \u5982\u679c   q [ 0 ]   = =   q [ 1 ]   \uff0c \u8bf4\u660e \u961f \u5217\u4e3a \u7a7a \uff1a   bool   empty   (   int   q   [ ] )   {   return   q   [   0   ]   = =   q   [   1   ] ;   }   size   \u5982\u679c   q [ 0 ]   < =   q [ 1 ]   \uff0c   \u961f\u5217 \u957f\u5ea6 \u4e3a \uff1a   q [ 1 ]   -   q [ 0 ]   \uff1b   \u5982\u679c   q [ 0 ]   >   q [ 1 ]   \uff0c \u961f\u5217 \u957f\u5ea6 \u4e3a \uff1a   q [ 1 ]   -   2   +   N   -   q [ 0 ]   =   q [ 1 ]   -   q [ 0 ]   +   N   -   2   \u8054\u7acb \u4e0a\u8ff0 \u4e24\u79cd \u60c5\u51b5 \uff1a   size   =   ( q [ 1 ]   -   q [ 0 ]   +   N   -   2 )   %   ( N   -   2 )   int   size   (   int   q   [ ] )   {   return   (   q   [   1   ]   -   q   [   0   ]   +   N   -   2   )   %   (   N   -   2   ) ;   }   full   \u5982\u679c   size   = =   N   -   3   \uff0c \u8bf4\u660e \u6b64\u65f6 \u5df2\u6ee1   bool   full   (   int   q   [ ] )   {   return   size   (   q   )   = =   N   -   3   ;   }   push   \u6267\u884c   q [ q [ 1 ] ]   =   x   \uff0c   q [ 1 ]   ++   \u53f3\u79fb   \u53f3\u79fb \u65f6 \uff0c \u5982\u679c   q [ 1 ]   = =   N   \u5c31\u8981 \u8ba9   q [ 1 ]   =   2   \uff0c \u5230\u5e95 \u8bf4\u5230\u5e95 \uff0c   q [ 1 ]   \u7684 \u53d6\u503c \u8303\u56f4 \u4e3a \uff1a   \\ ( [ 2 ,   N   -   1 ]   =   [ 0 ,   N   -   3 ]   +   2 \\ )   \uff0c \u6240\u4ee5   q [ 1 ]   =   ( q [ 1 ]   -   2   +   1 )   %   ( N   -   2 )   +   2   =   ( q [ 1 ]   -   1 )   %   ( N   -   2 )   +   2   void   push   (   int   q   [ ] ,   int   x   )   {   q   [   q   [   1   ] ]   =   x   ;   q   [   1   ]   =   (   q   [   1   ]   -   1   )   %   (   N   -   2   )   +   2   ;   }   pop   \u540c\u7406 \uff0c \u5220\u9664 \u64cd\u4f5c \uff0c \u5148 \u8bb0\u5f55 \u4e0b   q [ 0 ]   \u7684 \u503c \uff0c \u518d \u6267\u884c \u548c \u4e0a\u8ff0 \u53f3\u79fb \u4e00\u6837 \u7684 \u64cd\u4f5c \u3002   int   pop   (   int   q   [ ] )   {   int   t   =   q   [   q   [   0   ] ] ;   q   [   0   ]   =   (   q   [   0   ]   -   1   )   %   (   N   -   2   )   +   2   ;   return   t   ;   }   \u4ee3\u7801 \u6c47\u603b   \u6a21\u62df \u961f\u5217   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   const   int   N   =   int   (   1e5   +   10   ) ;   int   q   [   N   ] ;   / /   \u5c3e \u8fdb\u5934 \u51fa \uff0c \u89c4\u5b9a   q [ 0 ]   \u4ee3\u8868 \u4ee3\u8868\u961f \u5934 \uff0c q [ 1 ]   \u4ee3\u8868 \u4ee3\u8868\u961f \u5c3e   / /   \u521d\u59cb \u521d\u59cb\u5316 \u961f\u5217   void   init   (   int   q   [ ] )   {   q   [   0   ]   =   q   [   1   ]   =   2   ;   }   / /   \u89c4\u5b9a   q [ 0 ]   = =   q [ 1 ]   \u65f6 \uff0c \u961f \u5217\u4e3a \u7a7a   bool   empty   (   int   q   [ ] )   {   return   q   [   0   ]   = =   q   [   1   ] ;   }   / /   \u961f\u5217 \u5143\u7d20 \u4e2a\u6570 \u63a8\u5bfc \uff1a   / /   \u5982\u679c   q [ 0 ]   < =   q [ 1 ] \uff0c \u5219   size   =   q [ 1 ]   -   q [ 0 ]   / /   \u5982\u679c   q [ 1 ]   <   q [ 0 ] \uff0c \u5219   size   =   q [ 1 ]   -   2   +   N   -   q [ 0 ]   =   q [ 1 ]   -   q [ 0 ]   +   N   -   2   / /   \u7edf\u5408 \u4e0a\u8ff0 \u4e24\u79cd \u60c5\u51b5 \uff1a size   =   ( q [ 1 ]   -   q [ 0 ]   +   N   -   2 )   %   ( N   -   2 )   int   size   (   int   q   [ ] )   {   return   (   q   [   1   ]   -   q   [   0   ]   +   N   -   2   )   %   (   N   -   2   ) ;   }   / /   \u5224\u65ad \u6570\u7ec4 \u5143\u7d20 \u662f\u5426 \u7528 \u5b8c \uff0c \u6570\u7ec4 \u957f\u5ea6 \u4e3a   N   \uff0c \u5b9e\u9645 \u53ef\u7528 \u7a7a\u95f4 \u4e3a \uff1a N   -   3   bool   full   (   int   q   [ ] )   {   return   size   (   q   )   = =   N   -   3   ;   }   / /   \u63d2\u5165 \u5143\u7d20 \uff0c \u961f\u5c3e \u53f3\u79fb \uff0c q [ 1 ]   \u7684 \u53d6\u503c \u8303\u56f4 \u662f   [ 2 ,   N   -   1 ]   =   [ 0 ,   N   -   3 ]   +   2   / /   \u56e0\u6b64   q [ 1 ]   =   ( q [ 1 ]   -   2   +   1 ) %   ( N   -   2 )   +   2   =   ( q [ 1 ]   -   1 )   %   ( N   -   2 )   +   2   void   push   (   int   q   [ ] ,   int   x   )   {   q   [   q   [   1   ] ]   =   x   ;   q   [   1   ]   =   (   q   [   1   ]   -   1   )   %   (   N   -   2   )   +   2   ;   }   / /   \u83b7\u53d6 \u961f\u5934 \u5143\u7d20   int   front   (   int   q   [ ] )   {   return   q   [   q   [   0   ] ] ;   }   / /   \u5220\u9664 \u961f\u5934 \u5143\u7d20 \u5e76 \u8fd4\u56de \uff0c \u961f\u5934 \u53f3\u79fb   int   pop   (   int   q   [ ] )   {   int   t   =   q   [   q   [   0   ] ] ;   q   [   0   ]   =   (   q   [   0   ]   -   1   )   %   (   N   -   2   )   +   2   ;   return   t   ;   }   \u7ed3\u6784 \u4f53\u7248   \u89c4\u5b9a \u5934 \u8282\u70b9 \u5b58\u653e \u961f\u5217 \u7684 \u957f\u5ea6 \u4fe1\u606f \uff0c \u5934 \u8282\u70b9 \u7684   next   \u6307\u9488 \u624d \u6307\u5411 \u5b9e\u9645 \u7684 \u961f\u5217   \u7ed3\u6784 \u4f53 \u5b9a\u4e49   struct   Node   {   int   v   ;   Node   *   ne   ;   Node   (   int   val   =   0   ,   Node   *   next   =   nullptr   )   {   v   =   val   ,   ne   =   next   ;   }   } ;   init   \u521d\u59cb \u521d\u59cb\u5316   Node   *   head   ,   *   tail   ;   void   init   ( )   {   / /   \u521d\u59cb \u65f6 \uff0c \u961f\u5217 \u957f\u5ea6 \u4e3a   0 \uff0c \u5934 \u8282\u70b9 \u7684   v   \u4e5f \u662f   0   head   =   tail   =   new   Node   ( ) ;   }   empty   \u5224\u65ad \u961f\u5217 \u662f\u5426 \u4e3a\u7a7a   bool   empty   ( )   {   return   head   = =   tail   ;   }   size   \u961f\u5217 \u957f\u5ea6   int   size   ( )   {   return   head   - >   v   ;   }   push   \u5c3e\u8fdb   void   push   (   int   x   )   {   tail   - >   ne   =   new   Node   (   x   ) ;   tail   =   tail   - >   ne   ;   head   - >   v   ++   ;   }   pop \u3001 front   \u5934\u51fa   int   front   ( )   {   return   head   - >   ne   - >   v   ;   }   void   pop   ( )   {   Node   *   p   =   head   - >   ne   ;   head   - >   ne   =   p   - >   ne   ;   delete   p   ;   head   - >   v   --   ;   }   \u4ee3\u7801 \u6c47\u603b   struct   Node   {   int   v   ;   Node   *   ne   ;   Node   (   int   val   =   0   ,   Node   *   next   =   nullptr   )   {   v   =   val   ,   ne   =   next   ;   }   } ;   Node   *   head   ,   *   tail   ;   void   init   ( )   {   / /   \u521d\u59cb \u65f6 \uff0c \u961f\u5217 \u957f\u5ea6 \u4e3a   0 \uff0c \u5934 \u8282\u70b9 \u7684   v   \u4e5f \u662f   0   head   =   tail   =   new   Node   ( ) ;   }   bool   empty   ( )   {   return   head   = =   tail   ;   }   int   size   ( )   {   return   head   - >   v   ;   }   void   push   (   int   x   )   {   tail   - >   ne   =   new   Node   (   x   ) ;   tail   =   tail   - >   ne   ;   head   - >   v   ++   ;   }   int   front   ( )   {   return   head   - >   ne   - >   v   ;   }   void   pop   ( )   {   Node   *   p   =   head   - >   ne   ;   head   - >   ne   =   p   - >   ne   ;   delete   p   ;   head   - >   v   --   ;   }","title":"\u961f\u5217"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E9%98%9F%E5%88%97/#_1","text":"\u961f\u5217 :   \u662f \u4e00\u79cd \u300c \u5148\u8fdb \u5148\u8fdb\u5148\u51fa \u300d \u7684 \u6570\u636e \u7ed3\u6784 \u6570\u636e\u7ed3\u6784 \u3002   \u5c3e\u8fdb \uff0c \u5934\u51fa","title":"\u961f\u5217"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E9%98%9F%E5%88%97/#_2","text":"\u7ed9\u5b9a \u4e00\u4e2a \u6570\u7ec4   q [ N ]   \uff0c \u89c4\u5b9a   q [ 0 ]   \u6307\u5411 \u961f\u5934 \uff0c   q [ 1 ]   \u6307\u5411 \u961f\u5c3e \uff0c \u5e76\u4e14 \u89c4\u5b9a \u961f\u5c3e \u4e0d \u5b58\u653e \u6570\u636e \u5b58\u653e\u6570\u636e \uff0c \u53ef \u5b58\u653e \u6570\u636e \u5b58\u653e\u6570\u636e \u7684 \u533a\u95f4 \u4e3a \uff1a   \\ ( [ 2 ,   N   -   1 ] \\ )","title":"\u6570\u7ec4 \u7248 \uff1a \u5faa\u73af \u961f\u5217"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E9%98%9F%E5%88%97/#init","text":"\u8ba9   q [ 0 ]   \u548c   q [ 1 ]   \u540c\u65f6 \u6307\u5411   \\ ( [ 2 ,   N   -   1 ] \\ )   \u7684 \u4efb\u610f \u4e00\u4e2a \u4f4d\u7f6e \u5c31\u884c \uff0c \u6211 \u8fd9\u91cc \u6307\u5411   2   const   int   N   =   int   (   1e5   +   10   ) ;   int   q   [   N   ] ;   / /   \u5c3e \u8fdb\u5934 \u51fa \uff0c \u89c4\u5b9a   q [ 0 ]   \u4ee3\u8868 \u4ee3\u8868\u961f \u5934 \uff0c q [ 1 ]   \u4ee3\u8868 \u4ee3\u8868\u961f \u5c3e   / /   \u521d\u59cb \u521d\u59cb\u5316 \u961f\u5217   void   init   (   int   q   [ ] )   {   q   [   0   ]   =   q   [   1   ]   =   2   ;   }","title":"init   \u521d\u59cb\u5316"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E9%98%9F%E5%88%97/#empty","text":"\u5982\u679c   q [ 0 ]   = =   q [ 1 ]   \uff0c \u8bf4\u660e \u961f \u5217\u4e3a \u7a7a \uff1a   bool   empty   (   int   q   [ ] )   {   return   q   [   0   ]   = =   q   [   1   ] ;   }","title":"empty"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E9%98%9F%E5%88%97/#size","text":"\u5982\u679c   q [ 0 ]   < =   q [ 1 ]   \uff0c   \u961f\u5217 \u957f\u5ea6 \u4e3a \uff1a   q [ 1 ]   -   q [ 0 ]   \uff1b   \u5982\u679c   q [ 0 ]   >   q [ 1 ]   \uff0c \u961f\u5217 \u957f\u5ea6 \u4e3a \uff1a   q [ 1 ]   -   2   +   N   -   q [ 0 ]   =   q [ 1 ]   -   q [ 0 ]   +   N   -   2   \u8054\u7acb \u4e0a\u8ff0 \u4e24\u79cd \u60c5\u51b5 \uff1a   size   =   ( q [ 1 ]   -   q [ 0 ]   +   N   -   2 )   %   ( N   -   2 )   int   size   (   int   q   [ ] )   {   return   (   q   [   1   ]   -   q   [   0   ]   +   N   -   2   )   %   (   N   -   2   ) ;   }","title":"size"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E9%98%9F%E5%88%97/#full","text":"\u5982\u679c   size   = =   N   -   3   \uff0c \u8bf4\u660e \u6b64\u65f6 \u5df2\u6ee1   bool   full   (   int   q   [ ] )   {   return   size   (   q   )   = =   N   -   3   ;   }","title":"full"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E9%98%9F%E5%88%97/#push","text":"\u6267\u884c   q [ q [ 1 ] ]   =   x   \uff0c   q [ 1 ]   ++   \u53f3\u79fb   \u53f3\u79fb \u65f6 \uff0c \u5982\u679c   q [ 1 ]   = =   N   \u5c31\u8981 \u8ba9   q [ 1 ]   =   2   \uff0c \u5230\u5e95 \u8bf4\u5230\u5e95 \uff0c   q [ 1 ]   \u7684 \u53d6\u503c \u8303\u56f4 \u4e3a \uff1a   \\ ( [ 2 ,   N   -   1 ]   =   [ 0 ,   N   -   3 ]   +   2 \\ )   \uff0c \u6240\u4ee5   q [ 1 ]   =   ( q [ 1 ]   -   2   +   1 )   %   ( N   -   2 )   +   2   =   ( q [ 1 ]   -   1 )   %   ( N   -   2 )   +   2   void   push   (   int   q   [ ] ,   int   x   )   {   q   [   q   [   1   ] ]   =   x   ;   q   [   1   ]   =   (   q   [   1   ]   -   1   )   %   (   N   -   2   )   +   2   ;   }","title":"push"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E9%98%9F%E5%88%97/#pop","text":"\u540c\u7406 \uff0c \u5220\u9664 \u64cd\u4f5c \uff0c \u5148 \u8bb0\u5f55 \u4e0b   q [ 0 ]   \u7684 \u503c \uff0c \u518d \u6267\u884c \u548c \u4e0a\u8ff0 \u53f3\u79fb \u4e00\u6837 \u7684 \u64cd\u4f5c \u3002   int   pop   (   int   q   [ ] )   {   int   t   =   q   [   q   [   0   ] ] ;   q   [   0   ]   =   (   q   [   0   ]   -   1   )   %   (   N   -   2   )   +   2   ;   return   t   ;   }   \u4ee3\u7801 \u6c47\u603b   \u6a21\u62df \u961f\u5217   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   const   int   N   =   int   (   1e5   +   10   ) ;   int   q   [   N   ] ;   / /   \u5c3e \u8fdb\u5934 \u51fa \uff0c \u89c4\u5b9a   q [ 0 ]   \u4ee3\u8868 \u4ee3\u8868\u961f \u5934 \uff0c q [ 1 ]   \u4ee3\u8868 \u4ee3\u8868\u961f \u5c3e   / /   \u521d\u59cb \u521d\u59cb\u5316 \u961f\u5217   void   init   (   int   q   [ ] )   {   q   [   0   ]   =   q   [   1   ]   =   2   ;   }   / /   \u89c4\u5b9a   q [ 0 ]   = =   q [ 1 ]   \u65f6 \uff0c \u961f \u5217\u4e3a \u7a7a   bool   empty   (   int   q   [ ] )   {   return   q   [   0   ]   = =   q   [   1   ] ;   }   / /   \u961f\u5217 \u5143\u7d20 \u4e2a\u6570 \u63a8\u5bfc \uff1a   / /   \u5982\u679c   q [ 0 ]   < =   q [ 1 ] \uff0c \u5219   size   =   q [ 1 ]   -   q [ 0 ]   / /   \u5982\u679c   q [ 1 ]   <   q [ 0 ] \uff0c \u5219   size   =   q [ 1 ]   -   2   +   N   -   q [ 0 ]   =   q [ 1 ]   -   q [ 0 ]   +   N   -   2   / /   \u7edf\u5408 \u4e0a\u8ff0 \u4e24\u79cd \u60c5\u51b5 \uff1a size   =   ( q [ 1 ]   -   q [ 0 ]   +   N   -   2 )   %   ( N   -   2 )   int   size   (   int   q   [ ] )   {   return   (   q   [   1   ]   -   q   [   0   ]   +   N   -   2   )   %   (   N   -   2   ) ;   }   / /   \u5224\u65ad \u6570\u7ec4 \u5143\u7d20 \u662f\u5426 \u7528 \u5b8c \uff0c \u6570\u7ec4 \u957f\u5ea6 \u4e3a   N   \uff0c \u5b9e\u9645 \u53ef\u7528 \u7a7a\u95f4 \u4e3a \uff1a N   -   3   bool   full   (   int   q   [ ] )   {   return   size   (   q   )   = =   N   -   3   ;   }   / /   \u63d2\u5165 \u5143\u7d20 \uff0c \u961f\u5c3e \u53f3\u79fb \uff0c q [ 1 ]   \u7684 \u53d6\u503c \u8303\u56f4 \u662f   [ 2 ,   N   -   1 ]   =   [ 0 ,   N   -   3 ]   +   2   / /   \u56e0\u6b64   q [ 1 ]   =   ( q [ 1 ]   -   2   +   1 ) %   ( N   -   2 )   +   2   =   ( q [ 1 ]   -   1 )   %   ( N   -   2 )   +   2   void   push   (   int   q   [ ] ,   int   x   )   {   q   [   q   [   1   ] ]   =   x   ;   q   [   1   ]   =   (   q   [   1   ]   -   1   )   %   (   N   -   2   )   +   2   ;   }   / /   \u83b7\u53d6 \u961f\u5934 \u5143\u7d20   int   front   (   int   q   [ ] )   {   return   q   [   q   [   0   ] ] ;   }   / /   \u5220\u9664 \u961f\u5934 \u5143\u7d20 \u5e76 \u8fd4\u56de \uff0c \u961f\u5934 \u53f3\u79fb   int   pop   (   int   q   [ ] )   {   int   t   =   q   [   q   [   0   ] ] ;   q   [   0   ]   =   (   q   [   0   ]   -   1   )   %   (   N   -   2   )   +   2   ;   return   t   ;   }","title":"pop"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E9%98%9F%E5%88%97/#_3","text":"\u89c4\u5b9a \u5934 \u8282\u70b9 \u5b58\u653e \u961f\u5217 \u7684 \u957f\u5ea6 \u4fe1\u606f \uff0c \u5934 \u8282\u70b9 \u7684   next   \u6307\u9488 \u624d \u6307\u5411 \u5b9e\u9645 \u7684 \u961f\u5217","title":"\u7ed3\u6784 \u4f53\u7248"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E9%98%9F%E5%88%97/#_4","text":"struct   Node   {   int   v   ;   Node   *   ne   ;   Node   (   int   val   =   0   ,   Node   *   next   =   nullptr   )   {   v   =   val   ,   ne   =   next   ;   }   } ;","title":"\u7ed3\u6784 \u4f53 \u5b9a\u4e49"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E9%98%9F%E5%88%97/#init_1","text":"Node   *   head   ,   *   tail   ;   void   init   ( )   {   / /   \u521d\u59cb \u65f6 \uff0c \u961f\u5217 \u957f\u5ea6 \u4e3a   0 \uff0c \u5934 \u8282\u70b9 \u7684   v   \u4e5f \u662f   0   head   =   tail   =   new   Node   ( ) ;   }","title":"init   \u521d\u59cb\u5316"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E9%98%9F%E5%88%97/#empty_1","text":"bool   empty   ( )   {   return   head   = =   tail   ;   }","title":"empty   \u5224\u65ad \u961f\u5217 \u662f\u5426 \u4e3a\u7a7a"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E9%98%9F%E5%88%97/#size_1","text":"int   size   ( )   {   return   head   - >   v   ;   }","title":"size   \u961f\u5217 \u957f\u5ea6"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E9%98%9F%E5%88%97/#push_1","text":"void   push   (   int   x   )   {   tail   - >   ne   =   new   Node   (   x   ) ;   tail   =   tail   - >   ne   ;   head   - >   v   ++   ;   }","title":"push   \u5c3e\u8fdb"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/%E9%98%9F%E5%88%97/#popfront","text":"int   front   ( )   {   return   head   - >   ne   - >   v   ;   }   void   pop   ( )   {   Node   *   p   =   head   - >   ne   ;   head   - >   ne   =   p   - >   ne   ;   delete   p   ;   head   - >   v   --   ;   }   \u4ee3\u7801 \u6c47\u603b   struct   Node   {   int   v   ;   Node   *   ne   ;   Node   (   int   val   =   0   ,   Node   *   next   =   nullptr   )   {   v   =   val   ,   ne   =   next   ;   }   } ;   Node   *   head   ,   *   tail   ;   void   init   ( )   {   / /   \u521d\u59cb \u65f6 \uff0c \u961f\u5217 \u957f\u5ea6 \u4e3a   0 \uff0c \u5934 \u8282\u70b9 \u7684   v   \u4e5f \u662f   0   head   =   tail   =   new   Node   ( ) ;   }   bool   empty   ( )   {   return   head   = =   tail   ;   }   int   size   ( )   {   return   head   - >   v   ;   }   void   push   (   int   x   )   {   tail   - >   ne   =   new   Node   (   x   ) ;   tail   =   tail   - >   ne   ;   head   - >   v   ++   ;   }   int   front   ( )   {   return   head   - >   ne   - >   v   ;   }   void   pop   ( )   {   Node   *   p   =   head   - >   ne   ;   head   - >   ne   =   p   - >   ne   ;   delete   p   ;   head   - >   v   --   ;   }","title":"pop \u3001 front   \u5934\u51fa"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/","text":"","title":"Index"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/int128/","text":"\u4ecb\u7ecd   __ int128 _ t   \u4e00\u822c \u5c06   __ int128 _ t   \u5b9a\u4e49 \u6210   int128   \uff1a   typedef   __ int128 _ t   int128   ;   qread   \u5feb\u8bfb   inline   int128   qread   ( )   {   int128   x   =   0   ,   f   =   1   ;   char   c   =   getchar   ( ) ;   while   (   c   <   ' 0 '   | |   c   >   ' 9 '   )   {   if   (   c   = =   ' - '   )   f   =   - 1   ;   c   =   getchar   ( ) ;   }   while   (   c   > =   ' 0 '   &&   c   < =   ' 9 '   )   {   x   =   x   *   10   +   c   -   ' 0 '   ;   c   =   getchar   ( ) ;   }   return   x   *   f   ;   }   qwrite   \u5feb\u8f93   void   qwrite   (   int128   x   )   {   if   (   x   <   0   )   x   =   -   x   ,   putchar   (   ' - '   ) ;   if   (   x   >   9   )   qwrite   (   x   /   10   ) ;   putchar   (   x   %   10   +   ' 0 '   ) ;   }   \u8fd0\u7b97   \u652f\u6301 \u6574\u6570 \u7684 \u4e00\u822c \u8fd0\u7b97 \u3002   \u4e00\u822c \u53ef \u7528\u4e8e \u9632 \u6ea2\u51fa   long   long   \u578b \u4e58\u6cd5 \uff1a   / /   \u9632\u6b62 \u6ea2\u51fa   LL   \u7684 \u4e58\u6cd5   inline   LL   qmul   (   int128   a   ,   int128   b   ,   LL   p   )   {   return   a   *   b   %   p   ;   }","title":"\u4ecb\u7ecd \u5927\u6570   __ int128 _ t"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/int128/#__int128_t","text":"\u4e00\u822c \u5c06   __ int128 _ t   \u5b9a\u4e49 \u6210   int128   \uff1a   typedef   __ int128 _ t   int128   ;","title":"\u4ecb\u7ecd   __ int128 _ t"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/int128/#qread","text":"inline   int128   qread   ( )   {   int128   x   =   0   ,   f   =   1   ;   char   c   =   getchar   ( ) ;   while   (   c   <   ' 0 '   | |   c   >   ' 9 '   )   {   if   (   c   = =   ' - '   )   f   =   - 1   ;   c   =   getchar   ( ) ;   }   while   (   c   > =   ' 0 '   &&   c   < =   ' 9 '   )   {   x   =   x   *   10   +   c   -   ' 0 '   ;   c   =   getchar   ( ) ;   }   return   x   *   f   ;   }","title":"qread   \u5feb\u8bfb"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/int128/#qwrite","text":"void   qwrite   (   int128   x   )   {   if   (   x   <   0   )   x   =   -   x   ,   putchar   (   ' - '   ) ;   if   (   x   >   9   )   qwrite   (   x   /   10   ) ;   putchar   (   x   %   10   +   ' 0 '   ) ;   }","title":"qwrite   \u5feb\u8f93"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/int128/#_1","text":"\u652f\u6301 \u6574\u6570 \u7684 \u4e00\u822c \u8fd0\u7b97 \u3002   \u4e00\u822c \u53ef \u7528\u4e8e \u9632 \u6ea2\u51fa   long   long   \u578b \u4e58\u6cd5 \uff1a   / /   \u9632\u6b62 \u6ea2\u51fa   LL   \u7684 \u4e58\u6cd5   inline   LL   qmul   (   int128   a   ,   int128   b   ,   LL   p   )   {   return   a   *   b   %   p   ;   }","title":"\u8fd0\u7b97"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/lowbit/","text":"lowbit   lowbit   \u53ef\u4ee5 \u8f93\u51fa \u6700\u540e \u4e00\u4e2a   1   \u6784\u6210 \u7684 \u6570 \u3002   \u539f\u7406 \u662f \uff1a   00101000   \u53d6\u53cd \uff1a   11010111   \u52a0   1 \uff1a   11011000   \u4e0e \u539f\u6570 \u6309\u4f4d \u4e0e \uff1a   00001000   \u8f93\u5165   0b00101000   \u8f93\u51fa   0b00001000   int   lowbit   (   int   x   )   {   return   (   ~   x   +   1   )   &   x   ;   }","title":"lowbit"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/lowbit/#lowbit","text":"lowbit   \u53ef\u4ee5 \u8f93\u51fa \u6700\u540e \u4e00\u4e2a   1   \u6784\u6210 \u7684 \u6570 \u3002   \u539f\u7406 \u662f \uff1a   00101000   \u53d6\u53cd \uff1a   11010111   \u52a0   1 \uff1a   11011000   \u4e0e \u539f\u6570 \u6309\u4f4d \u4e0e \uff1a   00001000   \u8f93\u5165   0b00101000   \u8f93\u51fa   0b00001000   int   lowbit   (   int   x   )   {   return   (   ~   x   +   1   )   &   x   ;   }","title":"lowbit"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E4%BA%8C%E8%BF%9B%E5%88%B6%201%20%E7%9A%84%E4%B8%AA%E6%95%B0/","text":"\u8fdb\u5236 \u4e8c\u8fdb\u5236   1   \u7684 \u4e2a\u6570   \u65b9\u6cd5 \u4e00   \u4e0d\u65ad \u5730 \u51cf\u53bb   lowbit   int   bitcnt   (   int   x   )   {   int   ans   =   0   ;   while   (   x   )   {   ans   ++   ;   x   - =   lowbit   (   x   ) ;   }   return   ans   ;   }   \u65b9\u6cd5 \u4e8c   int   b1   =   0b01010101010101010101010101010101   ;   int   b2   =   0b00110011001100110011001100110011   ;   int   b4   =   0b00001111000011110000111100001111   ;   int   b8   =   0b00000000111111110000000011111111   ;   int   b16   =   0b00000000000000001111111111111111   ;   int   bitcnt   (   int   x   )   {   x   =   (   b1   &   x   )   +   ( ( (   b1   < <   1   )   &   x   )   > >   1   ) ;   x   =   (   b2   &   x   )   +   ( ( (   b2   < <   2   )   &   x   )   > >   2   ) ;   x   =   (   b4   &   x   )   +   ( ( (   b4   < <   4   )   &   x   )   > >   4   ) ;   x   =   (   b8   &   x   )   +   ( ( (   b8   < <   8   )   &   x   )   > >   8   ) ;   x   =   (   b16   &   x   )   +   ( ( (   b16   < <   16   )   &   x   )   > >   16   ) ;   return   x   ;   }   AcWing   801 .   \u8fdb\u5236 \u4e8c\u8fdb\u5236 \u4e2d 1 \u7684 \u4e2a\u6570   \u7ed9\u5b9a \u4e00\u4e2a \u957f\u5ea6 \u4e3a   \\ ( n \\ )   \u7684 \u6570\u5217 \uff0c \u8bf7 \u4f60 \u6c42\u51fa \u6570\u5217 \u4e2d \u6bcf\u4e2a \u6570 \u7684 \u8fdb\u5236 \u4e8c\u8fdb\u5236 \u8868\u793a \u4e2d   \\ ( 1 \\ )   \u7684 \u4e2a\u6570 \u3002   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   int   lowbit   (   int   x   )   {   return   (   ~   x   +   1   )   &   x   ;   }   int   b1   =   0b01010101010101010101010101010101   ;   int   b2   =   0b00110011001100110011001100110011   ;   int   b4   =   0b00001111000011110000111100001111   ;   int   b8   =   0b00000000111111110000000011111111   ;   int   b16   =   0b00000000000000001111111111111111   ;   int   bitcnt   (   int   x   )   {   x   =   (   b1   &   x   )   +   ( ( (   b1   < <   1   )   &   x   )   > >   1   ) ;   x   =   (   b2   &   x   )   +   ( ( (   b2   < <   2   )   &   x   )   > >   2   ) ;   x   =   (   b4   &   x   )   +   ( ( (   b4   < <   4   )   &   x   )   > >   4   ) ;   x   =   (   b8   &   x   )   +   ( ( (   b8   < <   8   )   &   x   )   > >   8   ) ;   x   =   (   b16   &   x   )   +   ( ( (   b16   < <   16   )   &   x   )   > >   16   ) ;   return   x   ;   }   / /   int   bitcnt ( int   x )   / /   {   / /   int   ans   =   0 ;   / /   while   ( x )   {   ans   ++ ;   x   - =   lowbit ( x ) ;   }   / /   return   ans ;   / /   }   int   n   ,   t   ;   void   solve   (   void   )   {   scanf   (   \" % d \"   ,   &   n   ) ;   while   (   n   --   )   {   int   t   ;   scanf   (   \" % d \"   ,   &   t   ) ;   printf   (   \" % d   \"   ,   bitcnt   (   t   ) ) ;   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main   (   void   )   {   ifstream   fi   ;   ofstream   fo   ;   fi   .   open   (   \" . / lrq . in \"   ) ;   fo   .   open   (   \" . / lrq . out \"   ) ;   if   (   fi   .   is _ open   ( )   &&   fo   .   is _ open   ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl   ;   fo   .   close   ( ) ;   fi   .   close   ( ) ;   for   (   long   long   i   =   1   ;   i   < =   4e8   +   2e7   ;   i   ++   ) ;   FILE   *   fin   =   freopen   (   \" . / lrq . in \"   ,   \" r \"   ,   stdin   ) ;   FILE   *   fout   =   freopen   (   \" . / lrq . out \"   ,   \" w \"   ,   stdout   ) ;   solve   ( ) ;   fclose   (   fin   ) ;   fclose   (   fout   ) ;   }   else   solve   ( ) ;   return   0   ;   }","title":"\u4e8c\u8fdb\u5236   1   \u7684 \u4e2a\u6570"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E4%BA%8C%E8%BF%9B%E5%88%B6%201%20%E7%9A%84%E4%B8%AA%E6%95%B0/#1","text":"","title":"\u4e8c\u8fdb\u5236   1   \u7684 \u4e2a\u6570"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E4%BA%8C%E8%BF%9B%E5%88%B6%201%20%E7%9A%84%E4%B8%AA%E6%95%B0/#_1","text":"\u4e0d\u65ad \u5730 \u51cf\u53bb   lowbit   int   bitcnt   (   int   x   )   {   int   ans   =   0   ;   while   (   x   )   {   ans   ++   ;   x   - =   lowbit   (   x   ) ;   }   return   ans   ;   }","title":"\u65b9\u6cd5 \u4e00"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E4%BA%8C%E8%BF%9B%E5%88%B6%201%20%E7%9A%84%E4%B8%AA%E6%95%B0/#_2","text":"int   b1   =   0b01010101010101010101010101010101   ;   int   b2   =   0b00110011001100110011001100110011   ;   int   b4   =   0b00001111000011110000111100001111   ;   int   b8   =   0b00000000111111110000000011111111   ;   int   b16   =   0b00000000000000001111111111111111   ;   int   bitcnt   (   int   x   )   {   x   =   (   b1   &   x   )   +   ( ( (   b1   < <   1   )   &   x   )   > >   1   ) ;   x   =   (   b2   &   x   )   +   ( ( (   b2   < <   2   )   &   x   )   > >   2   ) ;   x   =   (   b4   &   x   )   +   ( ( (   b4   < <   4   )   &   x   )   > >   4   ) ;   x   =   (   b8   &   x   )   +   ( ( (   b8   < <   8   )   &   x   )   > >   8   ) ;   x   =   (   b16   &   x   )   +   ( ( (   b16   < <   16   )   &   x   )   > >   16   ) ;   return   x   ;   }   AcWing   801 .   \u8fdb\u5236 \u4e8c\u8fdb\u5236 \u4e2d 1 \u7684 \u4e2a\u6570   \u7ed9\u5b9a \u4e00\u4e2a \u957f\u5ea6 \u4e3a   \\ ( n \\ )   \u7684 \u6570\u5217 \uff0c \u8bf7 \u4f60 \u6c42\u51fa \u6570\u5217 \u4e2d \u6bcf\u4e2a \u6570 \u7684 \u8fdb\u5236 \u4e8c\u8fdb\u5236 \u8868\u793a \u4e2d   \\ ( 1 \\ )   \u7684 \u4e2a\u6570 \u3002   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   int   lowbit   (   int   x   )   {   return   (   ~   x   +   1   )   &   x   ;   }   int   b1   =   0b01010101010101010101010101010101   ;   int   b2   =   0b00110011001100110011001100110011   ;   int   b4   =   0b00001111000011110000111100001111   ;   int   b8   =   0b00000000111111110000000011111111   ;   int   b16   =   0b00000000000000001111111111111111   ;   int   bitcnt   (   int   x   )   {   x   =   (   b1   &   x   )   +   ( ( (   b1   < <   1   )   &   x   )   > >   1   ) ;   x   =   (   b2   &   x   )   +   ( ( (   b2   < <   2   )   &   x   )   > >   2   ) ;   x   =   (   b4   &   x   )   +   ( ( (   b4   < <   4   )   &   x   )   > >   4   ) ;   x   =   (   b8   &   x   )   +   ( ( (   b8   < <   8   )   &   x   )   > >   8   ) ;   x   =   (   b16   &   x   )   +   ( ( (   b16   < <   16   )   &   x   )   > >   16   ) ;   return   x   ;   }   / /   int   bitcnt ( int   x )   / /   {   / /   int   ans   =   0 ;   / /   while   ( x )   {   ans   ++ ;   x   - =   lowbit ( x ) ;   }   / /   return   ans ;   / /   }   int   n   ,   t   ;   void   solve   (   void   )   {   scanf   (   \" % d \"   ,   &   n   ) ;   while   (   n   --   )   {   int   t   ;   scanf   (   \" % d \"   ,   &   t   ) ;   printf   (   \" % d   \"   ,   bitcnt   (   t   ) ) ;   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main   (   void   )   {   ifstream   fi   ;   ofstream   fo   ;   fi   .   open   (   \" . / lrq . in \"   ) ;   fo   .   open   (   \" . / lrq . out \"   ) ;   if   (   fi   .   is _ open   ( )   &&   fo   .   is _ open   ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl   ;   fo   .   close   ( ) ;   fi   .   close   ( ) ;   for   (   long   long   i   =   1   ;   i   < =   4e8   +   2e7   ;   i   ++   ) ;   FILE   *   fin   =   freopen   (   \" . / lrq . in \"   ,   \" r \"   ,   stdin   ) ;   FILE   *   fout   =   freopen   (   \" . / lrq . out \"   ,   \" w \"   ,   stdout   ) ;   solve   ( ) ;   fclose   (   fin   ) ;   fclose   (   fout   ) ;   }   else   solve   ( ) ;   return   0   ;   }","title":"\u65b9\u6cd5 \u4e8c"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E5%BF%AB%E9%80%9F%E5%B9%82/","text":"\u5feb\u901f \u5e42   \u8ba1\u7b97   \\ ( a ^ { 0b10101010 } \\ )   :   \\ [ \\ begin { aligned }   a ^ { 0b10101010 }   & =   a ^ { 0b10000000 }   +   a ^ { 0b100000 }   +   a ^ { 0b1000 }   +   a ^ { 0b10 }   \\ \\   \\ \\   a ^ { 2 ^ 7   +   2 ^ 5   +   2 ^ 3   +   2 ^ 1 }   & =   a ^ { 2 ^ 7 }   \\ times   a ^ { 2 ^ 5 }   \\ times   a ^ { 2 ^ 3 }   \\ times   a ^ { 2 ^ 1 }   \\ end { aligned }   \\ ]   \u5e76\u4e14 \u6211\u4eec \u6709 \uff1a   \\ ( a ^ { 2 ^ { i   +   1 } }   =   a ^ { 2 ^ { i } }   \\ times   a ^ { 2 ^ { i } } \\ )   \uff1b   \u6211\u4eec \u53ea \u9700\u8981 \u5b9a\u4e49 \u4e00\u4e2a   \\ ( i \\ )   \u548c   \\ ( mo \\ )   :   \u521d\u59cb \u521d\u59cb\u5316 \u65f6   \\ ( i   =   1 \\ )   ,   \\ ( mo   =   a \\ )   \uff0c   \\ ( i \\ )   \u4ee3\u8868   \\ ( mo \\ )   \u662f   \\ ( a \\ )   \u7684   \\ ( i \\ )   \u6b21\u65b9 \uff1b   \u5982\u679c   \\ ( i \\   \\ & \\   n   \\ neq   0 \\ )   \uff0c   \\ ( ans   =   ans   *   mo \\ )   \\ ( i   < < =   1 ,   mo   =   mo   *   mo \\ )   typedef   __ int128 _ t   int128   ;   / /   \u9632\u6b62 \u6ea2\u51fa   LL   \u7684 \u4e58\u6cd5   inline   LL   qmul   (   int128   a   ,   int128   b   ,   LL   p   )   {   return   a   *   b   %   p   ;   }   / /   \u5feb\u901f \u5e42   LL   qpow   (   LL   a   ,   LL   n   ,   LL   p   )   {   LL   i   =   1   ,   ans   =   1   ,   mo   =   a   ;   while   (   i   < =   n   )   {   if   (   i   &   n   )   ans   =   qmul   (   ans   ,   mo   ,   p   ) ;   mo   =   qmul   (   mo   ,   mo   ,   p   ) ;   i   < < =   1   ;   }   return   ans   ;   }","title":"\u5feb\u901f \u5e42"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E5%BF%AB%E9%80%9F%E5%B9%82/#_1","text":"\u8ba1\u7b97   \\ ( a ^ { 0b10101010 } \\ )   :   \\ [ \\ begin { aligned }   a ^ { 0b10101010 }   & =   a ^ { 0b10000000 }   +   a ^ { 0b100000 }   +   a ^ { 0b1000 }   +   a ^ { 0b10 }   \\ \\   \\ \\   a ^ { 2 ^ 7   +   2 ^ 5   +   2 ^ 3   +   2 ^ 1 }   & =   a ^ { 2 ^ 7 }   \\ times   a ^ { 2 ^ 5 }   \\ times   a ^ { 2 ^ 3 }   \\ times   a ^ { 2 ^ 1 }   \\ end { aligned }   \\ ]   \u5e76\u4e14 \u6211\u4eec \u6709 \uff1a   \\ ( a ^ { 2 ^ { i   +   1 } }   =   a ^ { 2 ^ { i } }   \\ times   a ^ { 2 ^ { i } } \\ )   \uff1b   \u6211\u4eec \u53ea \u9700\u8981 \u5b9a\u4e49 \u4e00\u4e2a   \\ ( i \\ )   \u548c   \\ ( mo \\ )   :   \u521d\u59cb \u521d\u59cb\u5316 \u65f6   \\ ( i   =   1 \\ )   ,   \\ ( mo   =   a \\ )   \uff0c   \\ ( i \\ )   \u4ee3\u8868   \\ ( mo \\ )   \u662f   \\ ( a \\ )   \u7684   \\ ( i \\ )   \u6b21\u65b9 \uff1b   \u5982\u679c   \\ ( i \\   \\ & \\   n   \\ neq   0 \\ )   \uff0c   \\ ( ans   =   ans   *   mo \\ )   \\ ( i   < < =   1 ,   mo   =   mo   *   mo \\ )   typedef   __ int128 _ t   int128   ;   / /   \u9632\u6b62 \u6ea2\u51fa   LL   \u7684 \u4e58\u6cd5   inline   LL   qmul   (   int128   a   ,   int128   b   ,   LL   p   )   {   return   a   *   b   %   p   ;   }   / /   \u5feb\u901f \u5e42   LL   qpow   (   LL   a   ,   LL   n   ,   LL   p   )   {   LL   i   =   1   ,   ans   =   1   ,   mo   =   a   ;   while   (   i   < =   n   )   {   if   (   i   &   n   )   ans   =   qmul   (   ans   ,   mo   ,   p   ) ;   mo   =   qmul   (   mo   ,   mo   ,   p   ) ;   i   < < =   1   ;   }   return   ans   ;   }","title":"\u5feb\u901f \u5e42"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/","text":"\u6269\u5c55 \u6b27\u51e0 \u51e0\u91cc \u6b27\u51e0\u91cc\u5f97 \u7b97\u6cd5   \u9700\u6c42 \uff1a \u6c42   \\ ( ax   +   by   =   gcd ( a ,   b ) \\ )   \u7684 \u4e00\u7ec4 \u53ef\u884c \u89e3 \u3002   \u8bbe   \\ ( ax _ 1   +   by _ 1   =   gcd ( a ,   b ) \\ )   \u8bbe   \\ ( bx _ 2   +   ( a \\   \\ % \\   b ) y _ 2   =   gcd ( b ,   a \\   \\ % \\   b ) \\ )   \u56e0\u4e3a   \\ ( gcd ( b ,   a \\   \\ % \\   b )   =   gcd ( a ,   b ) \\ )   \uff0c \u6240\u4ee5 \u6709 \uff1a   \\ ( ax _ 1   +   by _ 1   =   bx _ 2   +   ( a \\   \\ % \\   b ) y _ 2 \\ )   \u56e0\u4e3a   \\ ( a \\   \\ % \\   b   =   a   -   \u230a \\ frac { a } { b } \u230b b \\ )   \uff0c \u6240\u4ee5 \uff1a   \\ ( ax _ 1   +   by _ 1   =   bx _ 2   +   ( a \\   \\ % \\   b ) y _ 2   =   bx _ 2   +   ( a   -   \u230a \\ frac { a } { b } \u230b b ) y _ 2 \\ )   \\ ( ax _ 1   +   by _ 1   =   ay _ 2   +   bx _ 2   -   \u230a \\ frac { a } { b } \u230b by _ 2 \\ )   \\ ( ax _ 1   +   by _ 1   =   ay _ 2   +   b ( x _ 2   -   \u230a \\ frac { a } { b } \u230b y _ 2 ) \\ )   \u7531\u4e8e   \\ ( a   =   a \uff0c b   =   b \\ )   \uff0c \u6240\u4ee5 :   \\ ( x _ 1   =   y _ 2 , \\   y _ 1   =   x _ 2   -   \u230a \\ frac { a } { b } \u230b y _ 2 \\ )   \u4e0a\u9762 \u7684 \u516c\u5f0f \u5176\u5b9e \u662f \u4e00\u6761 \u5411\u4e0b \u9012\u63a8 \u516c\u5f0f \uff0c \u8981\u6c42   \\ ( x _ 1 ,   y _ 1 \\ )   \uff0c \u5c31\u8981 \u5148\u6c42   \\ ( x _ 2 ,   y _ 2 \\ )   \uff0c \u8981\u6c42   \\ ( x _ 2 ,   y _ 2 \\ )   \uff0c \u5c31\u8981 \u5148\u6c42   \\ ( x _ 3 ,   y _ 3 \\ )   \uff0c \u00b7 \u00b7 \u00b7   \u4f9d\u6b64 \u6b64\u7c7b \u7c7b\u63a8 \u4f9d\u6b64\u7c7b\u63a8 \u3002   \u82e5 \u8003\u8651 \u9012\u63a8 \u7684 \u5e95\u90e8 \u662f \uff1a   \\ ( 1   \\ cdot   gcd ( a ,   b )   +   s   \\ cdot   0   =   gcd ( a ,   b ) \\ )   Warning   \u82e5\u80fd \u8fd9\u6837 \u5230\u8fbe \u9012\u63a8 \u7684 \u5e95\u90e8 \u51fa\u73b0   0   \u7684\u8bdd \uff0c \u5fc5\u987b \u8981\u6c42   \\ ( ax   +   by   =   gcd ( a ,   b ) \\ )   \u7684   \\ ( a   >   b \\ )   \u5e95\u90e8 \u7684 \u4e0a\u9762 \u4e00\u5c42 \u662f \uff1a   \\ ( ( k   +   1 ) gcd ( a ,   b )   +   ( - k ) gcd ( a ,   b )   =   gcd ( a ,   b ) \\ )   \u82e5 \u8981 \u6ee1\u8db3 \uff1a   \\ ( x _ 1   =   y _ 2 , \\   y _ 1   =   x _ 2   -   \u230a \\ frac { a } { b } \u230b y _ 2 \\ )   \uff0c \u5219 \uff1a   \\ ( ( k   +   1 )   =   s , \\   - k   =   1   -   \u230a \\ frac { ( k   +   1 ) gcd ( a ,   b ) } { ( - k ) gcd ( a ,   b ) } \u230b s \\ )   \\ ( ( k   +   1 )   =   s , \\   - k   =   1   +   s \\ )   \\ ( s   =   ( k   +   1 )   =   - ( k   +   1 ) \\ )   \u89e3\u5f97 \uff1a k   =   - 1 ,   s   =   0   \u6211\u4eec \u53ef\u4ee5 \u501f\u52a9 \u6c42   \\ ( gcd ( a ,   b ) \\ )   \u7684 \u6c42\u6cd5 \u5230\u8fbe \u9012\u63a8 \u7684 \u5e95\u90e8 \uff1a   gcd ( a ,   b )   \u7684 \u6c42\u6cd5   typedef   long   long   LL   ;   LL   gcd   (   LL   a   ,   LL   b   )   {   if   (   !   a   | |   !   b   )   return   a   |   b   ;   return   a   >   b   ?   gcd   (   b   ,   a   %   b   )   :   gcd   (   a   ,   b   %   a   ) ;   }   \u5230\u8fbe   \\ ( gcd ( a ,   b ) \\ )   \u7684 \u5e95\u90e8 \u65f6 \uff0c \u4e3a   0   \u7aef\u7684   \\ ( y   =   0 \\ )   \uff0c \u975e   0   \u7aef\u7684   \\ ( x   =   1 \\ )   \uff0c \u9012\u5f52 \u56de\u6eaf \uff0c \u518d \u786e\u5b9a \u4e0a\u9762 \u4e00\u5c42 \uff1a   \u6c42   ax   +   by   =   gcd ( a ,   b )   / /   \u5411\u4e0b \u9012\u63a8 \u7684 \u8fc7\u7a0b \u4fdd\u8bc1   a   >   b   LL   exgcd   (   LL   a   ,   LL   b   ,   LL   &   x1   ,   LL   &   y1   )   {   if   (   !   b   )   {   x1   =   1   ;   y1   =   0   ;   return   a   ;   }   LL   x2   ,   y2   ,   gd   ;   gd   =   exgcd   (   b   ,   a   %   b   ,   x2   ,   y2   ) ;   x1   =   y2   ;   y1   =   x2   -   a   /   b   *   y2   ;   return   gd   ;   }   \u6709 \u4e86 \u8fd9\u4e2a \u4e4b\u540e \uff0c \u5982\u679c \u6211\u4eec \u8981\u6c42   \\ ( ax   +   by   =   c \\ )   \u7684 \u4e00\u5bf9 \u6574\u6570 \u89e3 \uff0c \u7531\u4e8e   \\ ( d \\   | \\   a ,   d \\   | \\   b \\ )   \u6240\u4ee5   \\ ( d \\   | \\   ( ax   +   by ) \\ )   \uff0c \u5373 \uff1a   \\ ( d \\   | \\   c \\ )   \u6211\u4eec \u4e0d\u59a8 \u5148\u6c42   \\ ( ax   +   by   =   gcd ( a ,   b ) \\ )   \u7684 \u4e00\u5bf9 \u6574\u6570 \u89e3 \uff0c \u7136\u540e \u5bf9 \u8be5 \u65b9\u7a0b \u5de6\u53f3 \u540c\u65f6 \u4e58 \u4e0a   \\ ( c   /   gcd ( a ,   b ) \\ )   \u5c31 \u53ef\u4ee5 \u8f6c\u6362 \u6362\u6210 \u8f6c\u6362\u6210 \u65b9\u7a0b \uff1a   \\ ( ac   /   gcd ( a ,   b ) x   +   bc   /   gcd ( a ,   b ) y   =   c \\ )   \\ ( aX   +   bY   =   c \\ )   \u7684 \u89e3\u4e3a \uff1a   \\ ( X   =   c   /   gcd ( a ,   b ) x \uff0c Y   =   c   /   gcd ( a ,   b ) y \\ )   \u5982\u679c   \\ ( c   /   gcd ( a ,   b ) \\ )   \u4e0d\u662f \u6574\u6570 \u7684\u8bdd \uff0c \u5c31 \u4e00\u5b9a \u6ca1\u6709 \u6574\u6570 \u89e3 \uff0c \u56e0\u4e3a \u4e0a\u9762 \u63a8\u5bfc \u7684 \u65f6\u5019 \uff0c \u82e5\u6709 \u6574\u6570 \u89e3 \u5c31 \u4e00\u5b9a \u6709   \\ ( gcd ( a ,   b ) \\   | \\   c \\ )   \uff0c \u5b83\u4eec \u7684 \u903b\u8f91 \u5173\u7cfb \u903b\u8f91\u5173\u7cfb \u662f \uff1a   \u6709 \u6574\u6570 \u89e3   \\ ( \\ rightarrow   gcd ( a ,   b ) \\   | \\   c \\ )   \u300c AcWing   877 .   \u6269\u5c55 \u6b27\u51e0 \u51e0\u91cc \u6b27\u51e0\u91cc\u5f97 \u7b97\u6cd5 \u300d   \u7ed9 \u70b9   \\ ( n \\ )   \u5bf9 \u6574\u6570 \u6b63\u6574\u6570   \\ ( a _ i ,   b _ i \\ )   \uff0c \u5bf9\u4e8e \u6bcf\u961f \u6570 \uff0c \u6c42 \u51fa \u4e00\u7ec4   \\ ( x _ i ,   y _ i \\ )   \uff0c \u4f7f \u5176 \u6ee1\u8db3   \\ ( a _ i   \\ times   x _ i   +   b _ i   \\ times   y _ i   =   gcd ( a _ i ,   b _ i ) \\ )   \u3002   \u4ee3\u7801 \u53c2\u8003   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   typedef   long   long   LL   ;   / /   \u5411\u4e0b \u9012\u63a8 \u7684 \u8fc7\u7a0b \u4fdd\u8bc1   a   >   b   LL   exgcd   (   LL   a   ,   LL   b   ,   LL   &   x1   ,   LL   &   y1   )   {   if   (   !   b   )   {   x1   =   1   ;   y1   =   0   ;   return   a   ;   }   LL   x2   ,   y2   ,   gd   ;   gd   =   exgcd   (   b   ,   a   %   b   ,   x2   ,   y2   ) ;   x1   =   y2   ;   y1   =   x2   -   a   /   b   *   y2   ;   return   gd   ;   }   void   solve   (   void   )   {   int   n   ;   scanf   (   \" % d \"   ,   &   n   ) ;   while   (   n   --   )   {   LL   a   ,   b   ;   scanf   (   \" % lld% lld \"   ,   &   a   ,   &   b   ) ;   LL   x   ,   y   ;   if   (   a   > =   b   )   {   exgcd   (   a   ,   b   ,   x   ,   y   ) ;   printf   (   \" % lld   % lld   \\ n   \"   ,   x   ,   y   ) ;   }   else   {   exgcd   (   b   ,   a   ,   y   ,   x   ) ;   printf   (   \" % lld   % lld   \\ n   \"   ,   x   ,   y   ) ;   }   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main   (   void   )   {   ifstream   fi   ;   ofstream   fo   ;   fi   .   open   (   \" . / lrq . in \"   ) ;   fo   .   open   (   \" . / lrq . out \"   ) ;   if   (   fi   .   is _ open   ( )   &&   fo   .   is _ open   ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl   ;   fo   .   close   ( ) ;   fi   .   close   ( ) ;   for   (   long   long   i   =   1   ;   i   < =   4e8   +   2e7   ;   i   ++   ) ;   FILE   *   fin   =   freopen   (   \" . / lrq . in \"   ,   \" r \"   ,   stdin   ) ;   FILE   *   fout   =   freopen   (   \" . / lrq . out \"   ,   \" w \"   ,   stdout   ) ;   solve   ( ) ;   fclose   (   fin   ) ;   fclose   (   fout   ) ;   }   else   solve   ( ) ;   return   0   ;   }","title":"\u6269\u5c55 \u6b27\u51e0\u91cc\u5f97 \u7b97\u6cd5"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/#_1","text":"\u9700\u6c42 \uff1a \u6c42   \\ ( ax   +   by   =   gcd ( a ,   b ) \\ )   \u7684 \u4e00\u7ec4 \u53ef\u884c \u89e3 \u3002   \u8bbe   \\ ( ax _ 1   +   by _ 1   =   gcd ( a ,   b ) \\ )   \u8bbe   \\ ( bx _ 2   +   ( a \\   \\ % \\   b ) y _ 2   =   gcd ( b ,   a \\   \\ % \\   b ) \\ )   \u56e0\u4e3a   \\ ( gcd ( b ,   a \\   \\ % \\   b )   =   gcd ( a ,   b ) \\ )   \uff0c \u6240\u4ee5 \u6709 \uff1a   \\ ( ax _ 1   +   by _ 1   =   bx _ 2   +   ( a \\   \\ % \\   b ) y _ 2 \\ )   \u56e0\u4e3a   \\ ( a \\   \\ % \\   b   =   a   -   \u230a \\ frac { a } { b } \u230b b \\ )   \uff0c \u6240\u4ee5 \uff1a   \\ ( ax _ 1   +   by _ 1   =   bx _ 2   +   ( a \\   \\ % \\   b ) y _ 2   =   bx _ 2   +   ( a   -   \u230a \\ frac { a } { b } \u230b b ) y _ 2 \\ )   \\ ( ax _ 1   +   by _ 1   =   ay _ 2   +   bx _ 2   -   \u230a \\ frac { a } { b } \u230b by _ 2 \\ )   \\ ( ax _ 1   +   by _ 1   =   ay _ 2   +   b ( x _ 2   -   \u230a \\ frac { a } { b } \u230b y _ 2 ) \\ )   \u7531\u4e8e   \\ ( a   =   a \uff0c b   =   b \\ )   \uff0c \u6240\u4ee5 :   \\ ( x _ 1   =   y _ 2 , \\   y _ 1   =   x _ 2   -   \u230a \\ frac { a } { b } \u230b y _ 2 \\ )   \u4e0a\u9762 \u7684 \u516c\u5f0f \u5176\u5b9e \u662f \u4e00\u6761 \u5411\u4e0b \u9012\u63a8 \u516c\u5f0f \uff0c \u8981\u6c42   \\ ( x _ 1 ,   y _ 1 \\ )   \uff0c \u5c31\u8981 \u5148\u6c42   \\ ( x _ 2 ,   y _ 2 \\ )   \uff0c \u8981\u6c42   \\ ( x _ 2 ,   y _ 2 \\ )   \uff0c \u5c31\u8981 \u5148\u6c42   \\ ( x _ 3 ,   y _ 3 \\ )   \uff0c \u00b7 \u00b7 \u00b7   \u4f9d\u6b64 \u6b64\u7c7b \u7c7b\u63a8 \u4f9d\u6b64\u7c7b\u63a8 \u3002   \u82e5 \u8003\u8651 \u9012\u63a8 \u7684 \u5e95\u90e8 \u662f \uff1a   \\ ( 1   \\ cdot   gcd ( a ,   b )   +   s   \\ cdot   0   =   gcd ( a ,   b ) \\ )   Warning   \u82e5\u80fd \u8fd9\u6837 \u5230\u8fbe \u9012\u63a8 \u7684 \u5e95\u90e8 \u51fa\u73b0   0   \u7684\u8bdd \uff0c \u5fc5\u987b \u8981\u6c42   \\ ( ax   +   by   =   gcd ( a ,   b ) \\ )   \u7684   \\ ( a   >   b \\ )   \u5e95\u90e8 \u7684 \u4e0a\u9762 \u4e00\u5c42 \u662f \uff1a   \\ ( ( k   +   1 ) gcd ( a ,   b )   +   ( - k ) gcd ( a ,   b )   =   gcd ( a ,   b ) \\ )   \u82e5 \u8981 \u6ee1\u8db3 \uff1a   \\ ( x _ 1   =   y _ 2 , \\   y _ 1   =   x _ 2   -   \u230a \\ frac { a } { b } \u230b y _ 2 \\ )   \uff0c \u5219 \uff1a   \\ ( ( k   +   1 )   =   s , \\   - k   =   1   -   \u230a \\ frac { ( k   +   1 ) gcd ( a ,   b ) } { ( - k ) gcd ( a ,   b ) } \u230b s \\ )   \\ ( ( k   +   1 )   =   s , \\   - k   =   1   +   s \\ )   \\ ( s   =   ( k   +   1 )   =   - ( k   +   1 ) \\ )   \u89e3\u5f97 \uff1a k   =   - 1 ,   s   =   0   \u6211\u4eec \u53ef\u4ee5 \u501f\u52a9 \u6c42   \\ ( gcd ( a ,   b ) \\ )   \u7684 \u6c42\u6cd5 \u5230\u8fbe \u9012\u63a8 \u7684 \u5e95\u90e8 \uff1a   gcd ( a ,   b )   \u7684 \u6c42\u6cd5   typedef   long   long   LL   ;   LL   gcd   (   LL   a   ,   LL   b   )   {   if   (   !   a   | |   !   b   )   return   a   |   b   ;   return   a   >   b   ?   gcd   (   b   ,   a   %   b   )   :   gcd   (   a   ,   b   %   a   ) ;   }   \u5230\u8fbe   \\ ( gcd ( a ,   b ) \\ )   \u7684 \u5e95\u90e8 \u65f6 \uff0c \u4e3a   0   \u7aef\u7684   \\ ( y   =   0 \\ )   \uff0c \u975e   0   \u7aef\u7684   \\ ( x   =   1 \\ )   \uff0c \u9012\u5f52 \u56de\u6eaf \uff0c \u518d \u786e\u5b9a \u4e0a\u9762 \u4e00\u5c42 \uff1a   \u6c42   ax   +   by   =   gcd ( a ,   b )   / /   \u5411\u4e0b \u9012\u63a8 \u7684 \u8fc7\u7a0b \u4fdd\u8bc1   a   >   b   LL   exgcd   (   LL   a   ,   LL   b   ,   LL   &   x1   ,   LL   &   y1   )   {   if   (   !   b   )   {   x1   =   1   ;   y1   =   0   ;   return   a   ;   }   LL   x2   ,   y2   ,   gd   ;   gd   =   exgcd   (   b   ,   a   %   b   ,   x2   ,   y2   ) ;   x1   =   y2   ;   y1   =   x2   -   a   /   b   *   y2   ;   return   gd   ;   }   \u6709 \u4e86 \u8fd9\u4e2a \u4e4b\u540e \uff0c \u5982\u679c \u6211\u4eec \u8981\u6c42   \\ ( ax   +   by   =   c \\ )   \u7684 \u4e00\u5bf9 \u6574\u6570 \u89e3 \uff0c \u7531\u4e8e   \\ ( d \\   | \\   a ,   d \\   | \\   b \\ )   \u6240\u4ee5   \\ ( d \\   | \\   ( ax   +   by ) \\ )   \uff0c \u5373 \uff1a   \\ ( d \\   | \\   c \\ )   \u6211\u4eec \u4e0d\u59a8 \u5148\u6c42   \\ ( ax   +   by   =   gcd ( a ,   b ) \\ )   \u7684 \u4e00\u5bf9 \u6574\u6570 \u89e3 \uff0c \u7136\u540e \u5bf9 \u8be5 \u65b9\u7a0b \u5de6\u53f3 \u540c\u65f6 \u4e58 \u4e0a   \\ ( c   /   gcd ( a ,   b ) \\ )   \u5c31 \u53ef\u4ee5 \u8f6c\u6362 \u6362\u6210 \u8f6c\u6362\u6210 \u65b9\u7a0b \uff1a   \\ ( ac   /   gcd ( a ,   b ) x   +   bc   /   gcd ( a ,   b ) y   =   c \\ )   \\ ( aX   +   bY   =   c \\ )   \u7684 \u89e3\u4e3a \uff1a   \\ ( X   =   c   /   gcd ( a ,   b ) x \uff0c Y   =   c   /   gcd ( a ,   b ) y \\ )   \u5982\u679c   \\ ( c   /   gcd ( a ,   b ) \\ )   \u4e0d\u662f \u6574\u6570 \u7684\u8bdd \uff0c \u5c31 \u4e00\u5b9a \u6ca1\u6709 \u6574\u6570 \u89e3 \uff0c \u56e0\u4e3a \u4e0a\u9762 \u63a8\u5bfc \u7684 \u65f6\u5019 \uff0c \u82e5\u6709 \u6574\u6570 \u89e3 \u5c31 \u4e00\u5b9a \u6709   \\ ( gcd ( a ,   b ) \\   | \\   c \\ )   \uff0c \u5b83\u4eec \u7684 \u903b\u8f91 \u5173\u7cfb \u903b\u8f91\u5173\u7cfb \u662f \uff1a   \u6709 \u6574\u6570 \u89e3   \\ ( \\ rightarrow   gcd ( a ,   b ) \\   | \\   c \\ )   \u300c AcWing   877 .   \u6269\u5c55 \u6b27\u51e0 \u51e0\u91cc \u6b27\u51e0\u91cc\u5f97 \u7b97\u6cd5 \u300d   \u7ed9 \u70b9   \\ ( n \\ )   \u5bf9 \u6574\u6570 \u6b63\u6574\u6570   \\ ( a _ i ,   b _ i \\ )   \uff0c \u5bf9\u4e8e \u6bcf\u961f \u6570 \uff0c \u6c42 \u51fa \u4e00\u7ec4   \\ ( x _ i ,   y _ i \\ )   \uff0c \u4f7f \u5176 \u6ee1\u8db3   \\ ( a _ i   \\ times   x _ i   +   b _ i   \\ times   y _ i   =   gcd ( a _ i ,   b _ i ) \\ )   \u3002   \u4ee3\u7801 \u53c2\u8003   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   typedef   long   long   LL   ;   / /   \u5411\u4e0b \u9012\u63a8 \u7684 \u8fc7\u7a0b \u4fdd\u8bc1   a   >   b   LL   exgcd   (   LL   a   ,   LL   b   ,   LL   &   x1   ,   LL   &   y1   )   {   if   (   !   b   )   {   x1   =   1   ;   y1   =   0   ;   return   a   ;   }   LL   x2   ,   y2   ,   gd   ;   gd   =   exgcd   (   b   ,   a   %   b   ,   x2   ,   y2   ) ;   x1   =   y2   ;   y1   =   x2   -   a   /   b   *   y2   ;   return   gd   ;   }   void   solve   (   void   )   {   int   n   ;   scanf   (   \" % d \"   ,   &   n   ) ;   while   (   n   --   )   {   LL   a   ,   b   ;   scanf   (   \" % lld% lld \"   ,   &   a   ,   &   b   ) ;   LL   x   ,   y   ;   if   (   a   > =   b   )   {   exgcd   (   a   ,   b   ,   x   ,   y   ) ;   printf   (   \" % lld   % lld   \\ n   \"   ,   x   ,   y   ) ;   }   else   {   exgcd   (   b   ,   a   ,   y   ,   x   ) ;   printf   (   \" % lld   % lld   \\ n   \"   ,   x   ,   y   ) ;   }   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main   (   void   )   {   ifstream   fi   ;   ofstream   fo   ;   fi   .   open   (   \" . / lrq . in \"   ) ;   fo   .   open   (   \" . / lrq . out \"   ) ;   if   (   fi   .   is _ open   ( )   &&   fo   .   is _ open   ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl   ;   fo   .   close   ( ) ;   fi   .   close   ( ) ;   for   (   long   long   i   =   1   ;   i   < =   4e8   +   2e7   ;   i   ++   ) ;   FILE   *   fin   =   freopen   (   \" . / lrq . in \"   ,   \" r \"   ,   stdin   ) ;   FILE   *   fout   =   freopen   (   \" . / lrq . out \"   ,   \" w \"   ,   stdout   ) ;   solve   ( ) ;   fclose   (   fin   ) ;   fclose   (   fout   ) ;   }   else   solve   ( ) ;   return   0   ;   }","title":"\u6269\u5c55 \u6b27\u51e0\u91cc\u5f97 \u7b97\u6cd5"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E6%9A%B4%E5%8A%9B%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E5%AD%90/","text":"\u66b4\u529b \u5206\u89e3 \u8d28 \u56e0\u5b50   867 . \u5206\u89e3 \u56e0\u6570 \u8d28\u56e0\u6570   \u7ed9 \u70b9   \\ ( n \\ )   \u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( a _ i \\ )   \uff0c \u5c06 \u6bcf\u4e2a \u6570 \u5206\u89e3 \u56e0\u6570 \u8d28\u56e0\u6570 \uff0c \u5e76 \u5b89\u88c5 \u56e0\u6570 \u8d28\u56e0\u6570 \u4ece\u5c0f \u4ece\u5c0f\u5230\u5927 \u7684 \u987a\u5e8f \u8f93\u51fa \u6bcf\u4e2a \u56e0\u6570 \u8d28\u56e0\u6570 \u7684 \u5e95\u6570 \u548c \u8d28\u6570 \u3002   \u5bf9\u4e8e \u6bcf \u4e00\u4e2a \u300c \u5927\u4e8e   1 \u300d \u6574\u6570 \u6b63\u6574\u6570 \u90fd \u53ef\u4ee5 \u5206\u89e3 \u5206\u89e3\u6210   \\ ( n   =   p _ 1 ^ { k _ 1 }   \\ cdots   p _ n ^ { k _ n } \\ )   :   \\ ( p _ 1 \u3001 p _ 2 \u3001 p _ 3 \u3001 \\ cdots   \u3001 p _ n \\ )   \u662f \u5355\u8c03 \u9012\u589e \u7684 \uff1b   \u6211\u4eec \u5148 \u7528   \\ ( i \\ )   \u4ece   \\ ( 2 \\ )   \u5f00\u59cb \u5f80\u53f3 \u904d\u5386 \uff0c \u82e5   \\ ( n   \\ bmod   i   = =   0 \\ )   \uff0c \u5219   \\ ( i \\ )   \u5c31\u662f   \\ ( n \\ )   \u4e2d \u6700\u5c0f \u7684 \u8d28 \u56e0\u5b50 \uff1b   \u6211\u4eec \u5c06   \\ ( n \\ )   \u4e0d\u65ad \u7684 \u9664\u4ee5   \\ ( i \\ )   \uff0c \u76f4\u5230   \\ ( n   \\ bmod   i   \\ neq   0 \\ )   \u4e3a\u6b62 \uff1b   \\ ( i \\ )   \u63a5\u7740 \u5f80\u53f3 \u53f3\u8fb9 \u5f80\u53f3\u8fb9 \u904d\u5386 \uff0c \u82e5   \\ ( n   \\ bmod   i   = =   0 \\ )   \uff0c \u5219 \u6211\u4eec \u53c8 \u627e\u5230 \u4e86 \u4e00\u4e2a \u6b21 \u6700\u5c0f \u7684 \u8d28 \u56e0\u5b50 \uff0c \u7136\u540e \u4e0d\u65ad \u7684 \u9664\u4ee5   \\ ( i \\ )   \uff0c \u76f4\u5230 \u4e0d\u80fd \u6574\u9664 \u4e3a\u6b62 \uff1b   \u4e0d\u65ad \u7684 \u6267\u884c \u4e0a\u8ff0 \u6b65\u9aa4 \uff0c \u5c31 \u80fd \u786e\u5b9a \u51fa \u6240\u6709 \u7684 \u8d28 \u56e0\u5b50 \u3002   \u6211\u4eec \u8ba8\u8bba \u4e00\u4e0b \u8ba8\u8bba\u4e00\u4e0b \u8be5 \u5faa\u73af \u8981 \u4ec0\u4e48 \u65f6\u5019 \u9000\u51fa \uff0c \u6211\u4eec \u53ef\u4ee5 \u53d1\u73b0   \\ ( i \\ )   \u53ea\u8981 \u53bb \u5230   \\ ( sqrt ( n ) \\ )   \u65f6 \u5c31 \u80fd \u57fa\u672c \u786e\u5b9a \u8d28 \u56e0\u5b50 \uff1a   \u5bf9\u4e8e \u4efb\u610f \u4e00\u4e2a \u5927\u4e8e   1   \u7684 \u6574\u6570 \u6b63\u6574\u6570   \\ ( n \\ )   \uff0c \u6700 \u591a \u53ea\u80fd \u6709 \u4e00\u4e2a \u5927\u4e8e   \\ ( sqrt ( n ) \\ )   \u7684 \u8d28 \u56e0\u5b50 \u5b58\u5728 \uff1b   \u57fa\u672c \u6240\u6709 \u7684 \u8d28 \u56e0\u5b50   \\ ( p \\ )   \u90fd \u5c0f\u4e8e \u6216 \u7b49\u4e8e   \\ ( sqrt ( n ) \\ )   ;   \\ ( i \\ )   \u7684 \u904d\u5386 \u8303\u56f4 \u6700\u591a \u6700\u591a\u4e3a \uff1a   \\ ( [ 2 ,   sqrt ( n ) ] \\ )   \u5982\u679c   \\ ( n \\ )   \u662f \u7d20\u6570 \uff0c \u5219 \u300c \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u300d \u662f \u6700\u574f \u7684 \uff1a   \\ ( O ( sqrt ( n ) ) \\ )   \u3002   \u4ee3\u7801 \u53c2\u8003 \uff1a   / /   \u5206\u89e3 \u8d28 \u56e0\u5b50 \uff1a get   prime   factor   vector   <   vector   <   int   > >   get _ pf   (   int   n   )   {   vector   <   vector   <   int   > >   ans   ;   if   (   n   < =   1   )   return   ans   ;   for   (   int   i   =   2   ;   i   < =   n   /   i   ;   i   ++   )   {   if   (   !   (   n   %   i   ) )   {   ans   .   push _ back   ( {   i   ,   0   } ) ;   while   (   !   (   n   %   i   ) )   {   n   / =   i   ;   ans   .   back   ( ) [   1   ]   ++   ;   }   }   }   if   (   n   >   1   )   ans   .   push _ back   ( {   n   ,   1   } ) ;   return   ans   ;   }   \u300c 867 . \u5206\u89e3 \u56e0\u6570 \u8d28\u56e0\u6570 \u300d \u4ee3\u7801 \u53c2\u8003   \u7ed9 \u70b9   \\ ( n \\ )   \u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( a _ i \\ )   \uff0c \u5c06 \u6bcf\u4e2a \u6570 \u5206\u89e3 \u56e0\u6570 \u8d28\u56e0\u6570 \uff0c \u5e76 \u5b89\u88c5 \u56e0\u6570 \u8d28\u56e0\u6570 \u4ece\u5c0f \u4ece\u5c0f\u5230\u5927 \u7684 \u987a\u5e8f \u8f93\u51fa \u6bcf\u4e2a \u56e0\u6570 \u8d28\u56e0\u6570 \u7684 \u5e95\u6570 \u548c \u8d28\u6570 \u3002   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   int   n   ;   / /   \u5206\u89e3 \u8d28 \u56e0\u5b50 \uff1a get   prime   factor   vector   <   vector   <   int   > >   get _ pf   (   int   n   )   {   vector   <   vector   <   int   > >   ans   ;   if   (   n   < =   1   )   return   ans   ;   for   (   int   i   =   2   ;   i   < =   n   /   i   ;   i   ++   )   {   if   (   !   (   n   %   i   ) )   {   ans   .   push _ back   ( {   i   ,   0   } ) ;   while   (   !   (   n   %   i   ) )   {   n   / =   i   ;   ans   .   back   ( ) [   1   ]   ++   ;   }   }   }   if   (   n   >   1   )   ans   .   push _ back   ( {   n   ,   1   } ) ;   return   ans   ;   }   void   solve   (   void   )   {   scanf   (   \" % d \"   ,   &   n   ) ;   while   (   n   --   )   {   int   t   ;   scanf   (   \" % d \"   ,   &   t   ) ;   auto   ans   =   get _ pf   (   t   ) ;   for   (   auto   node   :   ans   )   printf   (   \" % d   % d   \\ n   \"   ,   node   [   0   ] ,   node   [   1   ] ) ;   puts   (   \" \"   ) ;   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main   (   void   )   {   ifstream   fi   ;   ofstream   fo   ;   fi   .   open   (   \" . / lrq . in \"   ) ;   fo   .   open   (   \" . / lrq . out \"   ) ;   if   (   fi   .   is _ open   ( )   &&   fo   .   is _ open   ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl   ;   fo   .   close   ( ) ;   fi   .   close   ( ) ;   for   (   long   long   i   =   1   ;   i   < =   4e8   +   2e7   ;   i   ++   ) ;   FILE   *   fin   =   freopen   (   \" . / lrq . in \"   ,   \" r \"   ,   stdin   ) ;   FILE   *   fout   =   freopen   (   \" . / lrq . out \"   ,   \" w \"   ,   stdout   ) ;   solve   ( ) ;   fclose   (   fin   ) ;   fclose   (   fout   ) ;   }   else   solve   ( ) ;   return   0   ;   }","title":"\u66b4\u529b \u5206\u89e3 \u8d28 \u56e0\u5b50"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E6%9A%B4%E5%8A%9B%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E5%AD%90/#_1","text":"867 . \u5206\u89e3 \u56e0\u6570 \u8d28\u56e0\u6570   \u7ed9 \u70b9   \\ ( n \\ )   \u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( a _ i \\ )   \uff0c \u5c06 \u6bcf\u4e2a \u6570 \u5206\u89e3 \u56e0\u6570 \u8d28\u56e0\u6570 \uff0c \u5e76 \u5b89\u88c5 \u56e0\u6570 \u8d28\u56e0\u6570 \u4ece\u5c0f \u4ece\u5c0f\u5230\u5927 \u7684 \u987a\u5e8f \u8f93\u51fa \u6bcf\u4e2a \u56e0\u6570 \u8d28\u56e0\u6570 \u7684 \u5e95\u6570 \u548c \u8d28\u6570 \u3002   \u5bf9\u4e8e \u6bcf \u4e00\u4e2a \u300c \u5927\u4e8e   1 \u300d \u6574\u6570 \u6b63\u6574\u6570 \u90fd \u53ef\u4ee5 \u5206\u89e3 \u5206\u89e3\u6210   \\ ( n   =   p _ 1 ^ { k _ 1 }   \\ cdots   p _ n ^ { k _ n } \\ )   :   \\ ( p _ 1 \u3001 p _ 2 \u3001 p _ 3 \u3001 \\ cdots   \u3001 p _ n \\ )   \u662f \u5355\u8c03 \u9012\u589e \u7684 \uff1b   \u6211\u4eec \u5148 \u7528   \\ ( i \\ )   \u4ece   \\ ( 2 \\ )   \u5f00\u59cb \u5f80\u53f3 \u904d\u5386 \uff0c \u82e5   \\ ( n   \\ bmod   i   = =   0 \\ )   \uff0c \u5219   \\ ( i \\ )   \u5c31\u662f   \\ ( n \\ )   \u4e2d \u6700\u5c0f \u7684 \u8d28 \u56e0\u5b50 \uff1b   \u6211\u4eec \u5c06   \\ ( n \\ )   \u4e0d\u65ad \u7684 \u9664\u4ee5   \\ ( i \\ )   \uff0c \u76f4\u5230   \\ ( n   \\ bmod   i   \\ neq   0 \\ )   \u4e3a\u6b62 \uff1b   \\ ( i \\ )   \u63a5\u7740 \u5f80\u53f3 \u53f3\u8fb9 \u5f80\u53f3\u8fb9 \u904d\u5386 \uff0c \u82e5   \\ ( n   \\ bmod   i   = =   0 \\ )   \uff0c \u5219 \u6211\u4eec \u53c8 \u627e\u5230 \u4e86 \u4e00\u4e2a \u6b21 \u6700\u5c0f \u7684 \u8d28 \u56e0\u5b50 \uff0c \u7136\u540e \u4e0d\u65ad \u7684 \u9664\u4ee5   \\ ( i \\ )   \uff0c \u76f4\u5230 \u4e0d\u80fd \u6574\u9664 \u4e3a\u6b62 \uff1b   \u4e0d\u65ad \u7684 \u6267\u884c \u4e0a\u8ff0 \u6b65\u9aa4 \uff0c \u5c31 \u80fd \u786e\u5b9a \u51fa \u6240\u6709 \u7684 \u8d28 \u56e0\u5b50 \u3002   \u6211\u4eec \u8ba8\u8bba \u4e00\u4e0b \u8ba8\u8bba\u4e00\u4e0b \u8be5 \u5faa\u73af \u8981 \u4ec0\u4e48 \u65f6\u5019 \u9000\u51fa \uff0c \u6211\u4eec \u53ef\u4ee5 \u53d1\u73b0   \\ ( i \\ )   \u53ea\u8981 \u53bb \u5230   \\ ( sqrt ( n ) \\ )   \u65f6 \u5c31 \u80fd \u57fa\u672c \u786e\u5b9a \u8d28 \u56e0\u5b50 \uff1a   \u5bf9\u4e8e \u4efb\u610f \u4e00\u4e2a \u5927\u4e8e   1   \u7684 \u6574\u6570 \u6b63\u6574\u6570   \\ ( n \\ )   \uff0c \u6700 \u591a \u53ea\u80fd \u6709 \u4e00\u4e2a \u5927\u4e8e   \\ ( sqrt ( n ) \\ )   \u7684 \u8d28 \u56e0\u5b50 \u5b58\u5728 \uff1b   \u57fa\u672c \u6240\u6709 \u7684 \u8d28 \u56e0\u5b50   \\ ( p \\ )   \u90fd \u5c0f\u4e8e \u6216 \u7b49\u4e8e   \\ ( sqrt ( n ) \\ )   ;   \\ ( i \\ )   \u7684 \u904d\u5386 \u8303\u56f4 \u6700\u591a \u6700\u591a\u4e3a \uff1a   \\ ( [ 2 ,   sqrt ( n ) ] \\ )   \u5982\u679c   \\ ( n \\ )   \u662f \u7d20\u6570 \uff0c \u5219 \u300c \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u300d \u662f \u6700\u574f \u7684 \uff1a   \\ ( O ( sqrt ( n ) ) \\ )   \u3002   \u4ee3\u7801 \u53c2\u8003 \uff1a   / /   \u5206\u89e3 \u8d28 \u56e0\u5b50 \uff1a get   prime   factor   vector   <   vector   <   int   > >   get _ pf   (   int   n   )   {   vector   <   vector   <   int   > >   ans   ;   if   (   n   < =   1   )   return   ans   ;   for   (   int   i   =   2   ;   i   < =   n   /   i   ;   i   ++   )   {   if   (   !   (   n   %   i   ) )   {   ans   .   push _ back   ( {   i   ,   0   } ) ;   while   (   !   (   n   %   i   ) )   {   n   / =   i   ;   ans   .   back   ( ) [   1   ]   ++   ;   }   }   }   if   (   n   >   1   )   ans   .   push _ back   ( {   n   ,   1   } ) ;   return   ans   ;   }   \u300c 867 . \u5206\u89e3 \u56e0\u6570 \u8d28\u56e0\u6570 \u300d \u4ee3\u7801 \u53c2\u8003   \u7ed9 \u70b9   \\ ( n \\ )   \u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( a _ i \\ )   \uff0c \u5c06 \u6bcf\u4e2a \u6570 \u5206\u89e3 \u56e0\u6570 \u8d28\u56e0\u6570 \uff0c \u5e76 \u5b89\u88c5 \u56e0\u6570 \u8d28\u56e0\u6570 \u4ece\u5c0f \u4ece\u5c0f\u5230\u5927 \u7684 \u987a\u5e8f \u8f93\u51fa \u6bcf\u4e2a \u56e0\u6570 \u8d28\u56e0\u6570 \u7684 \u5e95\u6570 \u548c \u8d28\u6570 \u3002   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   int   n   ;   / /   \u5206\u89e3 \u8d28 \u56e0\u5b50 \uff1a get   prime   factor   vector   <   vector   <   int   > >   get _ pf   (   int   n   )   {   vector   <   vector   <   int   > >   ans   ;   if   (   n   < =   1   )   return   ans   ;   for   (   int   i   =   2   ;   i   < =   n   /   i   ;   i   ++   )   {   if   (   !   (   n   %   i   ) )   {   ans   .   push _ back   ( {   i   ,   0   } ) ;   while   (   !   (   n   %   i   ) )   {   n   / =   i   ;   ans   .   back   ( ) [   1   ]   ++   ;   }   }   }   if   (   n   >   1   )   ans   .   push _ back   ( {   n   ,   1   } ) ;   return   ans   ;   }   void   solve   (   void   )   {   scanf   (   \" % d \"   ,   &   n   ) ;   while   (   n   --   )   {   int   t   ;   scanf   (   \" % d \"   ,   &   t   ) ;   auto   ans   =   get _ pf   (   t   ) ;   for   (   auto   node   :   ans   )   printf   (   \" % d   % d   \\ n   \"   ,   node   [   0   ] ,   node   [   1   ] ) ;   puts   (   \" \"   ) ;   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main   (   void   )   {   ifstream   fi   ;   ofstream   fo   ;   fi   .   open   (   \" . / lrq . in \"   ) ;   fo   .   open   (   \" . / lrq . out \"   ) ;   if   (   fi   .   is _ open   ( )   &&   fo   .   is _ open   ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl   ;   fo   .   close   ( ) ;   fi   .   close   ( ) ;   for   (   long   long   i   =   1   ;   i   < =   4e8   +   2e7   ;   i   ++   ) ;   FILE   *   fin   =   freopen   (   \" . / lrq . in \"   ,   \" r \"   ,   stdin   ) ;   FILE   *   fout   =   freopen   (   \" . / lrq . out \"   ,   \" w \"   ,   stdout   ) ;   solve   ( ) ;   fclose   (   fin   ) ;   fclose   (   fout   ) ;   }   else   solve   ( ) ;   return   0   ;   }","title":"\u66b4\u529b \u5206\u89e3 \u8d28 \u56e0\u5b50"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%20gcd/","text":"\u6700\u5927 \u5927\u516c \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u6700\u5927\u516c\u7ea6\u6570   gcd   872 . \u6700\u5927 \u5927\u516c \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u6700\u5927\u516c\u7ea6\u6570   \u7ed9\u5b9a   \\ ( n \\ )   \u5bf9 \u6574\u6570 \u6b63\u6574\u6570   \\ ( a _ i ,   b _ i \\ )   \uff0c \u8bf7 \u4f60 \u6c42\u51fa \u6bcf \u5bf9\u6570 \u7684 \u6700\u5927 \u5927\u516c \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u6700\u5927\u516c\u7ea6\u6570 \u3002   \u8bbe   \\ ( d \\ )   \u662f   \\ ( a \u3001 b \\ )   \u7684 \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \uff1a   \\ ( d \\   | \\   a \\ )   \uff0c   \\ ( d \\   | \\   b \\ )   \\ ( d \\   | \\   ( xa + yb ) \\ )   \u8bc1\u660e   \\ ( d \\   | \\   ( xa + yb ) \\ )   \uff1a   \u56e0\u4e3a   \\ ( d \\   | \\   a \\ )   \uff0c   \\ ( d \\   | \\   b \\ )   \uff0c \u6240\u4ee5 \u8bbe   \\ ( a   =   md , \\   b   =   nd \\ )   \uff0c \u5219   \\ ( ( xa   +   yb )   =   ( xmd   +   ynd )   =   d ( xm   +   yn ) \\ )   \u6240\u4ee5   \\ ( d \\   | \\   ( xa + yb ) \\ )   \u8bc1\u660e   \\ ( d \\   | \\   ( a \\   \\ % \\   b ) \\ )   \uff1a   \u82e5   \\ ( a   <   b \\ )   \u5219   \\ ( ( a \\   \\ % \\   b )   =   a \\ )   \uff0c \u56e0\u4e3a   \\ ( d \\   | \\   a \\ )   \uff0c   \\ ( d \\   | \\   b \\ )   \uff0c \u6240\u4ee5   \\ ( d \\   | \\   ( a \\   \\ % \\   b ) \\ )   \u82e5   \\ ( a   \\ geq   b \\ )   \u5219 \u8bbe   \\ ( k   =   a \\   \\ % \\   b \\ )   \uff0c \u6240\u4ee5   \\ ( a   =   xb   +   k \\ )   \uff0c \u6240\u4ee5   \\ ( k   =   xb   -   a \\ )   \uff0c \u7531\u4e8e   \\ ( d \\   | \\   ( xb   -   a )   =   k \\ )   \uff0c \u6240\u4ee5   \\ ( d \\   | \\   ( a \\   \\ % \\   b ) \\ )   \u7efc\u4e0a \uff1a   \\ ( d \\   | \\   ( a \\   \\ % \\   b ) \\ )   \u82e5   \\ ( a   >   b \\ )   \uff0c \u8bc1\u660e   \\ ( ( a ,   b ) \\ )   \u7684 \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u96c6\u5408 \u5b8c\u5168 \u7b49\u540c \u540c\u4e8e \u7b49\u540c\u4e8e   \\ ( ( b ,   a \\   \\ % \\   b ) \\ )   \u7684 \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u96c6\u5408   \u8bbe   \\ ( d \\ )   \u80fd \u6574\u9664   \\ ( a \\ )   \u548c   \\ ( b \\ )   \uff0c \u8bbe   \\ ( k   =   a \\   \\ % \\   b \\ )   \uff0c \u5219   \\ ( k   =   a   -   xb \\ )   \uff0c \u6240\u4ee5   \\ ( d \\   | \\   k \\ )   \uff0c \u6240\u4ee5   \\ ( ( a ,   b ) \\ )   \u7684 \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u96c6\u5408 \u5728   \\ ( ( b ,   a \\   \\ % \\   b ) \\ )   \u7684 \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u96c6\u5408 \u91cc\u9762 \uff1b   \u8bbe   \\ ( d \\ )   \u80fd \u6574\u9664   \\ ( b \\ )   \u548c   \\ ( a \\   \\ % \\   b \\ )   \uff0c \u8bbe   \\ ( k   =   a \\   \\ % \\   b \\ )   \uff0c \u5219   \\ ( d \\   | \\   k \\ )   \uff1b \u4e14 \u6211\u4eec \u6709 \uff1a   \\ ( a   =   xb   +   k \\ )   \uff0c \u800c   \\ ( d \\   | \\   ( xb   +   k   =   a ) \\ )   \uff0c \u6240\u4ee5   \\ ( d \\   | \\   a \\ )   \uff1b \u6240\u4ee5   \\ ( ( b ,   a \\   \\ % \\   b ) \\ )   \u7684 \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u96c6\u5408 \u4e5f \u5728   \\ ( ( a ,   b ) \\ )   \u7684 \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u96c6\u5408 \u91cc\u9762 \u3002   \u7efc\u4e0a \u4e24\u70b9 \u6211\u4eec \u6709 \uff1a   \\ ( ( a ,   b ) \\ )   \u7684 \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u96c6\u5408 \u5b8c\u5168 \u7b49\u540c \u540c\u4e8e \u7b49\u540c\u4e8e   \\ ( ( b ,   a \\   \\ % \\   b ) \\ )   \u7684 \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u96c6\u5408   \u8bbe\u8ba1   gcd   \u4ee3\u7801 \uff1a   typedef   long   long   LL   ;   LL   gcd   (   LL   a   ,   LL   b   )   {   if   (   !   a   | |   !   b   )   return   a   |   b   ;   return   a   >   b   ?   gcd   (   b   ,   a   %   b   )   :   gcd   (   a   ,   b   %   a   ) ;   }   \u300c 872 . \u6700\u5927 \u5927\u516c \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u6700\u5927\u516c\u7ea6\u6570 \u300d \u4ee3\u7801 \u53c2\u8003   \u7ed9\u5b9a   \\ ( n \\ )   \u5bf9 \u6574\u6570 \u6b63\u6574\u6570   \\ ( a _ i ,   b _ i \\ )   \uff0c \u8bf7 \u4f60 \u6c42\u51fa \u6bcf \u5bf9\u6570 \u7684 \u6700\u5927 \u5927\u516c \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u6700\u5927\u516c\u7ea6\u6570 \u3002   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   typedef   long   long   LL   ;   LL   gcd   (   LL   a   ,   LL   b   )   {   if   (   !   a   | |   !   b   )   return   a   |   b   ;   return   a   >   b   ?   gcd   (   b   ,   a   %   b   )   :   gcd   (   a   ,   b   %   a   ) ;   }   void   solve   (   void   )   {   int   n   ;   scanf   (   \" % d \"   ,   &   n   ) ;   while   (   n   --   )   {   int   a   ,   b   ;   scanf   (   \" % d% d \"   ,   &   a   ,   &   b   ) ;   printf   (   \" % d   \\ n   \"   ,   gcd   (   a   ,   b   ) ) ;   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main   (   void   )   {   ifstream   fi   ;   ofstream   fo   ;   fi   .   open   (   \" . / lrq . in \"   ) ;   fo   .   open   (   \" . / lrq . out \"   ) ;   if   (   fi   .   is _ open   ( )   &&   fo   .   is _ open   ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl   ;   fo   .   close   ( ) ;   fi   .   close   ( ) ;   for   (   long   long   i   =   1   ;   i   < =   4e8   +   2e7   ;   i   ++   ) ;   FILE   *   fin   =   freopen   (   \" . / lrq . in \"   ,   \" r \"   ,   stdin   ) ;   FILE   *   fout   =   freopen   (   \" . / lrq . out \"   ,   \" w \"   ,   stdout   ) ;   solve   ( ) ;   fclose   (   fin   ) ;   fclose   (   fout   ) ;   }   else   solve   ( ) ;   return   0   ;   }","title":"\u6700\u5927\u516c\u7ea6\u6570   gcd"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%20gcd/#gcd","text":"872 . \u6700\u5927 \u5927\u516c \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u6700\u5927\u516c\u7ea6\u6570   \u7ed9\u5b9a   \\ ( n \\ )   \u5bf9 \u6574\u6570 \u6b63\u6574\u6570   \\ ( a _ i ,   b _ i \\ )   \uff0c \u8bf7 \u4f60 \u6c42\u51fa \u6bcf \u5bf9\u6570 \u7684 \u6700\u5927 \u5927\u516c \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u6700\u5927\u516c\u7ea6\u6570 \u3002   \u8bbe   \\ ( d \\ )   \u662f   \\ ( a \u3001 b \\ )   \u7684 \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \uff1a   \\ ( d \\   | \\   a \\ )   \uff0c   \\ ( d \\   | \\   b \\ )   \\ ( d \\   | \\   ( xa + yb ) \\ )   \u8bc1\u660e   \\ ( d \\   | \\   ( xa + yb ) \\ )   \uff1a   \u56e0\u4e3a   \\ ( d \\   | \\   a \\ )   \uff0c   \\ ( d \\   | \\   b \\ )   \uff0c \u6240\u4ee5 \u8bbe   \\ ( a   =   md , \\   b   =   nd \\ )   \uff0c \u5219   \\ ( ( xa   +   yb )   =   ( xmd   +   ynd )   =   d ( xm   +   yn ) \\ )   \u6240\u4ee5   \\ ( d \\   | \\   ( xa + yb ) \\ )   \u8bc1\u660e   \\ ( d \\   | \\   ( a \\   \\ % \\   b ) \\ )   \uff1a   \u82e5   \\ ( a   <   b \\ )   \u5219   \\ ( ( a \\   \\ % \\   b )   =   a \\ )   \uff0c \u56e0\u4e3a   \\ ( d \\   | \\   a \\ )   \uff0c   \\ ( d \\   | \\   b \\ )   \uff0c \u6240\u4ee5   \\ ( d \\   | \\   ( a \\   \\ % \\   b ) \\ )   \u82e5   \\ ( a   \\ geq   b \\ )   \u5219 \u8bbe   \\ ( k   =   a \\   \\ % \\   b \\ )   \uff0c \u6240\u4ee5   \\ ( a   =   xb   +   k \\ )   \uff0c \u6240\u4ee5   \\ ( k   =   xb   -   a \\ )   \uff0c \u7531\u4e8e   \\ ( d \\   | \\   ( xb   -   a )   =   k \\ )   \uff0c \u6240\u4ee5   \\ ( d \\   | \\   ( a \\   \\ % \\   b ) \\ )   \u7efc\u4e0a \uff1a   \\ ( d \\   | \\   ( a \\   \\ % \\   b ) \\ )   \u82e5   \\ ( a   >   b \\ )   \uff0c \u8bc1\u660e   \\ ( ( a ,   b ) \\ )   \u7684 \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u96c6\u5408 \u5b8c\u5168 \u7b49\u540c \u540c\u4e8e \u7b49\u540c\u4e8e   \\ ( ( b ,   a \\   \\ % \\   b ) \\ )   \u7684 \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u96c6\u5408   \u8bbe   \\ ( d \\ )   \u80fd \u6574\u9664   \\ ( a \\ )   \u548c   \\ ( b \\ )   \uff0c \u8bbe   \\ ( k   =   a \\   \\ % \\   b \\ )   \uff0c \u5219   \\ ( k   =   a   -   xb \\ )   \uff0c \u6240\u4ee5   \\ ( d \\   | \\   k \\ )   \uff0c \u6240\u4ee5   \\ ( ( a ,   b ) \\ )   \u7684 \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u96c6\u5408 \u5728   \\ ( ( b ,   a \\   \\ % \\   b ) \\ )   \u7684 \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u96c6\u5408 \u91cc\u9762 \uff1b   \u8bbe   \\ ( d \\ )   \u80fd \u6574\u9664   \\ ( b \\ )   \u548c   \\ ( a \\   \\ % \\   b \\ )   \uff0c \u8bbe   \\ ( k   =   a \\   \\ % \\   b \\ )   \uff0c \u5219   \\ ( d \\   | \\   k \\ )   \uff1b \u4e14 \u6211\u4eec \u6709 \uff1a   \\ ( a   =   xb   +   k \\ )   \uff0c \u800c   \\ ( d \\   | \\   ( xb   +   k   =   a ) \\ )   \uff0c \u6240\u4ee5   \\ ( d \\   | \\   a \\ )   \uff1b \u6240\u4ee5   \\ ( ( b ,   a \\   \\ % \\   b ) \\ )   \u7684 \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u96c6\u5408 \u4e5f \u5728   \\ ( ( a ,   b ) \\ )   \u7684 \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u96c6\u5408 \u91cc\u9762 \u3002   \u7efc\u4e0a \u4e24\u70b9 \u6211\u4eec \u6709 \uff1a   \\ ( ( a ,   b ) \\ )   \u7684 \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u96c6\u5408 \u5b8c\u5168 \u7b49\u540c \u540c\u4e8e \u7b49\u540c\u4e8e   \\ ( ( b ,   a \\   \\ % \\   b ) \\ )   \u7684 \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u96c6\u5408   \u8bbe\u8ba1   gcd   \u4ee3\u7801 \uff1a   typedef   long   long   LL   ;   LL   gcd   (   LL   a   ,   LL   b   )   {   if   (   !   a   | |   !   b   )   return   a   |   b   ;   return   a   >   b   ?   gcd   (   b   ,   a   %   b   )   :   gcd   (   a   ,   b   %   a   ) ;   }   \u300c 872 . \u6700\u5927 \u5927\u516c \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u6700\u5927\u516c\u7ea6\u6570 \u300d \u4ee3\u7801 \u53c2\u8003   \u7ed9\u5b9a   \\ ( n \\ )   \u5bf9 \u6574\u6570 \u6b63\u6574\u6570   \\ ( a _ i ,   b _ i \\ )   \uff0c \u8bf7 \u4f60 \u6c42\u51fa \u6bcf \u5bf9\u6570 \u7684 \u6700\u5927 \u5927\u516c \u516c\u7ea6 \u7ea6\u6570 \u516c\u7ea6\u6570 \u6700\u5927\u516c\u7ea6\u6570 \u3002   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   typedef   long   long   LL   ;   LL   gcd   (   LL   a   ,   LL   b   )   {   if   (   !   a   | |   !   b   )   return   a   |   b   ;   return   a   >   b   ?   gcd   (   b   ,   a   %   b   )   :   gcd   (   a   ,   b   %   a   ) ;   }   void   solve   (   void   )   {   int   n   ;   scanf   (   \" % d \"   ,   &   n   ) ;   while   (   n   --   )   {   int   a   ,   b   ;   scanf   (   \" % d% d \"   ,   &   a   ,   &   b   ) ;   printf   (   \" % d   \\ n   \"   ,   gcd   (   a   ,   b   ) ) ;   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main   (   void   )   {   ifstream   fi   ;   ofstream   fo   ;   fi   .   open   (   \" . / lrq . in \"   ) ;   fo   .   open   (   \" . / lrq . out \"   ) ;   if   (   fi   .   is _ open   ( )   &&   fo   .   is _ open   ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl   ;   fo   .   close   ( ) ;   fi   .   close   ( ) ;   for   (   long   long   i   =   1   ;   i   < =   4e8   +   2e7   ;   i   ++   ) ;   FILE   *   fin   =   freopen   (   \" . / lrq . in \"   ,   \" r \"   ,   stdin   ) ;   FILE   *   fout   =   freopen   (   \" . / lrq . out \"   ,   \" w \"   ,   stdout   ) ;   solve   ( ) ;   fclose   (   fin   ) ;   fclose   (   fout   ) ;   }   else   solve   ( ) ;   return   0   ;   }","title":"\u6700\u5927\u516c\u7ea6\u6570   gcd"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%20lcm/","text":"\u6700\u5c0f \u500d\u6570 \u516c\u500d\u6570   lcm   \u7531   \\ ( a   \\ times   b   =   gcd ( a ,   b )   \\ times   lcm ( a ,   b ) \\ )   \uff0c \u5f97 \uff1a   \\ ( lcm ( a ,   b )   =   a   \\ times   b   \\ div   gcd ( a ,   b ) \\ )   \u8bc1\u660e   \\ ( a   \\ times   b   =   gcd ( a ,   b )   \\ times   lcm ( a ,   b ) \\ )   :   \u4ee4   \\ ( a   =   p _ 1 ^ { k _ 1 } p _ 2 ^ { k _ 2 }   \\ cdots   p _ n ^ { k _ n } \\ )   \uff0c   \\ ( b   =   p _ 1 ^ { s _ 1 } p _ 2 ^ { s _ 2 }   \\ cdots   p _ n ^ { s _ n } \\ )   \uff0c \u5219 \uff1a   \\ ( gcd ( a ,   b )   =   p _ 1 ^ { min ( k _ 1 ,   s _ 1 ) } p _ 2 ^ { min ( k _ 2 ,   s _ 2 ) }   \\ cdots   p _ n ^ { min ( k _ n ,   s _ n ) } \\ )   \\ ( lcm ( a ,   b )   =   p _ 1 ^ { max ( k _ 1 ,   s _ 1 ) } p _ 2 ^ { max ( k _ 2 ,   s _ 2 ) }   \\ cdots   p _ n ^ { max ( k _ n ,   s _ n ) } \\ )   \u6240\u4ee5 \uff1a   \\ ( a   \\ times   b   =   gcd ( a ,   b )   \\ times   lcm ( a ,   b ) \\ )   lcm   \u4ee3\u7801 \u8bbe\u8ba1 \uff1a   typedef   long   long   LL   ;   LL   gcd   (   LL   a   ,   LL   b   )   {   if   (   !   a   | |   !   b   )   return   a   |   b   ;   return   a   >   b   ?   gcd   (   b   ,   a   %   b   )   :   gcd   (   a   ,   b   %   a   ) ;   }   LL   lcm   (   LL   a   ,   LL   b   )   {   return   a   /   gcd   (   a   ,   b   )   *   b   ;   }","title":"\u6700\u5c0f \u516c\u500d\u6570   lcm"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%20lcm/#lcm","text":"\u7531   \\ ( a   \\ times   b   =   gcd ( a ,   b )   \\ times   lcm ( a ,   b ) \\ )   \uff0c \u5f97 \uff1a   \\ ( lcm ( a ,   b )   =   a   \\ times   b   \\ div   gcd ( a ,   b ) \\ )   \u8bc1\u660e   \\ ( a   \\ times   b   =   gcd ( a ,   b )   \\ times   lcm ( a ,   b ) \\ )   :   \u4ee4   \\ ( a   =   p _ 1 ^ { k _ 1 } p _ 2 ^ { k _ 2 }   \\ cdots   p _ n ^ { k _ n } \\ )   \uff0c   \\ ( b   =   p _ 1 ^ { s _ 1 } p _ 2 ^ { s _ 2 }   \\ cdots   p _ n ^ { s _ n } \\ )   \uff0c \u5219 \uff1a   \\ ( gcd ( a ,   b )   =   p _ 1 ^ { min ( k _ 1 ,   s _ 1 ) } p _ 2 ^ { min ( k _ 2 ,   s _ 2 ) }   \\ cdots   p _ n ^ { min ( k _ n ,   s _ n ) } \\ )   \\ ( lcm ( a ,   b )   =   p _ 1 ^ { max ( k _ 1 ,   s _ 1 ) } p _ 2 ^ { max ( k _ 2 ,   s _ 2 ) }   \\ cdots   p _ n ^ { max ( k _ n ,   s _ n ) } \\ )   \u6240\u4ee5 \uff1a   \\ ( a   \\ times   b   =   gcd ( a ,   b )   \\ times   lcm ( a ,   b ) \\ )   lcm   \u4ee3\u7801 \u8bbe\u8ba1 \uff1a   typedef   long   long   LL   ;   LL   gcd   (   LL   a   ,   LL   b   )   {   if   (   !   a   | |   !   b   )   return   a   |   b   ;   return   a   >   b   ?   gcd   (   b   ,   a   %   b   )   :   gcd   (   a   ,   b   %   a   ) ;   }   LL   lcm   (   LL   a   ,   LL   b   )   {   return   a   /   gcd   (   a   ,   b   )   *   b   ;   }","title":"\u6700\u5c0f \u516c\u500d\u6570   lcm"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/","text":"\u6b27\u62c9 \u51fd\u6570   \u6b27\u62c9 \u51fd\u6570 \u5b9a\u4e49   \\ ( 1   \\ sim   n \\ )   \u4e2d \u4e0e   \\ ( n \\ )   \u4e92\u8d28 \u7684 \u6570 \u7684 \u4e2a\u6570 \u79f0\u4e3a \u6b27\u62c9 \u51fd\u6570 \uff0c \u8bb0 \u4e3a   \\ ( \\ phi ( n ) \\ )   \u5728 \u7b97\u6570 \u57fa\u672c \u5b9a\u7406 \u4e2d \uff0c   \\ ( n   =   p _ 1 ^ { a _ 1 }   \\ times   p _ 2 ^ { a _ 2 }   \\ times   \\ cdots   \\ times   p _ n ^ { a _ n } \\ )   \u5219   \\ ( \\ phi ( n )   =   n   \\ times   \\ frac { p _ 1   -   1 } { p _ 1 }   \\ times   \\ frac { p _ 2   -   1 } { p _ 2 }   \\ times   \\ cdots   \\ times   \\ frac { p _ n   -   1 } { p _ n } \\ )   \u6b27\u62c9 \u51fd\u6570 \u8bc1\u660e   \u5728   \\ ( 1   \\ sim   n \\ )   \u5185 \uff1a   \u82e5   \\ ( n   =   1 \\ )   \uff0c \u5219   \\ ( \\ phi ( 1 )   =   1 \\ )   \uff0c 1   \u4e0e   1   \u4e92\u8d28 \u3002   \u82e5   \\ ( n \\ )   \u662f \u8d28\u6570 \uff0c \u5219   \\ ( \\ phi ( n )   =   n   -   1 \\ )   \uff0c \u4e0e \u8d28\u6570   \\ ( n \\ )   \u4e92\u8d28 \u7684 \u6570\u662f   \\ ( 1   \\ sim   n   -   1 \\ )   \u3002   \u82e5   \\ ( n \\ )   \u662f \u8d28\u6570 \u7684 \u67d0 \u51e0\u6b21 \u65b9 \uff1a   \\ ( n   =   p ^ k \\ )   \uff0c \u5219 \u5728   \\ ( 1   \\ sim   n \\ )   \u5185 \u4e0e   \\ ( n \\ )   \u4e0d \u4e92\u8d28 \u7684 \u6709 \uff1a   \\ ( p \u3001 2p \u3001 3p \u3001 \\ cdots \u3001 p ^ { k   -   1 } p \\ )   \u603b\u5171 \u6709   \\ ( p ^ { k   -   1 } \\ )   \u4e2a \u4e0e   \\ ( n \\ )   \u4e0d \u4e92\u8d28 \u7684 \uff0c \u6240\u4ee5   \\ ( \\ phi ( n )   =   p ^ k   -   p ^ { k   -   1 }   =   p ^ k   \\ times   ( 1   -   \\ frac { 1 } { p } ) \\ )   \u82e5   \\ ( n \\ )   \u662f \u4e24\u4e2a \u4e92\u8d28 \u7684 \u6570 \u7684 \u4e58\u79ef \uff1a   \\ ( n   =   a   \\ times   b \\ )   \uff0c \u5219   \\ ( \\ phi ( n )   =   \\ phi ( a )   \\ times   \\ phi ( b ) \\ )   \uff0c \u8bc1\u660e \u8bf7 \u770b \u4e0b \u4e00\u7ae0 \u3002   \u6709 \u4e86 \u4e0a\u9762 \u7684 \u57fa\u7840 \u4e4b\u540e \uff0c \u6839\u636e \u7b97\u672f \u57fa\u672c \u5b9a\u7406 \u6709 \uff1a   \\ ( n   =   p _ 1 ^ { a _ 1 }   \\ times   p _ 2 ^ { a _ 2 }   \\ times   \\ cdots   \\ times   p _ n ^ { a _ n } \\ )   \u5e76\u4e14   \\ ( p _ 1 ^ { a _ 1 } \u3001 p _ 2 ^ { a _ 2 } \u3001 \\ cdots   \u3001 p _ n ^ { a _ n } \\ )   \u4efb\u610f \u4e00\u5bf9 \u90fd \u4e92\u8d28 \uff0c \u6240\u4ee5 \u6839\u636e \u4e0a\u9762 \u7684 \u63a8\u7406 \u7b2c   4   \u70b9\u6709 \uff1a   \\ ( \\ phi ( n )   =   \\ phi ( p _ 1 ^ { a _ 1 } )   \\ times   \\ phi ( p _ 2 ^ { a _ 2 } )   \\ times   \\ cdots   \\ phi ( p _ n ^ { a _ n } ) \\ )   \u518d \u6839\u636e \u4e0a\u9762 \u7684 \u63a8\u7406 \u7b2c   3   \u70b9 \u6211\u4eec \u5bf9 \u4e00\u9879 \u6bcf\u4e00\u9879   \\ ( \\ phi ( p _ k ^ { a _ k } ) \\ )   \u90fd \u80fd \u5206\u89e3 \u5206\u89e3\u6210 \uff1a   \\ ( \\ phi ( p _ k ^ { a _ k } )   =   p _ k ^ { a _ k }   -   p _ k ^ { a _ k   -   1 } \\ )   \u6240\u4ee5   \\ ( \\ phi ( n )   =   ( p _ 1 ^ { a _ 1 }   -   p _ 1 ^ { a _ 1   -   1 } )   \\ times   ( p _ 2 ^ { a _ 2 }   -   p _ 2 ^ { a _ 2   -   1 } )   \\ times   \\ cdots   \\ times   ( p _ n ^ { a _ n }   -   p _ n ^ { a _ n   -   1 } ) \\ )   \u4e00\u6b65 \u8fdb\u4e00\u6b65 \u5316\u7b80 \u5f97 \uff1a   \\ ( \\ phi ( n )   =   p _ 1 ^ { a _ 1 }   \\ times   ( 1   -   \\ frac { 1 } { p _ 1 } )   \\ times   p _ 2 ^ { a _ 2 }   \\ times   ( 1   -   \\ frac { 1 } { p _ 2 } )   \\ times   \\ cdots   \\ times   p _ n ^ { a _ n }   \\ times   ( 1   -   \\ frac { 1 } { p _ n } ) \\ )   \u800c \u7531 \u524d\u9762 \u7684 \u7b97\u672f \u57fa\u672c \u5b9a\u7406 \uff1a   \\ ( n   =   p _ 1 ^ { a _ 1 }   \\ times   p _ 2 ^ { a _ 2 }   \\ times   \\ cdots   \\ times   p _ n ^ { a _ n } \\ )   \u6240\u4ee5 \uff1a   \\ [ \\ begin { aligned }   \\ phi ( n )   & =   p _ 1 ^ { a _ 1 }   \\ times   ( 1   -   \\ frac { 1 } { p _ 1 } )   \\ times   p _ 2 ^ { a _ 2 }   \\ times   ( 1   -   \\ frac { 1 } { p _ 2 } )   \\ times   \\ cdots   \\ times   p _ n ^ { a _ n }   \\ times   ( 1   -   \\ frac { 1 } { p _ n } )   \\ \\   & =   p _ 1 ^ { a _ 1 }   \\ times   p _ 2 ^ { a _ 3 }   \\ times   \\ cdots   \\ times   p _ n ^ { a _ n }   \\ times   ( 1   -   \\ frac { 1 } { p _ 1 } )   \\ times   ( 1   -   \\ frac { 1 } { p _ 2 } )   \\ times   \\ cdots   \\ times   ( 1   -   \\ frac { 1 } { p _ n } )   \\ \\   & =   n   \\ times   ( 1   -   \\ frac { 1 } { p _ 1 } )   \\ times   ( 1   -   \\ frac { 1 } { p _ 2 } )   \\ times   \\ cdots   \\ times   ( 1   -   \\ frac { 1 } { p _ n } )   \\ end { aligned } \\ ]   873 .   \u6b27\u62c9 \u51fd\u6570   \u7ed9\u5b9a   \\ ( n \\ )   \u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( a _ i \\ )   \uff0c \u53eb \u4f60 \u6c42 \u8fd9 \u6bcf \u4e00\u4e2a \u6570 \u7684 \u6b27\u62c9 \u51fd\u6570 \u3002   \u4ee3\u7801 \u53c2\u8003   / /   \u5982\u4f55 \u5c06 \u81ea\u5df1 \u7684 \u5fc3\u4e2d \u6240 \u60f3 \uff0c \u7528   \u300c \u6587\u5b57 \u300d \u3001 \u300c \u8bed\u8a00 \u300d \u3001 \u300c \u56fe\u50cf \u300d   \u8bb0\u5f55 \u5f55\u4e0b \u4e0b\u6765 \u5f55\u4e0b\u6765 \u8bb0\u5f55\u4e0b\u6765   typedef   long   long   ll   ;   const   int   N   =   int   (   1e7   +   10   ) ;   int   n   ;   int   a   [   N   ] ,   b   [   N   ] ;   void   get _ ds   (   int   n   )   {   b   [   0   ]   =   0   ;   for   (   int   i   =   2   ;   i   < =   n   /   i   ;   i   ++   )   {   if   (   n   %   i   = =   0   )   {   while   (   n   %   i   = =   0   )   n   / =   i   ;   b   [   ++   b   [   0   ] ]   =   i   ;   }   }   if   (   n   >   1   )   b   [   ++   b   [   0   ] ]   =   n   ;   }   void   solve   (   void   )   {   scanf   (   \" % d \"   ,   &   n   ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   scanf   (   \" % d \"   ,   a   +   i   ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   ll   ans   =   a   [   i   ] ;   get _ ds   (   a   [   i   ] ) ;   for   (   int   i   =   1   ;   i   < =   b   [   0   ] ;   i   ++   )   ans   =   ans   /   b   [   i   ]   *   (   b   [   i   ]   -   1   ) ;   printf   (   \" % lld   \\ n   \"   ,   ans   ) ;   }   }   / /   \u5e76 \u80fd \u4f7f \u8bfb\u8005 \u4e0e \u6211 \u8fbe\u6210 \u5171\u9e23 \uff0c \u662f \u6211 \u4ec0\u4e48 \u4e3a\u4ec0\u4e48 \u800c \u5b66\u4e60 \u7684 \u6700 \u672c\u8d28 \u7684 \u8ffd\u6c42   874 .   \u7b5b\u6cd5 \u6c42 \u6b27\u62c9 \u51fd\u6570   \u7ed9\u5b9a \u4e00\u4e2a \u6574\u6570   \\ ( n \\ )   \uff0c \u53eb \u4f60 \u6c42   \\ ( 1   \\ sim   n \\ )   \u4e2d \u6240\u6709 \u6570 \u7684 \u6b27\u62c9 \u51fd\u6570 \u4e4b \u548c \u3002   \u601d\u8def :   \u5047\u8bbe \u7ed9\u5b9a \u4e86 \u6570\u636e \uff1a   \\ ( [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7   , 8 ] \\ )   \u6211\u4eec \u53ef\u4ee5 \u5f88 \u8f7b\u677e \u5730\u6c42 \u51fa \u8d28\u6570   \\ ( 2 \u3001 3 \u3001 5 \u3001 7 \\ )   \u7684 \u6b27\u62c9 \u51fd\u6570 \uff1a   \\ ( \\ phi ( prime )   =   prime   -   1 \\ )   \uff0c \u5f53\u7136   \\ ( \\ phi ( 1 )   =   1 \\ )   \uff0c \u8fd9\u662f \u663e\u800c \u6613\u89c1 \u663e\u800c\u6613\u89c1 \u7684   \u518d \u6839\u636e \u4e0a\u9762 \u7684 \u63a8\u7406 \u7b2c   4   \u70b9 \uff1a   \u82e5   \\ ( n \\ )   \u662f \u4e24\u4e2a \u4e92\u8d28 \u7684 \u6570 \u7684 \u4e58\u79ef \uff1a   \\ ( n   =   a   \\ times   b \\ )   \uff0c \u5219   \\ ( \\ phi ( n )   =   \\ phi ( a )   \\ times   \\ phi ( b ) \\ )   \u5219 \u82e5 \u77e5\u9053 \u4e24\u4e2a \u6570   \\ ( i \u3001 j \\ )   \u7684   \\ ( \\ phi ( i ) \\ )   \u548c   \\ ( \\ phi ( j ) \\ )   \uff0c \u5176\u4e2d   \\ ( i \\ )   \u662f \u8d28\u6570 \uff0c \u4e14   \\ ( j   \\ bmod   i   \\ neq   0 \\ )   \uff0c \u8bf4\u660e   \\ ( i \u3001 j \\ )   \u4e92\u8d28 \uff0c \u6240\u4ee5   \\ ( \\ phi ( i   \\ times   j )   =   \\ phi ( i )   \\ times   \\ phi ( j ) \\ )   \u4f46 \u82e5   \\ ( j   \\ bmod   i   =   0 \\ )   \uff0c \u8bf4\u660e   \\ ( i \\ )   \u662f   \\ ( j \\ )   \u7684 \u8d28 \u56e0\u5b50 \uff0c \u7531 \u4e0a\u9762 \u7684 \u6b27\u62c9 \u516c\u5f0f \uff1a   \\ ( \\ phi ( n )   =   n   \\ times   ( 1   -   \\ frac { 1 } { p _ 1 } )   \\ times   ( 1   -   \\ frac { 1 } { p _ 2 } )   \\ times   \\ cdots   \\ times   ( 1   -   \\ frac { 1 } { p _ n } ) \\ )   \u5219   :   \\ ( \\ phi ( j )   =   j   \\ times   ( 1   -   \\ frac { 1 } { p _ 1 } )   \\ times   ( 1   -   \\ frac { 1 } { p _ 2 } )   \\ times   \\ cdots   \\ times   ( 1   -   \\ frac { 1 } { p _ n } ) \\ )   \\ ( \\ phi ( j   \\ times   i )   =   j   \\ times   i   \\ times   ( 1   -   \\ frac { 1 } { p _ 1 } )   \\ times   ( 1   -   \\ frac { 1 } { p _ 2 } )   \\ times   \\ cdots   \\ times   ( 1   -   \\ frac { 1 } { p _ n } )   =   \\ phi ( j )   \\ times   i \\ )   \u56e0\u6b64 \u6211\u4eec \u53ef\u4ee5 \u501f\u52a9 \u6b27\u62c9 \u7b5b \u8d28\u6570 \u6cd5\u6765 \u6c42\u51fa   \\ ( 1   \\ sim   n \\ )   \u5185 \u6240\u6709 \u6570 \u7684 \u6b27\u62c9 \u51fd\u6570 \u4e4b \u548c \u3002   \u4ee3\u7801 \u53c2\u8003   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   typedef   long   long   ll   ;   typedef   long   double   ld   ;   typedef   __ int128 _ t   int128   ;   / /   \u5982\u4f55 \u5c06 \u81ea\u5df1 \u7684 \u5fc3\u4e2d \u6240 \u60f3 \uff0c \u7528   \u300c \u6587\u5b57 \u300d \u3001 \u300c \u8bed\u8a00 \u300d \u3001 \u300c \u56fe\u50cf \u300d   \u8bb0\u5f55 \u5f55\u4e0b \u4e0b\u6765 \u5f55\u4e0b\u6765 \u8bb0\u5f55\u4e0b\u6765   const   int   N   =   int   (   1e7   +   10   ) ;   ll   p   [   N   ] ,   d   [   N   ] ,   e   [   N   ] ,   cnt   ;   int   n   ;   void   get _ p   (   int   n   )   {   e   [   1   ]   =   1   ;   for   (   int   i   =   2   ;   i   < =   n   ;   i   ++   )   {   if   (   d   [   i   ]   = =   0   )   p   [   cnt   ++   ]   =   i   ,   e   [   i   ]   =   i   -   1   ;   for   (   int   j   =   0   ;   p   [   j   ]   < =   n   /   i   ;   j   ++   )   {   d   [   p   [   j   ]   *   i   ]   =   1   ;   if   (   i   %   p   [   j   ]   = =   0   )   {   e   [   p   [   j   ]   *   i   ]   =   p   [   j   ]   *   e   [   i   ] ;   break   ;   }   else   e   [   p   [   j   ]   *   i   ]   =   e   [   p   [   j   ] ]   *   e   [   i   ] ;   }   }   }   void   solve   (   void   )   {   scanf   (   \" % d \"   ,   &   n   ) ;   get _ p   (   n   ) ;   ll   ans   =   0   ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   ans   + =   e   [   i   ] ;   printf   (   \" % lld   \\ n   \"   ,   ans   ) ;   }   / /   \u5e76 \u80fd \u4f7f \u8bfb\u8005 \u4e0e \u6211 \u8fbe\u6210 \u5171\u9e23 \uff0c \u662f \u6211 \u4ec0\u4e48 \u4e3a\u4ec0\u4e48 \u800c \u5b66\u4e60 \u7684 \u6700 \u672c\u8d28 \u7684 \u8ffd\u6c42   int   main   (   void   )   {   solve   ( ) ;   }","title":"\u6b27\u62c9 \u51fd\u6570"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/#_1","text":"\u6b27\u62c9 \u51fd\u6570 \u5b9a\u4e49   \\ ( 1   \\ sim   n \\ )   \u4e2d \u4e0e   \\ ( n \\ )   \u4e92\u8d28 \u7684 \u6570 \u7684 \u4e2a\u6570 \u79f0\u4e3a \u6b27\u62c9 \u51fd\u6570 \uff0c \u8bb0 \u4e3a   \\ ( \\ phi ( n ) \\ )   \u5728 \u7b97\u6570 \u57fa\u672c \u5b9a\u7406 \u4e2d \uff0c   \\ ( n   =   p _ 1 ^ { a _ 1 }   \\ times   p _ 2 ^ { a _ 2 }   \\ times   \\ cdots   \\ times   p _ n ^ { a _ n } \\ )   \u5219   \\ ( \\ phi ( n )   =   n   \\ times   \\ frac { p _ 1   -   1 } { p _ 1 }   \\ times   \\ frac { p _ 2   -   1 } { p _ 2 }   \\ times   \\ cdots   \\ times   \\ frac { p _ n   -   1 } { p _ n } \\ )   \u6b27\u62c9 \u51fd\u6570 \u8bc1\u660e   \u5728   \\ ( 1   \\ sim   n \\ )   \u5185 \uff1a   \u82e5   \\ ( n   =   1 \\ )   \uff0c \u5219   \\ ( \\ phi ( 1 )   =   1 \\ )   \uff0c 1   \u4e0e   1   \u4e92\u8d28 \u3002   \u82e5   \\ ( n \\ )   \u662f \u8d28\u6570 \uff0c \u5219   \\ ( \\ phi ( n )   =   n   -   1 \\ )   \uff0c \u4e0e \u8d28\u6570   \\ ( n \\ )   \u4e92\u8d28 \u7684 \u6570\u662f   \\ ( 1   \\ sim   n   -   1 \\ )   \u3002   \u82e5   \\ ( n \\ )   \u662f \u8d28\u6570 \u7684 \u67d0 \u51e0\u6b21 \u65b9 \uff1a   \\ ( n   =   p ^ k \\ )   \uff0c \u5219 \u5728   \\ ( 1   \\ sim   n \\ )   \u5185 \u4e0e   \\ ( n \\ )   \u4e0d \u4e92\u8d28 \u7684 \u6709 \uff1a   \\ ( p \u3001 2p \u3001 3p \u3001 \\ cdots \u3001 p ^ { k   -   1 } p \\ )   \u603b\u5171 \u6709   \\ ( p ^ { k   -   1 } \\ )   \u4e2a \u4e0e   \\ ( n \\ )   \u4e0d \u4e92\u8d28 \u7684 \uff0c \u6240\u4ee5   \\ ( \\ phi ( n )   =   p ^ k   -   p ^ { k   -   1 }   =   p ^ k   \\ times   ( 1   -   \\ frac { 1 } { p } ) \\ )   \u82e5   \\ ( n \\ )   \u662f \u4e24\u4e2a \u4e92\u8d28 \u7684 \u6570 \u7684 \u4e58\u79ef \uff1a   \\ ( n   =   a   \\ times   b \\ )   \uff0c \u5219   \\ ( \\ phi ( n )   =   \\ phi ( a )   \\ times   \\ phi ( b ) \\ )   \uff0c \u8bc1\u660e \u8bf7 \u770b \u4e0b \u4e00\u7ae0 \u3002   \u6709 \u4e86 \u4e0a\u9762 \u7684 \u57fa\u7840 \u4e4b\u540e \uff0c \u6839\u636e \u7b97\u672f \u57fa\u672c \u5b9a\u7406 \u6709 \uff1a   \\ ( n   =   p _ 1 ^ { a _ 1 }   \\ times   p _ 2 ^ { a _ 2 }   \\ times   \\ cdots   \\ times   p _ n ^ { a _ n } \\ )   \u5e76\u4e14   \\ ( p _ 1 ^ { a _ 1 } \u3001 p _ 2 ^ { a _ 2 } \u3001 \\ cdots   \u3001 p _ n ^ { a _ n } \\ )   \u4efb\u610f \u4e00\u5bf9 \u90fd \u4e92\u8d28 \uff0c \u6240\u4ee5 \u6839\u636e \u4e0a\u9762 \u7684 \u63a8\u7406 \u7b2c   4   \u70b9\u6709 \uff1a   \\ ( \\ phi ( n )   =   \\ phi ( p _ 1 ^ { a _ 1 } )   \\ times   \\ phi ( p _ 2 ^ { a _ 2 } )   \\ times   \\ cdots   \\ phi ( p _ n ^ { a _ n } ) \\ )   \u518d \u6839\u636e \u4e0a\u9762 \u7684 \u63a8\u7406 \u7b2c   3   \u70b9 \u6211\u4eec \u5bf9 \u4e00\u9879 \u6bcf\u4e00\u9879   \\ ( \\ phi ( p _ k ^ { a _ k } ) \\ )   \u90fd \u80fd \u5206\u89e3 \u5206\u89e3\u6210 \uff1a   \\ ( \\ phi ( p _ k ^ { a _ k } )   =   p _ k ^ { a _ k }   -   p _ k ^ { a _ k   -   1 } \\ )   \u6240\u4ee5   \\ ( \\ phi ( n )   =   ( p _ 1 ^ { a _ 1 }   -   p _ 1 ^ { a _ 1   -   1 } )   \\ times   ( p _ 2 ^ { a _ 2 }   -   p _ 2 ^ { a _ 2   -   1 } )   \\ times   \\ cdots   \\ times   ( p _ n ^ { a _ n }   -   p _ n ^ { a _ n   -   1 } ) \\ )   \u4e00\u6b65 \u8fdb\u4e00\u6b65 \u5316\u7b80 \u5f97 \uff1a   \\ ( \\ phi ( n )   =   p _ 1 ^ { a _ 1 }   \\ times   ( 1   -   \\ frac { 1 } { p _ 1 } )   \\ times   p _ 2 ^ { a _ 2 }   \\ times   ( 1   -   \\ frac { 1 } { p _ 2 } )   \\ times   \\ cdots   \\ times   p _ n ^ { a _ n }   \\ times   ( 1   -   \\ frac { 1 } { p _ n } ) \\ )   \u800c \u7531 \u524d\u9762 \u7684 \u7b97\u672f \u57fa\u672c \u5b9a\u7406 \uff1a   \\ ( n   =   p _ 1 ^ { a _ 1 }   \\ times   p _ 2 ^ { a _ 2 }   \\ times   \\ cdots   \\ times   p _ n ^ { a _ n } \\ )   \u6240\u4ee5 \uff1a   \\ [ \\ begin { aligned }   \\ phi ( n )   & =   p _ 1 ^ { a _ 1 }   \\ times   ( 1   -   \\ frac { 1 } { p _ 1 } )   \\ times   p _ 2 ^ { a _ 2 }   \\ times   ( 1   -   \\ frac { 1 } { p _ 2 } )   \\ times   \\ cdots   \\ times   p _ n ^ { a _ n }   \\ times   ( 1   -   \\ frac { 1 } { p _ n } )   \\ \\   & =   p _ 1 ^ { a _ 1 }   \\ times   p _ 2 ^ { a _ 3 }   \\ times   \\ cdots   \\ times   p _ n ^ { a _ n }   \\ times   ( 1   -   \\ frac { 1 } { p _ 1 } )   \\ times   ( 1   -   \\ frac { 1 } { p _ 2 } )   \\ times   \\ cdots   \\ times   ( 1   -   \\ frac { 1 } { p _ n } )   \\ \\   & =   n   \\ times   ( 1   -   \\ frac { 1 } { p _ 1 } )   \\ times   ( 1   -   \\ frac { 1 } { p _ 2 } )   \\ times   \\ cdots   \\ times   ( 1   -   \\ frac { 1 } { p _ n } )   \\ end { aligned } \\ ]   873 .   \u6b27\u62c9 \u51fd\u6570   \u7ed9\u5b9a   \\ ( n \\ )   \u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( a _ i \\ )   \uff0c \u53eb \u4f60 \u6c42 \u8fd9 \u6bcf \u4e00\u4e2a \u6570 \u7684 \u6b27\u62c9 \u51fd\u6570 \u3002   \u4ee3\u7801 \u53c2\u8003   / /   \u5982\u4f55 \u5c06 \u81ea\u5df1 \u7684 \u5fc3\u4e2d \u6240 \u60f3 \uff0c \u7528   \u300c \u6587\u5b57 \u300d \u3001 \u300c \u8bed\u8a00 \u300d \u3001 \u300c \u56fe\u50cf \u300d   \u8bb0\u5f55 \u5f55\u4e0b \u4e0b\u6765 \u5f55\u4e0b\u6765 \u8bb0\u5f55\u4e0b\u6765   typedef   long   long   ll   ;   const   int   N   =   int   (   1e7   +   10   ) ;   int   n   ;   int   a   [   N   ] ,   b   [   N   ] ;   void   get _ ds   (   int   n   )   {   b   [   0   ]   =   0   ;   for   (   int   i   =   2   ;   i   < =   n   /   i   ;   i   ++   )   {   if   (   n   %   i   = =   0   )   {   while   (   n   %   i   = =   0   )   n   / =   i   ;   b   [   ++   b   [   0   ] ]   =   i   ;   }   }   if   (   n   >   1   )   b   [   ++   b   [   0   ] ]   =   n   ;   }   void   solve   (   void   )   {   scanf   (   \" % d \"   ,   &   n   ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   scanf   (   \" % d \"   ,   a   +   i   ) ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   {   ll   ans   =   a   [   i   ] ;   get _ ds   (   a   [   i   ] ) ;   for   (   int   i   =   1   ;   i   < =   b   [   0   ] ;   i   ++   )   ans   =   ans   /   b   [   i   ]   *   (   b   [   i   ]   -   1   ) ;   printf   (   \" % lld   \\ n   \"   ,   ans   ) ;   }   }   / /   \u5e76 \u80fd \u4f7f \u8bfb\u8005 \u4e0e \u6211 \u8fbe\u6210 \u5171\u9e23 \uff0c \u662f \u6211 \u4ec0\u4e48 \u4e3a\u4ec0\u4e48 \u800c \u5b66\u4e60 \u7684 \u6700 \u672c\u8d28 \u7684 \u8ffd\u6c42   874 .   \u7b5b\u6cd5 \u6c42 \u6b27\u62c9 \u51fd\u6570   \u7ed9\u5b9a \u4e00\u4e2a \u6574\u6570   \\ ( n \\ )   \uff0c \u53eb \u4f60 \u6c42   \\ ( 1   \\ sim   n \\ )   \u4e2d \u6240\u6709 \u6570 \u7684 \u6b27\u62c9 \u51fd\u6570 \u4e4b \u548c \u3002   \u601d\u8def :   \u5047\u8bbe \u7ed9\u5b9a \u4e86 \u6570\u636e \uff1a   \\ ( [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7   , 8 ] \\ )   \u6211\u4eec \u53ef\u4ee5 \u5f88 \u8f7b\u677e \u5730\u6c42 \u51fa \u8d28\u6570   \\ ( 2 \u3001 3 \u3001 5 \u3001 7 \\ )   \u7684 \u6b27\u62c9 \u51fd\u6570 \uff1a   \\ ( \\ phi ( prime )   =   prime   -   1 \\ )   \uff0c \u5f53\u7136   \\ ( \\ phi ( 1 )   =   1 \\ )   \uff0c \u8fd9\u662f \u663e\u800c \u6613\u89c1 \u663e\u800c\u6613\u89c1 \u7684   \u518d \u6839\u636e \u4e0a\u9762 \u7684 \u63a8\u7406 \u7b2c   4   \u70b9 \uff1a   \u82e5   \\ ( n \\ )   \u662f \u4e24\u4e2a \u4e92\u8d28 \u7684 \u6570 \u7684 \u4e58\u79ef \uff1a   \\ ( n   =   a   \\ times   b \\ )   \uff0c \u5219   \\ ( \\ phi ( n )   =   \\ phi ( a )   \\ times   \\ phi ( b ) \\ )   \u5219 \u82e5 \u77e5\u9053 \u4e24\u4e2a \u6570   \\ ( i \u3001 j \\ )   \u7684   \\ ( \\ phi ( i ) \\ )   \u548c   \\ ( \\ phi ( j ) \\ )   \uff0c \u5176\u4e2d   \\ ( i \\ )   \u662f \u8d28\u6570 \uff0c \u4e14   \\ ( j   \\ bmod   i   \\ neq   0 \\ )   \uff0c \u8bf4\u660e   \\ ( i \u3001 j \\ )   \u4e92\u8d28 \uff0c \u6240\u4ee5   \\ ( \\ phi ( i   \\ times   j )   =   \\ phi ( i )   \\ times   \\ phi ( j ) \\ )   \u4f46 \u82e5   \\ ( j   \\ bmod   i   =   0 \\ )   \uff0c \u8bf4\u660e   \\ ( i \\ )   \u662f   \\ ( j \\ )   \u7684 \u8d28 \u56e0\u5b50 \uff0c \u7531 \u4e0a\u9762 \u7684 \u6b27\u62c9 \u516c\u5f0f \uff1a   \\ ( \\ phi ( n )   =   n   \\ times   ( 1   -   \\ frac { 1 } { p _ 1 } )   \\ times   ( 1   -   \\ frac { 1 } { p _ 2 } )   \\ times   \\ cdots   \\ times   ( 1   -   \\ frac { 1 } { p _ n } ) \\ )   \u5219   :   \\ ( \\ phi ( j )   =   j   \\ times   ( 1   -   \\ frac { 1 } { p _ 1 } )   \\ times   ( 1   -   \\ frac { 1 } { p _ 2 } )   \\ times   \\ cdots   \\ times   ( 1   -   \\ frac { 1 } { p _ n } ) \\ )   \\ ( \\ phi ( j   \\ times   i )   =   j   \\ times   i   \\ times   ( 1   -   \\ frac { 1 } { p _ 1 } )   \\ times   ( 1   -   \\ frac { 1 } { p _ 2 } )   \\ times   \\ cdots   \\ times   ( 1   -   \\ frac { 1 } { p _ n } )   =   \\ phi ( j )   \\ times   i \\ )   \u56e0\u6b64 \u6211\u4eec \u53ef\u4ee5 \u501f\u52a9 \u6b27\u62c9 \u7b5b \u8d28\u6570 \u6cd5\u6765 \u6c42\u51fa   \\ ( 1   \\ sim   n \\ )   \u5185 \u6240\u6709 \u6570 \u7684 \u6b27\u62c9 \u51fd\u6570 \u4e4b \u548c \u3002   \u4ee3\u7801 \u53c2\u8003   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   typedef   long   long   ll   ;   typedef   long   double   ld   ;   typedef   __ int128 _ t   int128   ;   / /   \u5982\u4f55 \u5c06 \u81ea\u5df1 \u7684 \u5fc3\u4e2d \u6240 \u60f3 \uff0c \u7528   \u300c \u6587\u5b57 \u300d \u3001 \u300c \u8bed\u8a00 \u300d \u3001 \u300c \u56fe\u50cf \u300d   \u8bb0\u5f55 \u5f55\u4e0b \u4e0b\u6765 \u5f55\u4e0b\u6765 \u8bb0\u5f55\u4e0b\u6765   const   int   N   =   int   (   1e7   +   10   ) ;   ll   p   [   N   ] ,   d   [   N   ] ,   e   [   N   ] ,   cnt   ;   int   n   ;   void   get _ p   (   int   n   )   {   e   [   1   ]   =   1   ;   for   (   int   i   =   2   ;   i   < =   n   ;   i   ++   )   {   if   (   d   [   i   ]   = =   0   )   p   [   cnt   ++   ]   =   i   ,   e   [   i   ]   =   i   -   1   ;   for   (   int   j   =   0   ;   p   [   j   ]   < =   n   /   i   ;   j   ++   )   {   d   [   p   [   j   ]   *   i   ]   =   1   ;   if   (   i   %   p   [   j   ]   = =   0   )   {   e   [   p   [   j   ]   *   i   ]   =   p   [   j   ]   *   e   [   i   ] ;   break   ;   }   else   e   [   p   [   j   ]   *   i   ]   =   e   [   p   [   j   ] ]   *   e   [   i   ] ;   }   }   }   void   solve   (   void   )   {   scanf   (   \" % d \"   ,   &   n   ) ;   get _ p   (   n   ) ;   ll   ans   =   0   ;   for   (   int   i   =   1   ;   i   < =   n   ;   i   ++   )   ans   + =   e   [   i   ] ;   printf   (   \" % lld   \\ n   \"   ,   ans   ) ;   }   / /   \u5e76 \u80fd \u4f7f \u8bfb\u8005 \u4e0e \u6211 \u8fbe\u6210 \u5171\u9e23 \uff0c \u662f \u6211 \u4ec0\u4e48 \u4e3a\u4ec0\u4e48 \u800c \u5b66\u4e60 \u7684 \u6700 \u672c\u8d28 \u7684 \u8ffd\u6c42   int   main   (   void   )   {   solve   ( ) ;   }","title":"\u6b27\u62c9 \u51fd\u6570"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E6%AC%A7%E6%8B%89%E7%AD%9B%E8%B4%A8%E6%95%B0/","text":"\u6b27\u62c9 \u7b5b \u8d28\u6570   868 . \u7b5b \u8d28\u6570   \u7ed9 \u70b9 \u4e00\u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( n \\ )   \uff0c \u8bf7 \u4f60 \u6c42\u51fa   \\ ( 1   \\ sim   n \\ )   \u4e2d \u7684 \u8d28\u6570 \u4e2a\u6570 \u3002   \u6b27\u62c9 \u7b5b\u6cd5 \uff1a   \u7ed9 \u70b9 \u4e00\u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( n \\ )   \uff1b   \u5148 \u521b\u5efa \u4e24\u4e2a \u6570\u7ec4 \uff1a   \\ ( pm [ N ] \\ )   \u3001   \\ ( dt [ N ] \\ )   \uff0c \u5206\u522b \u4ee3\u8868 \u8d28\u6570 \u6570\u7ec4 \uff0c \u548c \u7528\u4e8e \u7b5b\u6570 \u7684 \u6570\u7ec4 \uff1b   \u7528 \u6307\u9488   \\ ( i \\ )   \u4ece   2   \u5f00\u59cb \u5411 \u53f3 \u904d\u5386 \uff1b   \u5982\u679c   \\ ( dt [ i ]   = =   0 \\ )   \u5c31 \u4ee3\u8868   \\ ( i \\ )   \u662f \u8d28\u6570   \u5148 \u5c06   \\ ( i \\ )   \u88c5\u8fdb   \\ ( pm [ N ] \\ )   \u7684 \u5c3e\u90e8 \uff1b   \u4e0d\u7ba1   \\ ( i \\ )   \u4e0d\u662f \u662f\u4e0d\u662f \u8d28\u6570 \uff0c \u90fd \u8981 \u7528   \\ ( j \\ )   \u4ece   \\ ( pm [ N ] \\ )   \u7684 \u5934\u90e8 \u5f00\u59cb \u5411 \u53f3 \u904d\u5386 \uff0c \u4e0d\u65ad \u7684 \u7b5b \u53bb   \\ ( dt [ pm [ j ]   *   i ]   =   1 \\ )   \u5f53\u7136 \u82e5   \\ ( pm [ j ]   *   i   >   n \\ )   \u5c31 \u6ca1\u6709 \u7b5b \u7684 \u5fc5\u8981 \u4e86 \uff0c \u76f4\u63a5 \u9000\u51fa \u5faa\u73af \u3002   \u7b5b\u53bb   \\ ( dt [ pm [ j ]   *   i ]   =   1 \\ )   \u4e86 \u4e4b\u540e \uff0c \u5982\u679c   \\ ( i   \\ bmod   pm [ j ]   = =   0 \\ )   \u4e5f \u8981 \u9000\u51fa \u5faa\u73af \u3002   \u7531\u4e8e \u6bcf\u4e2a \u6570\u53ea \u88ab \u7b5b \u4e00\u6b21 \uff0c \u6240\u4ee5 \u300c \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u300d \u662f \uff1a   \\ ( O ( n ) \\ )   \u3002   \u4ee3\u7801 \u53c2\u8003 \uff1a   const   int   N   =   int   (   1e7   +   10   ) ;   int   pm   [   N   ] ,   dt   [   N   ] ,   cnt   ;   void   get _ p   (   int   n   )   {   if   (   n   < =   1   )   return   ;   for   (   int   i   =   2   ;   i   < =   n   ;   i   ++   )   {   if   (   !   dt   [   i   ] )   pm   [   cnt   ++   ]   =   i   ;   for   (   int   j   =   0   ;   pm   [   j   ]   < =   n   /   i   ;   j   ++   )   {   dt   [   pm   [   j   ]   *   i   ]   =   1   ;   if   (   !   (   i   %   pm   [   j   ] ) )   break   ;   }   }   }   868 . \u7b5b \u8d28\u6570   \u7ed9 \u70b9 \u4e00\u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( n \\ )   \uff0c \u8bf7 \u4f60 \u6c42\u51fa   \\ ( 1   \\ sim   n \\ )   \u4e2d \u7684 \u8d28\u6570 \u4e2a\u6570 \u3002   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   const   int   N   =   int   (   1e7   +   10   ) ;   int   pm   [   N   ] ,   dt   [   N   ] ,   cnt   ;   void   get _ p   (   int   n   )   {   if   (   n   < =   1   )   return   ;   for   (   int   i   =   2   ;   i   < =   n   ;   i   ++   )   {   if   (   !   dt   [   i   ] )   pm   [   cnt   ++   ]   =   i   ;   for   (   int   j   =   0   ;   pm   [   j   ]   < =   n   /   i   ;   j   ++   )   {   dt   [   pm   [   j   ]   *   i   ]   =   1   ;   if   (   !   (   i   %   pm   [   j   ] ) )   break   ;   }   }   }   void   solve   (   void   )   {   int   n   ;   scanf   (   \" % d \"   ,   &   n   ) ;   get _ p   (   n   ) ;   printf   (   \" % d   \\ n   \"   ,   cnt   ) ;   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main   (   void   )   {   ifstream   fi   ;   ofstream   fo   ;   fi   .   open   (   \" . / lrq . in \"   ) ;   fo   .   open   (   \" . / lrq . out \"   ) ;   if   (   fi   .   is _ open   ( )   &&   fo   .   is _ open   ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl   ;   fo   .   close   ( ) ;   fi   .   close   ( ) ;   for   (   long   long   i   =   1   ;   i   < =   4e8   +   2e7   ;   i   ++   ) ;   FILE   *   fin   =   freopen   (   \" . / lrq . in \"   ,   \" r \"   ,   stdin   ) ;   FILE   *   fout   =   freopen   (   \" . / lrq . out \"   ,   \" w \"   ,   stdout   ) ;   solve   ( ) ;   fclose   (   fin   ) ;   fclose   (   fout   ) ;   }   else   solve   ( ) ;   return   0   ;   }","title":"\u6b27\u62c9 \u7b5b \u8d28\u6570"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E6%AC%A7%E6%8B%89%E7%AD%9B%E8%B4%A8%E6%95%B0/#_1","text":"868 . \u7b5b \u8d28\u6570   \u7ed9 \u70b9 \u4e00\u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( n \\ )   \uff0c \u8bf7 \u4f60 \u6c42\u51fa   \\ ( 1   \\ sim   n \\ )   \u4e2d \u7684 \u8d28\u6570 \u4e2a\u6570 \u3002   \u6b27\u62c9 \u7b5b\u6cd5 \uff1a   \u7ed9 \u70b9 \u4e00\u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( n \\ )   \uff1b   \u5148 \u521b\u5efa \u4e24\u4e2a \u6570\u7ec4 \uff1a   \\ ( pm [ N ] \\ )   \u3001   \\ ( dt [ N ] \\ )   \uff0c \u5206\u522b \u4ee3\u8868 \u8d28\u6570 \u6570\u7ec4 \uff0c \u548c \u7528\u4e8e \u7b5b\u6570 \u7684 \u6570\u7ec4 \uff1b   \u7528 \u6307\u9488   \\ ( i \\ )   \u4ece   2   \u5f00\u59cb \u5411 \u53f3 \u904d\u5386 \uff1b   \u5982\u679c   \\ ( dt [ i ]   = =   0 \\ )   \u5c31 \u4ee3\u8868   \\ ( i \\ )   \u662f \u8d28\u6570   \u5148 \u5c06   \\ ( i \\ )   \u88c5\u8fdb   \\ ( pm [ N ] \\ )   \u7684 \u5c3e\u90e8 \uff1b   \u4e0d\u7ba1   \\ ( i \\ )   \u4e0d\u662f \u662f\u4e0d\u662f \u8d28\u6570 \uff0c \u90fd \u8981 \u7528   \\ ( j \\ )   \u4ece   \\ ( pm [ N ] \\ )   \u7684 \u5934\u90e8 \u5f00\u59cb \u5411 \u53f3 \u904d\u5386 \uff0c \u4e0d\u65ad \u7684 \u7b5b \u53bb   \\ ( dt [ pm [ j ]   *   i ]   =   1 \\ )   \u5f53\u7136 \u82e5   \\ ( pm [ j ]   *   i   >   n \\ )   \u5c31 \u6ca1\u6709 \u7b5b \u7684 \u5fc5\u8981 \u4e86 \uff0c \u76f4\u63a5 \u9000\u51fa \u5faa\u73af \u3002   \u7b5b\u53bb   \\ ( dt [ pm [ j ]   *   i ]   =   1 \\ )   \u4e86 \u4e4b\u540e \uff0c \u5982\u679c   \\ ( i   \\ bmod   pm [ j ]   = =   0 \\ )   \u4e5f \u8981 \u9000\u51fa \u5faa\u73af \u3002   \u7531\u4e8e \u6bcf\u4e2a \u6570\u53ea \u88ab \u7b5b \u4e00\u6b21 \uff0c \u6240\u4ee5 \u300c \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u300d \u662f \uff1a   \\ ( O ( n ) \\ )   \u3002   \u4ee3\u7801 \u53c2\u8003 \uff1a   const   int   N   =   int   (   1e7   +   10   ) ;   int   pm   [   N   ] ,   dt   [   N   ] ,   cnt   ;   void   get _ p   (   int   n   )   {   if   (   n   < =   1   )   return   ;   for   (   int   i   =   2   ;   i   < =   n   ;   i   ++   )   {   if   (   !   dt   [   i   ] )   pm   [   cnt   ++   ]   =   i   ;   for   (   int   j   =   0   ;   pm   [   j   ]   < =   n   /   i   ;   j   ++   )   {   dt   [   pm   [   j   ]   *   i   ]   =   1   ;   if   (   !   (   i   %   pm   [   j   ] ) )   break   ;   }   }   }   868 . \u7b5b \u8d28\u6570   \u7ed9 \u70b9 \u4e00\u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( n \\ )   \uff0c \u8bf7 \u4f60 \u6c42\u51fa   \\ ( 1   \\ sim   n \\ )   \u4e2d \u7684 \u8d28\u6570 \u4e2a\u6570 \u3002   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   const   int   N   =   int   (   1e7   +   10   ) ;   int   pm   [   N   ] ,   dt   [   N   ] ,   cnt   ;   void   get _ p   (   int   n   )   {   if   (   n   < =   1   )   return   ;   for   (   int   i   =   2   ;   i   < =   n   ;   i   ++   )   {   if   (   !   dt   [   i   ] )   pm   [   cnt   ++   ]   =   i   ;   for   (   int   j   =   0   ;   pm   [   j   ]   < =   n   /   i   ;   j   ++   )   {   dt   [   pm   [   j   ]   *   i   ]   =   1   ;   if   (   !   (   i   %   pm   [   j   ] ) )   break   ;   }   }   }   void   solve   (   void   )   {   int   n   ;   scanf   (   \" % d \"   ,   &   n   ) ;   get _ p   (   n   ) ;   printf   (   \" % d   \\ n   \"   ,   cnt   ) ;   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main   (   void   )   {   ifstream   fi   ;   ofstream   fo   ;   fi   .   open   (   \" . / lrq . in \"   ) ;   fo   .   open   (   \" . / lrq . out \"   ) ;   if   (   fi   .   is _ open   ( )   &&   fo   .   is _ open   ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl   ;   fo   .   close   ( ) ;   fi   .   close   ( ) ;   for   (   long   long   i   =   1   ;   i   < =   4e8   +   2e7   ;   i   ++   ) ;   FILE   *   fin   =   freopen   (   \" . / lrq . in \"   ,   \" r \"   ,   stdin   ) ;   FILE   *   fout   =   freopen   (   \" . / lrq . out \"   ,   \" w \"   ,   stdout   ) ;   solve   ( ) ;   fclose   (   fin   ) ;   fclose   (   fout   ) ;   }   else   solve   ( ) ;   return   0   ;   }","title":"\u6b27\u62c9 \u7b5b \u8d28\u6570"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E7%B4%A0%E6%80%A7%E6%8E%A2%E6%B5%8B/","text":"\u7d20\u6027 \u63a2\u6d4b   Miller - Rabin   \u7d20\u6027 \u6d4b\u8bd5   \u6267\u884c   \\ ( k \\ )   \u8f6e \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u4e3a \uff1a   \\ ( O ( klog ^ 3n ) \\ )   \uff0c \u5728   long   long   \u8303\u56f4 \u5185 \u51e0\u4e4e \u7b49\u4e8e \u7ea6\u7b49\u4e8e \u5e38\u6570 \u3002   \u6839\u636e \u300c \u4e8c\u6b21 \u63a2\u6d4b \u5b9a\u7406 \u300d \uff1a   \u5982\u679c   \\ ( n \\ )   \u662f \u5947 \u7d20\u6570 \uff0c \u5219   \\ ( x ^ 2   \\ bmod   n   =   1 \\ )   \u7684 \u89e3 \u53ea\u6709   \\ ( x   \\ bmod   n   =   1 \\ )   \u6216\u8005   \\ ( x   \\ bmod   n   =   n   -   1 \\ )   \u3002   \u8981 \u8bc1\u660e \u4e0a\u8ff0 \u7b49\u5f0f \uff0c \u53ea \u9700 \u5c06 \u53f3\u8fb9 \u7684   1   \u79fb\u9879 \uff1a   \\ ( ( x   +   1 ) ( x   -   1 )   \\ bmod   n   =   0 \\ )   \u3002   \u6839\u636e \u300c \u8d39\u9a6c \u5c0f \u5b9a\u7406 \u300d \uff1a   \u5728   \\ ( [ 2 ,   n   -   1 ] \\ )   \u4e2d \u4e0d\u65ad \u968f\u673a \u9009\u53d6 \u4e00\u4e2a \u6570   \\ ( a \\ )   \uff0c \u5224\u65ad \u662f\u5426 \u6bcf\u6b21 \u90fd \u6709   \\ ( a ^ { n   -   1 }   =   1 ( mod \\   n ) \\ )   \uff0c \u5982\u679c \u6709 \uff0c \u5219   \\ ( n \\ )   \u5f88\u5927 \u53ef\u80fd \u53ef\u80fd\u6027 \u662f \u7d20\u6570 \u3002   \u7ed3\u5408 \u300c \u4e8c\u6b21 \u63a2\u6d4b \u5b9a\u7406 \u300d \u548c \u300c \u8d39\u9a6c \u5c0f \u5b9a\u7406 \u300d \uff1a   \u5728   \\ ( [ 2 ,   n   -   1 ] \\ )   \u4e2d \u968f\u673a \u9009\u53d6   \\ ( a \\ )   \uff0c \u6839\u636e \u300c \u8d39\u9a6c \u5c0f \u5b9a\u7406 \u300d \u8981 \u4e0d\u65ad \u5730 \u5224\u65ad   \\ ( a ^ { n   -   1 } \\ )   \u5728 \u540c\u4f59   \\ ( n \\ )   \u7684 \u60c5\u51b5 \u4e0b \u662f\u5426 \u7b49\u4e8e   \\ ( 1 \\ )   \uff0c \u6211\u4eec \u5c06   \\ ( n   -   1 \\ )   \u5206\u6210   \\ ( u   \\ times   2   ^   t \\ )   \uff0c \u8fd9\u6837 \u5c31 \u6709 \uff1a   \\ ( a ^ { n   -   1 }   =   a ^ { u   \\ times   2   ^   t } \\ )   \u6839\u636e \u300c \u4e8c\u6b21 \u63a2\u6d4b \u5b9a\u7406 \u300d \uff0c \u82e5   \\ ( a ^ u   = =   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u5f88 \u6709 \u53ef\u80fd \u662f \u7d20\u6570 \uff0c \u901a\u8fc7 \u4e86 \u8fd9\u8f6e \u6d4b\u8bd5 \uff1b   \u5bf9   \\ ( a ^ u \\ )   \u6267\u884c \u6700 \u591a   \\ ( t \\ )   \u6b21 \u5e73\u65b9 \u5c31 \u53ef\u4ee5 \u53d8\u4e3a   \\ ( a ^ { u   \\ times   2   ^   t } \\ )   \u4e5f \u5c31\u662f   \\ ( a ^ { n   -   1 } \\ )   \uff1b   \u5728 \u6267\u884c \u5e73\u65b9 \u7684 \u8fc7\u7a0b \u4e2d \uff0c \u5982\u679c   \\ ( a ^ { u   \\ times   2 ^ i }   =   n   -   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u6781\u5927 \u6982\u7387 \u662f \u7d20\u6570 \uff0c \u4ee3\u8868 \u901a\u8fc7 \u4e86 \u8fd9 \u4e00\u8f6e \u6d4b\u8bd5 \uff0c \u5426\u5219 \u8fd8\u8981 \u7ee7\u7eed \u5e73\u65b9 \u64cd\u4f5c \uff1b   \u82e5 \u6267\u884c \u4e86   \\ ( t \\ )   \u6b21 \u5e73\u65b9 \u64cd\u4f5c \u4e4b\u540e \u8fd8\u662f \u6ca1 \u80fd \u53d1\u73b0   \\ ( a ^ { u   \\ times   2 ^ i }   =   n   -   1 \\ )   \u5219   \\ ( n \\ )   \u80af\u5b9a \u4e0d\u662f \u7d20\u6570 \uff01   \u8bc1\u660e \u65f6 \u53ef\u4ee5 \u4ece \u5934\u9876 \u5f80 \u4e0b \u9012\u63a8 \uff0c \u82e5   \\ ( a ^ { n   -   1 }   =   1 \\ )   \u5219   \\ ( a ^ { \\ frac { n   -   1 } { 2 } }   =   1   \u6216   n   -   1 ( mod \\   n ) \\ )   \uff1b \u5982\u679c   \\ ( a ^ { \\ frac { n   -   1 } { 2 } }   =   1 \\ )   \u5c31 \u53ef\u4ee5 \u518d \u4e00\u6b21 \u4f7f\u7528 \u300c \u4e8c\u6b21 \u63a2\u6d4b \u5b9a\u7406 \u300d \uff1b \u5982\u679c   \\ ( a ^ { \\ frac { n   -   1 } { 2 } }   =   n   -   1 \\ )   \u6211\u4eec \u53ef\u4ee5 \u5047\u5b9a \u5b83 \u7b49\u4e8e   \\ ( 1 \\ )   \u6765 \u5904\u7406 \uff0c \u65f6\u5019 \u5230\u65f6\u5019 \u8bbe\u8ba1 \u5faa\u73af \u65f6 \uff0c \u53ef\u4ee5 \u901a\u8fc7 \u5224\u65ad \u662f\u5426 \u80fd \u5f97\u51fa   \\ ( n   -   1 \\ )   \u6765 \u8868\u793a \u80fd\u5426 \u901a\u8fc7 \u6d4b\u8bd5 \uff1b \u4e00\u76f4 \u5230   \\ ( a ^ { u }   =   1 \\ )   \u5c31 \u8bf4\u660e \u4e00\u5b9a \u662f \u7d20\u6570 \uff0c \u4f46 \u5982\u679c \u4e0d \u7b49\u4e8e   \\ ( 1 \\ )   \u6211\u4eec \u5f97 \u4e0d\u65ad \u5e73\u65b9 \uff0c \u5224\u65ad \u80fd \u4e0d\u80fd \u7b49\u4e8e   \\ ( n   -   1 \\ )   \uff0c \u56e0\u4e3a \u4e0a\u9762 \u6211 \u662f \u5047\u5b9a \u5b83 \u80fd \u7b49\u4e8e   \\ ( 1 \\ )   \u7684 \u60c5\u51b5 \u4e0b \u5f80\u4e0b \u4e0b\u9762 \u5f80\u4e0b\u9762 \u5316 \u7684 \uff0c \u5f53 \u4ece \u5934\u9876 \u5f80\u4e0b \u4e0b\u9762 \u5f80\u4e0b\u9762 \u5316 \u7684 \u8fc7\u7a0b \u4e2d \u5982\u679c \u7b49\u4e8e   \\ ( n   -   1 \\ )   \u65f6 \uff0c \u7ee7\u7eed \u5f80\u4e0b \u4e0b\u9762 \u5f80\u4e0b\u9762 \u5316\u5230   \\ ( a   ^   u \\ )   \u65f6 \u4e5f \u4f1a \u51fa\u73b0 \u4e0d \u7b49\u4e8e   1   \u7684 \u60c5\u51b5 \uff0c \u4e0d\u662f \u7d20\u6570 \u4e5f \u4f1a \u51fa\u73b0 \u4e0d \u7b49\u4e8e   1   \u7684 \u60c5\u51b5 \uff0c \u6240\u4ee5 \u4ece   \\ ( a ^ u \\ )   \u5f00\u59cb \u4e0d\u65ad \u5e73 \u65b9\u5411 \u4e0a \u770b\u770b \u80fd\u5426 \u7b49\u4e8e   \\ ( n   -   1 \\ )   \uff0c \u5982\u679c \u4e00\u76f4 \u5316\u5230   \\ ( a ^ { u   \\ times   2   ^   t } \\ )   \u90fd \u4e0d\u80fd \u7b49\u4e8e   \\ ( n   -   1 \\ )   \u7684\u8bdd \uff0c \u5c31 \u4e00\u5b9a \u4e0d\u662f   \u7d20\u6570 \u3002   \u4eba\u751f \u542f\u53d1 \uff1a   \u8981 \u8bbe\u8ba1 \u4e00\u4e2a \u65b9\u6cd5 \u89e3\u51b3 \u4e00\u4e2a \u95ee\u9898 \uff0c \u6211\u4eec \u4e0d \u5e94\u8be5 \u5f3a\u5236 \u8981\u6c42 \u8be5 \u65b9\u6cd5 \u80fd \u89e3\u51b3   100%   \u7684 \u95ee\u9898 \uff0c \u9002\u5f53 \u60c5\u51b5 \u4e0b \u53ea\u8981 \u80fd \u89e3\u51b3 \u5927\u90e8 \u90e8\u5206 \u5927\u90e8\u5206 \u95ee\u9898 \u90fd \u53ef\u4ee5 \u5927\u80c6 \u5730 \u4f7f\u7528 \u5b83 \u3002   \u5e95\u6570   \\ ( a \\ )   \u7684 \u9009\u53d6 \uff1a   \u5728   int   \u8303\u56f4 \u5185 \u9009\u53d6   \\ ( [ 2 ,   7 ,   61 ] \\ )   \u4f5c\u4e3a \u5e95\u6570 \u5c31 \u80fd \u4fdd\u8bc1   \\ ( 100 \\ % \\ )   \u6b63\u786e \uff1b   \u5728   long   long   \u8303\u56f4 \u5185 \u9009\u53d6   \\ ( [ 2 ,   325 ,   9375 ,   28178 ,   450775 ,   9780504 ,   1795265022 ] \\ )   \u4f5c\u4e3a \u5e95\u6570 \u5c31 \u80fd \u4fdd\u8bc1   \\ ( 100 \\ % \\ )   \u6b63\u786e \u3002   \u5199\u6cd5 \u4e00 \uff1a \u968f\u673a \u9009\u53d6   typedef   long   long   LL   ;   typedef   long   double   LD   ;   typedef   __ int128 _ t   int128   ;   / /   \u9632\u6b62 \u6ea2\u51fa   LL   \u7684 \u4e58\u6cd5   inline   LL   qmul   (   int128   a   ,   int128   b   ,   LL   p   )   {   return   a   *   b   %   p   ;   }   / /   \u5feb\u901f \u5e42   LL   qpow   (   LL   a   ,   LL   n   ,   LL   p   )   {   LL   i   =   1   ,   ans   =   1   ,   mo   =   a   ;   while   (   i   < =   n   )   {   if   (   i   &   n   )   ans   =   qmul   (   ans   ,   mo   ,   p   ) ;   mo   =   qmul   (   mo   ,   mo   ,   p   ) ;   i   < < =   1   ;   }   return   ans   ;   }   / /   \u7531\u4e8e   rand   \u51fd\u6570 \u53ea\u80fd \u8fd4\u56de   32767   \u4ee5\u5185 \u7684 \u6700\u5927 \u6574\u6570   / /   RAND _ MAX   \u662f   rand   \u7684 \u6700\u5927 \u6574\u6570   / /   ( LL )   ( ( long   double )   rand ( )   /   RAND _ MAX )   *   ( ~ ( 1   < <   63 ) ) ;   inline   LL   randll   ( )   {   return   (   LL   )   ( (   long   double   )   rand   ( )   /   RAND _ MAX   )   *   (   ~   ( (   LL   )   1   < <   63   ) ) ;   }   / /   \u5224\u65ad   n   \u80fd\u5426 \u901a\u8fc7   Miller - Rabin   \u7d20\u6027 \u6d4b\u8bd5   / /   tt   \u8868\u793a \u6d4b\u8bd5 \u7684 \u6b21\u6570 \uff0c \u9ed8\u8ba4   8   \u6b21   bool   is _ mrq   (   LL   n   ,   LL   tt   =   8   )   {   if   (   n   < =   1   | |   !   (   n   &   1   ) )   return   n   = =   2   ;   LL   u   =   n   -   1   ,   t   =   0   ;   while   (   !   (   u   &   1   ) )   u   > > =   1   ,   t   ++   ;   for   (   int   i   =   1   ;   i   < =   tt   ;   i   ++   )   {   LL   a   =   randll   ( )   %   (   n   -   2   )   +   2   ;   LL   v   =   qpow   (   a   ,   u   ,   n   ) ;   if   (   v   = =   1   )   continue   ;   / /   \u6781\u5927 \u53ef\u80fd \u662f \u7d20\u6570 \uff0c \u6d4b\u8bd5 \u901a\u8fc7 \u6d4b\u8bd5\u901a\u8fc7 \u4e00\u4e2a   int   j   =   1   ;   for   (   j   =   1   ;   j   < =   t   ;   j   ++   )   {   if   (   v   = =   n   -   1   )   / /   \u6781\u5927 \u53ef\u80fd \u662f \u7d20\u6570 \uff0c \u6d4b\u8bd5 \u901a\u8fc7 \u6d4b\u8bd5\u901a\u8fc7 \u4e00\u4e2a   break   ;   v   =   qmul   (   v   ,   v   ,   n   ) ;   }   if   (   j   >   t   )   / /   \u6d4b\u8bd5 \u4e0d \u901a\u8fc7 \uff0c \u4e0d \u53ef\u80fd \u662f \u7d20\u6570   return   false   ;   }   return   true   ;   }   \u5199\u6cd5 \u4e8c \uff1a \u9009\u53d6 \u5408\u9002 \u7684 \u5e95\u6570   typedef   long   long   LL   ;   typedef   long   double   LD   ;   typedef   __ int128 _ t   int128   ;   / /   \u9632\u6b62 \u6ea2\u51fa   LL   \u7684 \u4e58\u6cd5   inline   LL   qmul   (   int128   a   ,   int128   b   ,   LL   p   )   {   return   a   *   b   %   p   ;   }   / /   \u5feb\u901f \u5e42   LL   qpow   (   LL   a   ,   LL   n   ,   LL   p   )   {   LL   i   =   1   ,   ans   =   1   ,   mo   =   a   ;   while   (   i   < =   n   )   {   if   (   i   &   n   )   ans   =   qmul   (   ans   ,   mo   ,   p   ) ;   mo   =   qmul   (   mo   ,   mo   ,   p   ) ;   i   < < =   1   ;   }   return   ans   ;   }   / /   long   long   \u5185 \u9009\u53d6 \u4e0b\u9762   7   \u4e2a \u5e95\u6570 \u5c31 \u80fd \u4fdd\u8bc1   100%   \u6b63\u786e   vector   <   LL   >   la   {   2   ,   325   ,   9375   ,   28178   ,   450775   ,   9780504   ,   1795265022   } ;   / /   int   \u5185 \u9009\u53d6 \u4e0b\u9762   3   \u4e2a \u5e95\u6570 \u5c31 \u80fd \u4fdd\u8bc1   100%   \u6b63\u786e   / /   vector < LL >   la   { 2 ,   7 ,   61 } ;   / /   \u5224\u65ad   n   \u80fd\u5426 \u901a\u8fc7   Miller - Rabin   \u7d20\u6027 \u6d4b\u8bd5   bool   is _ mrq   (   LL   n   )   {   if   (   n   <   3   | |   !   (   n   &   1   ) )   return   n   = =   2   ;   LL   u   =   n   -   1   ,   t   =   0   ;   while   (   !   (   u   &   1   ) )   u   / =   2   ,   ++   t   ;   / /   \u4ece \u5e95\u90e8 \u5f80\u4e0a \u4e0a\u9762 \u5f80\u4e0a\u9762 \u63a8   for   (   LL   a   :   la   )   {   LL   v   =   qpow   (   a   ,   u   ,   n   ) ;   / /   \u5982\u679c \u4ece \u5934\u9876 \u5f80\u4e0b \u4e0b\u9762 \u5f80\u4e0b\u9762 \u4e8c\u6b21 \u63a2\u6d4b \u7684 \u8fc7\u7a0b \u4e2d   / /   v   \u8981\u4e48 \u662f   1 \uff0c \u8981\u4e48 \u5c31\u662f   n   -   1   / /   \u5982\u679c \u662f   1   \u7684 \u60c5\u51b5 \u4e0b \uff0c \u90a3\u4e48 \u4ed6 \u7684 \u5e95\u90e8 \u4e5f \u4f1a \u662f   1   / /   \u5982\u679c \u4e00 \u5f00\u59cb \u662f   n   -   1   \u7684 \u60c5\u51b5 \u4e0b \uff0c \u5219 \u5e95\u90e8 \u4e00\u5b9a \u4e0d\u4f1a \u662f   1   if   (   v   = =   1   | |   v   = =   n   -   1   | |   v   = =   0   )   continue   ;   int   i   =   1   ;   for   (   i   =   1   ;   i   < =   t   ;   i   ++   )   {   v   =   qmul   (   v   ,   v   ,   n   ) ;   if   (   v   = =   n   -   1   &&   i   ! =   t   )   {   v   =   1   ;   break   ;   }   if   (   v   = =   1   )   return   false   ;   }   if   (   v   ! =   1   )   return   false   ;   }   return   true   ;   }   866 .   \u8bd5 \u9664\u6cd5 \u5224\u5b9a \u8d28\u6570   \u7ed9\u5b9a   \\ ( n \\ )   \u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( a _ i \\ )   \uff0c \u5224\u5b9a \u6bcf\u4e2a \u6570 \u662f\u5426 \u662f\u5426\u662f \u8d28\u6570 \u3002   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80   81   82   83   84   85   86   87   88   89   90   91   92   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   typedef   long   long   LL   ;   typedef   long   double   LD   ;   typedef   __ int128 _ t   int128   ;   / /   \u9632\u6b62 \u6ea2\u51fa   LL   \u7684 \u4e58\u6cd5   inline   LL   qmul   (   int128   a   ,   int128   b   ,   LL   p   )   {   return   a   *   b   %   p   ;   }   / /   \u5feb\u901f \u5e42   LL   qpow   (   LL   a   ,   LL   n   ,   LL   p   )   {   LL   i   =   1   ,   ans   =   1   ,   mo   =   a   ;   while   (   i   < =   n   )   {   if   (   i   &   n   )   ans   =   qmul   (   ans   ,   mo   ,   p   ) ;   mo   =   qmul   (   mo   ,   mo   ,   p   ) ;   i   < < =   1   ;   }   return   ans   ;   }   / /   \u7531\u4e8e   rand   \u51fd\u6570 \u53ea\u80fd \u8fd4\u56de   32767   \u4ee5\u5185 \u7684 \u6700\u5927 \u6574\u6570   / /   RAND _ MAX   \u662f   rand   \u7684 \u6700\u5927 \u6574\u6570   / /   ( LL )   ( ( long   double )   rand ( )   /   RAND _ MAX )   *   ( ~ ( 1   < <   63 ) ) ;   inline   LL   randll   ( )   {   return   (   LL   )   ( (   long   double   )   rand   ( )   /   RAND _ MAX   )   *   (   ~   ( (   LL   )   1   < <   63   ) ) ;   }   / /   \u5224\u65ad   n   \u80fd\u5426 \u901a\u8fc7   Miller - Rabin   \u7d20\u6027 \u6d4b\u8bd5   / /   tt   \u8868\u793a \u6d4b\u8bd5 \u7684 \u6b21\u6570 \uff0c \u9ed8\u8ba4   8   \u6b21   bool   is _ mrq   (   LL   n   ,   LL   tt   =   8   )   {   if   (   n   < =   1   | |   !   (   n   &   1   ) )   return   n   = =   2   ;   LL   u   =   n   -   1   ,   t   =   0   ;   while   (   !   (   u   &   1   ) )   u   > > =   1   ,   t   ++   ;   for   (   int   i   =   1   ;   i   < =   tt   ;   i   ++   )   {   LL   a   =   randll   ( )   %   (   n   -   2   )   +   2   ;   LL   v   =   qpow   (   a   ,   u   ,   n   ) ;   if   (   v   = =   1   )   continue   ;   / /   \u6781\u5927 \u53ef\u80fd \u662f \u7d20\u6570 \uff0c \u6d4b\u8bd5 \u901a\u8fc7 \u6d4b\u8bd5\u901a\u8fc7 \u4e00\u4e2a   int   j   =   1   ;   for   (   j   =   1   ;   j   < =   t   ;   j   ++   )   {   if   (   v   = =   n   -   1   )   / /   \u6781\u5927 \u53ef\u80fd \u662f \u7d20\u6570 \uff0c \u6d4b\u8bd5 \u901a\u8fc7 \u6d4b\u8bd5\u901a\u8fc7 \u4e00\u4e2a   break   ;   v   =   qmul   (   v   ,   v   ,   n   ) ;   }   if   (   j   >   t   )   / /   \u6d4b\u8bd5 \u4e0d \u901a\u8fc7 \uff0c \u4e0d \u53ef\u80fd \u662f \u7d20\u6570   return   false   ;   }   return   true   ;   }   void   solve   (   void   )   {   int   n   ,   t   ;   scanf   (   \" % d \"   ,   &   n   ) ;   while   (   n   --   )   {   scanf   (   \" % d \"   ,   &   t   ) ;   if   (   is _ mrq   (   t   ) )   puts   (   \" Yes \"   ) ;   else   puts   (   \" No \"   ) ;   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main   (   void   )   {   ifstream   fi   ;   ofstream   fo   ;   fi   .   open   (   \" . / lrq . in \"   ) ;   fo   .   open   (   \" . / lrq . out \"   ) ;   if   (   fi   .   is _ open   ( )   &&   fo   .   is _ open   ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl   ;   fo   .   close   ( ) ;   fi   .   close   ( ) ;   for   (   long   long   i   =   1   ;   i   < =   4e8   +   2e7   ;   i   ++   ) ;   FILE   *   fin   =   freopen   (   \" . / lrq . in \"   ,   \" r \"   ,   stdin   ) ;   FILE   *   fout   =   freopen   (   \" . / lrq . out \"   ,   \" w \"   ,   stdout   ) ;   solve   ( ) ;   fclose   (   fin   ) ;   fclose   (   fout   ) ;   }   else   solve   ( ) ;   return   0   ;   }","title":"\u7d20\u6027 \u63a2\u6d4b"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E7%B4%A0%E6%80%A7%E6%8E%A2%E6%B5%8B/#_1","text":"Miller - Rabin   \u7d20\u6027 \u6d4b\u8bd5   \u6267\u884c   \\ ( k \\ )   \u8f6e \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u4e3a \uff1a   \\ ( O ( klog ^ 3n ) \\ )   \uff0c \u5728   long   long   \u8303\u56f4 \u5185 \u51e0\u4e4e \u7b49\u4e8e \u7ea6\u7b49\u4e8e \u5e38\u6570 \u3002   \u6839\u636e \u300c \u4e8c\u6b21 \u63a2\u6d4b \u5b9a\u7406 \u300d \uff1a   \u5982\u679c   \\ ( n \\ )   \u662f \u5947 \u7d20\u6570 \uff0c \u5219   \\ ( x ^ 2   \\ bmod   n   =   1 \\ )   \u7684 \u89e3 \u53ea\u6709   \\ ( x   \\ bmod   n   =   1 \\ )   \u6216\u8005   \\ ( x   \\ bmod   n   =   n   -   1 \\ )   \u3002   \u8981 \u8bc1\u660e \u4e0a\u8ff0 \u7b49\u5f0f \uff0c \u53ea \u9700 \u5c06 \u53f3\u8fb9 \u7684   1   \u79fb\u9879 \uff1a   \\ ( ( x   +   1 ) ( x   -   1 )   \\ bmod   n   =   0 \\ )   \u3002   \u6839\u636e \u300c \u8d39\u9a6c \u5c0f \u5b9a\u7406 \u300d \uff1a   \u5728   \\ ( [ 2 ,   n   -   1 ] \\ )   \u4e2d \u4e0d\u65ad \u968f\u673a \u9009\u53d6 \u4e00\u4e2a \u6570   \\ ( a \\ )   \uff0c \u5224\u65ad \u662f\u5426 \u6bcf\u6b21 \u90fd \u6709   \\ ( a ^ { n   -   1 }   =   1 ( mod \\   n ) \\ )   \uff0c \u5982\u679c \u6709 \uff0c \u5219   \\ ( n \\ )   \u5f88\u5927 \u53ef\u80fd \u53ef\u80fd\u6027 \u662f \u7d20\u6570 \u3002   \u7ed3\u5408 \u300c \u4e8c\u6b21 \u63a2\u6d4b \u5b9a\u7406 \u300d \u548c \u300c \u8d39\u9a6c \u5c0f \u5b9a\u7406 \u300d \uff1a   \u5728   \\ ( [ 2 ,   n   -   1 ] \\ )   \u4e2d \u968f\u673a \u9009\u53d6   \\ ( a \\ )   \uff0c \u6839\u636e \u300c \u8d39\u9a6c \u5c0f \u5b9a\u7406 \u300d \u8981 \u4e0d\u65ad \u5730 \u5224\u65ad   \\ ( a ^ { n   -   1 } \\ )   \u5728 \u540c\u4f59   \\ ( n \\ )   \u7684 \u60c5\u51b5 \u4e0b \u662f\u5426 \u7b49\u4e8e   \\ ( 1 \\ )   \uff0c \u6211\u4eec \u5c06   \\ ( n   -   1 \\ )   \u5206\u6210   \\ ( u   \\ times   2   ^   t \\ )   \uff0c \u8fd9\u6837 \u5c31 \u6709 \uff1a   \\ ( a ^ { n   -   1 }   =   a ^ { u   \\ times   2   ^   t } \\ )   \u6839\u636e \u300c \u4e8c\u6b21 \u63a2\u6d4b \u5b9a\u7406 \u300d \uff0c \u82e5   \\ ( a ^ u   = =   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u5f88 \u6709 \u53ef\u80fd \u662f \u7d20\u6570 \uff0c \u901a\u8fc7 \u4e86 \u8fd9\u8f6e \u6d4b\u8bd5 \uff1b   \u5bf9   \\ ( a ^ u \\ )   \u6267\u884c \u6700 \u591a   \\ ( t \\ )   \u6b21 \u5e73\u65b9 \u5c31 \u53ef\u4ee5 \u53d8\u4e3a   \\ ( a ^ { u   \\ times   2   ^   t } \\ )   \u4e5f \u5c31\u662f   \\ ( a ^ { n   -   1 } \\ )   \uff1b   \u5728 \u6267\u884c \u5e73\u65b9 \u7684 \u8fc7\u7a0b \u4e2d \uff0c \u5982\u679c   \\ ( a ^ { u   \\ times   2 ^ i }   =   n   -   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u6781\u5927 \u6982\u7387 \u662f \u7d20\u6570 \uff0c \u4ee3\u8868 \u901a\u8fc7 \u4e86 \u8fd9 \u4e00\u8f6e \u6d4b\u8bd5 \uff0c \u5426\u5219 \u8fd8\u8981 \u7ee7\u7eed \u5e73\u65b9 \u64cd\u4f5c \uff1b   \u82e5 \u6267\u884c \u4e86   \\ ( t \\ )   \u6b21 \u5e73\u65b9 \u64cd\u4f5c \u4e4b\u540e \u8fd8\u662f \u6ca1 \u80fd \u53d1\u73b0   \\ ( a ^ { u   \\ times   2 ^ i }   =   n   -   1 \\ )   \u5219   \\ ( n \\ )   \u80af\u5b9a \u4e0d\u662f \u7d20\u6570 \uff01   \u8bc1\u660e \u65f6 \u53ef\u4ee5 \u4ece \u5934\u9876 \u5f80 \u4e0b \u9012\u63a8 \uff0c \u82e5   \\ ( a ^ { n   -   1 }   =   1 \\ )   \u5219   \\ ( a ^ { \\ frac { n   -   1 } { 2 } }   =   1   \u6216   n   -   1 ( mod \\   n ) \\ )   \uff1b \u5982\u679c   \\ ( a ^ { \\ frac { n   -   1 } { 2 } }   =   1 \\ )   \u5c31 \u53ef\u4ee5 \u518d \u4e00\u6b21 \u4f7f\u7528 \u300c \u4e8c\u6b21 \u63a2\u6d4b \u5b9a\u7406 \u300d \uff1b \u5982\u679c   \\ ( a ^ { \\ frac { n   -   1 } { 2 } }   =   n   -   1 \\ )   \u6211\u4eec \u53ef\u4ee5 \u5047\u5b9a \u5b83 \u7b49\u4e8e   \\ ( 1 \\ )   \u6765 \u5904\u7406 \uff0c \u65f6\u5019 \u5230\u65f6\u5019 \u8bbe\u8ba1 \u5faa\u73af \u65f6 \uff0c \u53ef\u4ee5 \u901a\u8fc7 \u5224\u65ad \u662f\u5426 \u80fd \u5f97\u51fa   \\ ( n   -   1 \\ )   \u6765 \u8868\u793a \u80fd\u5426 \u901a\u8fc7 \u6d4b\u8bd5 \uff1b \u4e00\u76f4 \u5230   \\ ( a ^ { u }   =   1 \\ )   \u5c31 \u8bf4\u660e \u4e00\u5b9a \u662f \u7d20\u6570 \uff0c \u4f46 \u5982\u679c \u4e0d \u7b49\u4e8e   \\ ( 1 \\ )   \u6211\u4eec \u5f97 \u4e0d\u65ad \u5e73\u65b9 \uff0c \u5224\u65ad \u80fd \u4e0d\u80fd \u7b49\u4e8e   \\ ( n   -   1 \\ )   \uff0c \u56e0\u4e3a \u4e0a\u9762 \u6211 \u662f \u5047\u5b9a \u5b83 \u80fd \u7b49\u4e8e   \\ ( 1 \\ )   \u7684 \u60c5\u51b5 \u4e0b \u5f80\u4e0b \u4e0b\u9762 \u5f80\u4e0b\u9762 \u5316 \u7684 \uff0c \u5f53 \u4ece \u5934\u9876 \u5f80\u4e0b \u4e0b\u9762 \u5f80\u4e0b\u9762 \u5316 \u7684 \u8fc7\u7a0b \u4e2d \u5982\u679c \u7b49\u4e8e   \\ ( n   -   1 \\ )   \u65f6 \uff0c \u7ee7\u7eed \u5f80\u4e0b \u4e0b\u9762 \u5f80\u4e0b\u9762 \u5316\u5230   \\ ( a   ^   u \\ )   \u65f6 \u4e5f \u4f1a \u51fa\u73b0 \u4e0d \u7b49\u4e8e   1   \u7684 \u60c5\u51b5 \uff0c \u4e0d\u662f \u7d20\u6570 \u4e5f \u4f1a \u51fa\u73b0 \u4e0d \u7b49\u4e8e   1   \u7684 \u60c5\u51b5 \uff0c \u6240\u4ee5 \u4ece   \\ ( a ^ u \\ )   \u5f00\u59cb \u4e0d\u65ad \u5e73 \u65b9\u5411 \u4e0a \u770b\u770b \u80fd\u5426 \u7b49\u4e8e   \\ ( n   -   1 \\ )   \uff0c \u5982\u679c \u4e00\u76f4 \u5316\u5230   \\ ( a ^ { u   \\ times   2   ^   t } \\ )   \u90fd \u4e0d\u80fd \u7b49\u4e8e   \\ ( n   -   1 \\ )   \u7684\u8bdd \uff0c \u5c31 \u4e00\u5b9a \u4e0d\u662f   \u7d20\u6570 \u3002   \u4eba\u751f \u542f\u53d1 \uff1a   \u8981 \u8bbe\u8ba1 \u4e00\u4e2a \u65b9\u6cd5 \u89e3\u51b3 \u4e00\u4e2a \u95ee\u9898 \uff0c \u6211\u4eec \u4e0d \u5e94\u8be5 \u5f3a\u5236 \u8981\u6c42 \u8be5 \u65b9\u6cd5 \u80fd \u89e3\u51b3   100%   \u7684 \u95ee\u9898 \uff0c \u9002\u5f53 \u60c5\u51b5 \u4e0b \u53ea\u8981 \u80fd \u89e3\u51b3 \u5927\u90e8 \u90e8\u5206 \u5927\u90e8\u5206 \u95ee\u9898 \u90fd \u53ef\u4ee5 \u5927\u80c6 \u5730 \u4f7f\u7528 \u5b83 \u3002   \u5e95\u6570   \\ ( a \\ )   \u7684 \u9009\u53d6 \uff1a   \u5728   int   \u8303\u56f4 \u5185 \u9009\u53d6   \\ ( [ 2 ,   7 ,   61 ] \\ )   \u4f5c\u4e3a \u5e95\u6570 \u5c31 \u80fd \u4fdd\u8bc1   \\ ( 100 \\ % \\ )   \u6b63\u786e \uff1b   \u5728   long   long   \u8303\u56f4 \u5185 \u9009\u53d6   \\ ( [ 2 ,   325 ,   9375 ,   28178 ,   450775 ,   9780504 ,   1795265022 ] \\ )   \u4f5c\u4e3a \u5e95\u6570 \u5c31 \u80fd \u4fdd\u8bc1   \\ ( 100 \\ % \\ )   \u6b63\u786e \u3002","title":"\u7d20\u6027 \u63a2\u6d4b"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E7%B4%A0%E6%80%A7%E6%8E%A2%E6%B5%8B/#_2","text":"typedef   long   long   LL   ;   typedef   long   double   LD   ;   typedef   __ int128 _ t   int128   ;   / /   \u9632\u6b62 \u6ea2\u51fa   LL   \u7684 \u4e58\u6cd5   inline   LL   qmul   (   int128   a   ,   int128   b   ,   LL   p   )   {   return   a   *   b   %   p   ;   }   / /   \u5feb\u901f \u5e42   LL   qpow   (   LL   a   ,   LL   n   ,   LL   p   )   {   LL   i   =   1   ,   ans   =   1   ,   mo   =   a   ;   while   (   i   < =   n   )   {   if   (   i   &   n   )   ans   =   qmul   (   ans   ,   mo   ,   p   ) ;   mo   =   qmul   (   mo   ,   mo   ,   p   ) ;   i   < < =   1   ;   }   return   ans   ;   }   / /   \u7531\u4e8e   rand   \u51fd\u6570 \u53ea\u80fd \u8fd4\u56de   32767   \u4ee5\u5185 \u7684 \u6700\u5927 \u6574\u6570   / /   RAND _ MAX   \u662f   rand   \u7684 \u6700\u5927 \u6574\u6570   / /   ( LL )   ( ( long   double )   rand ( )   /   RAND _ MAX )   *   ( ~ ( 1   < <   63 ) ) ;   inline   LL   randll   ( )   {   return   (   LL   )   ( (   long   double   )   rand   ( )   /   RAND _ MAX   )   *   (   ~   ( (   LL   )   1   < <   63   ) ) ;   }   / /   \u5224\u65ad   n   \u80fd\u5426 \u901a\u8fc7   Miller - Rabin   \u7d20\u6027 \u6d4b\u8bd5   / /   tt   \u8868\u793a \u6d4b\u8bd5 \u7684 \u6b21\u6570 \uff0c \u9ed8\u8ba4   8   \u6b21   bool   is _ mrq   (   LL   n   ,   LL   tt   =   8   )   {   if   (   n   < =   1   | |   !   (   n   &   1   ) )   return   n   = =   2   ;   LL   u   =   n   -   1   ,   t   =   0   ;   while   (   !   (   u   &   1   ) )   u   > > =   1   ,   t   ++   ;   for   (   int   i   =   1   ;   i   < =   tt   ;   i   ++   )   {   LL   a   =   randll   ( )   %   (   n   -   2   )   +   2   ;   LL   v   =   qpow   (   a   ,   u   ,   n   ) ;   if   (   v   = =   1   )   continue   ;   / /   \u6781\u5927 \u53ef\u80fd \u662f \u7d20\u6570 \uff0c \u6d4b\u8bd5 \u901a\u8fc7 \u6d4b\u8bd5\u901a\u8fc7 \u4e00\u4e2a   int   j   =   1   ;   for   (   j   =   1   ;   j   < =   t   ;   j   ++   )   {   if   (   v   = =   n   -   1   )   / /   \u6781\u5927 \u53ef\u80fd \u662f \u7d20\u6570 \uff0c \u6d4b\u8bd5 \u901a\u8fc7 \u6d4b\u8bd5\u901a\u8fc7 \u4e00\u4e2a   break   ;   v   =   qmul   (   v   ,   v   ,   n   ) ;   }   if   (   j   >   t   )   / /   \u6d4b\u8bd5 \u4e0d \u901a\u8fc7 \uff0c \u4e0d \u53ef\u80fd \u662f \u7d20\u6570   return   false   ;   }   return   true   ;   }","title":"\u5199\u6cd5 \u4e00 \uff1a \u968f\u673a \u9009\u53d6"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E7%B4%A0%E6%80%A7%E6%8E%A2%E6%B5%8B/#_3","text":"typedef   long   long   LL   ;   typedef   long   double   LD   ;   typedef   __ int128 _ t   int128   ;   / /   \u9632\u6b62 \u6ea2\u51fa   LL   \u7684 \u4e58\u6cd5   inline   LL   qmul   (   int128   a   ,   int128   b   ,   LL   p   )   {   return   a   *   b   %   p   ;   }   / /   \u5feb\u901f \u5e42   LL   qpow   (   LL   a   ,   LL   n   ,   LL   p   )   {   LL   i   =   1   ,   ans   =   1   ,   mo   =   a   ;   while   (   i   < =   n   )   {   if   (   i   &   n   )   ans   =   qmul   (   ans   ,   mo   ,   p   ) ;   mo   =   qmul   (   mo   ,   mo   ,   p   ) ;   i   < < =   1   ;   }   return   ans   ;   }   / /   long   long   \u5185 \u9009\u53d6 \u4e0b\u9762   7   \u4e2a \u5e95\u6570 \u5c31 \u80fd \u4fdd\u8bc1   100%   \u6b63\u786e   vector   <   LL   >   la   {   2   ,   325   ,   9375   ,   28178   ,   450775   ,   9780504   ,   1795265022   } ;   / /   int   \u5185 \u9009\u53d6 \u4e0b\u9762   3   \u4e2a \u5e95\u6570 \u5c31 \u80fd \u4fdd\u8bc1   100%   \u6b63\u786e   / /   vector < LL >   la   { 2 ,   7 ,   61 } ;   / /   \u5224\u65ad   n   \u80fd\u5426 \u901a\u8fc7   Miller - Rabin   \u7d20\u6027 \u6d4b\u8bd5   bool   is _ mrq   (   LL   n   )   {   if   (   n   <   3   | |   !   (   n   &   1   ) )   return   n   = =   2   ;   LL   u   =   n   -   1   ,   t   =   0   ;   while   (   !   (   u   &   1   ) )   u   / =   2   ,   ++   t   ;   / /   \u4ece \u5e95\u90e8 \u5f80\u4e0a \u4e0a\u9762 \u5f80\u4e0a\u9762 \u63a8   for   (   LL   a   :   la   )   {   LL   v   =   qpow   (   a   ,   u   ,   n   ) ;   / /   \u5982\u679c \u4ece \u5934\u9876 \u5f80\u4e0b \u4e0b\u9762 \u5f80\u4e0b\u9762 \u4e8c\u6b21 \u63a2\u6d4b \u7684 \u8fc7\u7a0b \u4e2d   / /   v   \u8981\u4e48 \u662f   1 \uff0c \u8981\u4e48 \u5c31\u662f   n   -   1   / /   \u5982\u679c \u662f   1   \u7684 \u60c5\u51b5 \u4e0b \uff0c \u90a3\u4e48 \u4ed6 \u7684 \u5e95\u90e8 \u4e5f \u4f1a \u662f   1   / /   \u5982\u679c \u4e00 \u5f00\u59cb \u662f   n   -   1   \u7684 \u60c5\u51b5 \u4e0b \uff0c \u5219 \u5e95\u90e8 \u4e00\u5b9a \u4e0d\u4f1a \u662f   1   if   (   v   = =   1   | |   v   = =   n   -   1   | |   v   = =   0   )   continue   ;   int   i   =   1   ;   for   (   i   =   1   ;   i   < =   t   ;   i   ++   )   {   v   =   qmul   (   v   ,   v   ,   n   ) ;   if   (   v   = =   n   -   1   &&   i   ! =   t   )   {   v   =   1   ;   break   ;   }   if   (   v   = =   1   )   return   false   ;   }   if   (   v   ! =   1   )   return   false   ;   }   return   true   ;   }   866 .   \u8bd5 \u9664\u6cd5 \u5224\u5b9a \u8d28\u6570   \u7ed9\u5b9a   \\ ( n \\ )   \u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( a _ i \\ )   \uff0c \u5224\u5b9a \u6bcf\u4e2a \u6570 \u662f\u5426 \u662f\u5426\u662f \u8d28\u6570 \u3002   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80   81   82   83   84   85   86   87   88   89   90   91   92   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   typedef   long   long   LL   ;   typedef   long   double   LD   ;   typedef   __ int128 _ t   int128   ;   / /   \u9632\u6b62 \u6ea2\u51fa   LL   \u7684 \u4e58\u6cd5   inline   LL   qmul   (   int128   a   ,   int128   b   ,   LL   p   )   {   return   a   *   b   %   p   ;   }   / /   \u5feb\u901f \u5e42   LL   qpow   (   LL   a   ,   LL   n   ,   LL   p   )   {   LL   i   =   1   ,   ans   =   1   ,   mo   =   a   ;   while   (   i   < =   n   )   {   if   (   i   &   n   )   ans   =   qmul   (   ans   ,   mo   ,   p   ) ;   mo   =   qmul   (   mo   ,   mo   ,   p   ) ;   i   < < =   1   ;   }   return   ans   ;   }   / /   \u7531\u4e8e   rand   \u51fd\u6570 \u53ea\u80fd \u8fd4\u56de   32767   \u4ee5\u5185 \u7684 \u6700\u5927 \u6574\u6570   / /   RAND _ MAX   \u662f   rand   \u7684 \u6700\u5927 \u6574\u6570   / /   ( LL )   ( ( long   double )   rand ( )   /   RAND _ MAX )   *   ( ~ ( 1   < <   63 ) ) ;   inline   LL   randll   ( )   {   return   (   LL   )   ( (   long   double   )   rand   ( )   /   RAND _ MAX   )   *   (   ~   ( (   LL   )   1   < <   63   ) ) ;   }   / /   \u5224\u65ad   n   \u80fd\u5426 \u901a\u8fc7   Miller - Rabin   \u7d20\u6027 \u6d4b\u8bd5   / /   tt   \u8868\u793a \u6d4b\u8bd5 \u7684 \u6b21\u6570 \uff0c \u9ed8\u8ba4   8   \u6b21   bool   is _ mrq   (   LL   n   ,   LL   tt   =   8   )   {   if   (   n   < =   1   | |   !   (   n   &   1   ) )   return   n   = =   2   ;   LL   u   =   n   -   1   ,   t   =   0   ;   while   (   !   (   u   &   1   ) )   u   > > =   1   ,   t   ++   ;   for   (   int   i   =   1   ;   i   < =   tt   ;   i   ++   )   {   LL   a   =   randll   ( )   %   (   n   -   2   )   +   2   ;   LL   v   =   qpow   (   a   ,   u   ,   n   ) ;   if   (   v   = =   1   )   continue   ;   / /   \u6781\u5927 \u53ef\u80fd \u662f \u7d20\u6570 \uff0c \u6d4b\u8bd5 \u901a\u8fc7 \u6d4b\u8bd5\u901a\u8fc7 \u4e00\u4e2a   int   j   =   1   ;   for   (   j   =   1   ;   j   < =   t   ;   j   ++   )   {   if   (   v   = =   n   -   1   )   / /   \u6781\u5927 \u53ef\u80fd \u662f \u7d20\u6570 \uff0c \u6d4b\u8bd5 \u901a\u8fc7 \u6d4b\u8bd5\u901a\u8fc7 \u4e00\u4e2a   break   ;   v   =   qmul   (   v   ,   v   ,   n   ) ;   }   if   (   j   >   t   )   / /   \u6d4b\u8bd5 \u4e0d \u901a\u8fc7 \uff0c \u4e0d \u53ef\u80fd \u662f \u7d20\u6570   return   false   ;   }   return   true   ;   }   void   solve   (   void   )   {   int   n   ,   t   ;   scanf   (   \" % d \"   ,   &   n   ) ;   while   (   n   --   )   {   scanf   (   \" % d \"   ,   &   t   ) ;   if   (   is _ mrq   (   t   ) )   puts   (   \" Yes \"   ) ;   else   puts   (   \" No \"   ) ;   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main   (   void   )   {   ifstream   fi   ;   ofstream   fo   ;   fi   .   open   (   \" . / lrq . in \"   ) ;   fo   .   open   (   \" . / lrq . out \"   ) ;   if   (   fi   .   is _ open   ( )   &&   fo   .   is _ open   ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl   ;   fo   .   close   ( ) ;   fi   .   close   ( ) ;   for   (   long   long   i   =   1   ;   i   < =   4e8   +   2e7   ;   i   ++   ) ;   FILE   *   fin   =   freopen   (   \" . / lrq . in \"   ,   \" r \"   ,   stdin   ) ;   FILE   *   fout   =   freopen   (   \" . / lrq . out \"   ,   \" w \"   ,   stdout   ) ;   solve   ( ) ;   fclose   (   fin   ) ;   fclose   (   fout   ) ;   }   else   solve   ( ) ;   return   0   ;   }","title":"\u5199\u6cd5 \u4e8c \uff1a \u9009\u53d6 \u5408\u9002 \u7684 \u5e95\u6570"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E7%B4%A0%E6%80%A7%E6%8E%A2%E6%B5%8B%E5%88%A4%E8%B4%A8%E6%95%B0/","text":"\u7d20\u6027 \u63a2\u6d4b \u5224 \u8d28\u6570   Miller - Rabin   \u7d20\u6027 \u6d4b\u8bd5   \u6267\u884c   \\ ( k \\ )   \u8bba \u7684 \u300c \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u300d \u4e3a   \\ ( O ( klog ^ 3n ) \\ )   \u3002   \u6ce8\u610f   \u4ee5\u4e0b \u90fd \u662f \u5728 \u540c\u4f59   \\ ( n \\ )   \u7684 \u60c5\u51b5 \u4e0b \u8ba8\u8bba \u3002   \u4e8c\u6b21 \u63a2\u6d4b \u5b9a\u7406   \u5982\u679c   \\ ( n \\ )   \u662f \u5947 \u7d20\u6570 \uff0c \u5219   \\ ( x ^ 2   =   1 \\ )   \u7684 \u89e3 \u53ea\u6709   \\ ( x   =   1 \\ )   \u6216   \\ ( x   =   n   -   1 \\ )   \u3002   \u8981 \u8bc1\u660e \u8be5 \u5b9a\u7406 \uff0c \u53ea \u9700 \u5c06   \\ ( 1 \\ )   \u79fb\u9879 \u5230 \u5de6\u8fb9 \uff1a   \\ ( ( x   +   1 ) ( x   -   1 )   =   0 \\ )   \uff0c \u5728 \u540c\u4f59   \\ ( n \\ )   \u7684 \u60c5\u51b5 \u4e0b   \\ ( x   =   1 \\ )   \u6216   \\ ( x   =   n   -   1 \\ )   \u3002   \u8d39\u9a6c \u5c0f \u5b9a\u7406   \u5982\u679c   \\ ( n \\ )   \u662f \u4e00\u4e2a \u7d20\u6570 \uff0c \u53ea\u8981   \\ ( a \\ )   \u4e0d\u662f   \\ ( n \\ )   \u7684 \u500d\u6570 \uff0c \u5219   \\ ( a   ^   { n   -   1 }   =   1 \\ )   \u3002   \u7ed3\u5408 \u300c \u4e8c\u6b21 \u63a2\u6d4b \u5b9a\u7406 \u300d \u548c   \u300c \u8d39\u9a6c \u5c0f \u5b9a\u7406 \u300d \u7684 \u5b9a\u7406 \u9006\u5b9a\u7406   \u5b9a\u7406 \u9006\u5b9a\u7406 \u4e0d \u4e00\u5b9a \u5bf9 \uff0c \u9002\u5f53 \u60c5\u51b5 \u4e0b \u53ef\u4ee5 \u63d0\u9ad8 \u5b83 \u5bf9 \u7684 \u6982\u7387 \u3002   \u5148 \u5f15\u5165 \u4e00\u4e2a \u63a8\u7406 \uff1a   \u539f \u547d\u9898 \uff1a \u82e5   \\ ( x \\   \\ % \\   n   =   1 \\ )   \uff0c \u5219   \\ ( x   ^   2 \\   \\ % \\   n   =   1 \\ )   \u4e00\u5b9a \u6210\u7acb \u3002 |   |   \\ ( x \\   \\ % \\   n   =   1   \\ rightarrow   x   ^   2 \\   \\ % \\   n   =   1 \\ )   \u547d\u9898 \u9006\u5426\u547d\u9898 \uff1a \u82e5   \\ ( x   ^   2 \\   \\ % \\   n   \\ neq   1 \\ )   \uff0c \u5219   \\ ( x \\   \\ % \\   n   \\ neq   1 \\ )   \u4e00\u5b9a \u6210\u7acb \u3002 |   |   \\ ( x   ^   2 \\   \\ % \\   n   \\ neq   1   \\ rightarrow   x \\   \\ % \\   n   \\ neq   1 \\ )   \u82e5   \\ ( n \\ )   \u662f \u4e00\u4e2a \u5947\u6570 \uff0c \u8981 \u6709 \u5982\u4e0b \u903b\u8f91 \uff1a   \u4e3a\u4e86 \u8981 \u7ed3\u5408 \u300c \u8d39\u9a6c \u5c0f \u5b9a\u7406 \u300d \uff0c \u6211\u4eec \u8981 \u9009\u53d6 \u4e0d\u662f   \\ ( n \\ )   \u7684 \u500d\u6570   \\ ( a \\ )   \uff0c \u53ea \u9700 \u5728   \\ ( [ 2 ,   n   -   1 ] \\ )   \u4e2d \u4efb\u610f \u9009\u53d6 \u4e00\u4e2a   \\ ( a \\ )   \u4f5c\u4e3a \u5e95\u6570 \u5c31\u884c \uff1b   \u82e5   \\ ( a   ^   { n   -   1 }   \\ neq   1 \\ )   \u5219   \\ ( n \\ )   \u4e00\u5b9a \u4e0d\u662f \u7d20\u6570 \uff1b   \u82e5   \\ ( a   ^   { n   -   1 }   =   1 \\ )   \u6ee1\u8db3 \uff0c \u6211\u4eec \u53ef\u4ee5 \u8bf4   \\ ( a \\ )   \u5f88 \u53ef\u80fd \u662f \u300c \u7d20\u6570 \u300d \uff1b   \u6211\u4eec \u5728 \u4e0a\u9762 \u7684 \u57fa\u7840 \u4e0a \u518d \u7ed3\u5408 \u300c \u4e8c\u6b21 \u5b9a\u7406 \u7684 \u5b9a\u7406 \u9006\u5b9a\u7406 \u300d \uff0c \u53ea\u8981   \\ ( n   -   1   =   u   \\ times   2   ^   t \\ )   \uff0c \u5219   \\ ( a   ^   { n   -   1 } \\ )   \u53ef\u4ee5 \u7b49\u4e8e   \\ ( a   ^   u \\ )   \u7684   \\ ( t \\ )   \u6b21 \u5e73\u65b9 \uff1b   \u6211\u4eec \u4e5f \u53ef\u4ee5 \u4e0d\u65ad \u5730 \u5bf9   \\ ( a ^ { n   -   1 } \\ )   \u4e0d\u65ad \u5730\u5f00\u6839 \u76f4\u5230   \\ ( a ^ u \\ )   \u4e2d \u7684   \\ ( u \\ )   \u4e3a \u5947\u6570 \u4e3a\u6b62 \uff1b   \u5bf9   \\ ( a   ^   { n   -   1 } \\ )   \u5f00\u6839 \u4e4b\u540e \u7684 \u7ed3\u679c   \\ ( a   ^   { \\ frac { n   -   1 } { 2 } } \\ )   \u5982\u679c \u4e0d\u662f   \\ ( 1 \\ )   \u6216   \\ ( n   -   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u4e00\u5b9a \u4e0d\u662f \u300c \u8d28\u6570 \u300d \uff1b   \u82e5   \\ ( a   ^   { \\ frac { n   -   1 } { 2 } } \\ )   \u662f   \\ ( 1 \\ )   \u5c31 \u53ef\u4ee5 \u518d \u4e00\u6b21 \u5730 \u4f7f\u7528 \u300c \u4e8c\u6b21 \u63a2\u6d4b \u5b9a\u7406 \u7684 \u5b9a\u7406 \u9006\u5b9a\u7406 \u300d \u5f00\u6839 \uff0c \u5f00\u6839 \u4f7f\u7528 \u540e \u7684 \u7ed3\u679c \u4e5f \u4e00\u5b9a \u5f97 \u662f   \\ ( 1 \\ )   \u6216\u8005   \\ ( n   -   1 \\ )   \uff1b   \u82e5\u5f00 \u6839\u540e \u7684 \u7ed3\u679c \u4e0d\u662f   \\ ( 1 \\ )   \u6216   \\ ( n   -   1 \\ )   \uff0c \u7ee7\u7eed \u5f00\u6839 \u7684 \u7ed3\u679c \u4e5f \u4e00\u5b9a \u4e0d \u53ef\u80fd \u662f   \\ ( 1 \\ )   \uff0c \u5e76\u4e14 \u8fd9\u79cd \u60c5\u51b5 \u662f   \\ ( n \\ )   \u7edd\u5bf9 \u4e0d\u662f \u7d20\u6570 \u7684 \u60c5\u51b5 \uff1b   \u82e5\u5f00 \u6839\u540e \u7684 \u7ed3\u679c \u662f   \\ ( n   -   1 \\ )   \uff0c \u7ee7\u7eed \u5f00\u6839 \u7684 \u7ed3\u679c \u4e5f \u4e00\u5b9a \u4e0d \u53ef\u80fd \u662f   \\ ( 1 \\ )   \uff0c \u4f46\u662f \u8fd9\u79cd \u60c5\u51b5 \u4e0b   \\ ( n \\ )   \u662f \u5f88 \u6709 \u53ef\u80fd \u662f \u7d20\u6570 \u7684 \u3002   \u6709 \u4e86 \u4e0a\u9762 \u7684 \u610f\u8bc6 \u578b\u6001 \u4e4b\u540e \uff0c \u5c06   \\ ( n   -   1 \\ )   \u5206\u89e3 \u5206\u89e3\u6210   \\ ( u   \\ times   2   ^   t \\ )   \uff1a   \u5728   \\ ( [ 2 ,   n   -   1 ] \\ )   \u4e2d \u968f\u610f \u9009\u53d6   \\ ( a \\ )   \uff1b   ( \u8d39\u9a6c \u5c0f \u5b9a\u7406 \u7ed3\u5408 )   \u82e5   \\ ( a   ^   u   =   1 \\ )   \u5219   \\ ( n \\ )   \u4e00\u5b9a \u662f \u300c \u7d20\u6570 \u300d \uff0c \u56e0\u4e3a \u53ea\u6709   \\ ( a   ^   { u ^ ` } \\ )   \u4e00\u76f4 \u7b49\u4e8e   \\ ( 1 \\ )   \u7684 \u60c5\u51b5 \u4e0b \u624d\u80fd \u6700\u7ec8 \u5316\u5230   \\ ( a   ^   u   =   1 \\ )   \uff1b   \u82e5   \\ ( a   ^   u   \\ neq   1 \\ )   \uff0c \u5219   \\ ( a   ^   u \\ )   \u53ef\u80fd \u662f \u7531   \\ ( a   ^   { u ^ ` }   =   n   -   1 \\ )   \u7684 \u60c5\u51b5 \u4e0b\u5316 \u4e0b\u6765 \u7684 \uff0c \u82e5 \u771f\u662f \u8fd9\u6837 \uff0c \u5219   \\ ( n \\ )   \u4e5f \u6781\u5927 \u53ef\u80fd \u662f \u7d20\u6570 \uff0c \u5e76\u4e14 \u82e5   \\ ( a   ^   u \\ )   \u7ecf\u8fc7 \u51e0\u6b21 \u5e73\u65b9 \u4e4b\u540e \u7b49\u4e8e   \\ ( n   -   1 \\ )   \uff0c \u5219 \u7ee7\u7eed \u5411 \u4e0a\u9762 \u5e73\u65b9 \uff0c \u76f4\u5230 \u7b49\u4e8e \u539f\u503c   \\ ( a   ^   { n   -   1 } \\ )   \u4e4b\u540e \u7684 \u7ed3\u679c \u90fd \u4f1a \u662f   \\ ( 1 \\ )   \uff0c \u6240\u4ee5 \u80fd \u63a8\u51fa   \\ ( a   ^   { n   -   1 }   =   1 \\ )   \uff0c \u7b26\u5408 \u300c \u8d39\u9a6c \u5c0f \u5b9a\u7406 \u7684 \u5b9a\u7406 \u9006\u5b9a\u7406 \u300d \u7684 \u8981\u6c42 \uff0c   \\ ( n \\ )   \u4e5f \u6781\u5927 \u53ef\u80fd \u662f \u7d20\u6570 \u3002   \\ ( ( n   -   1 )   ^   2   =   n   ^   2   -   2n   +   1 \\ )   \u5728\u6a21   \\ ( n \\ )   \u7684 \u60c5\u51b5 \u4e0b \u662f   \\ ( 1 \\ )   \uff0c \u7136\u540e \u7531   \\ ( 1 \\ )   \u4e0d\u65ad \u5e73\u65b9 \u6a21   \\ ( n \\ )   \u4e4b\u540e \u7684 \u7ed3\u679c \u4e00\u76f4 \u90fd \u4f1a \u662f   \\ ( 1 \\ )   \uff1b   \u82e5   \\ ( a ^ u   \\ neq   1 \\ )   \uff0c \u4e14 \u4e0d\u65ad \u5411\u4e0a \u5e73\u65b9 \u76f4\u5230 \u53d8\u4e3a \u539f\u503c \u7684 \u60c5\u51b5 \u4e0b \u90fd \u6ca1\u6709 \u51fa\u73b0   \\ ( n   -   1 \\ )   \u7684 \u60c5\u51b5 \u4e0b \u4e00\u5b9a \u4e0d\u4f1a \u662f \u7d20\u6570   \uff0c \u82e5   \\ ( a ^ u   \\ neq   1 \\ )   \u7ecf\u8fc7 \u51e0\u6b21 \u5e73\u65b9 \u540e \u7684 \u53d6\u503c \u4e3a   \\ ( 1 \\ )   \uff0c \u8fd9\u79cd \u60c5\u51b5 \u662f \u6709 \u53ef\u80fd \u51fa\u73b0 \u7684 \uff0c \u5219 \u4e4b\u540e \u5e73\u65b9 \u7684 \u6240\u6709 \u7ed3\u679c \u90fd \u4e0d \u53ef\u4ee5 \u51fa\u73b0   \\ ( n   -   1 \\ )   \uff0c \u5e76\u4e14 \u4ece \u5934\u9876 \u5f80\u4e0b \u4e0b\u9762 \u5f80\u4e0b\u9762 \u601d\u8003 \u7684 \u8fc7\u7a0b \u4e2d \uff0c \u82e5   \\ ( a   ^   { n   -   1 } \\ )   \u7ecf\u8fc7 \u51e0\u6b21 \u5f00\u6839 \u4e4b\u540e \u7684 \u7ed3\u679c \u7531   \\ ( 1 \\ )   \u53d8\u6210 \u4e86 \u4e0d\u662f   \\ ( 1 \\ )   \u6216   \\ ( n   -   1 \\ )   \u7684 \u60c5\u51b5 \uff0c   \\ ( n \\ )   \u5c31 \u4e00\u5b9a \u4e0d\u662f \u7d20\u6570 \u3002   \u5e95\u6570   a   \u7684 \u9009\u53d6 \uff1a   \u5728   int   \u8303\u56f4 \u5185 \uff0c   \\ ( a \\ )   \u9009\u53d6   \\ ( 2 \u3001 7 \u3001 61 \\ )   \uff0c \u7d20\u6027 \u63a2\u6d4b \u7684 \u51c6\u786e \u51c6\u786e\u7387 \u63d0\u9ad8 \u5230   100% \u3002   \u5728   long   long   \u8303\u56f4 \u5185 \uff0c   \\ ( a \\ )   \u9009\u53d6   \\ ( 2 ,   325 ,   9375 ,   28178 ,   450775 ,   9780504 ,   1795265022 \\ )   \uff0c \u7d20\u6027 \u63a2\u6d4b \u7684 \u51c6\u786e \u51c6\u786e\u7387 \u63d0\u9ad8 \u5230   100% \u3002   \u5934\u9876 \u5411\u4e0b \u4e0e \u5e95\u90e8 \u5411\u4e0a \u53ef\u884c \u53ef\u884c\u6027 \u7684 \u8bf4\u660e   \u4ece \u5934\u9876 \u5f00\u59cb \uff0c \u8bf7 \u8bfb\u8005 \u81ea\u884c \u6309\u7167 \u4e0b\u9762 \u7684 \u601d\u8def \u6784\u5efa \u4e00\u9897 \u6811 \uff1a   \u4e00 \u5f00\u59cb \uff0c \u82e5   \\ ( a   ^   { u   \\ times   2   ^   t }   =   1 \\ )   \uff0c \u7531 \u300c \u8d39\u9a6c \u5c0f \u5b9a\u7406 \u300d \u53ef\u77e5 \uff0c   \\ ( n \\ )   \u6709 \u53ef\u80fd \u662f \u7d20\u6570 \uff1b   \u82e5   \\ ( a   ^   { u   \\ times   2   ^   { t   -   1 } }   =   n   -   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u6709 \u53ef\u80fd \u662f \u7d20\u6570 \uff1b   \u82e5   \\ ( a   ^   { u   \\ times   2   ^   { t   -   1 } }   \\ neq   n   -   1   \\ neq   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u4e0d \u53ef\u80fd \u662f \u7d20\u6570 \uff1b   \u82e5   \\ ( a   ^   { u   \\ times   2   ^   { t   -   1 } }   =   1 \\ )   \uff0c \u518d \u4e00\u6b21 \u4f7f\u7528 \u300c \u4e8c\u6b21 \u63a2\u6d4b \u5b9a\u7406 \u300d \u5f00 \u5411\u4e0b \u5f00\u6839 \uff1b   \u82e5   \\ ( a   ^   { u   \\ times   2   ^   { t   -   2 } }   =   n   -   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u6709 \u53ef\u80fd \u662f \u7d20\u6570 \uff1b   \u82e5   \\ ( a   ^   { u   \\ times   2   ^   { t   -   2 } }   \\ neq   n   -   1   \\ neq   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u4e0d \u53ef\u80fd \u662f \u7d20\u6570 \uff1b   \u82e5   \\ ( a   ^   { u   \\ times   2   ^   { t   -   2 } }   =   1 \\ )   \uff0c \u518d \u4e00\u6b21 \u4f7f\u7528 \u300c \u4e8c\u6b21 \u63a2\u6d4b \u5b9a\u7406 \u300d \u5f00\u6839 \uff1b   \u00b7 \u00b7 \u00b7   \u00b7 \u00b7 \u00b7   \u00b7 \u00b7 \u00b7   \u00b7 \u00b7 \u00b7   \u82e5   \\ ( a   ^   u   =   n   -   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u6709 \u53ef\u80fd \u662f \u7d20\u6570 \uff1b   \u82e5   \\ ( a   ^   u   \\ neq   n   -   1   \\ neq   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u4e0d \u53ef\u80fd \u662f \u7d20\u6570 \uff1b   \u82e5   \\ ( a   ^   u   =   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u6709 \u53ef\u80fd \u662f \u7d20\u6570 \uff1b   \u8865\u5145 \u8bf4\u660e \uff0c \u5982\u679c   \\ ( a   ^   { u   \\ times   2   ^   s }   \\ neq   1 \\ )   \uff0c \u5219 \u7ecf\u8fc7 \u4e0d\u65ad \u5730\u5f00\u6839 \u76f4\u5230   \\ ( s   =   0 \\ )   \u65f6 \uff0c   \\ ( a   ^   u \\ )   \u662f \u4e00\u5b9a \u65e0\u6cd5 \u53d8\u4e3a   1   \u7684 \u3002   \u4f46\u662f \u82e5   \\ ( a   ^   u \\ )   \u867d\u7136 \u4e0d\u662f   1 \uff0c \u4f46\u662f \u7ecf\u8fc7   \\ ( s \\ )   \u6b21 \u5e73\u65b9 \u4e4b\u540e   \\ ( a   ^   { u   \\ times   2   ^   s } \\ )   \u662f \u7531 \u53ef\u80fd \u7b49\u4e8e   1   \u7684 \uff0c \u4e3e\u4f8b \uff1a   \\ ( 2   \\ bmod   3   =   2 \\ )   \u4f46   \\ ( 2   ^   2   \\ bmod   3   =   1 \\ )   \uff1b   \u82e5   \\ ( a   ^   { u   \\ times   2   ^   s } \\ )   \u7b49\u4e8e   \\ ( n   -   1 \\ )   \uff0c \u5219 \u5e73\u65b9 \u4e4b\u540e \u7684 \u53d6\u503c \u4e00\u5b9a \u4f1a \u662f   1 \uff0c \u56e0\u4e3a   \\ ( ( n   -   1 )   ^   2   =   n   ^   2   -   2n   +   1   =   1 \\ )   \uff0c   \u5e76\u4e14 \u4ece\u6b64 \u5f00\u59cb \u4e0d\u65ad \u5e73\u65b9 \u4e4b\u540e \u8fd8\u4f1a \u4e00\u76f4 \u4fdd\u6301   1 \uff0c \u6240\u4ee5 \u5e73\u65b9 \u5230\u8fbe \u5934\u9876   \\ ( a   ^   { u   \\ times   2   ^   t } \\ )   \u6b21\u65b9 \u540e \u8fd8 \u4f1a \u662f   1 \uff0c \u6ee1\u8db3 \u300c \u8d39\u9a6c \u5c0f \u5b9a\u7406 \u300d \u3002   \u82e5 \u4ece \u5934\u9876 \u5f80\u4e0b \u5f00 \u4e86 \u51e0\u6b21 \u6839 \u4e4b\u540e \u53d1\u73b0   \\ ( a   ^   { u   \\ times   2   ^   { t   -   k } } \\ )   \u6a21   \\ ( n \\ )   \u7684 \u53d6\u503c \u4e3a   \\ ( n   -   1 \\ )   \uff0c \u5219 \u4ece \u5e95\u90e8   \\ ( a   ^   u \\ )   \u5411\u4e0a \u5e73\u65b9 \u51e0\u6b21 \u4e4b\u540e \u5f97\u5230   \\ ( n   -   1 \\ )   \u53ef\u4ee5 \u5f52\u4e3a \u4e00\u7c7b \u60c5\u51b5 \uff0c \u90fd \u80fd \u8bf4\u660e   \\ ( n \\ )   \u5f88 \u53ef\u80fd \u662f \u8d28\u6570 \u3002   \u82e5 \u4ece \u5934\u9876 \u5f80\u4e0b \u5f00 \u4e86   \\ ( t \\ )   \u6b21\u6839 \u4e4b\u540e \u53d1\u73b0   \\ ( a   ^   { u   \\ times   2   ^   { t   -   t } }   =   a   ^   u \\ )   \u6a21   \\ ( n \\ )   \u7684 \u53d6\u503c \u4e00\u76f4 \u90fd \u4e0d\u662f   \\ ( n   -   1 \\ )   \uff0c \u800c \u4e00\u76f4 \u90fd \u662f   \\ ( 1 \\ )   \u7684 \u60c5\u51b5 \u4e0b \uff0c \u4e5f \u80fd \u8bf4\u660e   \\ ( n \\ )   \u5f88 \u53ef\u80fd \u662f \u8d28\u6570 \u3002   \u82e5 \u4ece \u5934\u9876 \u5f80\u4e0b \u5f00 \u4e86   \\ ( k \\ )   \u6b21\u6839 \u4e4b\u540e \u53d1\u73b0   \\ ( a   ^   { u   \\ times   2   ^   { t   -   k } } \\ )   \u5e76 \u4e0d\u662f   \\ ( 1 \\ )   \u548c   \\ ( n   -   1 \\ )   \uff0c \u5219 \u7ee7\u7eed \u5148\u4e0b \u5f00\u6839 \u76f4\u5230 \u503c\u4e3a   \\ ( a   ^   u \\ )   \u6b21\u65b9 \u65f6 \uff0c \u6a21   \\ ( n \\ )   \u7684 \u7ed3\u679c \u662f \u4e00\u76f4 \u90fd \u4e0d \u53ef\u80fd \u51fa\u73b0   \\ ( 1 \\ )   \u7684 \uff0c \u6362\u53e5 \u6362\u53e5\u8bdd \u6362\u53e5\u8bdd\u8bf4 \uff0c \u53ea\u8981   \\ ( a   ^   u   =   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u5f88 \u53ef\u80fd \u662f \u8d28\u6570 \uff1b \u5426\u5219 \uff0c \u5f97 \u4ece   \\ ( a   ^   u \\ )   \u5f00\u59cb \u5411\u4e0a \u5e73\u65b9 \u591a\u6b21 \uff0c \u82e5 \u5e73\u65b9 \u5230   \\ ( a   ^   { u   \\ times   2   ^   { t } } \\ )   \u4e3a\u6b62 \u90fd \u672a\u80fd \u51fa\u73b0   \\ ( n   -   1 \\ )   \uff0c \u5219 \u4e00\u5b9a \u4e0d \u53ef\u80fd \u662f \u7d20\u6570 \uff1b \u82e5 \u51fa\u73b0   \\ ( n   -   1 \\ )   \uff0c \u7ee7\u7eed \u5e73\u65b9 \u5c31 \u4f1a \u51fa\u73b0   \\ ( 1 \\ )   \uff0c \u5e76\u4e14 \u4e00\u76f4 \u5411\u4e0a \u5e73\u65b9 \u90fd \u4f1a \u662f   \\ ( 1 \\ )   \uff0c \u6ee1\u8db3 \u8d39\u9a6c \u5c0f \u5b9a\u7406 \uff0c   \\ ( n \\ )   \u5f88 \u53ef\u80fd \u662f \u8d28\u6570 \uff1b \u82e5 \u5411\u4e0a \u5e73\u65b9 \u7684 \u8fc7\u7a0b \u4e2d \u51fa\u73b0 \u4e86   \\ ( 1 \\ )   \uff0c \u5219 \u4e5f \u80fd \u8bf4\u660e   \\ ( n \\ )   \u4e00\u5b9a \u4e0d\u662f \u7d20\u6570 \u4e86 \u3002   \u5199 \u7684 \u5f88 \u5570\u55e6 \uff0c \u5e0c\u671b \u672a\u6765 \u7684 \u81ea\u5df1 \u80fd\u591f \u8010\u5fc3 \u770b\u770b \u8fc7\u53bb \u7684 \u81ea\u5df1 \u7559\u4e0b \u7684 \u300c \u767e\u611f \u4ea4\u96c6 \u767e\u611f\u4ea4\u96c6 \u300d \u3002   \u4ece \u5e95\u90e8 \u5411\u4e0a \u601d\u8003 \uff0c \u4ec0\u4e48 \u4e3a\u4ec0\u4e48 \u8981 \u4ece \u5e95\u90e8 \u5411\u4e0a \uff1f \u56e0\u4e3a \u53d6\u6a21 \u8fd0\u7b97 \u5bf9\u4e8e \u52a0 \u3001 \u51cf \u3001 \u4e58 \u53ef\u4ee5 \u968f\u4fbf \u3001 \u968f\u5904 \u3001 \u968f\u610f \u53d6\u6a21 \uff1a   \u4ece   \\ ( 2   ^   u \\ )   \u5f00\u59cb   \u82e5   \\ ( 2   ^   u \\ )   \u7b49\u4e8e   1 \uff0c \u5219   \\ ( n \\ )   \u6781\u5927 \u53ef\u80fd \u662f \u7d20\u6570 \uff1b   \u82e5   \\ ( 2   ^   u \\ )   \u4e0d \u7b49\u4e8e   1 \uff0c \u82e5 \u7b49\u4e8e   \\ ( n   -   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u6781\u5927 \u53ef\u80fd \u662f \u7d20\u6570 \uff1b   \u82e5 \u90fd \u4e0d \u6ee1\u8db3 \uff0c \u5c31 \u4e0d\u65ad \u7684 \u6267\u884c \u5e73\u65b9 \uff1b   \u82e5 \u6267\u884c \u4e86   \\ ( s \\ )   \u6b21 \u5e73\u65b9 \u64cd\u4f5c \u4e4b\u540e \uff0c   \\ ( 2   ^   { u   \\ times   2   ^   s } \\ )   \u7684 \u7ed3\u679c \u4e3a   \\ ( n   -   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u6781\u5927 \u53ef\u80fd \u662f \u7d20\u6570 \uff1b   \u82e5 \u6267\u884c \u4e86   \\ ( t \\ )   \u6b21 \u5e73\u65b9 \u64cd\u4f5c \u90fd \u672a\u80fd \u627e\u5230   \\ ( n   -   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u4e00\u5b9a \u4e0d \u53ef\u80fd \u662f \u7d20\u6570 \uff1b   \u4ee3\u7801 \u8bbe\u8ba1 \uff1a   miller - rabin   \u4ee3\u7801 \u6a21\u677f   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   typedef   long   long   ll   ;   typedef   __ int128 _ t   int128   ;   inline   ll   qmul   (   int128   a   ,   int128   b   ,   int128   p   )   {   return   a   *   b   %   p   ;   }   ll   qpow   (   ll   a   ,   ll   n   ,   ll   p   )   {   ll   ans   =   1   ,   i   =   1   ,   j   =   a   ;   while   (   i   < =   n   )   {   if   (   n   &   i   )   ans   =   qmul   (   ans   ,   j   ,   p   ) ;   i   < < =   1   ;   j   =   qmul   (   j   ,   j   ,   p   ) ;   }   return   ans   ;   }   ll   la   [ ]   =   {   2   ,   325   ,   9375   ,   28178   ,   450775   ,   9780504   ,   1795265022   } ;   / /   long   long   \u8303\u56f4 \u5185   / /   ll   la [ ]   =   { 2 ,   7 ,   61 } ;   / /   int   \u8303\u56f4 \u5185   bool   mrq   (   ll   n   )   {   if   (   n   <   3   | |   n   %   2   = =   0   )   return   n   = =   2   ;   ll   u   =   n   -   1   ,   t   =   0   ;   while   (   u   %   2   = =   0   )   u   / =   2   ,   ++   t   ;   for   (   ll   a   :   la   )   {   ll   v   =   qpow   (   a   ,   u   ,   n   ) ;   if   (   v   = =   1   | |   v   = =   n   -   1   | |   v   = =   0   )   continue   ;   for   (   int   j   =   1   ;   j   < =   t   ;   j   ++   )   {   v   =   qmul   (   v   ,   v   ,   n   ) ;   if   (   v   = =   n   -   1   &&   v   ! =   t   )   {   v   =   1   ;   break   ;   }   if   (   v   = =   1   )   return   0   ;   }   if   (   v   ! =   1   )   return   0   ;   }   return   1   ;   }","title":"\u7d20\u6027 \u63a2\u6d4b \u5224 \u8d28\u6570"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E7%B4%A0%E6%80%A7%E6%8E%A2%E6%B5%8B%E5%88%A4%E8%B4%A8%E6%95%B0/#_1","text":"Miller - Rabin   \u7d20\u6027 \u6d4b\u8bd5   \u6267\u884c   \\ ( k \\ )   \u8bba \u7684 \u300c \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u300d \u4e3a   \\ ( O ( klog ^ 3n ) \\ )   \u3002   \u6ce8\u610f   \u4ee5\u4e0b \u90fd \u662f \u5728 \u540c\u4f59   \\ ( n \\ )   \u7684 \u60c5\u51b5 \u4e0b \u8ba8\u8bba \u3002   \u4e8c\u6b21 \u63a2\u6d4b \u5b9a\u7406   \u5982\u679c   \\ ( n \\ )   \u662f \u5947 \u7d20\u6570 \uff0c \u5219   \\ ( x ^ 2   =   1 \\ )   \u7684 \u89e3 \u53ea\u6709   \\ ( x   =   1 \\ )   \u6216   \\ ( x   =   n   -   1 \\ )   \u3002   \u8981 \u8bc1\u660e \u8be5 \u5b9a\u7406 \uff0c \u53ea \u9700 \u5c06   \\ ( 1 \\ )   \u79fb\u9879 \u5230 \u5de6\u8fb9 \uff1a   \\ ( ( x   +   1 ) ( x   -   1 )   =   0 \\ )   \uff0c \u5728 \u540c\u4f59   \\ ( n \\ )   \u7684 \u60c5\u51b5 \u4e0b   \\ ( x   =   1 \\ )   \u6216   \\ ( x   =   n   -   1 \\ )   \u3002   \u8d39\u9a6c \u5c0f \u5b9a\u7406   \u5982\u679c   \\ ( n \\ )   \u662f \u4e00\u4e2a \u7d20\u6570 \uff0c \u53ea\u8981   \\ ( a \\ )   \u4e0d\u662f   \\ ( n \\ )   \u7684 \u500d\u6570 \uff0c \u5219   \\ ( a   ^   { n   -   1 }   =   1 \\ )   \u3002   \u7ed3\u5408 \u300c \u4e8c\u6b21 \u63a2\u6d4b \u5b9a\u7406 \u300d \u548c   \u300c \u8d39\u9a6c \u5c0f \u5b9a\u7406 \u300d \u7684 \u5b9a\u7406 \u9006\u5b9a\u7406   \u5b9a\u7406 \u9006\u5b9a\u7406 \u4e0d \u4e00\u5b9a \u5bf9 \uff0c \u9002\u5f53 \u60c5\u51b5 \u4e0b \u53ef\u4ee5 \u63d0\u9ad8 \u5b83 \u5bf9 \u7684 \u6982\u7387 \u3002   \u5148 \u5f15\u5165 \u4e00\u4e2a \u63a8\u7406 \uff1a   \u539f \u547d\u9898 \uff1a \u82e5   \\ ( x \\   \\ % \\   n   =   1 \\ )   \uff0c \u5219   \\ ( x   ^   2 \\   \\ % \\   n   =   1 \\ )   \u4e00\u5b9a \u6210\u7acb \u3002 |   |   \\ ( x \\   \\ % \\   n   =   1   \\ rightarrow   x   ^   2 \\   \\ % \\   n   =   1 \\ )   \u547d\u9898 \u9006\u5426\u547d\u9898 \uff1a \u82e5   \\ ( x   ^   2 \\   \\ % \\   n   \\ neq   1 \\ )   \uff0c \u5219   \\ ( x \\   \\ % \\   n   \\ neq   1 \\ )   \u4e00\u5b9a \u6210\u7acb \u3002 |   |   \\ ( x   ^   2 \\   \\ % \\   n   \\ neq   1   \\ rightarrow   x \\   \\ % \\   n   \\ neq   1 \\ )   \u82e5   \\ ( n \\ )   \u662f \u4e00\u4e2a \u5947\u6570 \uff0c \u8981 \u6709 \u5982\u4e0b \u903b\u8f91 \uff1a   \u4e3a\u4e86 \u8981 \u7ed3\u5408 \u300c \u8d39\u9a6c \u5c0f \u5b9a\u7406 \u300d \uff0c \u6211\u4eec \u8981 \u9009\u53d6 \u4e0d\u662f   \\ ( n \\ )   \u7684 \u500d\u6570   \\ ( a \\ )   \uff0c \u53ea \u9700 \u5728   \\ ( [ 2 ,   n   -   1 ] \\ )   \u4e2d \u4efb\u610f \u9009\u53d6 \u4e00\u4e2a   \\ ( a \\ )   \u4f5c\u4e3a \u5e95\u6570 \u5c31\u884c \uff1b   \u82e5   \\ ( a   ^   { n   -   1 }   \\ neq   1 \\ )   \u5219   \\ ( n \\ )   \u4e00\u5b9a \u4e0d\u662f \u7d20\u6570 \uff1b   \u82e5   \\ ( a   ^   { n   -   1 }   =   1 \\ )   \u6ee1\u8db3 \uff0c \u6211\u4eec \u53ef\u4ee5 \u8bf4   \\ ( a \\ )   \u5f88 \u53ef\u80fd \u662f \u300c \u7d20\u6570 \u300d \uff1b   \u6211\u4eec \u5728 \u4e0a\u9762 \u7684 \u57fa\u7840 \u4e0a \u518d \u7ed3\u5408 \u300c \u4e8c\u6b21 \u5b9a\u7406 \u7684 \u5b9a\u7406 \u9006\u5b9a\u7406 \u300d \uff0c \u53ea\u8981   \\ ( n   -   1   =   u   \\ times   2   ^   t \\ )   \uff0c \u5219   \\ ( a   ^   { n   -   1 } \\ )   \u53ef\u4ee5 \u7b49\u4e8e   \\ ( a   ^   u \\ )   \u7684   \\ ( t \\ )   \u6b21 \u5e73\u65b9 \uff1b   \u6211\u4eec \u4e5f \u53ef\u4ee5 \u4e0d\u65ad \u5730 \u5bf9   \\ ( a ^ { n   -   1 } \\ )   \u4e0d\u65ad \u5730\u5f00\u6839 \u76f4\u5230   \\ ( a ^ u \\ )   \u4e2d \u7684   \\ ( u \\ )   \u4e3a \u5947\u6570 \u4e3a\u6b62 \uff1b   \u5bf9   \\ ( a   ^   { n   -   1 } \\ )   \u5f00\u6839 \u4e4b\u540e \u7684 \u7ed3\u679c   \\ ( a   ^   { \\ frac { n   -   1 } { 2 } } \\ )   \u5982\u679c \u4e0d\u662f   \\ ( 1 \\ )   \u6216   \\ ( n   -   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u4e00\u5b9a \u4e0d\u662f \u300c \u8d28\u6570 \u300d \uff1b   \u82e5   \\ ( a   ^   { \\ frac { n   -   1 } { 2 } } \\ )   \u662f   \\ ( 1 \\ )   \u5c31 \u53ef\u4ee5 \u518d \u4e00\u6b21 \u5730 \u4f7f\u7528 \u300c \u4e8c\u6b21 \u63a2\u6d4b \u5b9a\u7406 \u7684 \u5b9a\u7406 \u9006\u5b9a\u7406 \u300d \u5f00\u6839 \uff0c \u5f00\u6839 \u4f7f\u7528 \u540e \u7684 \u7ed3\u679c \u4e5f \u4e00\u5b9a \u5f97 \u662f   \\ ( 1 \\ )   \u6216\u8005   \\ ( n   -   1 \\ )   \uff1b   \u82e5\u5f00 \u6839\u540e \u7684 \u7ed3\u679c \u4e0d\u662f   \\ ( 1 \\ )   \u6216   \\ ( n   -   1 \\ )   \uff0c \u7ee7\u7eed \u5f00\u6839 \u7684 \u7ed3\u679c \u4e5f \u4e00\u5b9a \u4e0d \u53ef\u80fd \u662f   \\ ( 1 \\ )   \uff0c \u5e76\u4e14 \u8fd9\u79cd \u60c5\u51b5 \u662f   \\ ( n \\ )   \u7edd\u5bf9 \u4e0d\u662f \u7d20\u6570 \u7684 \u60c5\u51b5 \uff1b   \u82e5\u5f00 \u6839\u540e \u7684 \u7ed3\u679c \u662f   \\ ( n   -   1 \\ )   \uff0c \u7ee7\u7eed \u5f00\u6839 \u7684 \u7ed3\u679c \u4e5f \u4e00\u5b9a \u4e0d \u53ef\u80fd \u662f   \\ ( 1 \\ )   \uff0c \u4f46\u662f \u8fd9\u79cd \u60c5\u51b5 \u4e0b   \\ ( n \\ )   \u662f \u5f88 \u6709 \u53ef\u80fd \u662f \u7d20\u6570 \u7684 \u3002   \u6709 \u4e86 \u4e0a\u9762 \u7684 \u610f\u8bc6 \u578b\u6001 \u4e4b\u540e \uff0c \u5c06   \\ ( n   -   1 \\ )   \u5206\u89e3 \u5206\u89e3\u6210   \\ ( u   \\ times   2   ^   t \\ )   \uff1a   \u5728   \\ ( [ 2 ,   n   -   1 ] \\ )   \u4e2d \u968f\u610f \u9009\u53d6   \\ ( a \\ )   \uff1b   ( \u8d39\u9a6c \u5c0f \u5b9a\u7406 \u7ed3\u5408 )   \u82e5   \\ ( a   ^   u   =   1 \\ )   \u5219   \\ ( n \\ )   \u4e00\u5b9a \u662f \u300c \u7d20\u6570 \u300d \uff0c \u56e0\u4e3a \u53ea\u6709   \\ ( a   ^   { u ^ ` } \\ )   \u4e00\u76f4 \u7b49\u4e8e   \\ ( 1 \\ )   \u7684 \u60c5\u51b5 \u4e0b \u624d\u80fd \u6700\u7ec8 \u5316\u5230   \\ ( a   ^   u   =   1 \\ )   \uff1b   \u82e5   \\ ( a   ^   u   \\ neq   1 \\ )   \uff0c \u5219   \\ ( a   ^   u \\ )   \u53ef\u80fd \u662f \u7531   \\ ( a   ^   { u ^ ` }   =   n   -   1 \\ )   \u7684 \u60c5\u51b5 \u4e0b\u5316 \u4e0b\u6765 \u7684 \uff0c \u82e5 \u771f\u662f \u8fd9\u6837 \uff0c \u5219   \\ ( n \\ )   \u4e5f \u6781\u5927 \u53ef\u80fd \u662f \u7d20\u6570 \uff0c \u5e76\u4e14 \u82e5   \\ ( a   ^   u \\ )   \u7ecf\u8fc7 \u51e0\u6b21 \u5e73\u65b9 \u4e4b\u540e \u7b49\u4e8e   \\ ( n   -   1 \\ )   \uff0c \u5219 \u7ee7\u7eed \u5411 \u4e0a\u9762 \u5e73\u65b9 \uff0c \u76f4\u5230 \u7b49\u4e8e \u539f\u503c   \\ ( a   ^   { n   -   1 } \\ )   \u4e4b\u540e \u7684 \u7ed3\u679c \u90fd \u4f1a \u662f   \\ ( 1 \\ )   \uff0c \u6240\u4ee5 \u80fd \u63a8\u51fa   \\ ( a   ^   { n   -   1 }   =   1 \\ )   \uff0c \u7b26\u5408 \u300c \u8d39\u9a6c \u5c0f \u5b9a\u7406 \u7684 \u5b9a\u7406 \u9006\u5b9a\u7406 \u300d \u7684 \u8981\u6c42 \uff0c   \\ ( n \\ )   \u4e5f \u6781\u5927 \u53ef\u80fd \u662f \u7d20\u6570 \u3002   \\ ( ( n   -   1 )   ^   2   =   n   ^   2   -   2n   +   1 \\ )   \u5728\u6a21   \\ ( n \\ )   \u7684 \u60c5\u51b5 \u4e0b \u662f   \\ ( 1 \\ )   \uff0c \u7136\u540e \u7531   \\ ( 1 \\ )   \u4e0d\u65ad \u5e73\u65b9 \u6a21   \\ ( n \\ )   \u4e4b\u540e \u7684 \u7ed3\u679c \u4e00\u76f4 \u90fd \u4f1a \u662f   \\ ( 1 \\ )   \uff1b   \u82e5   \\ ( a ^ u   \\ neq   1 \\ )   \uff0c \u4e14 \u4e0d\u65ad \u5411\u4e0a \u5e73\u65b9 \u76f4\u5230 \u53d8\u4e3a \u539f\u503c \u7684 \u60c5\u51b5 \u4e0b \u90fd \u6ca1\u6709 \u51fa\u73b0   \\ ( n   -   1 \\ )   \u7684 \u60c5\u51b5 \u4e0b \u4e00\u5b9a \u4e0d\u4f1a \u662f \u7d20\u6570   \uff0c \u82e5   \\ ( a ^ u   \\ neq   1 \\ )   \u7ecf\u8fc7 \u51e0\u6b21 \u5e73\u65b9 \u540e \u7684 \u53d6\u503c \u4e3a   \\ ( 1 \\ )   \uff0c \u8fd9\u79cd \u60c5\u51b5 \u662f \u6709 \u53ef\u80fd \u51fa\u73b0 \u7684 \uff0c \u5219 \u4e4b\u540e \u5e73\u65b9 \u7684 \u6240\u6709 \u7ed3\u679c \u90fd \u4e0d \u53ef\u4ee5 \u51fa\u73b0   \\ ( n   -   1 \\ )   \uff0c \u5e76\u4e14 \u4ece \u5934\u9876 \u5f80\u4e0b \u4e0b\u9762 \u5f80\u4e0b\u9762 \u601d\u8003 \u7684 \u8fc7\u7a0b \u4e2d \uff0c \u82e5   \\ ( a   ^   { n   -   1 } \\ )   \u7ecf\u8fc7 \u51e0\u6b21 \u5f00\u6839 \u4e4b\u540e \u7684 \u7ed3\u679c \u7531   \\ ( 1 \\ )   \u53d8\u6210 \u4e86 \u4e0d\u662f   \\ ( 1 \\ )   \u6216   \\ ( n   -   1 \\ )   \u7684 \u60c5\u51b5 \uff0c   \\ ( n \\ )   \u5c31 \u4e00\u5b9a \u4e0d\u662f \u7d20\u6570 \u3002   \u5e95\u6570   a   \u7684 \u9009\u53d6 \uff1a   \u5728   int   \u8303\u56f4 \u5185 \uff0c   \\ ( a \\ )   \u9009\u53d6   \\ ( 2 \u3001 7 \u3001 61 \\ )   \uff0c \u7d20\u6027 \u63a2\u6d4b \u7684 \u51c6\u786e \u51c6\u786e\u7387 \u63d0\u9ad8 \u5230   100% \u3002   \u5728   long   long   \u8303\u56f4 \u5185 \uff0c   \\ ( a \\ )   \u9009\u53d6   \\ ( 2 ,   325 ,   9375 ,   28178 ,   450775 ,   9780504 ,   1795265022 \\ )   \uff0c \u7d20\u6027 \u63a2\u6d4b \u7684 \u51c6\u786e \u51c6\u786e\u7387 \u63d0\u9ad8 \u5230   100% \u3002   \u5934\u9876 \u5411\u4e0b \u4e0e \u5e95\u90e8 \u5411\u4e0a \u53ef\u884c \u53ef\u884c\u6027 \u7684 \u8bf4\u660e   \u4ece \u5934\u9876 \u5f00\u59cb \uff0c \u8bf7 \u8bfb\u8005 \u81ea\u884c \u6309\u7167 \u4e0b\u9762 \u7684 \u601d\u8def \u6784\u5efa \u4e00\u9897 \u6811 \uff1a   \u4e00 \u5f00\u59cb \uff0c \u82e5   \\ ( a   ^   { u   \\ times   2   ^   t }   =   1 \\ )   \uff0c \u7531 \u300c \u8d39\u9a6c \u5c0f \u5b9a\u7406 \u300d \u53ef\u77e5 \uff0c   \\ ( n \\ )   \u6709 \u53ef\u80fd \u662f \u7d20\u6570 \uff1b   \u82e5   \\ ( a   ^   { u   \\ times   2   ^   { t   -   1 } }   =   n   -   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u6709 \u53ef\u80fd \u662f \u7d20\u6570 \uff1b   \u82e5   \\ ( a   ^   { u   \\ times   2   ^   { t   -   1 } }   \\ neq   n   -   1   \\ neq   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u4e0d \u53ef\u80fd \u662f \u7d20\u6570 \uff1b   \u82e5   \\ ( a   ^   { u   \\ times   2   ^   { t   -   1 } }   =   1 \\ )   \uff0c \u518d \u4e00\u6b21 \u4f7f\u7528 \u300c \u4e8c\u6b21 \u63a2\u6d4b \u5b9a\u7406 \u300d \u5f00 \u5411\u4e0b \u5f00\u6839 \uff1b   \u82e5   \\ ( a   ^   { u   \\ times   2   ^   { t   -   2 } }   =   n   -   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u6709 \u53ef\u80fd \u662f \u7d20\u6570 \uff1b   \u82e5   \\ ( a   ^   { u   \\ times   2   ^   { t   -   2 } }   \\ neq   n   -   1   \\ neq   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u4e0d \u53ef\u80fd \u662f \u7d20\u6570 \uff1b   \u82e5   \\ ( a   ^   { u   \\ times   2   ^   { t   -   2 } }   =   1 \\ )   \uff0c \u518d \u4e00\u6b21 \u4f7f\u7528 \u300c \u4e8c\u6b21 \u63a2\u6d4b \u5b9a\u7406 \u300d \u5f00\u6839 \uff1b   \u00b7 \u00b7 \u00b7   \u00b7 \u00b7 \u00b7   \u00b7 \u00b7 \u00b7   \u00b7 \u00b7 \u00b7   \u82e5   \\ ( a   ^   u   =   n   -   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u6709 \u53ef\u80fd \u662f \u7d20\u6570 \uff1b   \u82e5   \\ ( a   ^   u   \\ neq   n   -   1   \\ neq   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u4e0d \u53ef\u80fd \u662f \u7d20\u6570 \uff1b   \u82e5   \\ ( a   ^   u   =   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u6709 \u53ef\u80fd \u662f \u7d20\u6570 \uff1b   \u8865\u5145 \u8bf4\u660e \uff0c \u5982\u679c   \\ ( a   ^   { u   \\ times   2   ^   s }   \\ neq   1 \\ )   \uff0c \u5219 \u7ecf\u8fc7 \u4e0d\u65ad \u5730\u5f00\u6839 \u76f4\u5230   \\ ( s   =   0 \\ )   \u65f6 \uff0c   \\ ( a   ^   u \\ )   \u662f \u4e00\u5b9a \u65e0\u6cd5 \u53d8\u4e3a   1   \u7684 \u3002   \u4f46\u662f \u82e5   \\ ( a   ^   u \\ )   \u867d\u7136 \u4e0d\u662f   1 \uff0c \u4f46\u662f \u7ecf\u8fc7   \\ ( s \\ )   \u6b21 \u5e73\u65b9 \u4e4b\u540e   \\ ( a   ^   { u   \\ times   2   ^   s } \\ )   \u662f \u7531 \u53ef\u80fd \u7b49\u4e8e   1   \u7684 \uff0c \u4e3e\u4f8b \uff1a   \\ ( 2   \\ bmod   3   =   2 \\ )   \u4f46   \\ ( 2   ^   2   \\ bmod   3   =   1 \\ )   \uff1b   \u82e5   \\ ( a   ^   { u   \\ times   2   ^   s } \\ )   \u7b49\u4e8e   \\ ( n   -   1 \\ )   \uff0c \u5219 \u5e73\u65b9 \u4e4b\u540e \u7684 \u53d6\u503c \u4e00\u5b9a \u4f1a \u662f   1 \uff0c \u56e0\u4e3a   \\ ( ( n   -   1 )   ^   2   =   n   ^   2   -   2n   +   1   =   1 \\ )   \uff0c   \u5e76\u4e14 \u4ece\u6b64 \u5f00\u59cb \u4e0d\u65ad \u5e73\u65b9 \u4e4b\u540e \u8fd8\u4f1a \u4e00\u76f4 \u4fdd\u6301   1 \uff0c \u6240\u4ee5 \u5e73\u65b9 \u5230\u8fbe \u5934\u9876   \\ ( a   ^   { u   \\ times   2   ^   t } \\ )   \u6b21\u65b9 \u540e \u8fd8 \u4f1a \u662f   1 \uff0c \u6ee1\u8db3 \u300c \u8d39\u9a6c \u5c0f \u5b9a\u7406 \u300d \u3002   \u82e5 \u4ece \u5934\u9876 \u5f80\u4e0b \u5f00 \u4e86 \u51e0\u6b21 \u6839 \u4e4b\u540e \u53d1\u73b0   \\ ( a   ^   { u   \\ times   2   ^   { t   -   k } } \\ )   \u6a21   \\ ( n \\ )   \u7684 \u53d6\u503c \u4e3a   \\ ( n   -   1 \\ )   \uff0c \u5219 \u4ece \u5e95\u90e8   \\ ( a   ^   u \\ )   \u5411\u4e0a \u5e73\u65b9 \u51e0\u6b21 \u4e4b\u540e \u5f97\u5230   \\ ( n   -   1 \\ )   \u53ef\u4ee5 \u5f52\u4e3a \u4e00\u7c7b \u60c5\u51b5 \uff0c \u90fd \u80fd \u8bf4\u660e   \\ ( n \\ )   \u5f88 \u53ef\u80fd \u662f \u8d28\u6570 \u3002   \u82e5 \u4ece \u5934\u9876 \u5f80\u4e0b \u5f00 \u4e86   \\ ( t \\ )   \u6b21\u6839 \u4e4b\u540e \u53d1\u73b0   \\ ( a   ^   { u   \\ times   2   ^   { t   -   t } }   =   a   ^   u \\ )   \u6a21   \\ ( n \\ )   \u7684 \u53d6\u503c \u4e00\u76f4 \u90fd \u4e0d\u662f   \\ ( n   -   1 \\ )   \uff0c \u800c \u4e00\u76f4 \u90fd \u662f   \\ ( 1 \\ )   \u7684 \u60c5\u51b5 \u4e0b \uff0c \u4e5f \u80fd \u8bf4\u660e   \\ ( n \\ )   \u5f88 \u53ef\u80fd \u662f \u8d28\u6570 \u3002   \u82e5 \u4ece \u5934\u9876 \u5f80\u4e0b \u5f00 \u4e86   \\ ( k \\ )   \u6b21\u6839 \u4e4b\u540e \u53d1\u73b0   \\ ( a   ^   { u   \\ times   2   ^   { t   -   k } } \\ )   \u5e76 \u4e0d\u662f   \\ ( 1 \\ )   \u548c   \\ ( n   -   1 \\ )   \uff0c \u5219 \u7ee7\u7eed \u5148\u4e0b \u5f00\u6839 \u76f4\u5230 \u503c\u4e3a   \\ ( a   ^   u \\ )   \u6b21\u65b9 \u65f6 \uff0c \u6a21   \\ ( n \\ )   \u7684 \u7ed3\u679c \u662f \u4e00\u76f4 \u90fd \u4e0d \u53ef\u80fd \u51fa\u73b0   \\ ( 1 \\ )   \u7684 \uff0c \u6362\u53e5 \u6362\u53e5\u8bdd \u6362\u53e5\u8bdd\u8bf4 \uff0c \u53ea\u8981   \\ ( a   ^   u   =   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u5f88 \u53ef\u80fd \u662f \u8d28\u6570 \uff1b \u5426\u5219 \uff0c \u5f97 \u4ece   \\ ( a   ^   u \\ )   \u5f00\u59cb \u5411\u4e0a \u5e73\u65b9 \u591a\u6b21 \uff0c \u82e5 \u5e73\u65b9 \u5230   \\ ( a   ^   { u   \\ times   2   ^   { t } } \\ )   \u4e3a\u6b62 \u90fd \u672a\u80fd \u51fa\u73b0   \\ ( n   -   1 \\ )   \uff0c \u5219 \u4e00\u5b9a \u4e0d \u53ef\u80fd \u662f \u7d20\u6570 \uff1b \u82e5 \u51fa\u73b0   \\ ( n   -   1 \\ )   \uff0c \u7ee7\u7eed \u5e73\u65b9 \u5c31 \u4f1a \u51fa\u73b0   \\ ( 1 \\ )   \uff0c \u5e76\u4e14 \u4e00\u76f4 \u5411\u4e0a \u5e73\u65b9 \u90fd \u4f1a \u662f   \\ ( 1 \\ )   \uff0c \u6ee1\u8db3 \u8d39\u9a6c \u5c0f \u5b9a\u7406 \uff0c   \\ ( n \\ )   \u5f88 \u53ef\u80fd \u662f \u8d28\u6570 \uff1b \u82e5 \u5411\u4e0a \u5e73\u65b9 \u7684 \u8fc7\u7a0b \u4e2d \u51fa\u73b0 \u4e86   \\ ( 1 \\ )   \uff0c \u5219 \u4e5f \u80fd \u8bf4\u660e   \\ ( n \\ )   \u4e00\u5b9a \u4e0d\u662f \u7d20\u6570 \u4e86 \u3002   \u5199 \u7684 \u5f88 \u5570\u55e6 \uff0c \u5e0c\u671b \u672a\u6765 \u7684 \u81ea\u5df1 \u80fd\u591f \u8010\u5fc3 \u770b\u770b \u8fc7\u53bb \u7684 \u81ea\u5df1 \u7559\u4e0b \u7684 \u300c \u767e\u611f \u4ea4\u96c6 \u767e\u611f\u4ea4\u96c6 \u300d \u3002   \u4ece \u5e95\u90e8 \u5411\u4e0a \u601d\u8003 \uff0c \u4ec0\u4e48 \u4e3a\u4ec0\u4e48 \u8981 \u4ece \u5e95\u90e8 \u5411\u4e0a \uff1f \u56e0\u4e3a \u53d6\u6a21 \u8fd0\u7b97 \u5bf9\u4e8e \u52a0 \u3001 \u51cf \u3001 \u4e58 \u53ef\u4ee5 \u968f\u4fbf \u3001 \u968f\u5904 \u3001 \u968f\u610f \u53d6\u6a21 \uff1a   \u4ece   \\ ( 2   ^   u \\ )   \u5f00\u59cb   \u82e5   \\ ( 2   ^   u \\ )   \u7b49\u4e8e   1 \uff0c \u5219   \\ ( n \\ )   \u6781\u5927 \u53ef\u80fd \u662f \u7d20\u6570 \uff1b   \u82e5   \\ ( 2   ^   u \\ )   \u4e0d \u7b49\u4e8e   1 \uff0c \u82e5 \u7b49\u4e8e   \\ ( n   -   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u6781\u5927 \u53ef\u80fd \u662f \u7d20\u6570 \uff1b   \u82e5 \u90fd \u4e0d \u6ee1\u8db3 \uff0c \u5c31 \u4e0d\u65ad \u7684 \u6267\u884c \u5e73\u65b9 \uff1b   \u82e5 \u6267\u884c \u4e86   \\ ( s \\ )   \u6b21 \u5e73\u65b9 \u64cd\u4f5c \u4e4b\u540e \uff0c   \\ ( 2   ^   { u   \\ times   2   ^   s } \\ )   \u7684 \u7ed3\u679c \u4e3a   \\ ( n   -   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u6781\u5927 \u53ef\u80fd \u662f \u7d20\u6570 \uff1b   \u82e5 \u6267\u884c \u4e86   \\ ( t \\ )   \u6b21 \u5e73\u65b9 \u64cd\u4f5c \u90fd \u672a\u80fd \u627e\u5230   \\ ( n   -   1 \\ )   \uff0c \u5219   \\ ( n \\ )   \u4e00\u5b9a \u4e0d \u53ef\u80fd \u662f \u7d20\u6570 \uff1b   \u4ee3\u7801 \u8bbe\u8ba1 \uff1a   miller - rabin   \u4ee3\u7801 \u6a21\u677f   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   typedef   long   long   ll   ;   typedef   __ int128 _ t   int128   ;   inline   ll   qmul   (   int128   a   ,   int128   b   ,   int128   p   )   {   return   a   *   b   %   p   ;   }   ll   qpow   (   ll   a   ,   ll   n   ,   ll   p   )   {   ll   ans   =   1   ,   i   =   1   ,   j   =   a   ;   while   (   i   < =   n   )   {   if   (   n   &   i   )   ans   =   qmul   (   ans   ,   j   ,   p   ) ;   i   < < =   1   ;   j   =   qmul   (   j   ,   j   ,   p   ) ;   }   return   ans   ;   }   ll   la   [ ]   =   {   2   ,   325   ,   9375   ,   28178   ,   450775   ,   9780504   ,   1795265022   } ;   / /   long   long   \u8303\u56f4 \u5185   / /   ll   la [ ]   =   { 2 ,   7 ,   61 } ;   / /   int   \u8303\u56f4 \u5185   bool   mrq   (   ll   n   )   {   if   (   n   <   3   | |   n   %   2   = =   0   )   return   n   = =   2   ;   ll   u   =   n   -   1   ,   t   =   0   ;   while   (   u   %   2   = =   0   )   u   / =   2   ,   ++   t   ;   for   (   ll   a   :   la   )   {   ll   v   =   qpow   (   a   ,   u   ,   n   ) ;   if   (   v   = =   1   | |   v   = =   n   -   1   | |   v   = =   0   )   continue   ;   for   (   int   j   =   1   ;   j   < =   t   ;   j   ++   )   {   v   =   qmul   (   v   ,   v   ,   n   ) ;   if   (   v   = =   n   -   1   &&   v   ! =   t   )   {   v   =   1   ;   break   ;   }   if   (   v   = =   1   )   return   0   ;   }   if   (   v   ! =   1   )   return   0   ;   }   return   1   ;   }","title":"\u7d20\u6027 \u63a2\u6d4b \u5224 \u8d28\u6570"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E7%BA%A6%E6%95%B0%E5%92%8C%E5%AE%9A%E7%90%86/","text":"\u7ea6\u6570 \u548c \u5b9a\u7406   \u6c42 \u7ea6\u6570 \u548c   \u7ed9\u5b9a \u4e00\u4e2a \u6570   \\ ( n \\ )   \u5982\u4f55 \u6c42   \\ ( n \\ )   \u7684 \u6240\u6709 \u7ea6\u6570 \u4e4b \u548c \uff1f   \u5bf9\u4e8e \u6bcf\u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( n \\ )   \u90fd \u53ef\u4ee5 \u5206\u89e3 \u5206\u89e3\u6210 \u4e00\u4e9b \u7d20\u6570 \u7684 \u4e58\u79ef \uff1a   \\ ( n   =   p _ 1 ^ { k _ 1 } p _ 2 ^ { k _ 2 }   \\ cdots   p _ n ^ { k _ n } \\ )   \u5219 \u4efb\u610f \u4e00\u4e2a \u7ea6\u6570 \u90fd \u53ef\u4ee5 \u8868\u793a \u6210 \uff1a   \\ ( n   =   p _ 1 ^ { s _ 1 } p _ 2 ^ { s _ 2 }   \\ cdots   p _ n ^ { s _ n } \\ )   \uff0c \u5176\u4e2d   \\ ( s _ 1   \\ leq   k _ 1 ,   s _ 2   \\ leq   k _ 2 ,   \\ cdots   s _ n   \\ leq   k _ n \\ )   \u6240\u4ee5 \u6240\u6709 \u7684 \u7ea6\u6570 \u548c \u53ef\u4ee5 \u8868\u793a \u6210 \uff1a   \\ ( s   =   ( p _ 1   ^   0   +   p _ 1   ^   1   +   \\ cdots   p _ 1   ^   { k _ 1 } )   \\ times   ( p _ 2   ^   0   +   p _ 2   ^   1   +   \\ cdots   p _ 2   ^   { k _ 2 } )   \\ times   \\ cdots   \\ times   ( p _ n   ^   0   +   p _ n   ^   1   +   \\ cdots   p _ n   ^   { k _ n } ) \\ )   \u6c42 \u4e00\u4e2a \u6570 \u7684 \u7ea6\u6570 \u4e4b \u548c \u4ee3\u7801 \u53c2\u8003 \uff1a   \u4ee3\u7801 \u6bd4\u8f83 \u6742 \uff1a \u8fb9 \u8bb0\u5f55 \u7d20\u6570 \u7684 \u6700\u9ad8 \u6b21\u65b9 \uff0c \u8fb9 \u8bb0\u5f55 \u548c   typedef   long   long   LL   ;   const   LL   mod   =   LL   (   1e9   +   7   ) ;   unordered _ map   <   LL   ,   vector   <   LL   > >   ps   ;   LL   add _ ds   (   LL   n   )   {   for   (   int   i   =   2   ;   i   < =   n   /   i   ;   i   ++   )   {   if   (   n   %   i   = =   0   )   {   auto   node   =   ps   .   find   (   i   ) ;   if   (   node   = =   ps   .   end   ( ) )   {   ps   .   insert   ( {   i   ,   {   1   ,   1   } } ) ;   node   =   ps   .   find   (   i   ) ;   }   while   (   n   %   i   = =   0   )   {   node   - >   second   [   0   ]   =   node   - >   second   [   0   ]   *   i   %   mod   ;   node   - >   second   [   1   ]   =   (   node   - >   second   [   1   ]   +   node   - >   second   [   0   ] )   %   mod   ;   n   / =   i   ;   }   }   }   if   (   n   >   1   )   ps   .   insert   ( {   n   ,   {   n   ,   1   +   n   } } ) ;   LL   ans   =   1   ;   for   (   auto   [   x   ,   y   ]   :   ps   )   {   ans   =   ans   *   y   [   1   ]   %   mod   ;   }   return   ans   ;   }   \u4ee3\u7801 \u7cbe\u7b80 \u7cbe\u7b80\u7248 \uff1a \u76f4\u63a5 \u8bb0\u5f55 \u7d20\u6570 \u7684 \u4e2a\u6570   typedef   long   long   LL   ;   const   LL   mod   =   LL   (   1e9   +   7   ) ;   unordered _ map   <   LL   ,   LL   >   pn   ;   LL   add _ ds   (   LL   n   )   {   for   (   int   i   =   2   ;   i   < =   n   /   i   ;   i   ++   )   {   if   (   n   %   i   = =   0   )   {   auto   &   t   =   pn   [   i   ] ;   while   (   n   %   i   = =   0   )   t   ++   ,   n   / =   i   ;   }   }   if   (   n   >   1   )   pn   [   n   ]   ++   ;   LL   ans   =   1   ;   for   (   auto   [   x   ,   y   ]   :   pn   )   {   LL   a   =   1   ,   b   =   1   ;   while   (   y   --   )   a   =   a   *   x   %   mod   ,   b   =   (   b   +   a   )   %   mod   ;   ans   =   ans   *   b   %   mod   ;   }   return   ans   ;   }   871 . \u7ea6\u6570 \u4e4b \u548c   \u7ed9 \u70b9   \\ ( n \\ )   \u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( a _ i \\ )   \uff0c \u8bf7 \u4f60 \u8f93\u51fa \u8fd9\u4e9b \u6570 \u4e58\u79ef \u7684 \u7ea6\u6570 \u4e4b \u548c \uff0c \u7b54\u6848 \u5bf9   \\ ( 10 ^ 9   +   7 \\ )   \u53d6\u6a21 \u3002   \u601d\u8def \uff0c \u548c \u4e0a\u9762 \u7684 \u4e0d\u591a \u5dee\u4e0d\u591a \uff0c \u4e5f \u662f \u7edf\u8ba1 \u6240\u6709 \u7684 \u7d20 \u56e0\u5b50 \u3002   \u8fb9 \u8bb0\u5f55 \u5404 \u7d20\u6570 \u7684 \u6700\u9ad8 \u6b21 \u7684 \u503c \uff0c \u8fb9 \u7d2f\u52a0 \u4ee3\u7801 \u53c2\u8003   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   typedef   long   long   LL   ;   const   LL   mod   =   (   1e9   +   7   ) ;   unordered _ map   <   LL   ,   vector   <   LL   > >   ps   ;   void   add _ ds   (   LL   n   )   {   for   (   int   i   =   2   ;   i   < =   n   /   i   ;   i   ++   )   {   if   (   n   %   i   = =   0   )   {   auto   node   =   ps   .   find   (   i   ) ;   if   (   node   = =   ps   .   end   ( ) )   {   ps   .   insert   ( {   i   ,   {   1   ,   1   } } ) ;   node   =   ps   .   find   (   i   ) ;   }   while   (   n   %   i   = =   0   )   {   LL   x   =   node   - >   second   [   0   ]   =   node   - >   second   [   0   ]   *   i   %   mod   ;   node   - >   second   [   1   ]   =   (   node   - >   second   [   1   ]   +   x   )   %   mod   ;   n   / =   i   ;   }   }   }   if   (   n   >   1   )   {   auto   node   =   ps   .   find   (   n   ) ;   if   (   node   = =   ps   .   end   ( ) )   {   ps   .   insert   ( {   n   ,   {   1   ,   1   } } ) ;   node   =   ps   .   find   (   n   ) ;   }   LL   x   =   node   - >   second   [   0   ]   =   node   - >   second   [   0   ]   *   n   %   mod   ;   node   - >   second   [   1   ]   =   (   node   - >   second   [   1   ]   +   x   )   %   mod   ;   }   }   void   solve   (   void   )   {   int   n   ;   scanf   (   \" % d \"   ,   &   n   ) ;   while   (   n   --   )   {   int   t   ;   scanf   (   \" % d \"   ,   &   t   ) ;   add _ ds   (   t   ) ;   }   LL   ans   =   1   ;   for   (   auto   [   x   ,   y   ]   :   ps   )   ans   =   ans   *   y   [   1   ]   %   mod   ;   printf   (   \" % lld   \\ n   \"   ,   ans   ) ;   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main   (   void   )   {   ifstream   fi   ;   ofstream   fo   ;   fi   .   open   (   \" . / lrq . in \"   ) ;   fo   .   open   (   \" . / lrq . out \"   ) ;   if   (   fi   .   is _ open   ( )   &&   fo   .   is _ open   ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl   ;   fo   .   close   ( ) ;   fi   .   close   ( ) ;   for   (   long   long   i   =   1   ;   i   < =   4e8   +   2e7   ;   i   ++   ) ;   FILE   *   fin   =   freopen   (   \" . / lrq . in \"   ,   \" r \"   ,   stdin   ) ;   FILE   *   fout   =   freopen   (   \" . / lrq . out \"   ,   \" w \"   ,   stdout   ) ;   solve   ( ) ;   fclose   (   fin   ) ;   fclose   (   fout   ) ;   }   else   solve   ( ) ;   return   0   ;   }   \u76f4\u63a5 \u8bb0\u5f55 \u7d20\u6570 \u4e2a\u6570 \u4ee3\u7801 \u53c2\u8003   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   typedef   long   long   LL   ;   const   LL   mod   =   LL   (   1e9   +   7   ) ;   unordered _ map   <   LL   ,   LL   >   pn   ;   void   add _ ds   (   LL   n   )   {   for   (   int   i   =   2   ;   i   < =   n   /   i   ;   i   ++   )   {   if   (   n   %   i   = =   0   )   {   auto   &   t   =   pn   [   i   ] ;   while   (   n   %   i   = =   0   )   t   ++   ,   n   / =   i   ;   }   }   if   (   n   >   1   )   pn   [   n   ]   ++   ;   }   void   solve   (   void   )   {   int   n   ;   scanf   (   \" % d \"   ,   &   n   ) ;   while   (   n   --   )   {   int   t   ;   scanf   (   \" % d \"   ,   &   t   ) ;   add _ ds   (   t   ) ;   }   LL   ans   =   1   ;   for   (   auto   [   x   ,   y   ]   :   pn   )   {   LL   a   =   1   ,   b   =   1   ;   while   (   y   --   )   a   =   a   *   x   %   mod   ,   b   =   (   b   +   a   )   %   mod   ;   ans   =   ans   *   b   %   mod   ;   }   printf   (   \" % lld   \\ n   \"   ,   ans   ) ;   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main   (   void   )   {   ifstream   fi   ;   ofstream   fo   ;   fi   .   open   (   \" . / lrq . in \"   ) ;   fo   .   open   (   \" . / lrq . out \"   ) ;   if   (   fi   .   is _ open   ( )   &&   fo   .   is _ open   ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl   ;   fo   .   close   ( ) ;   fi   .   close   ( ) ;   for   (   long   long   i   =   1   ;   i   < =   4e8   +   2e7   ;   i   ++   ) ;   FILE   *   fin   =   freopen   (   \" . / lrq . in \"   ,   \" r \"   ,   stdin   ) ;   FILE   *   fout   =   freopen   (   \" . / lrq . out \"   ,   \" w \"   ,   stdout   ) ;   solve   ( ) ;   fclose   (   fin   ) ;   fclose   (   fout   ) ;   }   else   solve   ( ) ;   return   0   ;   }","title":"\u7ea6\u6570 \u548c \u5b9a\u7406"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E7%BA%A6%E6%95%B0%E5%92%8C%E5%AE%9A%E7%90%86/#_1","text":"\u6c42 \u7ea6\u6570 \u548c   \u7ed9\u5b9a \u4e00\u4e2a \u6570   \\ ( n \\ )   \u5982\u4f55 \u6c42   \\ ( n \\ )   \u7684 \u6240\u6709 \u7ea6\u6570 \u4e4b \u548c \uff1f   \u5bf9\u4e8e \u6bcf\u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( n \\ )   \u90fd \u53ef\u4ee5 \u5206\u89e3 \u5206\u89e3\u6210 \u4e00\u4e9b \u7d20\u6570 \u7684 \u4e58\u79ef \uff1a   \\ ( n   =   p _ 1 ^ { k _ 1 } p _ 2 ^ { k _ 2 }   \\ cdots   p _ n ^ { k _ n } \\ )   \u5219 \u4efb\u610f \u4e00\u4e2a \u7ea6\u6570 \u90fd \u53ef\u4ee5 \u8868\u793a \u6210 \uff1a   \\ ( n   =   p _ 1 ^ { s _ 1 } p _ 2 ^ { s _ 2 }   \\ cdots   p _ n ^ { s _ n } \\ )   \uff0c \u5176\u4e2d   \\ ( s _ 1   \\ leq   k _ 1 ,   s _ 2   \\ leq   k _ 2 ,   \\ cdots   s _ n   \\ leq   k _ n \\ )   \u6240\u4ee5 \u6240\u6709 \u7684 \u7ea6\u6570 \u548c \u53ef\u4ee5 \u8868\u793a \u6210 \uff1a   \\ ( s   =   ( p _ 1   ^   0   +   p _ 1   ^   1   +   \\ cdots   p _ 1   ^   { k _ 1 } )   \\ times   ( p _ 2   ^   0   +   p _ 2   ^   1   +   \\ cdots   p _ 2   ^   { k _ 2 } )   \\ times   \\ cdots   \\ times   ( p _ n   ^   0   +   p _ n   ^   1   +   \\ cdots   p _ n   ^   { k _ n } ) \\ )   \u6c42 \u4e00\u4e2a \u6570 \u7684 \u7ea6\u6570 \u4e4b \u548c \u4ee3\u7801 \u53c2\u8003 \uff1a   \u4ee3\u7801 \u6bd4\u8f83 \u6742 \uff1a \u8fb9 \u8bb0\u5f55 \u7d20\u6570 \u7684 \u6700\u9ad8 \u6b21\u65b9 \uff0c \u8fb9 \u8bb0\u5f55 \u548c   typedef   long   long   LL   ;   const   LL   mod   =   LL   (   1e9   +   7   ) ;   unordered _ map   <   LL   ,   vector   <   LL   > >   ps   ;   LL   add _ ds   (   LL   n   )   {   for   (   int   i   =   2   ;   i   < =   n   /   i   ;   i   ++   )   {   if   (   n   %   i   = =   0   )   {   auto   node   =   ps   .   find   (   i   ) ;   if   (   node   = =   ps   .   end   ( ) )   {   ps   .   insert   ( {   i   ,   {   1   ,   1   } } ) ;   node   =   ps   .   find   (   i   ) ;   }   while   (   n   %   i   = =   0   )   {   node   - >   second   [   0   ]   =   node   - >   second   [   0   ]   *   i   %   mod   ;   node   - >   second   [   1   ]   =   (   node   - >   second   [   1   ]   +   node   - >   second   [   0   ] )   %   mod   ;   n   / =   i   ;   }   }   }   if   (   n   >   1   )   ps   .   insert   ( {   n   ,   {   n   ,   1   +   n   } } ) ;   LL   ans   =   1   ;   for   (   auto   [   x   ,   y   ]   :   ps   )   {   ans   =   ans   *   y   [   1   ]   %   mod   ;   }   return   ans   ;   }   \u4ee3\u7801 \u7cbe\u7b80 \u7cbe\u7b80\u7248 \uff1a \u76f4\u63a5 \u8bb0\u5f55 \u7d20\u6570 \u7684 \u4e2a\u6570   typedef   long   long   LL   ;   const   LL   mod   =   LL   (   1e9   +   7   ) ;   unordered _ map   <   LL   ,   LL   >   pn   ;   LL   add _ ds   (   LL   n   )   {   for   (   int   i   =   2   ;   i   < =   n   /   i   ;   i   ++   )   {   if   (   n   %   i   = =   0   )   {   auto   &   t   =   pn   [   i   ] ;   while   (   n   %   i   = =   0   )   t   ++   ,   n   / =   i   ;   }   }   if   (   n   >   1   )   pn   [   n   ]   ++   ;   LL   ans   =   1   ;   for   (   auto   [   x   ,   y   ]   :   pn   )   {   LL   a   =   1   ,   b   =   1   ;   while   (   y   --   )   a   =   a   *   x   %   mod   ,   b   =   (   b   +   a   )   %   mod   ;   ans   =   ans   *   b   %   mod   ;   }   return   ans   ;   }   871 . \u7ea6\u6570 \u4e4b \u548c   \u7ed9 \u70b9   \\ ( n \\ )   \u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( a _ i \\ )   \uff0c \u8bf7 \u4f60 \u8f93\u51fa \u8fd9\u4e9b \u6570 \u4e58\u79ef \u7684 \u7ea6\u6570 \u4e4b \u548c \uff0c \u7b54\u6848 \u5bf9   \\ ( 10 ^ 9   +   7 \\ )   \u53d6\u6a21 \u3002   \u601d\u8def \uff0c \u548c \u4e0a\u9762 \u7684 \u4e0d\u591a \u5dee\u4e0d\u591a \uff0c \u4e5f \u662f \u7edf\u8ba1 \u6240\u6709 \u7684 \u7d20 \u56e0\u5b50 \u3002   \u8fb9 \u8bb0\u5f55 \u5404 \u7d20\u6570 \u7684 \u6700\u9ad8 \u6b21 \u7684 \u503c \uff0c \u8fb9 \u7d2f\u52a0 \u4ee3\u7801 \u53c2\u8003   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   typedef   long   long   LL   ;   const   LL   mod   =   (   1e9   +   7   ) ;   unordered _ map   <   LL   ,   vector   <   LL   > >   ps   ;   void   add _ ds   (   LL   n   )   {   for   (   int   i   =   2   ;   i   < =   n   /   i   ;   i   ++   )   {   if   (   n   %   i   = =   0   )   {   auto   node   =   ps   .   find   (   i   ) ;   if   (   node   = =   ps   .   end   ( ) )   {   ps   .   insert   ( {   i   ,   {   1   ,   1   } } ) ;   node   =   ps   .   find   (   i   ) ;   }   while   (   n   %   i   = =   0   )   {   LL   x   =   node   - >   second   [   0   ]   =   node   - >   second   [   0   ]   *   i   %   mod   ;   node   - >   second   [   1   ]   =   (   node   - >   second   [   1   ]   +   x   )   %   mod   ;   n   / =   i   ;   }   }   }   if   (   n   >   1   )   {   auto   node   =   ps   .   find   (   n   ) ;   if   (   node   = =   ps   .   end   ( ) )   {   ps   .   insert   ( {   n   ,   {   1   ,   1   } } ) ;   node   =   ps   .   find   (   n   ) ;   }   LL   x   =   node   - >   second   [   0   ]   =   node   - >   second   [   0   ]   *   n   %   mod   ;   node   - >   second   [   1   ]   =   (   node   - >   second   [   1   ]   +   x   )   %   mod   ;   }   }   void   solve   (   void   )   {   int   n   ;   scanf   (   \" % d \"   ,   &   n   ) ;   while   (   n   --   )   {   int   t   ;   scanf   (   \" % d \"   ,   &   t   ) ;   add _ ds   (   t   ) ;   }   LL   ans   =   1   ;   for   (   auto   [   x   ,   y   ]   :   ps   )   ans   =   ans   *   y   [   1   ]   %   mod   ;   printf   (   \" % lld   \\ n   \"   ,   ans   ) ;   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main   (   void   )   {   ifstream   fi   ;   ofstream   fo   ;   fi   .   open   (   \" . / lrq . in \"   ) ;   fo   .   open   (   \" . / lrq . out \"   ) ;   if   (   fi   .   is _ open   ( )   &&   fo   .   is _ open   ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl   ;   fo   .   close   ( ) ;   fi   .   close   ( ) ;   for   (   long   long   i   =   1   ;   i   < =   4e8   +   2e7   ;   i   ++   ) ;   FILE   *   fin   =   freopen   (   \" . / lrq . in \"   ,   \" r \"   ,   stdin   ) ;   FILE   *   fout   =   freopen   (   \" . / lrq . out \"   ,   \" w \"   ,   stdout   ) ;   solve   ( ) ;   fclose   (   fin   ) ;   fclose   (   fout   ) ;   }   else   solve   ( ) ;   return   0   ;   }   \u76f4\u63a5 \u8bb0\u5f55 \u7d20\u6570 \u4e2a\u6570 \u4ee3\u7801 \u53c2\u8003   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   typedef   long   long   LL   ;   const   LL   mod   =   LL   (   1e9   +   7   ) ;   unordered _ map   <   LL   ,   LL   >   pn   ;   void   add _ ds   (   LL   n   )   {   for   (   int   i   =   2   ;   i   < =   n   /   i   ;   i   ++   )   {   if   (   n   %   i   = =   0   )   {   auto   &   t   =   pn   [   i   ] ;   while   (   n   %   i   = =   0   )   t   ++   ,   n   / =   i   ;   }   }   if   (   n   >   1   )   pn   [   n   ]   ++   ;   }   void   solve   (   void   )   {   int   n   ;   scanf   (   \" % d \"   ,   &   n   ) ;   while   (   n   --   )   {   int   t   ;   scanf   (   \" % d \"   ,   &   t   ) ;   add _ ds   (   t   ) ;   }   LL   ans   =   1   ;   for   (   auto   [   x   ,   y   ]   :   pn   )   {   LL   a   =   1   ,   b   =   1   ;   while   (   y   --   )   a   =   a   *   x   %   mod   ,   b   =   (   b   +   a   )   %   mod   ;   ans   =   ans   *   b   %   mod   ;   }   printf   (   \" % lld   \\ n   \"   ,   ans   ) ;   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main   (   void   )   {   ifstream   fi   ;   ofstream   fo   ;   fi   .   open   (   \" . / lrq . in \"   ) ;   fo   .   open   (   \" . / lrq . out \"   ) ;   if   (   fi   .   is _ open   ( )   &&   fo   .   is _ open   ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl   ;   fo   .   close   ( ) ;   fi   .   close   ( ) ;   for   (   long   long   i   =   1   ;   i   < =   4e8   +   2e7   ;   i   ++   ) ;   FILE   *   fin   =   freopen   (   \" . / lrq . in \"   ,   \" r \"   ,   stdin   ) ;   FILE   *   fout   =   freopen   (   \" . / lrq . out \"   ,   \" w \"   ,   stdout   ) ;   solve   ( ) ;   fclose   (   fin   ) ;   fclose   (   fout   ) ;   }   else   solve   ( ) ;   return   0   ;   }","title":"\u7ea6\u6570 \u548c \u5b9a\u7406"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E8%AF%95%E9%99%A4%E6%B3%95%E5%88%A4%E8%B4%A8%E6%95%B0/","text":"\u8bd5 \u9664\u6cd5 \u5224 \u8d28\u6570   \u8d28\u6570 \u4e00\u5b9a \u90fd \u5927\u4e8e \u7b49\u4e8e   2 \u3002   \u7ed9 \u70b9 \u4e00\u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( n \\ )   \uff1a   \u82e5   \\ ( n \\ )   \u662f \u8d28\u6570 \uff0c \u5219   \\ ( n   =   1   *   n \\ )   \uff1b   \u82e5   \\ ( n \\ )   \u4e0d\u662f \u8d28\u6570 \uff0c \u5219   \\ ( n \\ )   \u53ef\u4ee5 \u5206\u89e3 \u4e3a \u4e24\u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( x \uff0c \\ frac { n } { x } \\ )   \u7684 \u4e58\u79ef \u3002   \u6211\u4eec \u4ee4   \\ ( x \\ )   \u662f   \\ ( x \uff0c \\ frac { n } { x } \\ )   \u4e24\u8005 \u4e2d \u6700\u5c0f \u7684 \uff1a   \u82e5   \\ ( x   =   \\ frac { n } { x } \\ )   \uff0c \u5219 \u6709   \\ ( x   =   \\ frac { n } { x }   =   sqrt ( n ) \\ )   \u82e5   \\ ( x   <   \\ frac { n } { x } \\ )   \uff0c \u5219 \u6709   \\ ( x   <   sqrt ( n ) ,   \\ frac { n } { x }   >   sqrt ( n ) \\ )   \u6211\u4eec \u53ea \u9700\u8981 \u4ece   \\ ( 2 \\ )   \u4e00\u76f4 \u904d\u5386 \u5230   \\ ( sqrt ( n ) \\ )   \u5c31 \u53ef\u4ee5 \u627e\u51fa \u8fd9\u4e2a \u5c0f \u7684   \\ ( x \\ )   \uff0c \u5982\u679c \u627e \u4e0d\u5230 \uff0c \u5c31 \u8bf4\u660e   \\ ( n \\ )   \u662f \u8d28\u6570 \u3002   \u56e0\u6b64 \u6bcf \u5224\u65ad \u4e00\u6b21 \u8d28\u6570 \u7684 \u300c \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u300d \u6700\u574f \u4e3a   \\ ( sqrt ( n ) \\ )   \u3002   \u7531\u4e8e \u8fd0\u7b97 \u64cd\u4f5c   \\ ( sqrt ( n ) \\ )   \u7684 \u300c \u65f6\u95f4 \u6d88\u8017 \u5927 \u300d \uff0c \u6211\u4eec \u91c7\u7528   i   < =   n   /   i   \u7684 \u5f62\u5f0f \u4ee3\u66ff   i   < =   sqrt ( n )   \u3002   \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u6700\u574f \u4e3a \uff1a   \\ ( O ( sqrt ( n ) ) \\ )   \uff0c \u6b64\u65f6   \\ ( n \\ )   \u4e3a \u8d28\u6570 \u3002   bool   is _ prime   (   int   n   )   {   if   (   n   < =   2   )   return   n   = =   2   ;   for   (   int   i   =   2   ;   i   < =   n   /   i   ;   i   ++   )   if   (   n   %   i   = =   0   )   return   false   ;   return   true   ;   }   866 .   \u8bd5 \u9664\u6cd5 \u5224\u5b9a \u8d28\u6570   \u7ed9\u5b9a   \\ ( n \\ )   \u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( a _ i \\ )   \uff0c \u5224\u5b9a \u6bcf\u4e2a \u6570 \u662f\u5426 \u662f\u5426\u662f \u8d28\u6570 \u3002   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   int   n   ;   bool   is _ prime   (   int   n   )   {   if   (   n   < =   2   )   return   n   = =   2   ;   for   (   int   i   =   2   ;   i   < =   n   /   i   ;   i   ++   )   if   (   n   %   i   = =   0   )   return   false   ;   return   true   ;   }   void   solve   (   void   )   {   scanf   (   \" % d \"   ,   &   n   ) ;   while   (   n   --   )   {   int   t   ;   scanf   (   \" % d \"   ,   &   t   ) ;   if   (   is _ prime   (   t   ) )   puts   (   \" Yes \"   ) ;   else   puts   (   \" No \"   ) ;   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main   (   void   )   {   ifstream   fi   ;   ofstream   fo   ;   fi   .   open   (   \" . / lrq . in \"   ) ;   fo   .   open   (   \" . / lrq . out \"   ) ;   if   (   fi   .   is _ open   ( )   &&   fo   .   is _ open   ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl   ;   fo   .   close   ( ) ;   fi   .   close   ( ) ;   for   (   long   long   i   =   1   ;   i   < =   4e8   +   2e7   ;   i   ++   ) ;   FILE   *   fin   =   freopen   (   \" . / lrq . in \"   ,   \" r \"   ,   stdin   ) ;   FILE   *   fout   =   freopen   (   \" . / lrq . out \"   ,   \" w \"   ,   stdout   ) ;   solve   ( ) ;   fclose   (   fin   ) ;   fclose   (   fout   ) ;   }   else   solve   ( ) ;   return   0   ;   }","title":"\u8bd5 \u9664\u6cd5 \u5224 \u8d28\u6570"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E8%AF%95%E9%99%A4%E6%B3%95%E5%88%A4%E8%B4%A8%E6%95%B0/#_1","text":"\u8d28\u6570 \u4e00\u5b9a \u90fd \u5927\u4e8e \u7b49\u4e8e   2 \u3002   \u7ed9 \u70b9 \u4e00\u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( n \\ )   \uff1a   \u82e5   \\ ( n \\ )   \u662f \u8d28\u6570 \uff0c \u5219   \\ ( n   =   1   *   n \\ )   \uff1b   \u82e5   \\ ( n \\ )   \u4e0d\u662f \u8d28\u6570 \uff0c \u5219   \\ ( n \\ )   \u53ef\u4ee5 \u5206\u89e3 \u4e3a \u4e24\u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( x \uff0c \\ frac { n } { x } \\ )   \u7684 \u4e58\u79ef \u3002   \u6211\u4eec \u4ee4   \\ ( x \\ )   \u662f   \\ ( x \uff0c \\ frac { n } { x } \\ )   \u4e24\u8005 \u4e2d \u6700\u5c0f \u7684 \uff1a   \u82e5   \\ ( x   =   \\ frac { n } { x } \\ )   \uff0c \u5219 \u6709   \\ ( x   =   \\ frac { n } { x }   =   sqrt ( n ) \\ )   \u82e5   \\ ( x   <   \\ frac { n } { x } \\ )   \uff0c \u5219 \u6709   \\ ( x   <   sqrt ( n ) ,   \\ frac { n } { x }   >   sqrt ( n ) \\ )   \u6211\u4eec \u53ea \u9700\u8981 \u4ece   \\ ( 2 \\ )   \u4e00\u76f4 \u904d\u5386 \u5230   \\ ( sqrt ( n ) \\ )   \u5c31 \u53ef\u4ee5 \u627e\u51fa \u8fd9\u4e2a \u5c0f \u7684   \\ ( x \\ )   \uff0c \u5982\u679c \u627e \u4e0d\u5230 \uff0c \u5c31 \u8bf4\u660e   \\ ( n \\ )   \u662f \u8d28\u6570 \u3002   \u56e0\u6b64 \u6bcf \u5224\u65ad \u4e00\u6b21 \u8d28\u6570 \u7684 \u300c \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u300d \u6700\u574f \u4e3a   \\ ( sqrt ( n ) \\ )   \u3002   \u7531\u4e8e \u8fd0\u7b97 \u64cd\u4f5c   \\ ( sqrt ( n ) \\ )   \u7684 \u300c \u65f6\u95f4 \u6d88\u8017 \u5927 \u300d \uff0c \u6211\u4eec \u91c7\u7528   i   < =   n   /   i   \u7684 \u5f62\u5f0f \u4ee3\u66ff   i   < =   sqrt ( n )   \u3002   \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u6700\u574f \u4e3a \uff1a   \\ ( O ( sqrt ( n ) ) \\ )   \uff0c \u6b64\u65f6   \\ ( n \\ )   \u4e3a \u8d28\u6570 \u3002   bool   is _ prime   (   int   n   )   {   if   (   n   < =   2   )   return   n   = =   2   ;   for   (   int   i   =   2   ;   i   < =   n   /   i   ;   i   ++   )   if   (   n   %   i   = =   0   )   return   false   ;   return   true   ;   }   866 .   \u8bd5 \u9664\u6cd5 \u5224\u5b9a \u8d28\u6570   \u7ed9\u5b9a   \\ ( n \\ )   \u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( a _ i \\ )   \uff0c \u5224\u5b9a \u6bcf\u4e2a \u6570 \u662f\u5426 \u662f\u5426\u662f \u8d28\u6570 \u3002   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   int   n   ;   bool   is _ prime   (   int   n   )   {   if   (   n   < =   2   )   return   n   = =   2   ;   for   (   int   i   =   2   ;   i   < =   n   /   i   ;   i   ++   )   if   (   n   %   i   = =   0   )   return   false   ;   return   true   ;   }   void   solve   (   void   )   {   scanf   (   \" % d \"   ,   &   n   ) ;   while   (   n   --   )   {   int   t   ;   scanf   (   \" % d \"   ,   &   t   ) ;   if   (   is _ prime   (   t   ) )   puts   (   \" Yes \"   ) ;   else   puts   (   \" No \"   ) ;   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main   (   void   )   {   ifstream   fi   ;   ofstream   fo   ;   fi   .   open   (   \" . / lrq . in \"   ) ;   fo   .   open   (   \" . / lrq . out \"   ) ;   if   (   fi   .   is _ open   ( )   &&   fo   .   is _ open   ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl   ;   fo   .   close   ( ) ;   fi   .   close   ( ) ;   for   (   long   long   i   =   1   ;   i   < =   4e8   +   2e7   ;   i   ++   ) ;   FILE   *   fin   =   freopen   (   \" . / lrq . in \"   ,   \" r \"   ,   stdin   ) ;   FILE   *   fout   =   freopen   (   \" . / lrq . out \"   ,   \" w \"   ,   stdout   ) ;   solve   ( ) ;   fclose   (   fin   ) ;   fclose   (   fout   ) ;   }   else   solve   ( ) ;   return   0   ;   }","title":"\u8bd5 \u9664\u6cd5 \u5224 \u8d28\u6570"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E8%AF%95%E9%99%A4%E6%B3%95%E6%B1%82%E7%BA%A6%E6%95%B0/","text":"\u8bd5 \u9664\u6cd5 \u6c42 \u7ea6\u6570   869 . \u8bd5 \u9664\u6cd5 \u6c42 \u7ea6\u6570   \u7ed9\u5b9a   \\ ( n \\ )   \u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( a _ i \\ )   \uff0c \u5bf9\u4e8e \u6bcf\u4e2a \u6574\u6570   \\ ( a _ i \\ )   \uff0c \u8bf7 \u4f60 \u6309\u7167 \u4ece\u5c0f \u4ece\u5c0f\u5230\u5927 \u7684 \u987a\u5e8f \u8f93\u51fa \u5b83 \u7684 \u6240\u6709 \u7ea6\u6570 \u3002   \u5982\u679c   \\ ( x \\ )   \u662f   \\ ( n \\ )   \u7684 \u7ea6\u6570 \uff0c \u5219   \\ ( \\ frac { n } { x } \\ )   \u4e5f \u662f   \\ ( n \\ )   \u7684 \u7ea6\u6570 \uff0c \u6211\u4eec \u4ee4   \\ ( x \\ )   \u662f   \\ ( x \u3001 \\ frac { n } { x } \\ )   \u4e2d \u6700\u5927 \u7684 \uff0c \u5219 :   \u82e5   \\ ( x   =   \\ frac { n } { x } \\ )   \uff0c \u5219   \\ ( x   =   \\ frac { n } { x }   =   sqrt ( n ) \\ )   \u82e5   \\ ( x   <   \\ frac { n } { x } \\ )   \uff0c \u5219   \\ ( x   <   sqrt ( n ) \\ )   \u6211\u4eec \u53ea\u8981 \u4ece   \\ ( 1 \\ )   \u4e00\u76f4 \u679a\u4e3e \u5230   \\ ( sqrt ( n ) \\ )   \uff0c \u5c31 \u53ef\u4ee5 \u6c42 \u51fa \u6240\u6709 \u7684 \u7ea6\u6570 \u3002   \u7531\u4e8e   \\ ( sqrt ( n ) \\ )   \u7684 \u65f6\u95f4 \u6d88\u8017 \u6709\u70b9 \u5927 \uff0c \u6211\u4eec \u8981 \u7528   for ( int   i   =   2 ;   i   < =   n   /   i ;   i   ++ )   \u53d6\u4ee3   for   ( int   i   =   2 ;   i   < =   sqrt ( n ) ;   i   ++ )   \u5173\u4e8e \u7ea6\u6570 \u4e2a\u6570 \u7684 \u4f30\u8ba1 \uff1a   \u82e5 \u5bf9\u4e8e \u6574\u6570 \u6b63\u6574\u6570   \\ ( n \\ )   \uff0c \u7ea6\u6570 \u4e2a\u6570   \\ ( r ( n )   <   sqrt ( 3n ) \uff1b \\ )   \u82e5   \\ ( n   >   1260 \\ )   \uff0c \u7ea6\u6570 \u4e2a\u6570   \\ ( r ( n )   <   sqrt ( n ) \\ )   \u5bf9\u4e8e   \\ ( 10 ^ { 18 } \\ )   \u8303\u56f4 \u7684 \u6574\u6570 \uff0c \u7ea6 \u6570\u4e2a \u6700\u591a \u6570\u6700\u591a \u4e3a \uff1a   \\ ( 10 ^ 5 \\ )   \u4ee3\u7801 \u53c2\u8003 \uff1a   const   int   N   =   int   (   1e7   +   10   ) ;   int   x   [   N   ] ,   y   [   N   ] ;   / /   \u83b7\u53d6 \u7ea6\u6570   void   get _ ds   (   int   n   )   {   x   [   0   ]   =   y   [   0   ]   =   0   ;   for   (   int   i   =   1   ;   i   < =   n   /   i   ;   i   ++   )   {   if   (   !   (   n   %   i   ) )   {   x   [   ++   x   [   0   ] ]   =   i   ;   if   (   n   /   i   = =   i   )   continue   ;   y   [   ++   y   [   0   ] ]   =   n   /   i   ;   }   }   }   869 . \u8bd5 \u9664\u6cd5 \u6c42 \u7ea6\u6570   \u7ed9\u5b9a   \\ ( n \\ )   \u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( a _ i \\ )   \uff0c \u5bf9\u4e8e \u6bcf\u4e2a \u6574\u6570   \\ ( a _ i \\ )   \uff0c \u8bf7 \u4f60 \u6309\u7167 \u4ece\u5c0f \u4ece\u5c0f\u5230\u5927 \u7684 \u987a\u5e8f \u8f93\u51fa \u5b83 \u7684 \u6240\u6709 \u7ea6\u6570 \u3002   \u4ee3\u7801 \u53c2\u8003   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   const   int   N   =   int   (   1e7   +   10   ) ;   int   x   [   N   ] ,   y   [   N   ] ;   / /   \u83b7\u53d6 \u7ea6\u6570   void   get _ ds   (   int   n   )   {   x   [   0   ]   =   y   [   0   ]   =   0   ;   for   (   int   i   =   1   ;   i   < =   n   /   i   ;   i   ++   )   {   if   (   !   (   n   %   i   ) )   {   x   [   ++   x   [   0   ] ]   =   i   ;   if   (   n   /   i   = =   i   )   continue   ;   y   [   ++   y   [   0   ] ]   =   n   /   i   ;   }   }   }   void   solve   (   void   )   {   int   n   ,   t   ;   scanf   (   \" % d \"   ,   &   n   ) ;   while   (   n   --   )   {   scanf   (   \" % d \"   ,   &   t   ) ;   get _ ds   (   t   ) ;   for   (   int   i   =   1   ;   i   < =   x   [   0   ] ;   i   ++   )   printf   (   \" % d   \"   ,   x   [   i   ] ) ;   for   (   int   i   =   y   [   0   ] ;   i   ;   i   --   )   printf   (   \" % d   \"   ,   y   [   i   ] ) ;   puts   (   \" \"   ) ;   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main   (   void   )   {   ifstream   fi   ;   ofstream   fo   ;   fi   .   open   (   \" . / lrq . in \"   ) ;   fo   .   open   (   \" . / lrq . out \"   ) ;   if   (   fi   .   is _ open   ( )   &&   fo   .   is _ open   ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl   ;   fo   .   close   ( ) ;   fi   .   close   ( ) ;   for   (   long   long   i   =   1   ;   i   < =   4e8   +   2e7   ;   i   ++   ) ;   FILE   *   fin   =   freopen   (   \" . / lrq . in \"   ,   \" r \"   ,   stdin   ) ;   FILE   *   fout   =   freopen   (   \" . / lrq . out \"   ,   \" w \"   ,   stdout   ) ;   solve   ( ) ;   fclose   (   fin   ) ;   fclose   (   fout   ) ;   }   else   solve   ( ) ;   return   0   ;   }","title":"\u8bd5 \u9664\u6cd5 \u6c42 \u7ea6\u6570"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%95%B0%E8%AE%BA/%E8%AF%95%E9%99%A4%E6%B3%95%E6%B1%82%E7%BA%A6%E6%95%B0/#_1","text":"869 . \u8bd5 \u9664\u6cd5 \u6c42 \u7ea6\u6570   \u7ed9\u5b9a   \\ ( n \\ )   \u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( a _ i \\ )   \uff0c \u5bf9\u4e8e \u6bcf\u4e2a \u6574\u6570   \\ ( a _ i \\ )   \uff0c \u8bf7 \u4f60 \u6309\u7167 \u4ece\u5c0f \u4ece\u5c0f\u5230\u5927 \u7684 \u987a\u5e8f \u8f93\u51fa \u5b83 \u7684 \u6240\u6709 \u7ea6\u6570 \u3002   \u5982\u679c   \\ ( x \\ )   \u662f   \\ ( n \\ )   \u7684 \u7ea6\u6570 \uff0c \u5219   \\ ( \\ frac { n } { x } \\ )   \u4e5f \u662f   \\ ( n \\ )   \u7684 \u7ea6\u6570 \uff0c \u6211\u4eec \u4ee4   \\ ( x \\ )   \u662f   \\ ( x \u3001 \\ frac { n } { x } \\ )   \u4e2d \u6700\u5927 \u7684 \uff0c \u5219 :   \u82e5   \\ ( x   =   \\ frac { n } { x } \\ )   \uff0c \u5219   \\ ( x   =   \\ frac { n } { x }   =   sqrt ( n ) \\ )   \u82e5   \\ ( x   <   \\ frac { n } { x } \\ )   \uff0c \u5219   \\ ( x   <   sqrt ( n ) \\ )   \u6211\u4eec \u53ea\u8981 \u4ece   \\ ( 1 \\ )   \u4e00\u76f4 \u679a\u4e3e \u5230   \\ ( sqrt ( n ) \\ )   \uff0c \u5c31 \u53ef\u4ee5 \u6c42 \u51fa \u6240\u6709 \u7684 \u7ea6\u6570 \u3002   \u7531\u4e8e   \\ ( sqrt ( n ) \\ )   \u7684 \u65f6\u95f4 \u6d88\u8017 \u6709\u70b9 \u5927 \uff0c \u6211\u4eec \u8981 \u7528   for ( int   i   =   2 ;   i   < =   n   /   i ;   i   ++ )   \u53d6\u4ee3   for   ( int   i   =   2 ;   i   < =   sqrt ( n ) ;   i   ++ )   \u5173\u4e8e \u7ea6\u6570 \u4e2a\u6570 \u7684 \u4f30\u8ba1 \uff1a   \u82e5 \u5bf9\u4e8e \u6574\u6570 \u6b63\u6574\u6570   \\ ( n \\ )   \uff0c \u7ea6\u6570 \u4e2a\u6570   \\ ( r ( n )   <   sqrt ( 3n ) \uff1b \\ )   \u82e5   \\ ( n   >   1260 \\ )   \uff0c \u7ea6\u6570 \u4e2a\u6570   \\ ( r ( n )   <   sqrt ( n ) \\ )   \u5bf9\u4e8e   \\ ( 10 ^ { 18 } \\ )   \u8303\u56f4 \u7684 \u6574\u6570 \uff0c \u7ea6 \u6570\u4e2a \u6700\u591a \u6570\u6700\u591a \u4e3a \uff1a   \\ ( 10 ^ 5 \\ )   \u4ee3\u7801 \u53c2\u8003 \uff1a   const   int   N   =   int   (   1e7   +   10   ) ;   int   x   [   N   ] ,   y   [   N   ] ;   / /   \u83b7\u53d6 \u7ea6\u6570   void   get _ ds   (   int   n   )   {   x   [   0   ]   =   y   [   0   ]   =   0   ;   for   (   int   i   =   1   ;   i   < =   n   /   i   ;   i   ++   )   {   if   (   !   (   n   %   i   ) )   {   x   [   ++   x   [   0   ] ]   =   i   ;   if   (   n   /   i   = =   i   )   continue   ;   y   [   ++   y   [   0   ] ]   =   n   /   i   ;   }   }   }   869 . \u8bd5 \u9664\u6cd5 \u6c42 \u7ea6\u6570   \u7ed9\u5b9a   \\ ( n \\ )   \u4e2a \u6574\u6570 \u6b63\u6574\u6570   \\ ( a _ i \\ )   \uff0c \u5bf9\u4e8e \u6bcf\u4e2a \u6574\u6570   \\ ( a _ i \\ )   \uff0c \u8bf7 \u4f60 \u6309\u7167 \u4ece\u5c0f \u4ece\u5c0f\u5230\u5927 \u7684 \u987a\u5e8f \u8f93\u51fa \u5b83 \u7684 \u6240\u6709 \u7ea6\u6570 \u3002   \u4ee3\u7801 \u53c2\u8003   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   # include   < bits / std c++ . h >   using   namespace   std   ;   int   debuggersum   =   0   ;   / /   \u5373\u4f7f \u662f \u4e0d \u6210\u719f \u7684 \u5c1d\u8bd5 \uff0c   const   int   N   =   int   (   1e7   +   10   ) ;   int   x   [   N   ] ,   y   [   N   ] ;   / /   \u83b7\u53d6 \u7ea6\u6570   void   get _ ds   (   int   n   )   {   x   [   0   ]   =   y   [   0   ]   =   0   ;   for   (   int   i   =   1   ;   i   < =   n   /   i   ;   i   ++   )   {   if   (   !   (   n   %   i   ) )   {   x   [   ++   x   [   0   ] ]   =   i   ;   if   (   n   /   i   = =   i   )   continue   ;   y   [   ++   y   [   0   ] ]   =   n   /   i   ;   }   }   }   void   solve   (   void   )   {   int   n   ,   t   ;   scanf   (   \" % d \"   ,   &   n   ) ;   while   (   n   --   )   {   scanf   (   \" % d \"   ,   &   t   ) ;   get _ ds   (   t   ) ;   for   (   int   i   =   1   ;   i   < =   x   [   0   ] ;   i   ++   )   printf   (   \" % d   \"   ,   x   [   i   ] ) ;   for   (   int   i   =   y   [   0   ] ;   i   ;   i   --   )   printf   (   \" % d   \"   ,   y   [   i   ] ) ;   puts   (   \" \"   ) ;   }   }   / /   \u4e5f \u80dc\u4e8e \u8179\u4e2d \u80ce\u6b7b\u8179\u4e2d \u7684 \u7b56\u7565 \u3002   int   main   (   void   )   {   ifstream   fi   ;   ofstream   fo   ;   fi   .   open   (   \" . / lrq . in \"   ) ;   fo   .   open   (   \" . / lrq . out \"   ) ;   if   (   fi   .   is _ open   ( )   &&   fo   .   is _ open   ( ) )   {   fo   < <   \" start   running   ... \"   < <   endl   ;   fo   .   close   ( ) ;   fi   .   close   ( ) ;   for   (   long   long   i   =   1   ;   i   < =   4e8   +   2e7   ;   i   ++   ) ;   FILE   *   fin   =   freopen   (   \" . / lrq . in \"   ,   \" r \"   ,   stdin   ) ;   FILE   *   fout   =   freopen   (   \" . / lrq . out \"   ,   \" w \"   ,   stdout   ) ;   solve   ( ) ;   fclose   (   fin   ) ;   fclose   (   fout   ) ;   }   else   solve   ( ) ;   return   0   ;   }","title":"\u8bd5 \u9664\u6cd5 \u6c42 \u7ea6\u6570"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9F%A5%E6%89%BE/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/","text":"\u4e8c\u5206 \u67e5\u627e   \u5bf9\u4e8e \u5355\u8c03 \u9012\u589e \u5e8f\u5217   a   :   \\ ( [ 1 ,   2 ,   3 ,   3 ,   3 ,   3 ,   4 ,   5 ,   6 ] \\ )   \uff0c \u82e5 \u6211 \u8981 \u67e5\u627e \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a   \\ ( 3 \\ )   \u7684 \u4e0b\u6807 \u548c \u6700\u540e \u4e00\u4e2a   \\ ( 3 \\ )   \u7684 \u4e0b\u6807 \uff0c \u53ef\u4ee5 \u4f7f\u7528 \u4e8c\u5206 \u67e5\u627e \uff0c \u4e8c\u5206 \u67e5\u627e \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u4e3a   \\ ( O ( log ( n ) ) \\ )   \uff0c \u5047\u8bbe \u6709   \\ ( 2   ^   { 100 }   =   1267650600228229401496703205376 \\ )   \u7684 \u6570\u636e \uff0c \u6211\u4eec \u6700 \u591a\u53ea \u9700\u8981   \\ ( 100 \\ )   \u6b21 \u5c31 \u80fd \u627e\u5230 \u76ee\u6807 \u6570\u636e \uff0c \u51e0\u4e4e \u7b49\u4e8e \u7ea6\u7b49\u4e8e \u5e38\u6570 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u3002   \u4e8c\u5206 \u67e5\u627e \u5de6 \u533a\u95f4   \u5bf9\u4e8e \u5355\u8c03 \u9012\u589e \u5e8f\u5217   a   :   \\ ( [ 1 ,   2 ,   3 ,   3 ,   3 ,   3 ,   4 ,   5 ,   6 ] \\ )   \uff0c \u8981 \u67e5\u627e   x   \u7b2c\u4e00 \u4e00\u6b21 \u7b2c\u4e00\u6b21 \u51fa\u73b0 \u7684 \u4e0b\u6807 \uff0c \u5b9a\u4e49 \u4e00\u4e2a \u5de6 \u6307\u9488   l   \u53f3 \u6307\u9488   r   \u548c \u4e2d\u95f4 \u6307\u9488   mid   \uff0c \u82e5   a [ mid ]   <   x   \u90a3\u4e48   l   =   mid   +   1   \uff0c \u8fd9\u6837 \u4f7f\u5f97 \u5de6 \u6307\u9488   l   \u8fc7\u6ee4 \u6389 \u6bd4 \u76ee\u6807 \u6807\u503c \u76ee\u6807\u503c   x   \u8fd8\u8981 \u5c0f \u7684 \u6570 \uff0c   l   \u4f1a \u4e0d\u65ad \u5730\u5411 \u53f3 \u9760\u8fd1 \u7b2c\u4e00 \u4e00\u6b21 \u7b2c\u4e00\u6b21 \u51fa\u73b0 \u7684   x   \uff1b \u82e5   a [ mid ]   > =   x   \u90a3\u4e48   r   =   mid   \uff0c \u8fd9\u6837 \u4f1a \u4f7f\u5f97   r   \u8fc7\u6ee4 \u6389 \u6bd4   x   \u5927 \u7684 \u5143\u7d20 \uff0c \u4e5f \u4f1a \u4e0d\u65ad \u5730\u5411 \u5de6 \u9760\u8fd1 \u6700 \u5de6\u8fb9 \u7684   x   \u3002   \u4e8c\u5206 \u67e5\u627e \u5de6 \u533a\u95f4   # define   vi   vector < int >   int   lfbin   (   vi   a   ,   int   l   ,   int   r   ,   int   x   )   {   if   (   l   >   r   )   return   - 1   ;   int   mid   =   (   l   +   r   )   /   2   ;   while   (   l   +   1   <   r   )   {   if   (   a   [   mid   ]   <   x   )   l   =   mid   +   1   ;   else   r   =   mid   ;   mid   =   (   l   +   r   )   /   2   ;   }   if   (   a   [   l   ]   = =   x   )   return   l   ;   else   if   (   a   [   r   ]   = =   x   )   return   r   ;   else   return   - 1   ;   }   \u4e8c\u5206 \u67e5\u627e \u53f3 \u533a\u95f4   \u5bf9\u4e8e \u5355\u8c03 \u9012\u589e \u5e8f\u5217   a   :   \\ ( [ 1 ,   2 ,   3 ,   3 ,   3 ,   3 ,   4 ,   5 ,   6 ] \\ )   \uff0c \u8981 \u67e5\u627e   x   \u6700\u540e \u4e00\u6b21 \u51fa\u73b0 \u7684 \u4e0b\u6807 \uff0c \u5b9a\u4e49 \u4e00\u4e2a \u5de6 \u6307\u9488   l   \u53f3 \u6307\u9488   r   \u548c \u4e2d\u95f4 \u6307\u9488   mid   \uff0c \u82e5   a [ mid ]   < =   x   \u90a3\u4e48   l   =   mid   \uff0c \u8fd9\u6837 \u4f7f\u5f97 \u5de6 \u6307\u9488   l   \u8fc7\u6ee4 \u6389 \u6bd4 \u76ee\u6807 \u6807\u503c \u76ee\u6807\u503c   x   \u8fd8\u8981 \u5c0f \u7684 \u6570 \uff0c \uff0c \u4e5f \u4f1a \u4e0d\u65ad \u5730\u5411 \u53f3 \u9760\u8fd1 \u6700 \u53f3\u8fb9 \u7684   x   \uff1b \u82e5   a [ mid ]   >   x   \u90a3\u4e48   r   =   mid   -   1   \uff0c \u8fd9\u6837 \u4f1a \u4f7f\u5f97   r   \u8fc7\u6ee4 \u6389 \u6bd4   x   \u5927 \u7684 \u5143\u7d20 \uff0c   r   \u4f1a \u4e0d\u65ad \u5730\u5411 \u5de6 \u9760\u8fd1 \u6700 \u53f3\u8fb9 \u7684   x   \u3002   \u4e8c\u5206 \u67e5\u627e \u53f3 \u533a\u95f4   # define   vi   vector < int >   int   rfbin   (   vi   a   ,   int   l   ,   int   r   ,   int   x   )   {   if   (   l   >   r   )   return   - 1   ;   int   mid   =   (   l   +   r   )   /   2   ;   while   (   l   +   1   <   r   )   {   if   (   a   [   mid   ]   < =   x   )   l   =   mid   ;   else   r   =   mid   -   1   ;   mid   =   (   l   +   r   )   /   2   ;   }   if   (   a   [   r   ]   = =   x   )   return   r   ;   else   if   (   a   [   l   ]   = =   x   )   return   l   ;   else   return   - 1   ;   }","title":"\u4e8c\u5206 \u67e5\u627e"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9F%A5%E6%89%BE/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#_1","text":"\u5bf9\u4e8e \u5355\u8c03 \u9012\u589e \u5e8f\u5217   a   :   \\ ( [ 1 ,   2 ,   3 ,   3 ,   3 ,   3 ,   4 ,   5 ,   6 ] \\ )   \uff0c \u82e5 \u6211 \u8981 \u67e5\u627e \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a   \\ ( 3 \\ )   \u7684 \u4e0b\u6807 \u548c \u6700\u540e \u4e00\u4e2a   \\ ( 3 \\ )   \u7684 \u4e0b\u6807 \uff0c \u53ef\u4ee5 \u4f7f\u7528 \u4e8c\u5206 \u67e5\u627e \uff0c \u4e8c\u5206 \u67e5\u627e \u7684 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u4e3a   \\ ( O ( log ( n ) ) \\ )   \uff0c \u5047\u8bbe \u6709   \\ ( 2   ^   { 100 }   =   1267650600228229401496703205376 \\ )   \u7684 \u6570\u636e \uff0c \u6211\u4eec \u6700 \u591a\u53ea \u9700\u8981   \\ ( 100 \\ )   \u6b21 \u5c31 \u80fd \u627e\u5230 \u76ee\u6807 \u6570\u636e \uff0c \u51e0\u4e4e \u7b49\u4e8e \u7ea6\u7b49\u4e8e \u5e38\u6570 \u65f6\u95f4 \u590d\u6742 \u590d\u6742\u5ea6 \u3002","title":"\u4e8c\u5206 \u67e5\u627e"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9F%A5%E6%89%BE/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#_2","text":"\u5bf9\u4e8e \u5355\u8c03 \u9012\u589e \u5e8f\u5217   a   :   \\ ( [ 1 ,   2 ,   3 ,   3 ,   3 ,   3 ,   4 ,   5 ,   6 ] \\ )   \uff0c \u8981 \u67e5\u627e   x   \u7b2c\u4e00 \u4e00\u6b21 \u7b2c\u4e00\u6b21 \u51fa\u73b0 \u7684 \u4e0b\u6807 \uff0c \u5b9a\u4e49 \u4e00\u4e2a \u5de6 \u6307\u9488   l   \u53f3 \u6307\u9488   r   \u548c \u4e2d\u95f4 \u6307\u9488   mid   \uff0c \u82e5   a [ mid ]   <   x   \u90a3\u4e48   l   =   mid   +   1   \uff0c \u8fd9\u6837 \u4f7f\u5f97 \u5de6 \u6307\u9488   l   \u8fc7\u6ee4 \u6389 \u6bd4 \u76ee\u6807 \u6807\u503c \u76ee\u6807\u503c   x   \u8fd8\u8981 \u5c0f \u7684 \u6570 \uff0c   l   \u4f1a \u4e0d\u65ad \u5730\u5411 \u53f3 \u9760\u8fd1 \u7b2c\u4e00 \u4e00\u6b21 \u7b2c\u4e00\u6b21 \u51fa\u73b0 \u7684   x   \uff1b \u82e5   a [ mid ]   > =   x   \u90a3\u4e48   r   =   mid   \uff0c \u8fd9\u6837 \u4f1a \u4f7f\u5f97   r   \u8fc7\u6ee4 \u6389 \u6bd4   x   \u5927 \u7684 \u5143\u7d20 \uff0c \u4e5f \u4f1a \u4e0d\u65ad \u5730\u5411 \u5de6 \u9760\u8fd1 \u6700 \u5de6\u8fb9 \u7684   x   \u3002   \u4e8c\u5206 \u67e5\u627e \u5de6 \u533a\u95f4   # define   vi   vector < int >   int   lfbin   (   vi   a   ,   int   l   ,   int   r   ,   int   x   )   {   if   (   l   >   r   )   return   - 1   ;   int   mid   =   (   l   +   r   )   /   2   ;   while   (   l   +   1   <   r   )   {   if   (   a   [   mid   ]   <   x   )   l   =   mid   +   1   ;   else   r   =   mid   ;   mid   =   (   l   +   r   )   /   2   ;   }   if   (   a   [   l   ]   = =   x   )   return   l   ;   else   if   (   a   [   r   ]   = =   x   )   return   r   ;   else   return   - 1   ;   }","title":"\u4e8c\u5206 \u67e5\u627e \u5de6 \u533a\u95f4"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9F%A5%E6%89%BE/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#_3","text":"\u5bf9\u4e8e \u5355\u8c03 \u9012\u589e \u5e8f\u5217   a   :   \\ ( [ 1 ,   2 ,   3 ,   3 ,   3 ,   3 ,   4 ,   5 ,   6 ] \\ )   \uff0c \u8981 \u67e5\u627e   x   \u6700\u540e \u4e00\u6b21 \u51fa\u73b0 \u7684 \u4e0b\u6807 \uff0c \u5b9a\u4e49 \u4e00\u4e2a \u5de6 \u6307\u9488   l   \u53f3 \u6307\u9488   r   \u548c \u4e2d\u95f4 \u6307\u9488   mid   \uff0c \u82e5   a [ mid ]   < =   x   \u90a3\u4e48   l   =   mid   \uff0c \u8fd9\u6837 \u4f7f\u5f97 \u5de6 \u6307\u9488   l   \u8fc7\u6ee4 \u6389 \u6bd4 \u76ee\u6807 \u6807\u503c \u76ee\u6807\u503c   x   \u8fd8\u8981 \u5c0f \u7684 \u6570 \uff0c \uff0c \u4e5f \u4f1a \u4e0d\u65ad \u5730\u5411 \u53f3 \u9760\u8fd1 \u6700 \u53f3\u8fb9 \u7684   x   \uff1b \u82e5   a [ mid ]   >   x   \u90a3\u4e48   r   =   mid   -   1   \uff0c \u8fd9\u6837 \u4f1a \u4f7f\u5f97   r   \u8fc7\u6ee4 \u6389 \u6bd4   x   \u5927 \u7684 \u5143\u7d20 \uff0c   r   \u4f1a \u4e0d\u65ad \u5730\u5411 \u5de6 \u9760\u8fd1 \u6700 \u53f3\u8fb9 \u7684   x   \u3002   \u4e8c\u5206 \u67e5\u627e \u53f3 \u533a\u95f4   # define   vi   vector < int >   int   rfbin   (   vi   a   ,   int   l   ,   int   r   ,   int   x   )   {   if   (   l   >   r   )   return   - 1   ;   int   mid   =   (   l   +   r   )   /   2   ;   while   (   l   +   1   <   r   )   {   if   (   a   [   mid   ]   < =   x   )   l   =   mid   ;   else   r   =   mid   -   1   ;   mid   =   (   l   +   r   )   /   2   ;   }   if   (   a   [   r   ]   = =   x   )   return   r   ;   else   if   (   a   [   l   ]   = =   x   )   return   l   ;   else   return   - 1   ;   }","title":"\u4e8c\u5206 \u67e5\u627e \u53f3 \u533a\u95f4"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9F%A5%E6%89%BE/%E7%8C%9C%E5%88%86%E6%95%B0/","text":"\u731c \u5206\u6570   Question   \u5047\u8bbe \u6709 \u4e00\u5bf9 \u5173\u7cfb \u5f88 \u597d \u7684 \u60c5\u4fa3   LXX   \u548c   LKK   \u4e00 \u5f00\u59cb \u5973\u65b9   LXX   \u7684 \u624b\u4e0a \u6709 \u4e00\u4e2a \u5206\u6570 \uff1a   \\ ( \\ frac { p } { q } \\ )   \uff0c \u5176\u4e2d   \\ ( p \u3001 q \\ )   \u90fd \u662f \u6574\u6570 \u6b63\u6574\u6570 \uff0c \u4e14 \u4e92\u8d28 \uff0c \u5373   \\ ( gcd ( p ,   q )   =   1 \\ )   \u3002   LXX   \u5e76 \u4e0d \u6253\u7b97 \u544a\u8bc9 \u5bf9\u8c61   LKK   \u624b\u4e0a \u7684 \u5206\u6570 \u662f \u4ec0\u4e48 \uff0c \u4f46\u662f \u5141\u8bb8   LKK   \u731c\u6d4b \u4e00\u4e2a \u5206\u6570   \\ ( \\ frac { x } { y } \\ )   \uff0c \u5176\u4e2d   \\ ( x \u3001 y \\ )   \u90fd \u662f \u6574\u6570 \u6b63\u6574\u6570 \uff0c \u4e14   \\ ( gcd ( x ,   y )   =   1 \\ )   \u3002   \u4e3a\u4e86 \u589e\u8fdb \u5f7c\u6b64 \u4e4b\u95f4 \u5f7c\u6b64\u4e4b\u95f4 \u7684 \u611f\u60c5 \uff0c   LXX   \u4f1a \u53ca\u65f6 \u7684 \u53cd\u9988 \u4e00\u4e9b \u6709\u7528 \u7684 \u4fe1\u606f \u7ed9   LKK   \u8ba9 \u4ed6 \u731c \uff01   \u4f8b\u5982 :   \u5982\u679c   \\ ( \\ frac { x } { y }   <   \\ frac { p } { q } \\ )   \u65f6 \uff0c   LXX   \u4f1a \u4e3e\u8d77 \u4e00\u5f20 \u724c   <   \u4ee3\u8868 \u300c \u5c0f \u4e86 \u300d \uff1b   \u5982\u679c   \\ ( \\ frac { x } { y }   >   \\ frac { p } { q } \\ )   \u65f6 \uff0c   LXX   \u4f1a \u4e3e\u8d77 \u4e00\u5f20 \u724c   >   \u4ee3\u8868   \u300c \u5927 \u4e86 \u300d \uff1b   \u5982\u679c   \\ ( \\ frac { x } { y }   =   \\ frac { p } { q } \\ )   \uff0c   LXX   \u4f1a \u4e3e\u8d77 \u4e00\u5f20 \u724c   =   \u4ee3\u8868 \u7b54\u5bf9 \u4e86 \uff01   \u4e3a\u4e86 \u4e0d \u4f7f\u5f97 \u5bf9\u8c61   LKK   \u65e0\u8d56 \u800d\u65e0\u8d56 \uff0c \u4ece \u6700\u5c0f \u6700\u5c0f\u503c \u4e00\u4e2a \u4e00\u4e2a \u679a\u4e3e \uff0c \u8fd9\u6837 \u592a \u8d39\u65f6 \u65f6\u95f4 \u8d39\u65f6\u95f4 \u4e86 \uff0c   LXX   \u8981\u6c42 \u53ea\u80fd \u6700\u591a \u95ee   20   \u6b21 \u3002   \u6570\u636e \u8303\u56f4 \uff1a   \\ ( 1   \\ leq   x ,   y ,   p ,   q   \\ leq   1000 \\ )   \u8be2\u95ee \u65b9\u5f0f \uff1a   compare   x   y   \u56de\u7b54 \uff1a   >   \u3001   =   \u3001   <   \u4e2d \u7684 \u4e00\u79cd \u3002   gcd ( n ,   m )   \u7684 \u65f6\u95f4 \u590d\u6742 \u7684 \u662f   \\ ( O ( log ( n ) ) \\ )   \u5bf9\u5f85 \u8be5 \u6570\u636e \u8303\u56f4 \uff0c \u5b8c\u5168 \u53ef\u4ee5 \u4f7f\u7528 \u66b4\u529b \u4f7f\u7528\u66b4\u529b   \\ ( n ^ 2 \\ )   \u5bfb\u627e \u51fa   \\ ( 1   \\ sim   1000 \\ )   \u5185 \u6240\u6709 \u7684   \\ ( < x ,   y > \\ )   \uff0c \u7136\u540e \u5bf9 \u5176 \u7ec4\u6210 \u7684 \u5206\u6570   \\ ( \\ frac { x } { y } \\ )   \u4ece\u5c0f \u4ece\u5c0f\u5230\u5927 \u6392\u5e8f \uff0c \u7136\u540e \u91c7\u540e \u4e8c\u5206 \u67e5\u627e \u6765 \u505a \u3002   Code   # include   < iostream >   # include   < iomanip >   # include   < algorithm >   # include   < cstdio >   # include   < cstdlib >   # include   < cstring >   # include   < string >   # include   < vector >   # include   < queue >   # include   < deque >   # include   < stack >   # include   < map >   # include   < set >   # include   < unordered _ map >   # include   < unordered _ set >   using   namespace   std   ;   # define   endl   ' \\ n '   # define   pique   priority _ queue   # define   oier   \\   ios _ base : : sync _ with _ stdio ( false ) ; \\   cin . tie ( nullptr ) ;   cout . tie ( nullptr ) ;   # define   cf   int   t ;   cin   > >   t ;   while   ( t   -- )   # define   upfor ( i ,   l ,   r )   for   ( i   =   ( l ) ;   i   < =   ( r ) ;   i   ++ )   # define   downfor ( i ,   l ,   r )   for   ( i   =   ( r ) ;   i   > =   ( l ) ;   i   -- )   / /   # define   int   long   long   typedef   long   long   LL   ;   typedef   long   double   LD   ;   / / typedef   __ int128 _ t   int128 ;   const   int   inf   =   ~   (   1   < <   31   ) ;   / /   \u6b63 \u65e0\u7a77   const   int   ninf   =   (   1   < <   31   ) ;   / /   \u8d1f \u65e0\u7a77   const   LL   infll   =   ~   (   1l   l   < <   63   ) ;   / /   \u6b63 \u65e0\u7a77   const   LL   ninfll   =   (   1l   l   < <   63   ) ;   / /   \u8d1f \u65e0\u7a77   inline   LL   rll   ( )   {   oier   LL   x   ;   cin   > >   x   ;   return   x   ;   }   inline   int   rint   ( )   {   oier   int   x   ;   cin   > >   x   ;   return   x   ;   }   const   int   N   =   int   (   1e7   +   10   ) ;   / /   \u7531\u4e8e \u60c5\u62a5 \u4e0d\u8db3 \uff0c \u53ea\u80fd \u900f\u8fc7 \u300c \u8bd5\u884c \u9519\u8bef \u300d \u6765 \u83b7\u53d6 \u3002   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   int   x   [   N   ] ,   y   [   N   ] ,   n   ;   double   f   [   N   ] ;   void   cge   (   int   i   ,   int   j   )   {   swap   (   f   [   i   ] ,   f   [   j   ] ) ;   swap   (   x   [   i   ] ,   x   [   j   ] ) ;   swap   (   y   [   i   ] ,   y   [   j   ] ) ;   }   void   qsort   (   int   l   ,   int   r   )   {   if   (   l   > =   r   )   return   ;   double   x   =   f   [ (   l   +   r   )   > >   1   ] ;   int   i   =   l   -   1   ,   j   =   r   +   1   ;   while   (   i   <   j   )   {   while   (   f   [   ++   i   ]   <   x   ) ;   while   (   x   <   f   [   --   j   ] ) ;   if   (   i   <   j   )   cge   (   i   ,   j   ) ;   }   qsort   (   l   ,   j   ) ;   qsort   (   j   +   1   ,   r   ) ;   }   int   gcd   (   int   a   ,   int   b   )   {   if   (   !   a   | |   !   b   )   return   a   |   b   ;   else   return   a   > =   b   ?   gcd   (   b   ,   a   %   b   )   :   gcd   (   a   ,   b   %   a   ) ;   }   void   init   (   int   M   =   1000   )   {   for   (   int   i   =   1   ;   i   < =   M   ;   i   ++   )   {   for   (   int   j   =   1   ;   j   < =   M   ;   j   ++   )   {   if   (   gcd   (   i   ,   j   )   = =   1   )   {   n   ++   ;   f   [   n   ]   =   i   *   1.0   /   j   ;   x   [   n   ]   =   i   ;   y   [   n   ]   =   j   ;   }   }   }   qsort   (   1   ,   n   ) ;   }   void   solve   ( )   {   oier   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   srand   ( (   unsigned   )   time   (   NULL   ) ) ;   int   t   =   (   rand   ( )   %   10000   )   +   1   ;   / /   \u968f\u673a \u6d4b\u8bd5   1   ~   10000   \u6b21   init   ( ) ;   while   (   t   --   )   {   int   pos   =   (   rand   ( )   %   n   )   +   1   ;   / /   \u83b7\u53d6   1   ~   n   \u7684 \u968f\u673a \u4e0b\u6807   int   l   =   1   ,   r   =   n   ,   mid   ;   int   times   =   0   ,   success   =   0   ;   while   (   ++   times   < =   20   )   {   mid   =   (   l   +   r   )   /   2   ;   if   (   mid   <   pos   )   l   =   mid   +   1   ;   else   if   (   mid   >   pos   )   r   =   mid   -   1   ;   else   {   success   =   1   ;   break   ;   }   }   if   (   success   )   cout   < <   \" code   right :   LXX ' s   ( p ,   q )   =   ( \"   < <   x   [   pos   ]   < <   \" ,   \"   < <   y   [   pos   ]   < <   \" ) ,   and   LKK ' s   answer   is   ( x ,   y )   =   ( \"   < <   x   [   mid   ]   < <   \" ,   \"   < <   y   [   mid   ]   < <   \" )   \\ n   \"   ;   else   cout   < <   \" code   error !   times   over   20   \\ n   \"   ;   }   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   }   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   / * *   *   _ ooOoo _   *   o8888888o   *   88 \"   .   \" 88   *   ( |   -_-   | )   *   O \\   =   / O   *   ____ / ` --- ' \\ ____   *   . '   \\ \\ |   | / /   ` .   *   /   \\ \\ | | |   :   | | | / /   \\   *   /   _ | | | | |   - : -   | | | | | -   \\   *   |   |   \\ \\ \\   -   / / /   |   |   *   |   \\ _ |   ' ' \\ --- / ' '   |   |   *   \\   .- \\ __   ` - `   ___ / -.   /   *   ___ ` .   . '   / --.-- \\   ` .   .   __   *   . \" \"   ' <   ` .___ \\ _ < | > _ / ___. '   > ' \" \" .   *   |   |   :   ` -   \\ ` . ; ` \\   _   / ` ; . ` /   -   `   :   |   |   *   \\   \\   ` -.   \\ _   __ \\   / __   _ /   .- `   /   /   *   = = = = = = ` -.____ ` -.___ \\ _____ / ___.- ` ____.- ' = = = = = =   *   ` = --- = '   *   ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^   *   \u4f5b\u7956 \u4fdd\u4f51   \u6c38\u65e0 BUG   *   \u4f5b \u66f0 :   *   \u5199\u5b57 \u5199\u5b57\u697c \u91cc \u5199\u5b57 \u5199\u5b57\u95f4 \uff0c \u5199\u5b57 \u5199\u5b57\u95f4 \u91cc \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1b   *   \u7a0b\u5e8f \u4eba\u5458 \u5199 \u7a0b\u5e8f \uff0c \u53c8 \u62ff \u7a0b\u5e8f \u6362 \u9152\u94b1 \u3002   *   \u9152\u9192 \u53ea \u5728 \u7f51\u4e0a \u5750 \uff0c \u9152\u9189 \u8fd8\u6765 \u7f51\u4e0b \u7f51\u4e0b\u7720 \uff1b   *   \u9152\u9189 \u9152\u9192 \u65e5\u590d \u65e5 \uff0c \u7f51\u4e0a \u4e0a\u7f51 \u7f51\u4e0a\u7f51 \u4e0b\u5e74 \u590d\u5e74 \u3002   *   \u4f46\u613f \u8001\u6b7b \u7535\u8111 \u95f4 \uff0c \u4e0d\u613f \u97a0\u8eac \u8001\u677f \u524d \uff1b   *   \u5954\u9a70 \u5b9d\u9a6c \u8d35\u8005\u8da3 \uff0c \u516c\u4ea4 \u81ea\u884c \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \u3002   *   \u522b\u4eba \u7b11 \u6211 \u5fd2 \u75af\u766b \uff0c \u6211 \u7b11 \u81ea\u5df1 \u547d\u592a\u8d31 \uff1b   *   \u4e0d\u89c1 \u6ee1\u8857 \u6f02\u4eae \u59b9 \uff0c \u54ea\u4e2a \u5f52\u5f97 \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1f   * * /   / *   = = = = = = = = = = = = = = = = = = = = = = = = \u4f5b\u7956 \u4fdd\u4f51 ,   \u6c38\u65e0 bug = = = = = = = = = = = = = = = = = = = = = = = =   * /   int   main   ( )   {   / /   oier   cf   solve ( ) ;   return   0 ;   oier   solve   ( ) ;   return   0   ;   }","title":"\u731c \u5206\u6570"},{"location":"label/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/%E6%9F%A5%E6%89%BE/%E7%8C%9C%E5%88%86%E6%95%B0/#_1","text":"Question   \u5047\u8bbe \u6709 \u4e00\u5bf9 \u5173\u7cfb \u5f88 \u597d \u7684 \u60c5\u4fa3   LXX   \u548c   LKK   \u4e00 \u5f00\u59cb \u5973\u65b9   LXX   \u7684 \u624b\u4e0a \u6709 \u4e00\u4e2a \u5206\u6570 \uff1a   \\ ( \\ frac { p } { q } \\ )   \uff0c \u5176\u4e2d   \\ ( p \u3001 q \\ )   \u90fd \u662f \u6574\u6570 \u6b63\u6574\u6570 \uff0c \u4e14 \u4e92\u8d28 \uff0c \u5373   \\ ( gcd ( p ,   q )   =   1 \\ )   \u3002   LXX   \u5e76 \u4e0d \u6253\u7b97 \u544a\u8bc9 \u5bf9\u8c61   LKK   \u624b\u4e0a \u7684 \u5206\u6570 \u662f \u4ec0\u4e48 \uff0c \u4f46\u662f \u5141\u8bb8   LKK   \u731c\u6d4b \u4e00\u4e2a \u5206\u6570   \\ ( \\ frac { x } { y } \\ )   \uff0c \u5176\u4e2d   \\ ( x \u3001 y \\ )   \u90fd \u662f \u6574\u6570 \u6b63\u6574\u6570 \uff0c \u4e14   \\ ( gcd ( x ,   y )   =   1 \\ )   \u3002   \u4e3a\u4e86 \u589e\u8fdb \u5f7c\u6b64 \u4e4b\u95f4 \u5f7c\u6b64\u4e4b\u95f4 \u7684 \u611f\u60c5 \uff0c   LXX   \u4f1a \u53ca\u65f6 \u7684 \u53cd\u9988 \u4e00\u4e9b \u6709\u7528 \u7684 \u4fe1\u606f \u7ed9   LKK   \u8ba9 \u4ed6 \u731c \uff01   \u4f8b\u5982 :   \u5982\u679c   \\ ( \\ frac { x } { y }   <   \\ frac { p } { q } \\ )   \u65f6 \uff0c   LXX   \u4f1a \u4e3e\u8d77 \u4e00\u5f20 \u724c   <   \u4ee3\u8868 \u300c \u5c0f \u4e86 \u300d \uff1b   \u5982\u679c   \\ ( \\ frac { x } { y }   >   \\ frac { p } { q } \\ )   \u65f6 \uff0c   LXX   \u4f1a \u4e3e\u8d77 \u4e00\u5f20 \u724c   >   \u4ee3\u8868   \u300c \u5927 \u4e86 \u300d \uff1b   \u5982\u679c   \\ ( \\ frac { x } { y }   =   \\ frac { p } { q } \\ )   \uff0c   LXX   \u4f1a \u4e3e\u8d77 \u4e00\u5f20 \u724c   =   \u4ee3\u8868 \u7b54\u5bf9 \u4e86 \uff01   \u4e3a\u4e86 \u4e0d \u4f7f\u5f97 \u5bf9\u8c61   LKK   \u65e0\u8d56 \u800d\u65e0\u8d56 \uff0c \u4ece \u6700\u5c0f \u6700\u5c0f\u503c \u4e00\u4e2a \u4e00\u4e2a \u679a\u4e3e \uff0c \u8fd9\u6837 \u592a \u8d39\u65f6 \u65f6\u95f4 \u8d39\u65f6\u95f4 \u4e86 \uff0c   LXX   \u8981\u6c42 \u53ea\u80fd \u6700\u591a \u95ee   20   \u6b21 \u3002   \u6570\u636e \u8303\u56f4 \uff1a   \\ ( 1   \\ leq   x ,   y ,   p ,   q   \\ leq   1000 \\ )   \u8be2\u95ee \u65b9\u5f0f \uff1a   compare   x   y   \u56de\u7b54 \uff1a   >   \u3001   =   \u3001   <   \u4e2d \u7684 \u4e00\u79cd \u3002   gcd ( n ,   m )   \u7684 \u65f6\u95f4 \u590d\u6742 \u7684 \u662f   \\ ( O ( log ( n ) ) \\ )   \u5bf9\u5f85 \u8be5 \u6570\u636e \u8303\u56f4 \uff0c \u5b8c\u5168 \u53ef\u4ee5 \u4f7f\u7528 \u66b4\u529b \u4f7f\u7528\u66b4\u529b   \\ ( n ^ 2 \\ )   \u5bfb\u627e \u51fa   \\ ( 1   \\ sim   1000 \\ )   \u5185 \u6240\u6709 \u7684   \\ ( < x ,   y > \\ )   \uff0c \u7136\u540e \u5bf9 \u5176 \u7ec4\u6210 \u7684 \u5206\u6570   \\ ( \\ frac { x } { y } \\ )   \u4ece\u5c0f \u4ece\u5c0f\u5230\u5927 \u6392\u5e8f \uff0c \u7136\u540e \u91c7\u540e \u4e8c\u5206 \u67e5\u627e \u6765 \u505a \u3002   Code   # include   < iostream >   # include   < iomanip >   # include   < algorithm >   # include   < cstdio >   # include   < cstdlib >   # include   < cstring >   # include   < string >   # include   < vector >   # include   < queue >   # include   < deque >   # include   < stack >   # include   < map >   # include   < set >   # include   < unordered _ map >   # include   < unordered _ set >   using   namespace   std   ;   # define   endl   ' \\ n '   # define   pique   priority _ queue   # define   oier   \\   ios _ base : : sync _ with _ stdio ( false ) ; \\   cin . tie ( nullptr ) ;   cout . tie ( nullptr ) ;   # define   cf   int   t ;   cin   > >   t ;   while   ( t   -- )   # define   upfor ( i ,   l ,   r )   for   ( i   =   ( l ) ;   i   < =   ( r ) ;   i   ++ )   # define   downfor ( i ,   l ,   r )   for   ( i   =   ( r ) ;   i   > =   ( l ) ;   i   -- )   / /   # define   int   long   long   typedef   long   long   LL   ;   typedef   long   double   LD   ;   / / typedef   __ int128 _ t   int128 ;   const   int   inf   =   ~   (   1   < <   31   ) ;   / /   \u6b63 \u65e0\u7a77   const   int   ninf   =   (   1   < <   31   ) ;   / /   \u8d1f \u65e0\u7a77   const   LL   infll   =   ~   (   1l   l   < <   63   ) ;   / /   \u6b63 \u65e0\u7a77   const   LL   ninfll   =   (   1l   l   < <   63   ) ;   / /   \u8d1f \u65e0\u7a77   inline   LL   rll   ( )   {   oier   LL   x   ;   cin   > >   x   ;   return   x   ;   }   inline   int   rint   ( )   {   oier   int   x   ;   cin   > >   x   ;   return   x   ;   }   const   int   N   =   int   (   1e7   +   10   ) ;   / /   \u7531\u4e8e \u60c5\u62a5 \u4e0d\u8db3 \uff0c \u53ea\u80fd \u900f\u8fc7 \u300c \u8bd5\u884c \u9519\u8bef \u300d \u6765 \u83b7\u53d6 \u3002   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   int   x   [   N   ] ,   y   [   N   ] ,   n   ;   double   f   [   N   ] ;   void   cge   (   int   i   ,   int   j   )   {   swap   (   f   [   i   ] ,   f   [   j   ] ) ;   swap   (   x   [   i   ] ,   x   [   j   ] ) ;   swap   (   y   [   i   ] ,   y   [   j   ] ) ;   }   void   qsort   (   int   l   ,   int   r   )   {   if   (   l   > =   r   )   return   ;   double   x   =   f   [ (   l   +   r   )   > >   1   ] ;   int   i   =   l   -   1   ,   j   =   r   +   1   ;   while   (   i   <   j   )   {   while   (   f   [   ++   i   ]   <   x   ) ;   while   (   x   <   f   [   --   j   ] ) ;   if   (   i   <   j   )   cge   (   i   ,   j   ) ;   }   qsort   (   l   ,   j   ) ;   qsort   (   j   +   1   ,   r   ) ;   }   int   gcd   (   int   a   ,   int   b   )   {   if   (   !   a   | |   !   b   )   return   a   |   b   ;   else   return   a   > =   b   ?   gcd   (   b   ,   a   %   b   )   :   gcd   (   a   ,   b   %   a   ) ;   }   void   init   (   int   M   =   1000   )   {   for   (   int   i   =   1   ;   i   < =   M   ;   i   ++   )   {   for   (   int   j   =   1   ;   j   < =   M   ;   j   ++   )   {   if   (   gcd   (   i   ,   j   )   = =   1   )   {   n   ++   ;   f   [   n   ]   =   i   *   1.0   /   j   ;   x   [   n   ]   =   i   ;   y   [   n   ]   =   j   ;   }   }   }   qsort   (   1   ,   n   ) ;   }   void   solve   ( )   {   oier   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   srand   ( (   unsigned   )   time   (   NULL   ) ) ;   int   t   =   (   rand   ( )   %   10000   )   +   1   ;   / /   \u968f\u673a \u6d4b\u8bd5   1   ~   10000   \u6b21   init   ( ) ;   while   (   t   --   )   {   int   pos   =   (   rand   ( )   %   n   )   +   1   ;   / /   \u83b7\u53d6   1   ~   n   \u7684 \u968f\u673a \u4e0b\u6807   int   l   =   1   ,   r   =   n   ,   mid   ;   int   times   =   0   ,   success   =   0   ;   while   (   ++   times   < =   20   )   {   mid   =   (   l   +   r   )   /   2   ;   if   (   mid   <   pos   )   l   =   mid   +   1   ;   else   if   (   mid   >   pos   )   r   =   mid   -   1   ;   else   {   success   =   1   ;   break   ;   }   }   if   (   success   )   cout   < <   \" code   right :   LXX ' s   ( p ,   q )   =   ( \"   < <   x   [   pos   ]   < <   \" ,   \"   < <   y   [   pos   ]   < <   \" ) ,   and   LKK ' s   answer   is   ( x ,   y )   =   ( \"   < <   x   [   mid   ]   < <   \" ,   \"   < <   y   [   mid   ]   < <   \" )   \\ n   \"   ;   else   cout   < <   \" code   error !   times   over   20   \\ n   \"   ;   }   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   }   / *   = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \u4ee3\u7801 \u533a = = = = = = = = = = = = = = = = = = = = = = = = = = = = =   * /   / * *   *   _ ooOoo _   *   o8888888o   *   88 \"   .   \" 88   *   ( |   -_-   | )   *   O \\   =   / O   *   ____ / ` --- ' \\ ____   *   . '   \\ \\ |   | / /   ` .   *   /   \\ \\ | | |   :   | | | / /   \\   *   /   _ | | | | |   - : -   | | | | | -   \\   *   |   |   \\ \\ \\   -   / / /   |   |   *   |   \\ _ |   ' ' \\ --- / ' '   |   |   *   \\   .- \\ __   ` - `   ___ / -.   /   *   ___ ` .   . '   / --.-- \\   ` .   .   __   *   . \" \"   ' <   ` .___ \\ _ < | > _ / ___. '   > ' \" \" .   *   |   |   :   ` -   \\ ` . ; ` \\   _   / ` ; . ` /   -   `   :   |   |   *   \\   \\   ` -.   \\ _   __ \\   / __   _ /   .- `   /   /   *   = = = = = = ` -.____ ` -.___ \\ _____ / ___.- ` ____.- ' = = = = = =   *   ` = --- = '   *   ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^   *   \u4f5b\u7956 \u4fdd\u4f51   \u6c38\u65e0 BUG   *   \u4f5b \u66f0 :   *   \u5199\u5b57 \u5199\u5b57\u697c \u91cc \u5199\u5b57 \u5199\u5b57\u95f4 \uff0c \u5199\u5b57 \u5199\u5b57\u95f4 \u91cc \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1b   *   \u7a0b\u5e8f \u4eba\u5458 \u5199 \u7a0b\u5e8f \uff0c \u53c8 \u62ff \u7a0b\u5e8f \u6362 \u9152\u94b1 \u3002   *   \u9152\u9192 \u53ea \u5728 \u7f51\u4e0a \u5750 \uff0c \u9152\u9189 \u8fd8\u6765 \u7f51\u4e0b \u7f51\u4e0b\u7720 \uff1b   *   \u9152\u9189 \u9152\u9192 \u65e5\u590d \u65e5 \uff0c \u7f51\u4e0a \u4e0a\u7f51 \u7f51\u4e0a\u7f51 \u4e0b\u5e74 \u590d\u5e74 \u3002   *   \u4f46\u613f \u8001\u6b7b \u7535\u8111 \u95f4 \uff0c \u4e0d\u613f \u97a0\u8eac \u8001\u677f \u524d \uff1b   *   \u5954\u9a70 \u5b9d\u9a6c \u8d35\u8005\u8da3 \uff0c \u516c\u4ea4 \u81ea\u884c \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \u3002   *   \u522b\u4eba \u7b11 \u6211 \u5fd2 \u75af\u766b \uff0c \u6211 \u7b11 \u81ea\u5df1 \u547d\u592a\u8d31 \uff1b   *   \u4e0d\u89c1 \u6ee1\u8857 \u6f02\u4eae \u59b9 \uff0c \u54ea\u4e2a \u5f52\u5f97 \u7a0b\u5e8f \u7a0b\u5e8f\u5458 \uff1f   * * /   / *   = = = = = = = = = = = = = = = = = = = = = = = = \u4f5b\u7956 \u4fdd\u4f51 ,   \u6c38\u65e0 bug = = = = = = = = = = = = = = = = = = = = = = = =   * /   int   main   ( )   {   / /   oier   cf   solve ( ) ;   return   0 ;   oier   solve   ( ) ;   return   0   ;   }","title":"\u731c \u5206\u6570"},{"location":"label/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/","text":"","title":"Index"}]}